<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh-CN"><id>https://github.com/liuyubobobo/my-blog</id><title>是不是很酷</title><updated>2020-10-01T12:28:51-07:00</updated><author><name>liuyubobobo</name><email>liuyubobobo@gmail.com</email></author><link href="https://github.com/liuyubobobo/my-blog" rel="alternate"/><generator uri="https://github.com/StdioA/bobobo-feed" version="0.0.1">bobobo-feed</generator><icon>https://www.gravatar.com/avatar/c4c67099540a54bd845d8e404fe8cc41</icon><subtitle>坚持有质量的技术原创，用技术人的视角看世界</subtitle><entry><id>2020/2020-09-30/readme.md</id><title>水晶宫里，一声吹断横笛</title><updated>2020-09-30T00:00:00-07:00</updated><content>&lt;h2&gt;水晶宫里，一声吹断横笛&lt;/h2&gt;
&lt;p&gt;这两周没有更新公众号，主要原因是家里有一些事情要处理。在这里向大家道歉。&lt;/p&gt;
&lt;p&gt;因为今天是个节日，按照惯例，出来冒个泡，顺便给大家发个红包，喜庆一下。&lt;/p&gt;
&lt;p&gt;既然冒泡了，就随便聊一聊，没有主题，就当朋友聊天儿。想到哪里，说到哪里。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;​---&lt;/p&gt;
&lt;p&gt;这两周没有更新公众号，除了有家里的事情要忙，还有一个原因是，没有特别关注世界发生了什么，所以也就没有特别想写东西的冲动。&lt;/p&gt;
&lt;p&gt;为什么没有特别关注世界发生了什么？其中一个原因是，我这两周没太刷朋友圈。&lt;/p&gt;
&lt;p&gt;两周前，无意间看到微信有一个设置，可以把朋友圈的那个小红点给去掉，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img alt="red" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-09-30/red.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;我本来认为这个设置并不会对我产生什么影响。因为我觉得自己对这种红点挺免疫的。毕竟，我的手机屏幕是这样一个风格：&lt;/p&gt;
&lt;p&gt;&lt;img alt="screen" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-09-30/screen.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;但是，当我在微信中，把小红点设置成不显示以后，神奇的事情发生了。我真的不太去看朋友圈了！&lt;/p&gt;
&lt;p&gt;用微信聊完该聊的事情，打开探索页以后，很多次，看到朋友圈没有小红点，竟然完全没有打开的欲望。&lt;/p&gt;
&lt;p&gt;于是，我一不做二不休，直接把我的探索页设置成这样了：&lt;/p&gt;
&lt;p&gt;&lt;img alt="discover" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-09-30/discover.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;什么短视频，朋友在看，小程序，游戏，周围的人，统统隐藏掉了。效果棒棒的，被微信分散注意力的时间大大减少。&lt;/p&gt;
&lt;p&gt;至于我为什么留着朋友圈？毕竟，朋友圈还是维系朋友关系（了解朋友八卦）的一个重要工具嘛  &lt;/p&gt;
&lt;p&gt;所以，如果有同学希望自己能够减少刷朋友圈的时间，可以试试这么设置一下。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;最近 Netflex 有一个自制的纪录片很火，叫 The Social Dilemma，中文翻译成《监视资本主义：智能陷阱》。&lt;/p&gt;
&lt;p&gt;这个纪录片描述的就是社交网络对我们的生活，乃至整个人类社会带来的巨大问题。&lt;/p&gt;
&lt;p&gt;在双节期间，闲得没事儿，大家可以找来看看。对于身处互联网行业的同学，应该会有一些启发。&lt;/p&gt;
&lt;p&gt;我计划找时间专门写一篇公众号文章，聊一聊这个纪录片。&lt;/p&gt;
&lt;p&gt;&lt;img alt="dilemma" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-09-30/dilemma.jpg" /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;通过微信设置这个事情，我理解了产品心理学的强大。&lt;/p&gt;
&lt;p&gt;因为我老婆本来就是搞心理学的，我自认为读了不少心理学的书。在国内创业的时候，蹭了五年北大 MBA 的课程，其中很多内容也涉及到心理学，诸如行为心理学，经济心理学，等等。&lt;/p&gt;
&lt;p&gt;我一直以为这种产品设计上的“小心思”，不会对我有什么影响。但是我发现，自己还是会掉入陷阱。&lt;/p&gt;
&lt;p&gt;更可怕的是，我明明掉入了陷阱，还不自知，还自我感觉良好。甚至有的时候，心理小阴暗，还会暗暗鄙视一下别人。&lt;/p&gt;
&lt;p&gt;直到有了对比，才意识到自己简直是个笑话。&lt;/p&gt;
&lt;p&gt;人果然容易高估自己。&lt;/p&gt;
&lt;p&gt;我还计划找时间专门写一篇公众号文章，聊一聊产品设计中的心理学。&lt;/p&gt;
&lt;p&gt;&lt;img alt="psychology" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-09-30/psychology.png" /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;你看，我这么一会儿时间，就列出来了两个公众号文章的选题了。&lt;/p&gt;
&lt;p&gt;实际上，我在我的手机笔记簿上，专门有一个公众号文章的选题列表。毫不夸张，这个列表里，现在已经有 100 多个选题了。&lt;/p&gt;
&lt;p&gt;在这个选题列表中，大多数内容我已经有了框架性的思考，稍微花些时间把具体内容写出来，就能当一篇原创的公众号文章发出来了。但即使这样，在过去的两周，我还是没有抽出时间写一篇文章。&lt;/p&gt;
&lt;p&gt;所以，有再详尽的计划，再完整的框架，在伟大的战略，也没有用。&lt;strong&gt;所有的事情都是一点一点做出来的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;生活不断地在告诉我这个道理，可我还是会经常忘记它。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我认识一个专门搞摄影的小朋友。说是小朋友，是因为比我小一轮多。&lt;/p&gt;
&lt;p&gt;他两年前考取了在英国排名第二的艺术学院，专门学习摄影。但是根据他的说法，学院派的学习太枯燥了，都是理论，没有实践，于是他选择了退学，回国创建工作室。现在已经小有规模了。&lt;/p&gt;
&lt;p&gt;最近，他发朋友圈说，2020 年，截至现在，也就是整整 9 个月的时间里，他已经拍了 15 万张相片了。&lt;/p&gt;
&lt;p&gt;这意味着 2020 年，他至少按了 15 万次快门。这还是有疫情的情况。&lt;/p&gt;
&lt;p&gt;我计算了一下，粗略算这 9 个月有 9 * 30 = 270 天，那也意味着他平均每天都要按快门 150000 / 270 = 555 次。这还不算挑选照片，修整照片，在工作室和客户、员工沟通，等等的工作。&lt;/p&gt;
&lt;p&gt;哪行都不容易。&lt;/p&gt;
&lt;p&gt;我当然明白，按照按快门的次数来评判一个摄影师的工作，是不公允的。这就好比按照代码行数来评判程序员的工作一样不合理。&lt;/p&gt;
&lt;p&gt;但我坚信，谈论质的前提，是量。只有量变，才能引发质变。&lt;/p&gt;
&lt;p&gt;我很看好他。&lt;/p&gt;
&lt;p&gt;转发一张他的人像作品，据说是打印出来准备参展的。&lt;/p&gt;
&lt;p&gt;&lt;img alt="photo" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-09-30/photo.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;前几天，想在网上找一个群论的定理，然后无意中翻到了一个有意思的评论。&lt;/p&gt;
&lt;p&gt;这名网友说，自己学群论的时候，发现这是一门需要平静的心态才能学好的科目。你需要弄明白每一个定理表达的意思和相应的证明。事实上，证明过程是很有趣的。&lt;/p&gt;
&lt;p&gt;而且，群论并没有那么难。本科生就可以学会。&lt;/p&gt;
&lt;p&gt;最后，他说，&lt;strong&gt;如果想检验自己的心态是否平和，可以试试读群论。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;说实话，在我看来，大多数离散数学的分支，都非常有趣，并且静下心来去看，去思考，都不难。至少我认为比连续数学要简单很多。&lt;/p&gt;
&lt;p&gt;但是，一环扣一环，每一环都不能丢。一想赶时间，跳过去几条定理，或者没把某条定理吃透就往后翻，很快就什么都看不懂了。&lt;/p&gt;
&lt;p&gt;所以，数学不适合赶时间看，甚至我认为不适合带有功利目的去看（反正数学也没有什么直接的作用）。&lt;/p&gt;
&lt;p&gt;如果没有数学的学习任务，我认为数学特别适合睡前看。&lt;/p&gt;
&lt;p&gt;我以前晚上睡不着觉，就躺在床上看英语，读不懂很快就睡着了。后来英语水平提高了以后，看英语并不能治疗失眠，甚至看英文小说会越看越精神，于是我开始选择躺在床上看数学。&lt;/p&gt;
&lt;p&gt;深入一个定理的证明过程，一会儿就把自己绕晕了，然后就能睡着了 &lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;现在。美国西部夜已深，我又没睡着。&lt;/p&gt;
&lt;p&gt;到阳台看了一眼月亮，又圆又亮。&lt;/p&gt;
&lt;p&gt;尝试了一下用手机拍照，发现拍不好。索性不拍了，多看两眼月亮。&lt;/p&gt;
&lt;p&gt;真美。&lt;/p&gt;
&lt;p&gt;以前，我喜欢月有阴晴圆缺，人有悲欢离合的伤感，或许只是为赋新词强说愁。&lt;/p&gt;
&lt;p&gt;如今，天凉好个秋到了嘴边，却发现自己更喜欢水晶宫里，一声吹断横笛的豪迈。&lt;/p&gt;
&lt;p&gt;来自苏轼，《念奴娇·中秋》&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;凭高眺远，见长空万里，云无留迹。桂魄飞来光射处，冷浸一天秋碧。玉宇琼楼，乘鸾来去，人在清凉国。江山如画，望中烟树历历。&lt;/p&gt;
&lt;p&gt;我醉拍手狂歌，举怀邀月，对影成三客。起舞徘徊风露下，今夕不知何夕。便欲乘风，翻然归去，何用骑鹏翼。水晶宫里，一声吹断横笛。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;好了。我要躺到床上去看数学催眠了。&lt;/p&gt;
&lt;p&gt;祝大家双节快乐。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="moon" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-09-30/moon.jpg" /&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-09-30/readme.md" rel="alternate"/></entry><entry><id>2020/2020-09-16/readme.md</id><title>软件行业还大有作为</title><updated>2020-09-16T00:00:00-07:00</updated><content>&lt;h2&gt;软件行业还大有作为&lt;/h2&gt;
&lt;p&gt;随便聊两个最近接触的事儿。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我有个朋友，我们叫他 W 吧。&lt;/p&gt;
&lt;p&gt;W 最近联系我。问我认不认识靠谱的外包团队。&lt;/p&gt;
&lt;p&gt;W 在国内创业，做医疗生物相关的行业。几年下来，已经相当有规模了，团队近百人。&lt;/p&gt;
&lt;p&gt;我参观过他们公司，在一个二线城市的“工业园区”，一整层都是他的地盘儿。&lt;/p&gt;
&lt;p&gt;和互联网创业不同，生物医疗行业需要大量的仪器设备，需要专门的实验室。我去参观他的企业，就像刘姥姥进了大观园，看啥都新鲜。&lt;/p&gt;
&lt;p&gt;W 的项目发展得极好，不仅和国内很多大型综合医院有直接合作，在一些领域还是国家认证的数一数二的企业。我上次和他面对面交流，还是两年前。那时，他甚至想在美国建立一个专门的研究中心做研发。&lt;/p&gt;
&lt;p&gt;W 本身是海归，了解美国文化。他认为中国研究人员的水平和美国研究人员的水平还是有差距的。但从去年开始，中美关系极度恶化，加上现在的疫情，这个想法恐怕是要破产了。&lt;/p&gt;
&lt;p&gt;我和他聊天，其中一个挺重要的话题就是，计算机技术和生物医疗行业的融合。从机器学习到人工智能，从大数据分析到物联网，我们探讨了很多这些当下最“热”的技术有可能在生物医疗领域的应用。&lt;/p&gt;
&lt;p&gt;但是，W 最近联系我，和这些高大上的技术一点儿关系都没有。他的诉求是想做一个软件开发的外包，来追踪记录他们的产品从生产，到运输，到流入各个医院以后的使用，等等各个环节的信息。&lt;/p&gt;
&lt;p&gt;听上去很像一个快递的货单跟踪系统，但因为行业的特殊性，需要很多定制化的需求。&lt;/p&gt;
&lt;p&gt;我甚至没有完整听完他的需求，就很遗憾地告诉他：我这里已经不认识做外包的朋友了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;十年前，我认识的朋友们，还有不少做外包的。有的是拉私活儿，用业余时间做，赚点儿外块；还有一个朋友，外包做得挺成规模，十多个人的团队全职做，能接到相当不错的单子。一年接一个单子就能养活整个团队了，接到两个单子，那就赚大了。&lt;/p&gt;
&lt;p&gt;但是慢慢地，大家都成长了，渐渐不愿意做外包这种“体力活”了。我说的这个专注于外包的团队，也早就转而去开发自己的产品和服务了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;说回 W。W 问我，那这个需求难不难？&lt;/p&gt;
&lt;p&gt;我说，技术上，不难。&lt;/p&gt;
&lt;p&gt;当我说出“不难”的瞬间，仿佛时间突然倒退了十年。是的，我也曾经做过不少外包，本科还曾在一个师兄的外包公司做实习。我也曾经和无数不懂计算机的“老板们”说，这个东西不难。&lt;/p&gt;
&lt;p&gt;但是实际情况是，要想达到客户的预期，真正的项目执行过程，是比每个人的评估，包括软件工程师自己的评估，要困难得多的。&lt;/p&gt;
&lt;p&gt;这里的“困难”，不是某个技术无法实现，而是一个成规模的软件工程，自身就带有“&lt;strong&gt;系统复杂度&lt;/strong&gt;”。&lt;/p&gt;
&lt;p&gt;从需求分析，到系统设计；从模块测试，到上线部署，&lt;strong&gt;每一个环节都是极其成熟的，但是每一个环节都会出问题，都将比所有人想象得更困难&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;我在 2013 年，就在知乎上回答过这样一个问题。&lt;/p&gt;
&lt;p&gt;&lt;img alt="zhihu" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-09-16/zhihu.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;一转眼，现在已经是 2020 年了。虽然更多的工具被创造了出来，虽然程序员开发的门槛大大降低了。但是，当面对一个稍有规模的定制化软件产品需求时，我并不觉得事情比起七年前有多大的改变。&lt;/p&gt;
&lt;p&gt;这样一个软件工程，依然是“&lt;strong&gt;技术不难，但实际执行起来，困难重重&lt;/strong&gt;”。&lt;/p&gt;
&lt;p&gt;在我看来，这本身就说明了：&lt;strong&gt;软件行业本身，依然是不够成熟的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;软件虽然已经无处不在，但是，当一个非计算机行业的企业老板想要使用计算机的力量来优化自己做的事情的时候，却发现无从下手。&lt;/p&gt;
&lt;p&gt;我不知道这个问题怎么解决。但我知道：有问题存在，就会带来解决问题的思考和行动，就有产生突破的空间。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;说第二个事儿。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我在国外的一个朋友，有一天和我聊起，他认为美国非处方药的信息，太混乱了。&lt;/p&gt;
&lt;p&gt;注意，是非处方药，不是处方药。处方药无所谓，因为吃什么处方药，医生说了算，患者不管。&lt;/p&gt;
&lt;p&gt;但有的时候，如果我们自己有点儿小病，想找点儿非处方药减缓自己的病症的时候，却发现无从下手。&lt;/p&gt;
&lt;p&gt;我怀疑国内也是如此，不过，我以前确实没有太关注过药品信息。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;以最常见的止疼药为例。如果在 Google 搜索“best OTC pain reliever”（最好的非处方止疼药），你会得到一群类似这样的文章推荐：&lt;/p&gt;
&lt;p&gt;&lt;img alt="g1" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-09-16/g1.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;什么是最好的非处方止疼药？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="g2" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-09-16/g2.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;寻找最适合你的非处方止疼药。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="g3" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-09-16/g3.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;5 个最受欢迎的非处方止疼药；&lt;/p&gt;
&lt;p&gt;最搞笑的是，紧接其后的就是：2020 年 9 个最好的非处方止疼药。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;不知道大家有没有 get 到问题：我们获取这些非处方药的信息，只能通过这些博客文章来做出自己的判断。&lt;strong&gt;没有一个专业的平台，汇总这些信息。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;但事实是，每年，美国的药品实验规模是以万为单位计算的，这些实验也包括最为普通的非处方止痛药；同时，每一个诊所每天也会接收到大量的患者数据。&lt;/p&gt;
&lt;p&gt;无论是这些实验结果，还是这些患者的用药数据，都可以通过汇总分析的方式，帮助大众更好地理解：自己到底在何种情况下，使用何种非处方药，是最好的选择。&lt;/p&gt;
&lt;p&gt;但是，这些信息是 Google 不到的。能 Google 到的，只有那些博客文章。我们甚至无法鉴别，这些博客文章的作者，到底是否有专业的医学基础。&lt;/p&gt;
&lt;p&gt;这就涉及到当下互联网行业的另一个问题：专业的信息，很难被获取。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;如今，通过互联网，我们可以轻易找到某个电影的评分；某本书的整体概要；某个餐厅大家是否喜欢，都有哪些拿手菜。互联网让信息更容易获取。&lt;/p&gt;
&lt;p&gt;但并不是所有信息都产生了这样的“颠覆”。直到今天，依然有大量信息，是很难获取的。&lt;/p&gt;
&lt;p&gt;非处方药只是一个例子，这个例子介乎于“大众”和“专业”之间。但如果放到更专业的领域去看，今天获取某些信息的难度，甚至可能和没有互联网的时代，并没有太大的区别。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我在国内创业期间，认识了两个老板。一个是做化学分析仪器行业，粗分类就是化工行业；另一个是做环境行业。&lt;/p&gt;
&lt;p&gt;这两个行业的特点，都是需要购买大量的专业设备。所谓的专业设备，是一个很大的范围，从价格上千万的高端仪器设备，到仅仅几毛钱的耗材，都在这个范畴里。其中的品类，相当复杂。&lt;/p&gt;
&lt;p&gt;和他们聊天，这两个行业的老板不约而同地向我反映了同样的行业现状：&lt;strong&gt;采购这些设备是个大难题。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;导致这个难题的原因有很多。比如渠道问题；不同供货商之间产品质量的认定问题；价格问题；供货商的诚信问题；采购员吃回扣的问题；等等等等。&lt;/p&gt;
&lt;p&gt;但所有这一系列问题，都指向同一个方向：这些相对专业的行业信息，并不透明。即使是行内人，也很难获取。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;实际上，很多行业内部，已经有了各种各样的信息交流平台。有很多极其简陋，就是一个 90 年代的论坛的样子。但即便如此，也已经足以让这些平台的拥有者赚到相当可观的利润了。&lt;/p&gt;
&lt;p&gt;因为，这本质就是信息流通的价值。&lt;/p&gt;
&lt;p&gt;但很显然，这样的行业信息平台可以更好，使用者也有更大的需求；更何况，还有太多的行业，根本没有这种平台。&lt;/p&gt;
&lt;p&gt;诚然，建立这样一个平台，也会困难重重。这些困难是怎样的，不是我想说的重点。&lt;/p&gt;
&lt;p&gt;我想说的是：因为还有这样的问题存在，并且我坚信，在各个专业领域，这个问题一定会慢慢被解决。那么解决这个问题的过程，就会产生巨大的发展空间。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;其实关于这个话题，我还想写很多，但又怕太长大家不爱看，先举这些例子。&lt;/p&gt;
&lt;p&gt;随手扯出这篇文章，是因为最近听到很多人讨论：软件行业是不是快到头了。&lt;/p&gt;
&lt;p&gt;说实话，&lt;strong&gt;我的看法是远远还没有。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果说这个行业竞争越来越激烈，那可能是真的。别说几万倍这样的增长奇迹了，就算是几百倍几十倍的增长，未来可能也会越来越少见（虽然我怀疑还会有很多或大或小的企业脱颖而出）。&lt;/p&gt;
&lt;p&gt;但这不代表到头了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;有大量的问题，现在的技术还不能解决；同时有太多的行业，软件的渗透率还相当低。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这还没有提到那些“高大上”的技术，诸如 5G，人工智能，物联网，量子计算，等等等等，可能带来的增长与变革。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;无独有偶，就在几天前，我看到了这样一则新闻：&lt;/p&gt;
&lt;p&gt;&lt;img alt="huawei" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-09-16/huawei.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;华为和 Tik Tok 的事儿我都不太懂，所以我也没有太聊过。这背后所涉及的政治，法律，历史，等等问题，太复杂了，是我的水平聊不清楚的。&lt;/p&gt;
&lt;p&gt;但是，这个新闻，我能看懂最后一句话：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;没有应用，我们的手机就不是‘智能’手机。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;软件行业还大有作为。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-09-16/readme.md" rel="alternate"/></entry><entry><id>2020/2020-09-09/readme.md</id><title>大师和学徒</title><updated>2020-09-09T00:00:00-07:00</updated><content>&lt;h2&gt;大师和学徒&lt;/h2&gt;
&lt;p&gt;今天，好多同学祝我教师节快乐。谢谢大家 &lt;/p&gt;
&lt;p&gt;也不知道从什么时候开始，教师节这个节日竟然和我有了关联，这是我以前万万想象不到的。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;说实话，我一直不觉得自己是“老师”。&lt;/p&gt;
&lt;p&gt;一方面，我从来不觉得自己“燃烧了自己，照亮了别人”。我没有那么高尚，也似乎没有想着要成为这么高尚的人。可能我要检讨一下自己 &lt;/p&gt;
&lt;p&gt;另一方面，我总觉得“老师”是一个有距离感的称谓。这或许是我的“偏见”。&lt;/p&gt;
&lt;p&gt;老师给我的感觉是那种高高在上的，全知全能的。&lt;/p&gt;
&lt;p&gt;&lt;img alt="teacher1" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-09-09/teacher1.png" /&gt;&lt;/p&gt;
&lt;p&gt;可惜，我并不全知全能。很多同学花样问我各种问题，我的回答都是：嗯... interesting... 这个问题，我也不知道耶 🤔&lt;/p&gt;
&lt;p&gt;我也不希望自己“高高在上”。除非是很认真地探讨问题，我会一本正经；但除此之外，很多和我熟悉的同学都知道，我经常和大家一起互黑，开着没边儿的玩笑。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我最喜欢的老师形象，是《死亡诗社》中的老师基廷（Keating）。可惜，我没有那么厉害，也没有那么自由。&lt;/p&gt;
&lt;p&gt;我顶多学学他，假装告诉别人，要“寻找自己”。但其实，我也没有找到自己，我和所有人一样，一直在寻找自己。&lt;/p&gt;
&lt;p&gt;&lt;img alt="teacher2" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-09-09/teacher2.png" /&gt;&lt;/p&gt;
&lt;p&gt;所以，相较而言，我更喜欢做学生。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我的 github 首页，bio 一栏，填的是&lt;strong&gt;持续学习者&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img alt="bio" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-09-09/bio.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;在微信上，我的 What's Up，是&lt;strong&gt;学无止境&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img alt="wx" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-09-09/wx.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;实际上，学习我课程的同学，很多都是大佬。在和他们的交流中，我学到了太多东西。我认为，我从大家身上汲取的，远比我分享的那点儿玩意儿要多得多。&lt;/p&gt;
&lt;p&gt;很多时候，对我而言，我是学生，你们是老师。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我不玩儿英雄联盟，但前不久，我听说了英雄联盟中的一个人物台词，我很喜欢。&lt;/p&gt;
&lt;p&gt;这句台词来自无极剑圣易大师：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;真正的大师，永远怀着一颗学徒的心。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我还特意找到了这句台词的英文版：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A true master, is an eternal student.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="master" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-09-09/master.png" /&gt;&lt;/p&gt;
&lt;p&gt;很多学习我的课程的同学，都是真正的大师，而他们一直怀着一颗学徒的心。&lt;/p&gt;
&lt;p&gt;很多时候，这让我汗颜。&lt;/p&gt;
&lt;p&gt;所以，在这个日子，我也要祝所有那些曾经给予我启迪的，假装是我的“学生”的老师们，教师节快乐！：）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;不过，可能还是会有同学说：哎呀！我没那么厉害呀！我就是个学生呀。&lt;/p&gt;
&lt;p&gt;对此，我的回答是：每一名学生，也终将成为一位大师。&lt;/p&gt;
&lt;p&gt;所以，我觉得无极剑圣的这句话，还应该有后半句：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;真正的大师，永远怀着一颗学徒的心；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;每一名学徒，也应该怀有一颗大师的心。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;祝所有人，教师节快乐！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-09-09/readme.md" rel="alternate"/></entry><entry><id>2020/2020-09-06/readme.md</id><title>如何创作一个时空穿越的故事</title><updated>2020-09-06T00:00:00-07:00</updated><content>&lt;h2&gt;如何创作一个时空穿越的故事&lt;/h2&gt;
&lt;p&gt;我和老婆都是科幻迷，喜欢看科幻小说，喜欢看科幻电影。&lt;/p&gt;
&lt;p&gt;在所有科幻类型中，我们最喜欢的，是时空穿越的故事。&lt;/p&gt;
&lt;p&gt;时空穿越的故事有一种魔力，那就是即使这个故事本身不是那么“硬科幻”，我们依然可以沉浸在故事所设计的因果循环中，进行一场“思维实验”，一起来设想：如果我们可以穿越时间，会怎样？&lt;/p&gt;
&lt;p&gt;时空穿越的故事，关键不是其理论的完备性，而是对因果关系进行自洽的阐述。&lt;/p&gt;
&lt;p&gt;比如去年大火的台湾连续剧《想见你》，就是一个很好的例子。一个老式卡带录音机，播放着伍佰的《Last Dance》，主人公就穿越了，这完全没有科学道理。&lt;/p&gt;
&lt;p&gt;但整个故事的因果关系充分自洽，就能让我们享受其中的逻辑美。这个逻辑美，和数学公式推导的逻辑美异曲同工：环环相扣，错落有致。&lt;/p&gt;
&lt;p&gt;&lt;img alt="missu" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-09-06/missu.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;你看，我说了好多次“因果关系”，因为在我看来，大多数时空穿越的故事，创作的关键，就是讲明白“因果”关系。&lt;/p&gt;
&lt;p&gt;比如，一类非常典型的时空穿越的套路，被称为是 &lt;strong&gt;Predestination Paradox&lt;/strong&gt;。这个词在维基百科中，被翻译成是&lt;strong&gt;命定悖论&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;命定悖论这个词最初来自于美国科幻影视剧的“老前辈”，1966 年的《星际迷航（Star Trek）》；而这一系列影视作品，又起源于 1955 年美国科幻小说家 Robert Heinlein 的作品：《星际迷航（Tunnel in the Sky）》。&lt;/p&gt;
&lt;p&gt;&lt;img alt="startrek" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-09-06/startrek.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;命定悖论的故事套路是：一个灾难发生了。主人公千辛万苦，回到过去，想要阻止这个灾难的发生。但是，主人公最终发现：自己恰恰是这场灾难发生的原因。&lt;/p&gt;
&lt;p&gt;比如，你回到过去试图阻止一场历史著名的火灾事故。本来火灾不会发生，但恰恰因为你回到了这段时间，在未发生火灾的现场碰倒了一盏煤油灯，于是火灾发生了。&lt;/p&gt;
&lt;p&gt;你回到过去试图阻止火灾，却发现自己“试图阻止火灾”的行为本身，恰恰是火灾的起因。一场因果无穷的轮回诞生了。我们永远逃不出这个因果循环，一切命中注定。这就是命定悖论名称的由来。&lt;/p&gt;
&lt;p&gt;很多时空穿越的故事背后都有命定悖论的影子，比如大名鼎鼎的《十二猴子》(Twelve Monkeys)。&lt;/p&gt;
&lt;p&gt;&lt;img alt="12" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-09-06/12.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;同样描述无法分清因果关系的另一个穿越时空故事的套路，被称为是 &lt;strong&gt;Bootstrap Paradox&lt;/strong&gt;。我没有找到这个表述的正统中文翻译，但因为 Bootstrap Paradox 又被称为是 &lt;strong&gt;Information Paradox&lt;/strong&gt;，所以我们可以简单称其为&lt;strong&gt;信息悖论&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;信息悖论是指：时空穿越导致一个信息没有“源头”。&lt;/p&gt;
&lt;p&gt;比如说，我是一个音乐家。我因为一段音乐作品闻名于世。为了保证我自己能闻名于世，我穿越回了过去，将自己的这段音乐交给了过去的我自己。于是，我因为这段音乐闻名于世。&lt;/p&gt;
&lt;p&gt;在这个时空穿越的故事中，这段音乐作为一段信息，没有起源。没有任何人创造它。我从未来的我手中拿到这段音乐，又在未来送给了过去的我。&lt;/p&gt;
&lt;p&gt;信息悖论更高阶的展现形式，不是某段信息没有起源，而是“我”没有起源。&lt;/p&gt;
&lt;p&gt;比如主人公穿越时空，回到过去，和一名女子恋爱。而事后发现，这名女子就是主人公的母亲！她生下的小孩，就是过去的主人公。这名主人公，将在未来的某一天，穿越时空，回到过去，找到自己的母亲，生下自己。&lt;/p&gt;
&lt;p&gt;所以，主人公自己，就是自己的父亲。&lt;/p&gt;
&lt;p&gt;著名电影《终结者(The Terminator)》中，未来的人类联盟反抗军约翰·康纳，其父亲恰恰是自己派到过去的凯尔·里斯。如果约翰·康纳没有在未来派出凯尔·里斯，也就没有了自己。这里颇有信息悖论的意味。&lt;/p&gt;
&lt;p&gt;&lt;img alt="terminator" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-09-06/terminator.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;上面介绍的“套路”，不管是命定悖论，还是信息悖论，实质其实是一样的——因果形成了一个环。因即是果；果即是因。&lt;/p&gt;
&lt;p&gt;但如果因果不是环会怎样？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;祖父悖论&lt;/strong&gt;就是在时空穿越的故事中喜欢探讨的另一个主题了。&lt;/p&gt;
&lt;p&gt;祖父悖论说的是：如果你穿越时空，回到过去，杀死了自己在过去还没有结婚生子的祖父，那么你会怎样？&lt;/p&gt;
&lt;p&gt;&lt;img alt="grandfather" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-09-06/grandfather.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;如果你成功地杀死了自己的祖父，那也就不会有你的父母，也就不会有你，那么你就不能穿越时空杀死自己的祖父。于是悖论产生了。&lt;/p&gt;
&lt;p&gt;值得一提的是，祖父悖论不完全科幻小说家们的幻想。其实，理论物理学家们在非常严肃地对待这个问题。只不过，理论物理学家们探讨的版本，被称为是 &lt;strong&gt;Polchinski 悖论&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img alt="joe" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-09-06/joe.png" /&gt;&lt;/p&gt;
&lt;p&gt;Polchinski 是美国著名的理论物理学家和弦论学家。他曾形式化地讨论这个问题：如果一个小球，经过虫洞，穿越时间，来到了过去，恰好撞击了自己，使得自己偏离了运行轨道，无法进入这个虫洞，怎么办？&lt;/p&gt;
&lt;p&gt;这个小球因为进入了虫洞，才能撞击过去的自己；但这次撞击让自己无法进入虫洞，也就无法去撞击过去的自己。这个小球到底有没有进入虫洞，有没有撞击自己？&lt;/p&gt;
&lt;p&gt;我第一次看到这个表达，感觉太有意思了。原来世界级的理论物理学家探讨的问题和我们在高中探讨的问题差不多：都是这个小球到底会怎样。🤔&lt;/p&gt;
&lt;p&gt;&lt;img alt="phy" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-09-06/phy.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;上面介绍的，无论是命定悖论，还是信息悖论，虽然名字叫悖论，但其实逻辑是自洽的，没有矛盾，只不过因果形成了一个环，而不是我们一般理解的线性因果关系。&lt;/p&gt;
&lt;p&gt;但是，祖父悖论是一个真正的，可以导出矛盾的悖论。&lt;/p&gt;
&lt;p&gt;如果可以导出矛盾，我们就需要解决矛盾。怎么解决这个矛盾？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;解决这个矛盾的理论之一是：因为存在这样的矛盾，所以时空穿越是不可能的。&lt;/p&gt;
&lt;p&gt;由于这个理论过于无聊，虽然它有可能是真的，但我们在这篇文章中不讨论它。因为，实在没什么可讨论的。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;解决这个矛盾的另一个理论是：事实上，你永远不可能杀死自己的祖父。&lt;/p&gt;
&lt;p&gt;这个说法放到 Polchinski 悖论中，就是：经过计算，进入虫洞的小球，即使可以碰到自己，但是碰撞的力量，永远不足以让自己偏离原有的轨道，所以这个小球最终还是会进入虫洞。&lt;/p&gt;
&lt;p&gt;这个理论被称为是&lt;strong&gt;时间保护假设（Timeline Protection Hypothesis）&lt;/strong&gt;。即：时间会保护已经发生的事情，确保他的发生，哪怕有可以回到过去的力量。&lt;/p&gt;
&lt;p&gt;可以想象这个场景：你回到了过去，想杀死自己的祖父。你用枪指着他，扣动扳机。但是，子弹卡壳了。你连续扣动三次扳机，子弹就是卡在里面，无法发射。&lt;/p&gt;
&lt;p&gt;你把枪口对准旁边的空地，扣动扳机。砰！子弹发射出来了。&lt;/p&gt;
&lt;p&gt;看起来枪好了？于是你又把枪口对准自己的祖父，扣动扳机，子弹再次神奇地卡壳了。&lt;/p&gt;
&lt;p&gt;一种未知的力量在保护你的祖父，让你无法杀死他。因为，这将导致时间产生矛盾。这就是时间保护假设。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;还有一个解决祖父悖论的假设是：&lt;strong&gt;平行宇宙假设（Multiple Universes Hypothesis）&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;你回到过去，杀死自己的祖父。结果，你成功了！&lt;/p&gt;
&lt;p&gt;但这并不影响现在的你的存在。因为，你杀死自己的祖父，将会导致另一个时空出现。在这个新的时空中，你的祖父被杀死了，于是你不存在了；但是，你所在的时空里，你依然存在。&lt;/p&gt;
&lt;p&gt;两个时空平行进行，演绎着各自的故事。&lt;/p&gt;
&lt;p&gt;其实，从“感性”的角度，平行宇宙也是我不喜欢的理论，因为用这个理论来解决祖父悖论，给人的感觉过于“简单粗暴”，而缺少了逻辑性和故事性。&lt;/p&gt;
&lt;p&gt;所谓解释不通，平行宇宙。虽然，很多理论物理学家认为，平行宇宙很有可能是真实的。&lt;/p&gt;
&lt;p&gt;美国的超级英雄故事系列经常使用这样的方式处理问题。在这个系列中，X 教授死掉了；在下一个系列中，X 教授又活了。如果问为什么？答案是：他们在不同的漫威宇宙中。&lt;/p&gt;
&lt;p&gt;&lt;img alt="marvel" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-09-06/marvel.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;当然，以平行宇宙做为基础的科幻故事也能讲得很好。在我看来，关键就不是时空穿越了，而是如果两个或者多个平行宇宙出现了“交点”，会发生什么？&lt;/p&gt;
&lt;p&gt;比如《彗星来的那一夜》（Coherence）。&lt;/p&gt;
&lt;p&gt;&lt;img alt="coherence" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-09-06/coherence.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;再比如《相对宇宙》（Counterpart）。&lt;/p&gt;
&lt;p&gt;&lt;img alt="counterpart" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-09-06/counterpart.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;使用祖父悖论讲故事，不仅仅可以讲“我杀死我的的祖父”这种只关乎个人命运的故事，更可以讲关乎全人类命运的故事。其中一个故事模式，被称为是&lt;strong&gt;杀死希特勒&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;如果二战时，纳粹胜利，纳粹就将带领人类进入一个“万劫不复”的纪元。随着科技发展，一小撮革命军终于发明出了时光机，决定回到过去，刺杀希特勒。&lt;/p&gt;
&lt;p&gt;结果，刺杀希特勒成功，历史被扭转，纳粹没有获得二战的胜利，这样一来，人类将进入一个新的，光明的纪元。（我们的现在？）&lt;/p&gt;
&lt;p&gt;可问题在于，如果刺杀希特勒成功，我们可能就不会去发明时光机；或者即使发明了时光机，也不会回到过去去执行刺杀希特勒的任务。可如果我们不去刺杀希特勒，那么纳粹德国又会在历史上取得最终的胜利。&lt;/p&gt;
&lt;p&gt;悖论产生了。&lt;/p&gt;
&lt;p&gt;Doctor Who 有一集，就叫 Let's Kill Hitler。&lt;/p&gt;
&lt;p&gt;&lt;img alt="hitler.jpg" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-09-06/hitler.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;穿越时空的故事，还有一个套路，叫&lt;strong&gt;蝴蝶效应&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;一只南美洲的蝴蝶扇动翅膀，可能引发美国德克萨斯州的一场龙卷风。&lt;/p&gt;
&lt;p&gt;把蝴蝶效应放进穿越时空的故事中，就是如果你回到过去，改变过去，哪怕是微小的改变，都将导致未来巨大的变化。&lt;/p&gt;
&lt;p&gt;对此，最著名的电影，应该就是《蝴蝶效应（The Butterfly Effect）》了。&lt;/p&gt;
&lt;p&gt;&lt;img alt="butterfly" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-09-06/butterfly.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;不过在我看来，蝴蝶效应不仅仅是穿越时空的故事套路，更是近乎所有故事都可以使用的套路。起初一个小小的动作，导致了后续一系列巨大的变化。这是很多剧本创作的源泉。&lt;/p&gt;
&lt;p&gt;英格兰曾有一首民谣，是这样说的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;丢了一颗钉子，
坏了一块蹄铁；&lt;/p&gt;
&lt;p&gt;坏的一块蹄铁，
折了一匹好马；&lt;/p&gt;
&lt;p&gt;折的一匹好马，
摔伤一位骑士；&lt;/p&gt;
&lt;p&gt;摔伤一位骑士，
输了一场战斗；&lt;/p&gt;
&lt;p&gt;输的一场战斗，
亡了一个国家。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;相信大家都猜到了，我写这篇文章，是因为电影《信条》（TENET）。&lt;/p&gt;
&lt;p&gt;&lt;img alt="tenet" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-09-06/tenet.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;可惜，美国疫情这个德行，我是不敢去电影院看《信条》的。只能看着国内铺天盖地的宣传，留着口水，在家里写这篇文章。&lt;/p&gt;
&lt;p&gt;恰巧这篇文章最后的落点，是蝴蝶效应。&lt;/p&gt;
&lt;p&gt;谁能想到这样一个小小的病毒...&lt;/p&gt;
&lt;p&gt;哎，不说了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-09-06/readme.md" rel="alternate"/></entry><entry><id>2020/2020-08-25/readme.md</id><title>不是天才，不是星</title><updated>2020-08-25T00:00:00-07:00</updated><content>&lt;h2&gt;不是天才，不是星&lt;/h2&gt;
&lt;p&gt;这是在我的知识星球上，一个同学问我的问题。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;波波老师经历过那种长期努力过后仍然比别人差一大截的情况吗？&lt;/p&gt;
&lt;p&gt;人们常常说，你现在的努力程度远远还轮不到拼天赋。但是实际上，在很多时候，面临的竞争并不是完全公平的，因为存在很多前置知识的铺垫，有些人完成学习的速度就是快得多。&lt;/p&gt;
&lt;p&gt;陈忠实曾经说“我爱上文学的同时，就知道了人类存在着天才的极大差别。这个天才搅和得我十分矛盾而又痛苦，每一次接到退稿信的第一反应，就是越来越清楚地确信自己属于非天才的类型。尤其想到刘绍棠带着红领巾就蜚声文坛的难以理解的事实，我甚至悲哀起来了。”&lt;/p&gt;
&lt;p&gt;比较会带来很多痛苦，但是又不得不硬着头皮去做。高校对 GPA 或者说加权均分的向往，仍旧出于功利，评价手段仍然未变，而短时间出成绩，这仍然是重要的。应该不择手段地刷分？还是像郭宇一样只追求自己的热爱？哪一种选择更好呢？&lt;/p&gt;
&lt;p&gt;面对这种情况，是否只能用鲁迅先生"天才即勤奋"的哲理与之抗争呢？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;bobo 老师的回答：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我经历过那种长期努力过后，仍然比别人差一大截的情况吗？&lt;/p&gt;
&lt;p&gt;当然经历过。甚至在我尝试过的每一个领域，都是如此。永远有人在各个领域做得比我出色，这近乎是一种&lt;strong&gt;必然&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;如你所说，你已经意识到了，很多时候是因为：别人有“前置知识的铺垫，所以那些人完成学习的速度就是快得多。”&lt;/p&gt;
&lt;p&gt;正是因为如此，恰恰说明了，问题的关键并非天赋，而是时间。很多时候，所谓的天赋，就是时间积累的结果而已。&lt;/p&gt;
&lt;p&gt;人家高中就玩儿信息学竞赛了，凭什么我大一开始玩儿，就能一下子超过人家；&lt;/p&gt;
&lt;p&gt;人家小学就抱着原版读物看了，凭什么我研究生才意识到英语的重要性，然后一下子英语就比人家还牛？&lt;/p&gt;
&lt;p&gt;人家起步比自己早，甚至有些事情早十几年，如果这样，自己轻松就能追上，那这个世界才叫真的不公平。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;每个领域总有追不上的人，怎么办？&lt;/p&gt;
&lt;p&gt;恰恰因为如此，面对选择的时候，我永远会说，不要忘了问问自己的内心，到底对什么感兴趣。&lt;/p&gt;
&lt;p&gt;如果你不知道自己对什么感兴趣，那么就要努力地去找自己感兴趣的方向。不要害怕尝试，不要害怕开始。&lt;/p&gt;
&lt;p&gt;寻找自己感兴趣的事情，是我们每一个人一生都必须面临的问题。&lt;/p&gt;
&lt;p&gt;这和你考试多少分，家庭如何，是不是有钱，没什么关系。年少时可能会做一些更功利的选择，但越长大，越明白，找到自己最重要。&lt;/p&gt;
&lt;p&gt;为什么？就是因为，我们每个人都必须面对一个残酷的现实：在每一个领域，永远有人比我们做得好，永远有人比我们更有“天赋”，永远有人比我们更成功。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;从某个角度讲，我们每个人注定是“失败”的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;那我们如何和自己自处？&lt;/p&gt;
&lt;p&gt;于我来说，这个问题的答案，就是&lt;strong&gt;热爱&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我们一旦选择的是自己喜欢的事情，得失心就会小很多；在很多事情上，也就不会那么在意和别人的比较。&lt;/p&gt;
&lt;p&gt;至少对我来说是这样的。&lt;/p&gt;
&lt;p&gt;如果不喜欢编程，那么编程就只是一份“生产金钱”的工作而已。我们的眼睛就更容易盯着：自己在什么厂子？自己的级别是多少？自己的薪水是多少？别人又在什么厂子？别人的薪水是多少？别人的年终奖是多少？&lt;/p&gt;
&lt;p&gt;但如果真的喜欢编程，我们就更会自然而然地关注：自己又学会了新东西；自己又解决了新问题；自己的代码更优美了；设计更合理了；扩展性更强了；甚至有一天，突然发现：咦？原来我的代码也在帮助别人。&lt;/p&gt;
&lt;p&gt;这个感觉棒极了。&lt;/p&gt;
&lt;p&gt;因为喜欢一个事情，我们就会更关注于这个事情本身。不敢说其他的事情不会干扰我们，但对我们的干扰将大大变小。&lt;/p&gt;
&lt;p&gt;甚至，当真正喜欢一个东西时，别人眼里的“奋斗”，对我们来说，都不是“奋斗”了。我们只是在做自己喜欢的事情而已。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;你在问题中举了陈忠实的例子，我觉得陈忠实老先生很能说明问题。&lt;/p&gt;
&lt;p&gt;如你所说，陈忠实不是一个天才的作家。那他在那里吭哧吭哧，写什么呢？&lt;/p&gt;
&lt;p&gt;他老人家的原话，因为他“爱上了文学”。&lt;/p&gt;
&lt;p&gt;因为“爱上了文学”，所以即使自己不是天才，即使会因此“矛盾而又痛苦”，他也无所谓，继续坚持写。&lt;/p&gt;
&lt;p&gt;因为他“爱上了文学”，所以要写出自己心目中的作品，只此而已。&lt;/p&gt;
&lt;p&gt;最后，他完成了《白鹿原》。&lt;/p&gt;
&lt;p&gt;&lt;img alt="book" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-08-25/book.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;这名不是天才的作家，在去世后，世人为他写的悼词，有一部分是这样的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;陈忠实以文学为神圣，几十年如一日，坚韧不拔、精益求精，毕生献身文学，勇攀艺术高峰......&lt;/p&gt;
&lt;p&gt;他把当代我国长篇小说的创作推向了一个新的高度，构成了当代中国文学的艺术标杆和精神标识...&lt;/p&gt;
&lt;p&gt;世间已无陈忠实，天地白鹿魂永存。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;在路遥的追悼会上，人们都说：一颗璀璨的星，从中国文学的天宇陨落了。&lt;/p&gt;
&lt;p&gt;但在陈忠实的追悼会上，并没有人这么说。&lt;/p&gt;
&lt;p&gt;或许是陈忠实对自己的认识太深刻。他知道自己不是天才，不是一颗璀璨的星。他不是坠落，只是黯然离开。&lt;/p&gt;
&lt;p&gt;世人也不夸他是天才，不说他是一颗璀璨的星。&lt;/p&gt;
&lt;p&gt;世人只是说，&lt;strong&gt;天地白鹿魂永存。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;陈忠实老先生，留下了“白鹿魂”。&lt;/p&gt;
&lt;p&gt;如果你要问我，“白鹿魂”是什么？&lt;/p&gt;
&lt;p&gt;我想，这里面很大一部分，就是“&lt;strong&gt;因为热爱，所以坚持&lt;/strong&gt;”吧。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;与你共勉，大家加油！：）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="chen" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-08-25/chen.jpg" /&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-08-25/readme.md" rel="alternate"/></entry><entry><id>2020/2020-08-20/readme.md</id><title>我曾预言苹果股票会大涨？</title><updated>2020-08-20T00:00:00-07:00</updated><content>&lt;h2&gt;我曾预言苹果股票会大涨？&lt;/h2&gt;
&lt;p&gt;今天科技界的大新闻是：苹果市值超过 2 万亿美元，成为第一家市值突破 2 万亿美元的美国公司。&lt;/p&gt;
&lt;p&gt;&lt;img alt="1" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-08-20/1.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;现在，紧随苹果之后的美国大企业，分别是亚马逊，微软，和谷歌的母公司 Alphabet。&lt;/p&gt;
&lt;p&gt;这三家企业的市值现在分别是：1.63 万亿美元、1.59 万亿美元、1.05 万亿美元。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;苹果市值为什么能达到 2 万亿？&lt;/p&gt;
&lt;p&gt;我分析有这么几个原因：&lt;/p&gt;
&lt;p&gt;1）因为疫情的原因，美联储货币政策上的“大放水”；&lt;/p&gt;
&lt;p&gt;2）疫情期间，投资者更愿意把钱投向大企业来规避风险。更不用提巴菲特老爷子早早给苹果背书，领投苹果。巴菲特甚至在今年曾经说，苹果的股票已经成为了自己的“第三大业务”。（巴菲特心目中排名前二的业务是保险和铁路业务）。&lt;/p&gt;
&lt;p&gt;3）因为疫情，大家在家里需要更多电子设备远程做各种事情。现在疫情下的美国，别说上课这种本来就很成熟的，能在线上完成的事情了。看病，看房，咨询，乃至很多聚会，演唱会，都远程了。疫情期间，无论是 macbook 还是 iPad，销量都大增；反而是 iPhone 的销量没什么变化。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;另外，美国政府给每个家庭发了救济金。我很早就在公众号里说，以我对美国人的了解，我怀疑很多美国人会拿着这笔钱买苹果设备，而不是食物或者防疫物资。。。&lt;/p&gt;
&lt;p&gt;&lt;img alt="2" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-08-20/2.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;据可靠消息，华尔街分析师曾认为，苹果要在 2021 年底，才能达到 2 万亿市值。&lt;/p&gt;
&lt;p&gt;现在看来，因为疫情，加速了苹果的发展。&lt;/p&gt;
&lt;p&gt;（仔细看我总结的三点，其实都和疫情有关！）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;如今，&lt;strong&gt;据不可靠消息&lt;/strong&gt;，华尔街分析师认为，到大概 2023 年底，苹果将达到 3 万亿市值。&lt;/p&gt;
&lt;p&gt;如果这个预测是真的，那就意味着，苹果的股票能在三年时间里上涨 50%，简单计算下来平均年回报率 16% 多，还是相当可以的。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;但是投资有风险，入市需谨慎。&lt;/p&gt;
&lt;p&gt;比如，今年本来 Airbnb 能上市的。谁能想到结果出现了新冠病毒这样一种精准打击 Airbnb 的商业模式的东西。华尔街那帮分析师在一年前，恐怕就算被人用枪指着脑袋也想象不到。&lt;/p&gt;
&lt;p&gt;这件事儿说起来就让我唏嘘。Airbnb 的估值几近腰斩。但就在两年前，很多挺靠谱的求职网站还都认为，Airbnb 是非常值得加入的企业，甚至是最值得加入的企业。&lt;/p&gt;
&lt;p&gt;谁想今年竟会如此。&lt;/p&gt;
&lt;p&gt;鬼知道在后面的 3 年，会出现什么新的奇怪的东西，可能精准打击苹果的商业模式？&lt;/p&gt;
&lt;p&gt;不过，如果没有这种奇怪的意外的话，我还是相当看好苹果的。&lt;/p&gt;
&lt;p&gt;坐等见证历史，或者被打脸。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;P.S. 1&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这篇文章我首先发布在了我的知识星球上。然后有同学告诉我，我去年 Adobe 发布会写过一篇文章，盛赞 Adobe，然后 Adobe 的股票之后也涨得很凶。&lt;/p&gt;
&lt;p&gt;我算了一下，从 2019 年 11 月初 Adobe 开发布会到现在，Adobe 的股票上涨了 66%。&lt;/p&gt;
&lt;p&gt;&lt;img alt="3" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-08-20/3.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;我觉得这是瞎猫碰上死耗子了。实际上，在过去的这一年，硅谷大企业的股票涨得都很凶。&lt;/p&gt;
&lt;p&gt;我简单对比同一时期：亚马逊上涨 82%；微软上涨 45.9%；Google 的母公司 Alphabeta 上涨 21.4%；苹果上涨 80.9%。&lt;/p&gt;
&lt;p&gt;哦，原来 Amazon 上涨幅度最大，怪不得最近 Amazon 扩张的很厉害。同时，疫情对 Amazon 也是大机会 🤔&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;P.S. 2&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;本文不构成任何投资建议。&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-08-20/readme.md" rel="alternate"/></entry><entry><id>2020/2020-08-18/readme.md</id><title>模板不重要</title><updated>2020-08-18T00:00:00-07:00</updated><content>&lt;h2&gt;模板不重要&lt;/h2&gt;
&lt;p&gt;最近有同学问我打算法比赛是不是用模板？能不能分享一下？这个问题一下子勾起了我好多回忆。&lt;/p&gt;
&lt;p&gt;晚上躺在床上睡不着，手机码字一个小时，随便聊聊我对算法比赛模板的看法。&lt;/p&gt;
&lt;p&gt;都是碎碎念，感兴趣的同学凑合看。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;我本科参加 ACM 比赛的时候，有没有准备算法模板？有。但那个模板我早已经找不到了。&lt;/p&gt;
&lt;p&gt;一来，当年那个模板用现在的眼光看，简直是惨不忍睹。我个人也确实不是那种顶尖的选手，在 ACM 圈儿里看简直是平庸，我真的不认为我的模板有任何参考价值；&lt;/p&gt;
&lt;p&gt;二来，在那个年代，别说 github 了，连百度云盘都没有。想在线上存储资料，主要靠邮箱。而实际上，每个人最重要的存储介质，是一块儿 128M 或者 256M 的闪盘，现在早就找不到了；&lt;/p&gt;
&lt;p&gt;三来，最重要的，在我的记忆中，比赛模板基本就是一个心理安慰，实用性极低。稍微有点儿水平的比赛，瓶颈绝不是模板。反正我没遇到过在比较重要的比赛中，只因为没有准备好模板，而做不出来某个问题的情况。&lt;/p&gt;
&lt;p&gt;也正因为如此，我在大四不打 ACM 比赛以后，曾经准备的比赛模板再也没有看过一眼，更别说更新了。&lt;/p&gt;
&lt;p&gt;现在，那个存储着当年模板的闪盘，应该静静地躺在家里吃灰。闪盘里八成还有很多那个年代的电脑病毒，和那些曾经的奋斗一起长相厮守。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;说实话，别看我本科做 ACM 比赛，但其实我是在研究生的时候，才开始踏踏实实系统学习算法的。&lt;/p&gt;
&lt;p&gt;因为本科的时候只顾着比赛，别看训练时间挺多，刷题挺多，但其实都是在“应试”，对很多算法都不知其所以然。&lt;/p&gt;
&lt;p&gt;在研究生的时候，完全没有比赛的压力了，才知道自己对算法有多感兴趣，于是捡起了很多经典的算法书细品。&lt;strong&gt;不再追求刷题的数目，沉浸在算法的前因后果中，反而对算法有了更深层次的理解。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所以我总建议大家不要一味刷题，扎扎实实打基础最重要。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;在这里吹几个小牛。我本科升研究生的机试，是我们那届最快完成的。两个小时的机试，我大概 20 分钟就搞定了。&lt;/p&gt;
&lt;p&gt;离场的时候看好多人在那里翻书，但我一本书都没带。其实那个时候我心情特别不好，遇到一些所谓的人生挫折。虽然现在回头看不是事儿，但那会儿情绪挺低落的，所以研究生复试我完全没准备，直接裸考，想的是大不了不读研究生了，直接工作。&lt;/p&gt;
&lt;p&gt;结果没想到光脚的不怕穿鞋的，那场机试反而是第一名。当时带了一堆书当模板的同学，反而没看到成绩有多好。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;研究生时闲得没事儿也会做点儿比赛玩儿。我印象最深的有两次。&lt;/p&gt;
&lt;p&gt;一次是一个校内的 ACM 选拔赛。我是研究生，已经没有成为正式选手的资格了，只是参加着玩儿，结果竟然排名前五；&lt;/p&gt;
&lt;p&gt;还有一次是一个企业的算法比赛。我拿了第一名。奖品除了奖状，还有个数码相机。那个年代数码相机挺贵的，基本就是现在的一个 iPhone 旗舰的赶脚了。我把那个相机送给我妈，我妈高兴了好久。&lt;/p&gt;
&lt;p&gt;关键是，这两次比赛，我都完全没带模板。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;实际上，在我印象里，算法模板最有用的一次，是本科一场预选赛。其中一个问题需要大数计算，我们没有模板。那会儿对 Java 完全不熟，不知道 Java 有大数类。我要没记错，那会儿还是 Java 4 的年代。&lt;/p&gt;
&lt;p&gt;于是，我们比赛的时候现场用 C++ 手写了一个大数类，耽误了很多时间。后来我们总结说不行，要自己有一个大数类模板，于是我就做了一个。&lt;/p&gt;
&lt;p&gt;可在那之后，在我的记忆中，那个大数类模板再也没有被用过了。我怀疑是那场比赛以后，有选手向组委会反应了。反正，我再也没在正式比赛中见过用 Java 因为有大数类就能轻易过；用 C++ 没有大数类一下子时间拉开差距的问题了。&lt;/p&gt;
&lt;p&gt;其实，这样才是合理的。算法比赛比拼的是算法设计能力，而不应该因为语言标准库的差异而产生巨大的比赛结果差异。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;当然，这里面还有一个问题，就是到底什么叫算法模板？我是在慕课网讲算法以后，才意识到大家对这个问题的理解是非常不同的。&lt;/p&gt;
&lt;p&gt;我印象最深刻的是，有一次，一名同学问我，做二分查找的问题，哪个模板更好？我当时就懵了。&lt;/p&gt;
&lt;p&gt;首先，写二分查找我确实不用模板，直接手写。但真正让我懵的是：二分查找就是那样一个算法思想，为什么还有“哪个”模版？难道还有很多二分查找的模板？&lt;/p&gt;
&lt;p&gt;后来通过他的介绍，我才发现，确实网上有很多文章讨论，二分查找这个模板比那个模板更好一类的文章，我觉得还挺神奇的。&lt;/p&gt;
&lt;p&gt;在我看来，二分查找是一个统一的逻辑思想。真要细究，我们用二分查找，可以解决如下问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;查找一个元素；&lt;/li&gt;
&lt;li&gt;求大于某个元素的最小值；&lt;/li&gt;
&lt;li&gt;求大于等于某个元素的最小值；&lt;/li&gt;
&lt;li&gt;求小于某个元素的最大值；&lt;/li&gt;
&lt;li&gt;求小于等于某个元素的最大值；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;等等等等。&lt;/p&gt;
&lt;p&gt;这些二分查找的不同应用，表现在代码上，只是一些边界发生微小的变化。难道对此，我们还要准备五个不同的模板？&lt;/p&gt;
&lt;p&gt;如果需要五个模版，才有信心面对一个二分查找的问题写出正确的代码，那在我看来，大概率是因为根本没有理解二分查找。&lt;/p&gt;
&lt;p&gt;需要五个模板，本质等于是在背代码。可又背不下来，于是写成了模版。&lt;/p&gt;
&lt;p&gt;如果真的理解了二分查找，所有这些“变种”，背后是一套统一的逻辑。根据这套逻辑，求解的问题不同，相应的边界变化自然而然就写出来了。其中的代码，根本不需要背，也不需要模板。&lt;/p&gt;
&lt;p&gt;插播一个广告，我在慕课网的体系课程，对二分查找的这些变种背后的这个统一逻辑，有详细的介绍。&lt;/p&gt;
&lt;p&gt;&lt;img alt="algo" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-08-18/algo.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;再比如，我发现有同学写回溯算法，写滑动窗口，写 BFS，是需要模板的。这背后，大概率的，其实是根本没有理解回溯，没有理解 BFS，没有理解滑动窗口。或者是对循环不变量的理解不深刻，导致需要靠模板来“记忆”边界，而不是根据自己要组建的逻辑写出正确的边界。&lt;/p&gt;
&lt;p&gt;如果对这些经典算法和数据结构的理解都还停留在记忆的阶段，基本上不太可能谈算法设计。就算有了所谓的算法设计的思路，具体实现起来，八成也会一团糟。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;还有一些模版，在我看来完全没有用。比如我就见过有同学整理出“区间 DP”的模板。&lt;/p&gt;
&lt;p&gt;说实话，“区间 DP”这个概念，我觉得在我本科的时候都没有。后来估计越来越多人发现一类求解区间上的问题，可以使用 DP，相应的状态定义方式就是区间的边界，于是造出了“区间 DP”这个词，方便交流。&lt;/p&gt;
&lt;p&gt;可关键是，在我看来，了解区间 DP 就是把区间边界当做状态，就已经足够了。在具体的问题中，状态转移的方式千变万化。就算能识别出一个问题是区间 DP，其实意义不大的。&lt;/p&gt;
&lt;p&gt;区间 DP 最经典的问题是这样一个石子合并的问题。我完全不相信准备这样一个问题的解，就能据此做出所有区间 DP 的问题。&lt;/p&gt;
&lt;p&gt;&lt;img alt="dp" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-08-18/dp.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;甚至有的时候，&lt;strong&gt;模板会起反作用，因为它会限制你的思路。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;举个例子，很多同学会准备 KMP 的模板。但这里有一个错误的假设：那就是 KMP 算法内部的所有细节一定会当做一个整体出现；见到字符串匹配问题，直接上 KMP 模板就好了。&lt;/p&gt;
&lt;p&gt;但实际上，我从来没见过算法比赛直接考字符串匹配的。但就在今年，我见到一个有意思的比赛问题。&lt;/p&gt;
&lt;p&gt;这个问题是一个数位 DP，但在状态转移中需要一步优化，这步优化要使用 LPS 的思想。&lt;/p&gt;
&lt;p&gt;LPS 是什么意思？是 Longest proper Prefix which is also Suffix 的意思，即字符串中最长的是后缀的前缀。&lt;/p&gt;
&lt;p&gt;这个概念是 KMP 算法中使用的一个重要思想。如果对 KMP 的理解只停留在它是一个更快的字符串匹配算法的程度，就很难提炼出 LPS 的思想，更不可能把它灵活应用在一个数位 DP 的问题上。&lt;/p&gt;
&lt;p&gt;对于这个问题，懂的人都会说背后是 KMP。但有 KMP 模版和做出这道题之间，相差十万八千里。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;再比如，Binary Lifting 也是一个很经典的思想。这个思想最典型应用是在 LCA 问题上。所以很多同学就准备了一个 LCA 模版。&lt;/p&gt;
&lt;p&gt;还是今年，我见到了一个在网格上求解特殊路径的问题，需要使用 Binary Lifting 的思想。这个问题和 LCA 没半毛钱关系，如果手里只有 LCA 的模版，将很难做出这个问题。但如果你深入理解了到底什么是 Binary Lifting，理解它的本质其实就是 DP，了解它的状态定义和状态转移，完全不需要模板。&lt;/p&gt;
&lt;p&gt;今年有一场 Leetcode 周赛的 Hard 问题，就是很标准的 Binary Lifting。我手里其实早就没有 Binary Lifting 的模版了，但是因为对这个问题的状态定义印象很深，十来分钟就搞定了。（又吹牛了🤥）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我的体会是，很多时候，&lt;strong&gt;写一个算法，如果需要模板，基本就是对这个算法理解不深刻。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;再举个例子：我以前写 Dijkstra 是需要模板的。后来，我突然意识到，Dijkstra 的思想，本质就是 BFS！因为 BFS 处理的是无权图，所以用一个普通队列就够了；但 Dijkstra 处理带权图，就需要一个优先队列了。在此基础上，BFS 和 Dijkstra 近乎是同样的逻辑。&lt;/p&gt;
&lt;p&gt;从此，我写 Dijkstra 再也不需要模板了。&lt;/p&gt;
&lt;p&gt;我甚至坚信，Dijkstra 当年就是从 BFS 推导出 Dijkstra 算法的，而不是一般教材里讲的，先证明出切分定理，然后 Dijkstra 算法就冒出来了。&lt;/p&gt;
&lt;p&gt;&lt;img alt="dij" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-08-18/dij.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;当然，对于一些更复杂的算法，我也要用模板，比如求解最大流的 ISAP 或者 HLPP。但我坚信这是因为我对这些算法理解的不透彻。&lt;/p&gt;
&lt;p&gt;不过对于最大流的问题，我后来发现大多数情况 EK 算法就够用，顶死了用 Dinic。而手写 EK 算法其实很容易，建好残差网络以后做 BFS 就好。不排除是因为我水平还不够，见的变态问题太少。&lt;/p&gt;
&lt;p&gt;这其实也是 ACM 和 NOI 或者 IOI 的一个重要区别。NOI 或者 IOI 很多问题卡优化卡得很厉害；但 ACM 更重视算法的思路设计，而不是特别变态刁钻的算法的使用。因此，很多人觉得其实 NOI，IOI 比 ACM 难。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;我现在不时做做比赛，也会用模板。最常用的模板是并查集，线段树，BIT 等等这种数据结构的模板。因为这类数据结构封装得太完整了，拿来可以直接用，其实就是标准库的补充。&lt;/p&gt;
&lt;p&gt;不过，对于大多数玩儿过算法竞赛的同学，手写一个并查集，BIT，也是小 case。因为代码量真的很小。大家可以在网上搜搜并查集或者 BIT 的模版，也就 10 行不到就够用了。真理解了，现场写很快的。&lt;/p&gt;
&lt;p&gt;比如，我在网上随便搜一个并查集的模板，是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="uf" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-08-18/uf.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;对了，因为有了互联网，所以很多时候，模板意义更小了。尤其是对于网络赛，真想要用一个模板，随便一搜，一堆大神用各种语言写的模板，任你挑。&lt;/p&gt;
&lt;p&gt;难道有了这么多模板，大家算法比赛就都能 AAC？绝不是。&lt;/p&gt;
&lt;p&gt;算法比赛比的，从来不是谁手里的模板更好。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;P.S.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这篇文章没有想说模板没有用，而是如标题所说，想强调：模板没有那么重要。相较而言，深刻理解算法，能够灵活运用算法，比去寻求一个好的模板重要一万倍。&lt;/p&gt;
&lt;p&gt;当然，其实每个人自己总结模板的过程，也是学习算法的过程。如我文中所说，我现在也用模板，我的 github 私仓有一个 repo，就是我的模板，但真的不常用，而且代码烂得很，没有好好整理。&lt;/p&gt;
&lt;p&gt;以后我应该会认真整理一下，然后公布出来的：）&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-08-18/readme.md" rel="alternate"/></entry><entry><id>2020/2020-08-16/readme.md</id><title>败者的游戏</title><updated>2020-08-16T00:00:00-07:00</updated><content>&lt;h2&gt;败者的游戏&lt;/h2&gt;
&lt;p&gt;Simon Ramo 是一名美国的工程师，商人，和作家。生于 1913 年，逝于 2016 年，享年 103 岁。&lt;/p&gt;
&lt;p&gt;如果你去查看他的履历，会发现，从微波炉的发明，到电子显微镜的出现，乃至导弹技术，背后都有他的影子。&lt;/p&gt;
&lt;p&gt;他早年在通用电气工作，之后有两次极其成功的创业，先后在 1958 年与 1964 年参与创立了 Ramo-Wooldridge 和 Bunker-Ramo 两家企业。这两家企业都曾经登上过全球 500 强企业的名单。&lt;/p&gt;
&lt;p&gt;&lt;img alt="simon" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-08-16/simon.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;有意思的是，让我真正认识这个人的，并非是他的这些“丰功伟绩”，而是他写的一本名不见经传的小册子：Extraordinary Tennis Ordinary Players，我简单翻译成：杰出的网球比赛，普通的选手。&lt;/p&gt;
&lt;p&gt;这本书出版于 1970 年，在 1999 年又重新修订。但是重新修订的年份也在上个世纪，距今已有 21 年了。&lt;/p&gt;
&lt;p&gt;这本书实在太老，以至于在亚马逊上，都没有一个“体面”的封面照，只有这样一个看起来“脏兮兮”的，随手拍摄的二手书封面照片。&lt;/p&gt;
&lt;p&gt;&lt;img alt="cover" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-08-16/cover.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;但是，这本出版距今已有 50 年之久的小册子中，却讨论了一个让今天的我也感触颇深的问题。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;Ramo 是一名网球运动爱好者。他看了无数场网球比赛，有专业组的比赛，也有业余组的比赛。&lt;/p&gt;
&lt;p&gt;不管是专业比赛，还是业余比赛，网球的规则都是一样的。但有一天，Ramo 意识到：专业的网球比赛，和业余的网球比赛，其实是两种截然不同的比赛。&lt;/p&gt;
&lt;p&gt;Ramo 称专业组的比赛，是&lt;strong&gt;“胜者的游戏”（Winner's Game）&lt;/strong&gt;。在专业比赛中，&lt;strong&gt;得分大多数是胜球方赢来的&lt;/strong&gt;。胜球方使用高超的网球技巧，最终让对方无法接住自己的球，赢得了比分。&lt;/p&gt;
&lt;p&gt;但是，业余的网球比赛完全不同。Ramo 称业余的比赛是&lt;strong&gt;“败者的游戏”（Loser's Game）&lt;/strong&gt;。因为在业余比赛中，&lt;strong&gt;得分大多数是对方输来的&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;在业余比赛中，选手犯错误的概率大大增高，把球打出界或者没有过网是家常便饭。&lt;/p&gt;
&lt;p&gt;在业余比赛中，很多时候，赢球不是因为自己的技巧多高超，而是因为对手的失误，让自己赢得了比分。&lt;/p&gt;
&lt;p&gt;根据 Ramo 的统计，在专业组比赛中，80% 的比分是赢来的；而在业余组比赛中，80% 的比分是对手输来的。&lt;/p&gt;
&lt;p&gt;因此，在专业组比赛中，最终的比分取决于谁的技巧水平更高；而在业余组比赛中，最后的比分则取决于谁的失误更少。&lt;/p&gt;
&lt;p&gt;如果理解了这一点，对于业余选手来说，最佳的比赛策略并不是用各种“酷炫”的扣杀赢得对手。虽然这会让比赛更加好看，但与此同时，也增加了自己失误的概率。&lt;/p&gt;
&lt;p&gt;相对而言，业余选手反而应该选择稳扎稳打的策略。业余选手的第一要务是把球安全地击回给对方。只要做到了这一点，对手就有很高的概率因为失误，让你赢得比分。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;只要更少的失误，就能赢。&lt;/strong&gt;这就是 Ramo 对业余网球比赛选手的建议。虽然看似胜之不武，但它确实行之有效。&lt;/p&gt;
&lt;p&gt;有些人认为，这样的方式会大大降低比赛的观赏性，甚至有违体育精神，不值得鼓励。但是，很快，人们就发现，这样的一个思考方式，却适用于更多领域，哪怕是对专业选手而言。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;查理芒格是巴菲特的重要合伙人，巴菲特回顾自己投资成就时说：“我之所以能有现在的成就，是因为遇见了查理芒格。”&lt;/p&gt;
&lt;p&gt;&lt;img alt="charlie" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-08-16/charlie.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;在投资领域，查理芒格最重要的一条忠告就是：如果要想保持长期的优势，&lt;strong&gt;最重要的不是追求卓越，而是努力让自己不要犯错。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It is remarkable how much long-term advantage people like us have gotten by trying to be consistently not stupid, instead of trying to be very intelligent.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;从芒格的角度看，对于投资来说，最重要的并非看准一次两次巨大的投资机会，而是想明白：在市场中，哪些资产有风险，有可能让你输钱。&lt;/p&gt;
&lt;p&gt;只要小心地躲开这些可能让你输钱的陷阱，即使没有大赚，但是长期来看，你将赢得市场上的大多数人。&lt;/p&gt;
&lt;p&gt;对于芒格来说，投资更像是一场&lt;strong&gt;败者的游戏&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;芒格有一句半开玩笑的名言，广为流传：&lt;strong&gt;我只想知道我将在哪里死去，那样的话，我就可以永远不去那里。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;All I want to know is where I’m going to die, so I’ll never go there.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;Abraham Wald 是一名匈牙利的统计学家，在二战时期为美军做统计研究工作。&lt;/p&gt;
&lt;p&gt;他实际上是序贯分析（sequential analysis）的发明人。但是，大部分人不懂什么是序贯分析，却津津乐道于他在二战期间，巧妙地大幅提升了盟军的飞机防御能力。&lt;/p&gt;
&lt;p&gt;&lt;img alt="wald" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-08-16/wald.png" /&gt;&lt;/p&gt;
&lt;p&gt;Abraham Wald 当时所在的研究组接到的任务是：研究如何提升作战飞机的防御能力。&lt;/p&gt;
&lt;p&gt;面对这样一个问题，Abraham 反其道而行之，着手研究：到底是什么，让作战飞机最终坠毁阵亡。&lt;/p&gt;
&lt;p&gt;Abraham 把这个研究想成是一个&lt;strong&gt;败者的游戏&lt;/strong&gt;，不去追求如何让作战飞机更强，而是去追求如何让作战飞机“不弱”。&lt;/p&gt;
&lt;p&gt;值得一提的是，在探索“到底是什么让飞机最终坠毁阵亡”这一问题时，Abraham 证实了：返航飞机上，弹孔最多的位置，反而是飞机最坚固的部位；而见不到弹孔的地方，才是飞机最脆弱的地方。因为这些地方过于脆弱，使得一旦被击中，飞机就坠毁了。所以在安全返航的飞机中，永远看不到这些部位有弹孔。&lt;/p&gt;
&lt;p&gt;Abraham 的这一洞察，已经成为了统计学与经济学中讲解&lt;strong&gt;幸存者偏差（Survivorship Bias）&lt;/strong&gt;的经典案例。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;在企业界，这样的思考也很为常见。&lt;/p&gt;
&lt;p&gt;如果你曾经去过一个创业孵化器，大多数负责任的投资人都会告诉你：创业的第一要务，不是如何“火起来”，而是如何“不死”。&lt;/p&gt;
&lt;p&gt;负债累累的“火”不是可持续的商业模式；能够让自己“不死”，才有机会。&lt;/p&gt;
&lt;p&gt;我在 &lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-04-18/"&gt;从巴黎圣母院的大火，到消逝的IT巨头&lt;/a&gt; 一文中曾介绍过，BBC做过一个统计：现如今，美国标普 500 指数的公司，竟然平均年龄只有 15 岁。&lt;/p&gt;
&lt;p&gt;标普 500 的公司尚且如此，更不用提创业公司了。99.99% 的创业公司还没有绽放，就已经凋谢。&lt;/p&gt;
&lt;p&gt;创业是一场&lt;strong&gt;败者的游戏&lt;/strong&gt;，创始人的第一要务，是保证自己的企业不死。因为不死，就已经赢过了 99.99% 的其他初创公司。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;这样的思考，同样适用企业运营的方方面面。我在 &lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-08-06/"&gt;我不埋怨奋斗B&lt;/a&gt; 一文中，曾经举过一个我亲自采访的案例。&lt;/p&gt;
&lt;p&gt;企业老板高喊创新，但是因为最终的绩效依然是销售额，导致保守的人拿到了大红包，真正尝试创新的人反而吃了苦头。&lt;/p&gt;
&lt;p&gt;这不叫鼓励创新，这叫鼓励保守。&lt;/p&gt;
&lt;p&gt;那到底应该怎么鼓励创新？实际上，这个案例已经给了我们答案。&lt;/p&gt;
&lt;p&gt;我们可能很难找到具体的，能够真正激发员工创新的举措；但是，我们可以看到，&lt;strong&gt;到底是什么在抑制创新？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;仅仅使用销售额作为绩效，就是在抑制创新。要想鼓励创新，就要从改变这些抑制创新的规定开始。&lt;/p&gt;
&lt;p&gt;一家不抑制创新的企业，就已经是在鼓励创新了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;同理，运营人员一定要时时刻刻盯着新增用户的数字看吗？绝不是。很多时候，相比新增用户，如何留住老用户，防止已有用户的流逝，或许是运营人员更应该关注的问题。&lt;/p&gt;
&lt;p&gt;产品设计人员一定要时时刻刻思考怎样的功能点，能带来更多的效益吗？也不是。很多时候，判断清楚什么样的功能，可能带来效益的降低，或许更重要。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我在 &lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-08-20/"&gt;万能学习法&lt;/a&gt; 一文中，曾经分享过：我曾经拜过一个师傅学习设计。那到底什么是好的设计？&lt;/p&gt;
&lt;p&gt;我的师傅告诉我：好的设计千变万化，我们很难总结出“好的设计”的规律。实际上，没有规律，恰恰是艺术类学科的特点。&lt;/p&gt;
&lt;p&gt;但是，我们能做到的是：识别出什么是差的设计，在设计的过程中避免它们。&lt;/p&gt;
&lt;p&gt;一个“不犯错”的设计，可能不是一个好的艺术品，但是从商业设计的角度，已经成功了一半。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;实际上，这样的思考模式，我们程序员应该并不陌生。&lt;/p&gt;
&lt;p&gt;所有有过性能调优经历的人都明白：在一个真实的项目中，要想做好性能调优，第一件事不是去想：要用一个什么新的架构，新的模式，新的算法，来提升性能。&lt;/p&gt;
&lt;p&gt;我们要做的第一件事，永远是仔细的检查：现在的系统，性能瓶颈在哪里？最耗时的逻辑是什么？&lt;/p&gt;
&lt;p&gt;我们的首要目标，是想办法改善性能差的地方，这就将极大地提高整个系统的性能。&lt;/p&gt;
&lt;p&gt;看，&lt;strong&gt;败者的游戏是一种思考方式，它无处不在。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;之所以写这篇文章，是因为有人问我：bobo 老师，觉得自己的工作学习效率很低，每天不知不觉就过去了，如何能够提升自己的效率？&lt;/p&gt;
&lt;p&gt;我想了很久，觉得，如果要想找到一个普世的提升效率的方法，太难了。毕竟，每个人的情况千差万别。&lt;/p&gt;
&lt;p&gt;但或许，最简单的做法是：认真观察自己每天的工作学习过程，在其中，&lt;strong&gt;鉴别出，到底哪些因素，在影响你的效率，在降低你的效率。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;与其去思考如何提升效率，不如想办法改进那些降低效率的行为。&lt;/p&gt;
&lt;p&gt;你或许总被手机吸引；或许因为目标不明确，做着 A 却总是想着 B；或许因为学习工作的环境不够友好，总被打断；或者因为休息不好，导致效率低下。&lt;/p&gt;
&lt;p&gt;找到那些真正影响你效率的原因，想办法改变它。&lt;/p&gt;
&lt;p&gt;我们真正要做的，或许不是更高效，而是想办法不低效。&lt;/p&gt;
&lt;p&gt;只要尽量少的低效，我坚信，在效率方面，你就已经超过绝大多数人了。&lt;/p&gt;
&lt;p&gt;又是&lt;strong&gt;败者的游戏。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;大家加油！：）&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-08-16/readme.md" rel="alternate"/></entry><entry><id>2020/2020-08-10/readme.md</id><title>现实虚拟连续统</title><updated>2020-08-10T00:00:00-07:00</updated><content>&lt;h2&gt;现实虚拟连续统&lt;/h2&gt;
&lt;p&gt;这是在我的知识星球上，一个同学问我的问题。&lt;/p&gt;
&lt;p&gt;波波老师好！我从大一下数据结构就开始看您的课程，目前是美国匹兹堡大学本科 CS 在读，年底毕业。&lt;/p&gt;
&lt;p&gt;今年暑假找到一个 AR 相关的实习机会，我发现我对这方面更感兴趣了。以后读研/读博也在考虑这个方向。看过您的资料，您在研究生期间读的是 AR / VR 方向的，想问下您对 AR / VR 的看法？求观点~&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;bobo 老师的回答：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我研究生的实验室方向确实是 VR / AR 方向。但说实话，已经十多年过去了，我那会儿接触的东西，应该和现在已经有翻天覆地的变化了。&lt;/p&gt;
&lt;p&gt;比如，我们那会就根本没有深度学习这个概念。现在，相信很多研究都能和深度学习联系起来了。&lt;/p&gt;
&lt;p&gt;从更实际的角度，我更看好 AR 方向，而不是 VR 方向。因为 AR 方向的应用场景更多，商业前景更广阔。&lt;/p&gt;
&lt;p&gt;无论是无人驾驶技术，还是盛传的苹果眼镜，或者已经出厂的谷歌眼镜，都是 AR 技术的使用。更广阔地看，所有的图像识别技术，都可以一定程度 AR 化。这在很多专有领域都很重要，比如很有可能在未来超火的医疗领域。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;当然，我这样说很笼统。实际上，有一个很重要的问题，就是到底什么是 AR？&lt;/p&gt;
&lt;p&gt;AR 本身是 &lt;strong&gt;Augmented Reality&lt;/strong&gt; 的简称，即增强现实。&lt;/p&gt;
&lt;p&gt;现实被谁增强？被虚拟的信息增强。&lt;/p&gt;
&lt;p&gt;从这个角度看，我们总将 AR 和 VR 一起讨论是没有道理的。因为 VR 的意思是 Virtual Reality，即虚拟现实。什么叫虚拟现实？就是&lt;strong&gt;完全虚拟的世界。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;“虚拟现实”其实是和“现实”相对应的两个极端：一端完全虚拟，一端完全现实。&lt;/p&gt;
&lt;p&gt;这不是我的观点，这是 1994 年，由保罗·米尔格拉姆（Paul Milgram）和岸野文郎（Fumio Kishino）提出的&lt;strong&gt;现实-虚拟连续统&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;听这个名字很炫吧？它的概念其实很简单：我们可以画出这样的一个“坐标轴”：&lt;/p&gt;
&lt;p&gt;&lt;img alt="rv1" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-08-10/rv1.png" /&gt;&lt;/p&gt;
&lt;p&gt;在这个坐标轴中，左侧是完全的现实环境，右侧是完全的虚拟环境。&lt;/p&gt;
&lt;p&gt;有了这个坐标轴，我们就可以把很多和 VR / AR 相关的应用或者技术，在这个坐标轴中找到相应的位置。&lt;/p&gt;
&lt;p&gt;对于大多数我们理解的 AR 应用，本质其实都是靠近现实环境一侧的。在现实的基础上，使用虚拟的东西进行“增强”。&lt;/p&gt;
&lt;p&gt;&lt;img alt="rv2" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-08-10/rv2.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;比如，现在比较火的很多直播滤镜，可以实时对主播做在线“磨皮”。在这里，现实是基础，虚拟的东西是在辅助现实。&lt;/p&gt;
&lt;p&gt;&lt;img alt="faceu" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-08-10/faceu.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;从这个角度看，其实，我觉得拍一张照片，然后 PS，本质也是 AR。我们在使用 Photoshop 来增强现实。&lt;/p&gt;
&lt;p&gt;&lt;img alt="ps" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-08-10/ps.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;再比如，现在已经有了车载系统，可以将汽车相关的虚拟信息投射到挡风玻璃上，让司机不需要低头，就可以查看到相关参数，来提高驾驶安全性。&lt;/p&gt;
&lt;p&gt;在这里，虚拟的信息虽然仅仅是一些读数，但也是增强现实。&lt;/p&gt;
&lt;p&gt;&lt;img alt="car" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-08-10/car.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;实际上，这样的应用已经很多了。比如，基于地理位置信息，显示出真实世界上各个建筑物的商家名称等信息。&lt;/p&gt;
&lt;p&gt;&lt;img alt="lbs" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-08-10/lbs.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;比如，大名鼎鼎的 pokemon Go，在现实世界，叠加一个虚拟的小精灵。&lt;/p&gt;
&lt;p&gt;&lt;img alt="pokemon" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-08-10/pokemongo.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;这些应用看起来娱乐性比较强，但其实，在很多专业领域，AR 也有着非常重要的应用。&lt;/p&gt;
&lt;p&gt;比如，Google Glass（包括其他所有的智能眼镜）在探索，可不可能在医生做手术的时候，将关于病患和手术的基本信息，直接展示在医生眼前，而不需要医生回头去看显示器上的信息，从而增强手术的连续性：&lt;/p&gt;
&lt;p&gt;&lt;img alt="doctor" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-08-10/doctor.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;再比如，在专业的生产车间，技术人员可不可以直接看到相关设备的参数或者说明，来进行设备的组装，维修，或者调试工作。&lt;/p&gt;
&lt;p&gt;&lt;img alt="worker" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-08-10/worker.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;这些应用，很多如今已经成为了现实，但是仍然有巨大的发展空间。并且，我坚信不疑：&lt;strong&gt;这样的技术可以极大地提高生产效率，是未来的趋势。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;在现实-虚拟连续统的坐标轴上，另一端会被大众所忽略，尤其是非专业人士。实际上，我们除了可以增强现实，也可以增强虚拟。&lt;/p&gt;
&lt;p&gt;&lt;img alt="rv3" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-08-10/rv3.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;增强虚拟的英文是 AV，听起来似乎很龌龊的样子。这是因为很不幸，这个英文缩写和另外一个英文缩写撞车了。&lt;/p&gt;
&lt;p&gt;但其实，这里，&lt;strong&gt;AV 是 Augmented Virtuality&lt;/strong&gt; 的意思，即增强虚拟。&lt;/p&gt;
&lt;p&gt;什么叫增强虚拟？就是原本是虚拟的东西，但是，我们靠技术手段，让它更真实一点。&lt;/p&gt;
&lt;p&gt;最简单的例子，我们为了更好地玩儿虚拟的赛车游戏，制造出了专用的“游戏方向盘”，让玩家尽量真实地体会虚拟的飙车快感。这就是增强虚拟。&lt;/p&gt;
&lt;p&gt;&lt;img alt="car" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-08-10/cargame.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我们在游戏厅看到的大量游戏都在增强虚拟。比如拿着游戏枪在虚拟的世界里和僵尸们厮杀。&lt;/p&gt;
&lt;p&gt;&lt;img alt="gun" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-08-10/gun.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;如果你理解了什么是 AR（增强现实）和 AV（成人...不是，是增强虚拟）以后，就可以理解另外一个概念了：MR。&lt;/p&gt;
&lt;p&gt;MR 是混合现实（Mixed Reality）的意思。实际上，不同厂家对 MR 的定义都有所不同。他们会鼓吹各种奇怪的特性，把自己的产品的优点当做 MR 的定义来宣传。&lt;/p&gt;
&lt;p&gt;可是，从学术界的角度：&lt;strong&gt;AR 和 AV 都是 MR，都是在混合现实。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在现实-虚拟连续统的坐标轴上，就是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="rv4" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-08-10/rv4.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;如果你去查 MR 在 维基百科上的定义，就会看到维基百科是这么说的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;混合现实（Mixed Reality，简称MR）指的是结合真实和虚拟世界创造了新的环境和可视化，物理实体和数字对象共存并能实时相互作用，以用来模拟真实物体。混合了现实、增强现实、增强虚拟和虚拟现实技术。Mixed Reality 是一种虚拟现实（VR）加增强现实（AR）的合成品混合现实（MR）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个定义在我看来很含糊。但实际上，把它放到现实-虚拟连续统上看，就很清晰。&lt;/p&gt;
&lt;p&gt;说白了，增强现实是混合现实；增强虚拟也是混合现实。&lt;/p&gt;
&lt;p&gt;现实和虚拟之间是一个连续的坐标轴，没有清晰的界限。除了两段，中间都可以叫混合现实。谁多一些，谁少一些而已。&lt;/p&gt;
&lt;p&gt;混合现实在努力做好增强现实的同时，也在努力做好增强虚拟。&lt;/p&gt;
&lt;p&gt;可能混合现实太努力了，以至于觉得应该为自己创造出一个全新的概念。于是，混合现实（MR）这个名词出现了。&lt;/p&gt;
&lt;p&gt;&lt;img alt="mr" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-08-10/mr.gif" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="mr2" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-08-10/mr2.gif" /&gt;&lt;/p&gt;
&lt;p&gt;看了上面的介绍，相信大家可以理解：在现实和虚拟之间，有很多事情可以做，想象空间极大。这就是我看好 AR 的原因。&lt;/p&gt;
&lt;p&gt;在这里，我说是看好 AR，更准确地说：是看好在现实-虚拟连续统&lt;strong&gt;中间的区域&lt;/strong&gt;做事情。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;相较而言，VR（虚拟现实）的目标是使用计算机创建出一个完全虚拟的世界，让用户沉浸在其中，就像和真实的世界一样。&lt;/p&gt;
&lt;p&gt;如果大家看过黑客帝国，就很容易理解什么叫真正的虚拟现实。很可惜，那种程度的虚拟现实，我们现在人类根本做不到。&lt;/p&gt;
&lt;p&gt;&lt;img alt="matrix" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-08-10/matrix.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我个人认为，现如今，我们人类可以做到的真正的最逼真的虚拟现实，是靠人类的大脑这台“计算机”产生的，叫“梦”。&lt;/p&gt;
&lt;p&gt;在《盗梦空间》的电影海报上，赫然写着：The Dream is Real。（我的翻译：梦境即现实）&lt;/p&gt;
&lt;p&gt;&lt;img alt="inception" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-08-10/inception.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;很可惜，无论是大脑的运行机制，还是梦的原理，我们人类自己也没有搞清楚。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;在短期内（至少 10 年时间），我完全不看好 VR。因为到现在为止，VR 领域有一个很重要的问题没有解决，就是&lt;strong&gt;现有的所有 VR 设备都会造成人类生理上的不适，使得大多数人无法长时间在 VR 中作业。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为什么 VR 会让人类身体不适？其实很简单，因为我们人类现在做出来的“虚拟现实”，离“现实”的差距太远了，导致我们人类的身体本能地排斥它。&lt;/p&gt;
&lt;p&gt;这个原理有点儿像 3D 眩晕。但是，即使没有 3D 眩晕症状的用户，在更大范围的 VR 设备中，都会开始“眩晕”起来。&lt;/p&gt;
&lt;p&gt;这个问题是有非常翔实的生理学研究做基础的。有一篇很有名的论文在说这件事情，具体名字我忘记了。但如果大家以后做 VR/AR 方向的博士的话，我估计近乎一定会看到这篇文章，或者类似的描述这个问题的文章。&lt;/p&gt;
&lt;p&gt;如果把这个问题放到现实-虚拟连续统中看，也很好理解。&lt;/p&gt;
&lt;p&gt;现实-虚拟连续统中的一端：现实，已经被至今我们都还不能理解的一种力量（上帝的力量？宇宙的力量？）创造了出来。&lt;/p&gt;
&lt;p&gt;而现实-虚拟连续统中的另一端，则是我们要挑战的，纯粹的 VR（虚拟现实）。&lt;strong&gt;它的难度，是和上帝造物在一个级别的。&lt;/strong&gt;我甚至怀疑我在有生之年能不能看到真正的 VR。&lt;/p&gt;
&lt;p&gt;因此，现在，很多所谓的 VR 方向，很大程度是对图形学（Graphics）研究的延展。如果你去看一些 VR 游戏的开发流程，也会发现，他们不过是近乎和普通游戏同样的开发流程和框架，去适配 VR 设备而已。&lt;/p&gt;
&lt;p&gt;图形学领域相对是成熟的，我曾经在我的知识星球上，基于之前有一阵子很火的“清华姚班毕业生开发特效编程语言，99 行代码实现《冰雪奇缘》”，聊过这个问题。&lt;/p&gt;
&lt;p&gt;&lt;img alt="star" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-08-10/star.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;在我看来，无论是业界，还是学界，AR 都比 VR 更火，也更容易出成绩。比如更容易发出好的论文；或者基于 AR 技术创业更容易成功。&lt;/p&gt;
&lt;p&gt;当然，我其实也有很久不仔细观察这个领域的发展了，我的看法可能是错的。同时，未来怎么样也不好说，搞不好 VR 就大爆发了呢。&lt;/p&gt;
&lt;p&gt;（虽然从现在人类的科技树的角度，我依然觉得可能性很小。）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;最后，选方向这种事儿，自己的兴趣最重要。说实话，我个人就对 Graphics 更感兴趣，所以，也更喜欢看偏 VR 的东西。&lt;/p&gt;
&lt;p&gt;我个人还是坚信，人在自己感兴趣的领域更容易做出成绩。&lt;/p&gt;
&lt;p&gt;至于风口，随缘吧。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-08-10/readme.md" rel="alternate"/></entry><entry><id>2020/2020-08-06/readme.md</id><title>我不埋怨奋斗 B</title><updated>2020-08-06T00:00:00-07:00</updated><content>&lt;h2&gt;我不埋怨奋斗 B&lt;/h2&gt;
&lt;p&gt;最近，在我的一个课程群里，突然同学们聊起了奋斗 B。我想，大概是因为这样一则新闻：&lt;/p&gt;
&lt;p&gt;&lt;img alt="zhihu" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-08-06/zhihu.png" /&gt;&lt;/p&gt;
&lt;p&gt;大多数同学对奋斗 B 都是憎恨的态度。但是，我对此却一直保持中立的态度。&lt;/p&gt;
&lt;p&gt;当然，这里还有一个对奋斗 B 如何定义的问题。&lt;/p&gt;
&lt;p&gt;我对奋斗 B 的定义是：真正的在努力工作，不惜免费加班干活儿，超额完成工作任务的同学。&lt;/p&gt;
&lt;p&gt;如果这样定义奋斗 B，那么责怪这样一个群体就显得非常奇怪。努力奋斗从来是中华民族的传统美德，奋斗从来不是可耻的，也不应该是可耻的。&lt;/p&gt;
&lt;p&gt;但与此同时，我也非常理解这样的行为为大多数同学带来的内卷境地。这本身是一个复杂的社会问题。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;但是，很多同学会马上告诉我，奋斗 B 这个词不是这个意思。&lt;/p&gt;
&lt;p&gt;这些同学说，奋斗 B 是指：明明可以干完活儿准时下班，但偏偏假装自己很忙，刻意用更长的加班时间，来凸显自己的努力，给领导留下好印象的人。&lt;/p&gt;
&lt;p&gt;这样做的结果就是，一个组的人都有意无意地“被迫”加班。奋斗 B 也因此招人恨。因为，他们其实并没有为企业带来更多的价值，不但自身工作效率低，还带坏了风气，让所有人都不得不加班。&lt;/p&gt;
&lt;p&gt;这就很有意思了。如果事情真的是这样的话，那么在我看来，&lt;strong&gt;管理者的责任，远远大于奋斗 B 的责任。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;因为，管理的一个重要目标，就是提高效率，鉴别出低效行为，并加以改善。可是这种低效的行为，却得到了管理者的“肯定”，乃至让组里的其他同学也需要效仿，来获得同样的“肯定”。&lt;/p&gt;
&lt;p&gt;管理者没有有效鉴别出“低效”，反而鼓励了“低效”。是管理者衡量大家工作成绩的标准出了问题，大家才会去“迎合”这个“错误”的标准。&lt;/p&gt;
&lt;p&gt;管理者错误的衡量标准是因，奋斗 B 的出现是果。与其骂奋斗 B，我倒觉得更应该骂管理者。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;由于错误的衡量标准，导致管理上的事与愿违，并不鲜见。甚至在经济学领域，有一个专门的名词来阐述这一现象：&lt;strong&gt;眼镜蛇效应。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="cobra" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-08-06/cobra.png" /&gt;&lt;/p&gt;
&lt;p&gt;眼镜蛇效应这个名词来源于印度。在英国殖民时期，政府发现当时印度的首都德里存在大量眼镜蛇，严重影响了人们的生活。为了鼓励民众一起消灭“蛇害”，政府颁布了一条法令：每打死一条眼镜蛇，凭尸体可以领取一定的赏金。&lt;/p&gt;
&lt;p&gt;这条法令的结果非但没有杜绝蛇害，反而让更多人开始饲养眼镜蛇，导致城市里的眼镜蛇数量更多了。&lt;/p&gt;
&lt;p&gt;以蛇的尸体作为奖赏标准，不但不能减少蛇的数量，反而增加了蛇的数量。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;同样的故事，在 1902 年的越南再次上演。当时，越南政府为了治理鼠害，发布了法令，每打死一只老鼠，居民可以割下老鼠的尾巴，凭老鼠尾巴领取赏金。&lt;/p&gt;
&lt;p&gt;很快，政府官员就发现，城里流窜着大量没有尾巴的老鼠。因为民众在抓到老鼠后，不是杀死老鼠，而是割掉尾巴，将其放生，让它们继续繁殖，好有更多的老鼠来帮助他们领取赏金。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;眼镜蛇效应&lt;/strong&gt;并不是描述这一现象的唯一名词。在经济学领域，&lt;strong&gt;Goodhart 定律&lt;/strong&gt;或者 &lt;strong&gt;Campbell 定律&lt;/strong&gt;，都在描述或者可以引申出这层意思：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;标准是重要的。错误的标准将得到错误的结果。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;所以，很多时候，问题的关键，是标准。&lt;/p&gt;
&lt;p&gt;比如有一阵子，社会上的新闻铺天盖地都在宣传，高中生都开始学习 Python 了。80 后颤抖吧；90 后颤抖吧；计算机专业的同学们颤抖吧。&lt;/p&gt;
&lt;p&gt;比如这样的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="python1" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-08-06/python1.png" /&gt;&lt;/p&gt;
&lt;p&gt;再比如这样的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="python2" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-08-06/python2.png" /&gt;&lt;/p&gt;
&lt;p&gt;于是，就有同学来问我：波波老师，现在 Python 这么火，高中生都要学了，是不是做高中生的 Python 教育是个好机会，能赚大钱？&lt;/p&gt;
&lt;p&gt;我说：我不认为专门针对高中生的 Python 教育有那么大的市场。&lt;/p&gt;
&lt;p&gt;为什么？因为高考不考 Python。也就是高中生升学的标准里没有 Python。&lt;/p&gt;
&lt;p&gt;什么时候高考决定要考 Python 了，什么时候专门针对高中生的 Python 教育才是一个机会。&lt;/p&gt;
&lt;p&gt;或者，大家可以这么想：实际上，计算机教育一直是我国高中生的必修课程，甚至是会考必考的科目之一。在最近几年，各个省市只是把这个“必考科目”中的计算机语言，从老得不得了的 VB，换成了 Python 语言而已。&lt;/p&gt;
&lt;p&gt;在此之前，针对高中生的 VB 教育市场火爆吗？如果不火爆，那么专门针对高中生的 Python 教育市场就没有理由火爆。&lt;/p&gt;
&lt;p&gt;针对高中生的 VB 教育市场显然不火爆。为什么？不是因为 VB 过时了，是因为升学的标准——高考里没有 VB。如果高考考 VB，不管 VB 多老多过时，都会火得不得了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;我之前在北京创业的时候，采访过很多企业老板。其中有一个片段，我印象深刻。&lt;/p&gt;
&lt;p&gt;这名企业老板非常自豪地向我们炫耀，自己是多么看重创新。每次员工开会，他都一定会强调：创新！创新！创新！按照他的话说：只有创新，企业才能继续前进，永远前进。&lt;/p&gt;
&lt;p&gt;但是，当我们去采访这个企业的员工时，却听到了不同的故事。&lt;/p&gt;
&lt;p&gt;有一名主管苦笑地告诉我们：老板确实天天喊创新，月月喊创新。但就在去年，我带领的地区尝试用新的销售方案，结果失败了，营收还没有以前好。但是另一个地区的主管中规中矩，依旧使用传统的方案，业绩超过了我们。&lt;/p&gt;
&lt;p&gt;最后，他们全员拿到了年终奖的大红包，我们地区的年终奖却少得可怜。&lt;/p&gt;
&lt;p&gt;所以，老板喊创新，听听就好了。该怎么来，还是要怎么来。毕竟，业绩才是指标。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我在那一瞬间恍然大悟。&lt;/p&gt;
&lt;p&gt;创新不是喊出来的。要想让企业创新，就必须要想办法衡量创新。如果衡量标准仅仅是业绩，没有人会创新。&lt;/p&gt;
&lt;p&gt;因为创新意味着风险，意味着失败，意味着收入可能还不如过去。&lt;/p&gt;
&lt;p&gt;如果衡量标准不变，创新者因为创新，反而没有好果子吃；反倒是保守派，因为保守，最终拿了大红包。那么不管老板再怎么喊鼓励创新，本质其实都是在鼓励保守。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;无独有偶，就在几个星期前，我和一名国内互联网大厂的产品经理大佬，进行了一段有意思的对话。&lt;/p&gt;
&lt;p&gt;大家都知道，产品和技术是“死对头”。网上，关于产品压榨技术，向技术提出不合理需求的讨论络绎不绝。&lt;/p&gt;
&lt;p&gt;于是，我就问这名产品大佬：到底你们产品的 KPI 是什么？让你们这么孜孜不倦地给技术同学“添麻烦”？&lt;/p&gt;
&lt;p&gt;这名产品大佬来自全国前三的互联网企业。他的回答是：我们的 KPI，占比最大的是&lt;strong&gt;营收&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;什么叫营收？就是产品经理通过对产品的改善，使得项目赚到了更多的钱。&lt;/p&gt;
&lt;p&gt;但具体做出怎样的改变，可以达到“赚更多的钱”的目的？这就是每个产品经理的工作内容了。&lt;/p&gt;
&lt;p&gt;我问：这里有没有什么方法论？可以尽可能向着更赚钱的方向改善产品？&lt;/p&gt;
&lt;p&gt;产品大佬回答：应该有。但是国内的环境普遍对这种方法论的思考和讨论比较少。大家更愿意&lt;strong&gt;“做出来试试看”&lt;/strong&gt;。因为对产品的“改善”乃至“改变”，也是产品的 KPI 之一。&lt;/p&gt;
&lt;p&gt;这样导致的结果就是：每一名产品经理都希望能够去不断地实验新的功能，新的想法，来看是否能够创造新的营收。&lt;/p&gt;
&lt;p&gt;爱迪生尝试了 6000 多种材料，进行了 7000 多次试验，最终终于发明了电灯。至少故事里是这么说的。产品经理都深谙这个道理。&lt;/p&gt;
&lt;p&gt;所以，大多数产品经理，一旦有一个想法，就会迫不及待地让技术们去尝试实现，来看会不会产生更多的营收。&lt;/p&gt;
&lt;p&gt;为了能够更多地试错，996 出现了。但很多时候，这不叫 996，而叫&lt;strong&gt;小步快跑，快速迭代。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;作为一名技术人员，我显然看出了这里的不公平。产品经理一有想法就占用技术的时间去“试错”；但实验结果不好的话，技术的心血就“白费”了。&lt;/p&gt;
&lt;p&gt;即便大家都是一个 team 的，但是，技术为产品的“莽撞盲目”买单，加班熬夜，最终却没有得到希望的结果，我相信不在少数&lt;/p&gt;
&lt;p&gt;于是我问：难道对于产品来说，没有反向指标？&lt;/p&gt;
&lt;p&gt;产品大佬问我：什么是反向指标？&lt;/p&gt;
&lt;p&gt;我回答：如果产品经理不断改善产品，项目的营收却没有因此提高。那么这个产品经理相当于白白占用了大量的技术时间和资源，相当于他的工作效率是低下的。此时，应该对这名产品罚款。&lt;/p&gt;
&lt;p&gt;我又补充道：换一个说法。如果一名产品经理，一年的时间提出了 500 个需求变更；但另一名产品经理，一年只提出了 50 个需求变更。两者最终在产品营收上，达到的效果是一样的，那么显然，后一名产品经理，是比前一名产品经理更优秀的。&lt;/p&gt;
&lt;p&gt;因为，后一名产品经理占用了更少的技术资源和时间，达成了同样的成绩。在 KPI 考核上，难道不考虑这一点？&lt;/p&gt;
&lt;p&gt;产品大佬沉默了一会儿，告诉我：没有这回事儿。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我一下子就明白了。这说明，整个企业不考核“低效”这个指标。如果“低效”不是指标，那么大家就不会顾及效率，低效近乎将成为必然。&lt;/p&gt;
&lt;p&gt;什么时候，企业说：效率很重要，大家的 KPI 也要包含效率。同样的业绩，谁加班少，谁拿奖金就多。那么我想，大家就会开始思考，怎么提高工作效率了。&lt;/p&gt;
&lt;p&gt;相信到那时，奋斗 B 也会少很多。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！:)&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-08-06/readme.md" rel="alternate"/></entry><entry><id>2020/2020-07-29/readme.md</id><title>不会翻转二叉树的大神 </title><updated>2020-07-29T00:00:00-07:00</updated><content>&lt;h2&gt;不会翻转二叉树的大神&lt;/h2&gt;
&lt;p&gt;2015 年 6 月 10 日，Max Howell 发表了一篇推特：&lt;/p&gt;
&lt;p&gt;&lt;img alt="twitter" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-29/twitter.png" /&gt;&lt;/p&gt;
&lt;p&gt;简单翻译：Google 说，我们 90% 的工程师都使用你写的软件——Homebrew，但是因为你不能在白板上翻转一棵二叉树，所以，滚蛋。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;这条 Twitter 在当年引发了不小的争论。&lt;/p&gt;
&lt;p&gt;Homebrew 是 MacOS 上的一款非常著名的软件，它极大地简化了在 macOS 上的软件安装和管理流程，所以使用者众多，相当有业界影响力。如这条推特所说：Google 里 90% 的工程师都使用这款软件。&lt;/p&gt;
&lt;p&gt;Max Howell 就是 Homebrew 的创作者，也是一名业内知名的 MacOS / iOS 工程师。他曾经是著名的网络电台 Last.fm 的首席客户端开发者，后来是 Twitter 的客户端 TweetDeck 的首席移动开发者。&lt;/p&gt;
&lt;p&gt;2015 年，Max Howell 决定加入 Google。但是，根据 Max Howell 的叙述，他去 Google 面试，作为一名 iOS 业界专家，面试官没有问任何和 iOS 相关的问题。&lt;/p&gt;
&lt;p&gt;Max Howell 的面试进行到第七轮，在一道算法题上出了问题。这个算法问题就是：翻转一棵二叉树。&lt;/p&gt;
&lt;p&gt;这其实是一个很简单的算法问题。相信对很多还没有毕业的计算机专业的同学，都是很容易的。&lt;/p&gt;
&lt;p&gt;其实，如今我们也已经很难判断 Max Howell 到底是不是真的不会这个算法问题？还是只是对这样的面试流程抗议？&lt;/p&gt;
&lt;p&gt;我们也很难分辨，Google 不聘请 Max Howell 的真实原因，到底是因为他没有解答出这个问题？还是有其他原因？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;对这些问题的分析，在当年很流行。有业内人士指出，Google 出这么简单的算法问题，显然已经是在放水了。而 Google 决定不招聘 Max Howell 的真实原因，很有可能不是能力问题，而是在面试过程中认为，Max Howell 的个人性格不适合 Google 的文化。&lt;/p&gt;
&lt;p&gt;毕竟，面试不是考试，不是把问题回答正确就可以了。很多时候，面试的过程，是面试官在看，和候选人共事，共同探讨一个问题，共同解决一个问题，是怎样的体验。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;还有很多人据此吐槽硅谷大公司的招聘方式。&lt;/p&gt;
&lt;p&gt;有的人说：Facebook 不要我，因为我解不出八皇后问题。&lt;/p&gt;
&lt;p&gt;有的人说：曾经 Amazon 让我翻转一个链表，当时我的灵魂就已逃离了那个房间。&lt;/p&gt;
&lt;p&gt;有的人说：如果问我如何翻转一棵二叉树，我会当场把那个白板翻过来，然后说，看，我完成了。&lt;/p&gt;
&lt;p&gt;还有人说：1997 年，Google 面试了我 6 个小时。最后一个问题是：为什么我们要聘用你？我的回答是：你们 TM 自己想吧。最后我拿到了 offer。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;对于当代计算机行业，算法是不是一定这么重要？我的回答是，不一定。为此，我写过一篇文章：&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2018/2018-04-18/"&gt;算法到底有什么用？对你来说可能真的没用&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;那大公司面试为什么总要考算法？对此，我写过一篇文章，叫：&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-10-07/"&gt;大厂面试为什么总考算法？以及如何避开算法面试&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;但如今，5 年时间过去了，这一切争论，对于当事人来说，或许都不重要了。无论是 Max Howell，还是 Google，都在这五年间，做出了不错的成绩。&lt;/p&gt;
&lt;p&gt;大家虽然没有合作，但都有很好的未来。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;而就在最近，我无意中翻到了 Quora 上对这个问题讨论的一个“老帖子”。&lt;/p&gt;
&lt;p&gt;&lt;img alt="quora" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-29/quora.png" /&gt;&lt;/p&gt;
&lt;p&gt;这个问题在 Quora 上是这样的：Homebrew 的作者 Max Howell 因为不会翻转一棵二叉树，被 Google 拒绝，这背后的逻辑到底是什么？&lt;/p&gt;
&lt;p&gt;没想到两年以后，在 2017 年的 12 月份，Max Howell 自己亲自回答了这个问题。&lt;/p&gt;
&lt;p&gt;Max Howell 的这个回答，我今年才看到。说实话，我读了好几遍。语言并不多，但却让我感触颇深，以至于我想逐句翻译，和大家分享。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;以下是 Max Howell 的回答。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hi, I’m Max Howell, I’ve spent the last two years not answering this, and many questions like it. Maybe I shouldn’t answer this.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;大家好，我是 Max Howell。我尝试用了两年时间，不去回答这个问题，或者千千万万个和这个问题类似的问题。或许，我不应该回答这个问题。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;So, what's the logic? Clearly I wrote something worthy of Google, right?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Google 拒绝我的逻辑到底是什么？很明显，我写了一些值得去 Google 的代码，对吧？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Well, no I didn't. I wrote a simple package manager. Anyone could write one. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;其实，不是这样的。我只写了一个很简单的软件包管理工具。任何人都能写出来。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;And in fact mine is pretty bad. It doesn't do dependency management properly. It doesn’t handle edge case behavior well. It isn’t well tested. It’s shit frankly.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;实际上，我写的非常差。它甚至没有做好软件包的依赖管理。它也不能很好地处理很多用户的边界行为。它没有被充分测试。坦白地说，它就是一坨屎。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Is it any surprise I couldn’t answer their heavily computer-science questions well?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以，如果我不能很好地回答那种“重量级”的计算机科学问题，真的那么惊讶吗？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;On the other hand, my software was insanely successful. Why is that? &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但是，另一方面，我的软件不可思议的成功。为什么？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Well the answer is not in the realm of computer science. I have always had a user-experience focus to my software. Homebrew cares about the user. When things go wrong with Homebrew it tries as hard as it can to tell you why, it searches GitHub for similar issues and points you to them. It cares about &lt;strong&gt;you&lt;/strong&gt;. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当软件发生问题的时候，Homebrew 会尽最大的可能告诉你：为什么？它会在 Github 上搜索类似的 issues，并且将你指向这些可能的问题解决方案。它在乎&lt;strong&gt;你&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Most tools don’t give a shit about you. If they go wrong, well screw you. Homebrew helps you. And if it can’t help you I made it so, so easy to fix Homebrew (I built a command into the base for editing and fixing Homebrew). You can make Homebrew better. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;大多数工具不在乎你。如果事情出现了问题，那么你将一筹莫展。Homebrew 在尝试帮助你。甚至，如果它无法帮助你，你可以直接修改它！（我创建了一个命令，可以让你直接去编辑或者修改 Homebrew。）你可以让 Homebrew 更好。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Homebrew is a shining example of true Open Source.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我坚信：Homebrew 是真正开源世界中一颗闪亮的星。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Maybe Homebrew doesn’t do dependency management well, but it does it in a way you care about. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;或许 Homebrew 没有很好地完成依赖管理，但是，它用一种可能你更关心的方式完成了它。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Unlike the competition at the time Homebrew used the dependencies on your Mac as a base thus saving you intense amounts of time installing software and quite a lot of pain, because practically speaking a large dependency graph breaks. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不像当时的大多数竞争者，Homebrew 直接使用你的 Mac 上的软件依赖关系作为基础，从而为你节省了大量安装软件的时间，少了很多痛苦。因为，根据我的经验，使用一个更大的依赖图，事情总是会出问题。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;But that isn't computer science and it didn’t involve any graphs or trees so I guess I suck.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但是，这一点和计算机科学没有半点关系，也不牵扯到任何图或者树这类我完全不擅长的东西。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I want to defend Google, for one I wasn't even inverting a binary tree, I wasn’t very clear what a binary tree was.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在这里，我想为 Google 辩解两句。我确实不会如何翻转一棵二叉树。我甚至不是特别清楚二叉树到底是什么。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I studied Chemistry not Comp-Sci. Sure, for my masters dissertation I used Mathematica and modeled the quantum mechanical properties of Helium—I did a good job actually—but it wasn’t computer science. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我的专业其实是化学，不是计算机科学。当然，我的硕士论文中使用了数学，并且为氦原子的量子学特性进行了建模。我相信我的硕士论文还不错，但这和计算机科学无关。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;But well, what the fuck does comp-sci have to do with modern app development? And well, that’s all I want people to take from my tweet.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但是，计算机科学，到底和现代软件 App 的开发有什么关系？这是我希望大家通过我的推特，去思考的东西。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Google in fact gave me seven interviews and I did well in the software engineering ones, because that is actually my talent. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Google 实际上给了我七轮面试。在软件工程面试中，我是相当出色的。这是我的天赋所在。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I feel bad about my tweet, I don’t feel it was fair, and it fed the current era of outragism-driven-reading that is the modern Internet, and thus went viral, and for that I am truly sorry.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对于我发的那条推特，我也会觉得它可能不合适。这条推特为很多“愤青”提供了“养料”，并且火了。这就是现代互联网。对此，我感到抱歉。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;But ultimately, should Google have hired me? Yes, absolutely yes. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但如果问我，Google 是不是应该聘用我？我的回答绝对是：是的，Google 绝对应该聘用我。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I am often a dick, I am often difficult, I often don’t know computer science, but. BUT. I make really good things, maybe they aren't perfect, but people really like them. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我承认，我是个混蛋，我很难相处，我不懂那么多计算机科学。但是，但是，我创造了优秀的作品。或许它不完美，但人们喜欢它。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Surely, surely Google could have used that.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;其实，Google 本是可以抓住这一点的。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;通过这个回答，我相信大家可以看出来，Max Howell 依然是那个“狂妄”的开源作者。我严重怀疑我的翻译让他谦虚了一些。实际上，上面的翻译，我修改了一稿，把一些原本我个人习惯使用的“谦虚”的用法去除了。&lt;/p&gt;
&lt;p&gt;但这个回答给我感触最深的，是 Max Howell 描述的关于 Homebrew 的理念。用一个比较俗套的成语总结，就是&lt;strong&gt;以人为本&lt;/strong&gt;。说的不要那么文驺驺，就是&lt;strong&gt;尊重你的用户&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我在国内做 iOS 开发，算比较早的。2011 年开始，陆陆续续上架了几个小 App，直到大概 2015 年停止维护。&lt;/p&gt;
&lt;p&gt;学习 iOS 开发的过程确实极大地拓展了我的技术视野，因为 iOS 开发和我之前接触的大多数技术栈都极其不同。但是，这么多年过去以后，回头看，这段经历让我收获了更多和技术无关的东西。&lt;/p&gt;
&lt;p&gt;我第一次感受到了：技术和人的距离，竟然如此之近。&lt;/p&gt;
&lt;p&gt;有一名老爷爷，在 2017 年给我发来一封邮件，让我感触颇深。&lt;/p&gt;
&lt;p&gt;&lt;img alt="mail" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-29/mail.png" /&gt;&lt;/p&gt;
&lt;p&gt;邮件中，他给我的 App 提了一些建议，并且告诉我，他已经使用我的这个小 App 三年了。&lt;/p&gt;
&lt;p&gt;后来，我跟他随便聊了两句，他说他住在美国一个鸟不拉屎的小镇上，他自称自己是名艺术家，还出版了一本和艺术相关的图书。&lt;/p&gt;
&lt;p&gt;他给我了一个亚马逊链接，我说我不会买的。他打回一个笑 cry 的 emoji 😂&lt;/p&gt;
&lt;p&gt;这是我第一次意识到，冷冰冰的代码，竟然可以连接无论是年龄，国籍，种族，地理位置，职业，以及性格，都如此遥远的两个人。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;后来，我在慕课网出了一些课程。&lt;/p&gt;
&lt;p&gt;在这个过程中，给我感触最深的，是在课程的问答区，我和大家的交流。说句实话，我学会了很多东西。&lt;strong&gt;很多东西在技术之外，但是，它们被技术，连接在了一起。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所以我决定写公众号。我想，对于更加广泛的技术世界的探讨，或许能让大家带给我更多的启发。我的目的是自私的。&lt;/p&gt;
&lt;p&gt;有很多同学问我各种问题，但我不是各个领域的专家，对于一些过于细节的问题，也没有时间精力在非课程的问答区一一解答。所以我又开设了知识星球，大家可以在那里畅所欲言。从技术提问，到发表观点。&lt;/p&gt;
&lt;p&gt;可能并不是所有的观点我都赞同，但我喜欢这种观点的碰撞。每次这种碰撞后，都能带给我更深刻的思考。&lt;/p&gt;
&lt;p&gt;我想，这就是“人”的魅力。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我喜欢代码，喜欢逻辑，喜欢它们的严谨，以及这种严谨背后，依然可以产生的无限可能。&lt;/p&gt;
&lt;p&gt;我高中毕业后选择计算机专业，是因为我以为，使用计算机，我可以凭空创造出一个完全属于我自己的宇宙。&lt;/p&gt;
&lt;p&gt;后来，我才慢慢发现，我们的宇宙之所以精彩，不是因为上帝的逻辑有多么严谨。而是因为，有我，有他，有她，还有你。&lt;/p&gt;
&lt;p&gt;因为人。&lt;/p&gt;
&lt;p&gt;或许，这就是我会突然如此崇拜这名，不会翻转二叉树的大神，的原因吧。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-07-29/readme.md" rel="alternate"/></entry><entry><id>2020/2020-07-26/readme.md</id><title>看着 GPT-3，有一丝不寒而栗</title><updated>2020-07-26T00:00:00-07:00</updated><content>&lt;h2&gt;看着 GPT-3，有一丝不寒而栗&lt;/h2&gt;
&lt;p&gt;想象一下，你想做一个页面。这个页面的需求是这样的：&lt;/p&gt;
&lt;p&gt;有一个标题，标题是：情绪跟踪器。然后有一个按钮，写着“快乐”，“悲伤”和“昏昏欲睡”。当点击一个按钮的时候，显示出：现在，我的心情是 X。&lt;/p&gt;
&lt;p&gt;实际上，这个需求相当不明确。&lt;/p&gt;
&lt;p&gt;比如，需求的说明是，有“一个”按钮，但下面的描述，却是三个按钮；&lt;/p&gt;
&lt;p&gt;再比如，点击按钮后，显示的“我的心情是 X”，这个 X 到底要填写什么？没有定义。&lt;/p&gt;
&lt;p&gt;这就是自然语言和程序语言的区别。自然语言包含着大量模糊的，不明确的，甚至是自相矛盾的说辞。但是，在大多数时候，人类可以大概理解自然语言所表述的内容，至少了解一个大概的方向，然后，可以通过进一步的沟通，明确说话者想要表达的意思。&lt;/p&gt;
&lt;p&gt;而机器不行。我们必须严谨地告诉机器一切细节，机器才能执行出相应的结果。这本质也是程序员这份职业的意义之一。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;程序员其实在一定程度上，充当了人类和机器之间的“翻译官”的角色。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果产品经理有一个需求，产品经理不能通过直接告诉机器，来实现这个功能。产品经理要把这个需求告诉给程序员，程序员再把这个需求转变成机器可以理解的代码。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;但是，如果机器可以直接理解产品经理的自然语言呢？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;比如上面的这个需求，如果有一个对话框，上面写着：请描述你的需求。产品经理直接在这个对话框里面，用自然语言描述自己的需求，机器就能实现相应的功能了呢？&lt;/p&gt;
&lt;p&gt;请看下面的演示：&lt;/p&gt;
&lt;p&gt;&lt;img alt="gpt-3-1" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-26/gpt-3-1.gif" /&gt;&lt;/p&gt;
&lt;p&gt;在这段演示中，用户在对话框中输入了：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;a header that says "Mood Tracker", then a button that says "Happy", "Sad", and "Sleepy". when I press a button, show text that says "right now i am feeling x".&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;其实，文章开始的那段需求，就是这段英文的翻译。&lt;/p&gt;
&lt;p&gt;当按下 "Generate" 按钮后，几秒钟以后，这样的一个页面诞生了：&lt;/p&gt;
&lt;p&gt;&lt;img alt="mood-tracker" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-26/mood-tracker.png" /&gt;&lt;/p&gt;
&lt;p&gt;当用户点击不同的按钮的时候，下面的文字中，"right now i am feeling x"，x 会替换成不同的按钮上的文字。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;产品经理对这个页面不满意，想要更改需求。&lt;/p&gt;
&lt;p&gt;于是，产品经理说：x 不应该是文字，而是一个表情符号。&lt;/p&gt;
&lt;p&gt;我们在对话框里添加上这个需求：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;where x is an emoji for my mood.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="gpt-3-2" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-26/gpt-3-2.gif" /&gt;&lt;/p&gt;
&lt;p&gt;当按下 "Generate" 按钮，几秒钟以后，这个需求变更已经修改好了。&lt;/p&gt;
&lt;p&gt;现在，当用户分别按下 “Happy”，“Sad” 和 “Sleepy” 按钮之后，就会显示出如下的文字：&lt;/p&gt;
&lt;p&gt;&lt;img alt="happy" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-26/happy.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="sad" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-26/sad.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="sleepy" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-26/sleepy.png" /&gt;&lt;/p&gt;
&lt;p&gt;换句话说，机器不仅仅准确地理解了用自然语言所表达的产品需求，将自然语言翻译成了代码。更通过理解这个描述，多做了一层翻译：把自然语言翻译成了合适的表情符号。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;如果经常关注人工智能领域新进展的同学，可能会觉得，这个 demo 展示，虽然很惊艳，但也没有太出彩啊？不就是自然语言到代码语言的翻译吗？之前已经有一些人工智能，可以初步完成这件事情了。&lt;/p&gt;
&lt;p&gt;我们再来看下面的例子：&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;使用自然语言输入“x 的平方加上 2 倍的 x”，机器将自动给出相应的表达式：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;x squared plus two times x&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="math" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-26/math.gif" /&gt;&lt;/p&gt;
&lt;p&gt;嗯，似乎也平淡无奇。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;再来一个例子。&lt;/p&gt;
&lt;p&gt;在对话框输入：我今天投入了两万美元，并且为后三个月的房租预付了 900 刀。&lt;/p&gt;
&lt;p&gt;只需要这样的自然语言，机器自动帮你在正确的位置把账目记录好。&lt;/p&gt;
&lt;p&gt;&lt;img alt="fin" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-26/fin.gif" /&gt;&lt;/p&gt;
&lt;p&gt;嗯，似乎也没那么惊艳，不就是理解自然语言，然后记账吗？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;再来一个例子。让计算机自动写文章。&lt;/p&gt;
&lt;p&gt;比如问计算机：你对股票市场是怎么看的？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What are your thoughts about the stock market?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;计算机自动生成的结果是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="stock" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-26/stock.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我们再让计算机以“上 Twitter 的重要性”为题，写篇作文吧。&lt;/p&gt;
&lt;p&gt;&lt;img alt="twitter" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-26/twitter.png" /&gt;&lt;/p&gt;
&lt;p&gt;具体内容我不翻译了。英文好的同学可以读一下，就会发现，计算机自动生成的文字有理有据，符合逻辑。恐怕如果说这是真人写出的文字，大多数人都会相信。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;可能还是会有同学说，这也不稀奇啊。早就听说计算机可以自动生成新闻报道了。&lt;/p&gt;
&lt;p&gt;但如果我告诉你，所有的这些事情，都是由一个智能完成的呢？&lt;/p&gt;
&lt;p&gt;完成所有这些任务的，都是 &lt;strong&gt;OpenAI 最新发布的 GPT-3 模型。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;如果上面的每一个例子都不足以让你兴奋的话，说明你是一名人工智能的老鸟，经常关注人工智能行业的最新动态。那么，你一定明白：我们通常使用其他算法模型完成这些事情（比如大名鼎鼎的 BERT），需要大量的数据进行模型的训练。&lt;/p&gt;
&lt;p&gt;即使，我们有一个已经训练好的数据模型，哪怕这个数据模型完成的任务和我们要完成的任务相似，但只要任务不完全一致，我们还是要做模型的&lt;strong&gt;微调（fine-tuning）&lt;/strong&gt;。即使是做模型的微调，我们也需要成千上万的数据。&lt;/p&gt;
&lt;p&gt;但是，GPT-3 不需要。&lt;/p&gt;
&lt;p&gt;对于 GPT-3 来说，你可以：&lt;/p&gt;
&lt;p&gt;让它当翻译官，去翻译任意两种语言；&lt;/p&gt;
&lt;p&gt;让它当程序员，直接完成自然语言表达的需求；&lt;/p&gt;
&lt;p&gt;让它当诗人，写出各种风格的诗；&lt;/p&gt;
&lt;p&gt;让它当作家，去写出各种类型的故事；&lt;/p&gt;
&lt;p&gt;你甚至可以让它给你生成笑话，或者直接生成一个 ppt 演讲稿。&lt;/p&gt;
&lt;p&gt;而&lt;strong&gt;这一切，你顶多给 GPT-3 十个以内的例子，GPT-3 就自己学会如何去做了。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这就是 GPT-3 最让人兴奋的地方。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;GPT-3 在今年五月份，由著名人工智能研究公司 OpenAI 发布。但是直到最近，OpenAI 发布了基于 GPT-3 的 API，将这种人工智能做成了一种服务，大家可以基于这种服务做拓展，将人工智能应用到自己所在的领域，大家才更加感性地意识到了 GPT-3 的威力。&lt;/p&gt;
&lt;p&gt;上面的例子，全都是幸运地获得了 GPT-3 内测资格的用户或者机构，发布的基于 GPT-3 这个人工智能模型建立的 Demo。&lt;/p&gt;
&lt;p&gt;GPT-3 的目标是成为一个更加通用的语言模型。它在解决其他机器学习模型的两个重要的问题：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 过于依赖领域内的标记数据；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 算法模型过拟合领域数据，导致只能解决某个特定领域问题。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;相信很多同学都了解，大多数机器学习的原理是，通过使用大量的数据做训练。&lt;/p&gt;
&lt;p&gt;如果想让机器做中英翻译，那么就给机器成千上万甚至是百万千万的中英对应的句子，作为训练样本，期待机器学习到其中的规律。这样，当我们给出机器一个新的中文句子的时候，机器可以尝试将他翻译成英文；&lt;/p&gt;
&lt;p&gt;如果想让机器写文章，则喂给机器成千上万甚至是百万千万的文章，让机器学习这些文章中的规律。这样，机器可以尝试写出新的文章。&lt;/p&gt;
&lt;p&gt;但是，一个可以做中英翻译任务的机器，不要说去写文章了，可能连英中翻译都做不了。&lt;/p&gt;
&lt;p&gt;可 GPT-3 突破了这一点。没有样本，或者只需要极少量的样本，GPT-3 就可以完成新的任务（自然语言处理领域）。&lt;/p&gt;
&lt;p&gt;这在机器学习领域，也被称为是&lt;strong&gt;零次学习（Zero-Shot Learning）&lt;/strong&gt;或者&lt;strong&gt;一次学习（One-Shot Learning）&lt;/strong&gt;，或者&lt;strong&gt;少次学习（Few-Shot Learning）&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;顾名思义，&lt;strong&gt;零次学习&lt;/strong&gt;就是一个样本都不给；&lt;strong&gt;一次学习&lt;/strong&gt;就是只给一个样本；&lt;strong&gt;少次学习&lt;/strong&gt;是只给极少的样本（个位数），就足以让机器进行任务。&lt;/p&gt;
&lt;p&gt;有了这个能力，GPT-3 已经有了一丝“强人工智能”的影子。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;如果你在两年前去问一名人工智能的专家，人类离强人工智能还有多远，大多数专家可能会斩钉截铁地告诉你：很远很远。&lt;/p&gt;
&lt;p&gt;但是现在，你再去问专家，强人工智能离我们还有多远？可能很多人就会犹豫一下了。&lt;/p&gt;
&lt;p&gt;因为 GPT-3。&lt;/p&gt;
&lt;p&gt;所谓的强人工智能，是相对弱人工智能而言的。弱人工智能，是指只可以完成特定任务的智能。比如上面举的例子，只能进行中英翻译的人工智能，或者只能写文章的人工智能，都是弱人工智能。因为，他们只可以完成一个任务。&lt;/p&gt;
&lt;p&gt;至今为止，大多数人工智能领域的突破，都是在弱人工智能领域的。即便是大名鼎鼎的 Alpha Go，虽然下围棋已经下过了世界冠军，但是就算玩儿一条龙，恐怕都玩儿不过小朋友。&lt;/p&gt;
&lt;p&gt;&lt;img alt="tic" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-26/tic.png" /&gt;&lt;/p&gt;
&lt;p&gt;但相较而言，GPT-3 比这些弱人工智能强太多。虽然它还不是一个真正意义上的强人工智能，毕竟 GPT-3 只是一个语言模型，我们不能用它识别图像，自动生成艺术作品，或者寻找治疗癌症的药物配方。但是，对于大多数自然语言领域的任务，GPT-3 都可以胜任。&lt;/p&gt;
&lt;p&gt;（实际上，现在也已经有人开始探索使用 GPT-3 处理图像相关的任务了。）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;GPT-3 这样一个“通用”的语言模型，拥有着惊人的体量。&lt;/p&gt;
&lt;p&gt;为了训练出这个 GPT-3 模型，它处理了相当于 &lt;strong&gt;45TB 的数据&lt;/strong&gt;；最终训练出的结果包含有 &lt;strong&gt;1750 亿个参数&lt;/strong&gt;；我们为了存储这个模型本身，也需要将近 &lt;strong&gt;700G 的空间&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;（默默看了下自己的电脑，只有 512G 的硬盘空间。）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;听 GPT-3 这个名字就知道，这个算法模型是有历史的。在 GPT-3 之前，还有 GPT-2。&lt;/p&gt;
&lt;p&gt;GPT-2 是 OpenAI 在 2019 年初公布的一个语言模型。GPT-2 有 15 亿个参数，是在一个包含有 800 万网页内容的数据集上训练而来的。相较而言，GPT-3 的规模，是 GPT-2 的 100 多倍。&lt;/p&gt;
&lt;p&gt;训练数据是要花钱的，因为训练数据需要算力。算力不是免费的，甚至很有可能，在未来，算力将成为一种比电力更重要的资源。&lt;strong&gt;（或许现在已经是了。）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;OpenAI 没有公布为了训练出 GPT-3，总共花了多少钱。但业内人士估算，训练出 GPT-3 所需要的金钱，大概是千万美元级别。我看到的更准确地估计，大概是 1200 万美元左右。&lt;/p&gt;
&lt;p&gt;这是一笔巨大的开销，以至于 GPT-3 相关的论文中，研究者表示：&lt;/p&gt;
&lt;p&gt;我们发现了一个 bug，但没钱再去重新训练模型，所以先就这样吧。&lt;/p&gt;
&lt;p&gt;&lt;img alt="paper" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-26/paper.png" /&gt;&lt;/p&gt;
&lt;p&gt;因为一旦重新训练，之前的训练就作废了，一千万美元就打水漂了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;通过令人难以置信的数据规模，包含大量的人力物力财力，GPT-3 诞生了。&lt;/p&gt;
&lt;p&gt;现如今，GPT-3 已经成为了硅谷最热门的话题之一。我甚至开始看到有一些科技文章，在文末会打趣道：这篇文章不是由 GPT-3 自动生成的。&lt;/p&gt;
&lt;p&gt;打趣归打趣，但这或许也意味着，我们离阅读大量由机器生成的文章，机器生成文字内容“反哺”人类，已经不远了。实际上现在，很多“新闻”，已经是机器生成的了。&lt;/p&gt;
&lt;p&gt;但人类在追逐强人工智能的路上，使用 GPT-3 这种方式能走多远，有些专家有不同的看法。&lt;/p&gt;
&lt;p&gt;在人工智能界，有一派观点并不认同靠“拼算力”来增强人工智能的能力。因为，这样的方法，似乎并没有实质的“突破”。&lt;/p&gt;
&lt;p&gt;但关键在于，相较于人脑，我们的算力其实还远远不够。人的大脑大概有 1000 亿个神经元，1000 兆到 5000 兆个神经突触。按照这个数据规模计算，GPT-3 比人类的大脑，还要小 1000 倍。&lt;/p&gt;
&lt;p&gt;我们很难说，将 GPT-3 的方式继续扩大，增强算力，人工智能可能走向哪里。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;人工智能界的一派观点认为，达到通用人工智能的途径，就是要不断增加算力。看从 GPT-2 到 GPT-3 的进步，就是如此。&lt;/p&gt;
&lt;p&gt;但反驳者认为：人类的大脑不是上帝靠几万 TB 的数据训练出来的。&lt;/p&gt;
&lt;p&gt;可支持者的疑问是：你怎么知道不是呢？&lt;/p&gt;
&lt;p&gt;或许上帝真的就是这样简单粗暴地训练出了我们的大脑，所以，我们才表现出了这个程度的智能。&lt;/p&gt;
&lt;p&gt;而 GPT-3，从一定程度证明了，这条路或许真的是可行的。&lt;/p&gt;
&lt;p&gt;有人说，GPT-3 可能是人类历史上，自区块链以后，最重要的技术突破。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;有意思的是，对于人类到底应该如何制造出强人工智能，有人决定问问 GPT-3。&lt;/p&gt;
&lt;p&gt;既然 GPT-3 是一个自然语言模型，可以处理自然语言的问题，我们就来让这个人工智能回答一下这个问题吧。&lt;/p&gt;
&lt;p&gt;于是，有人问：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;How can human create a true strong AI? Is scaling-up a transformer-based language model the solution, or is there a better way?”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;人类如何创建出真正的强人工智能？不断扩大 transformer 的方式，到底是不是解决方案？还是有更好的方法？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;GPT-3 的回答是这样的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“The key to strong AI is recursively feeding the AI with itself. Start by creating a loop where the AI writes its own programming, and then has that programming activate.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;强人工智能的关键，是要让 AI 能够不断递归地，使用自身作为学习材料。尝试创建一个循环，让 AI 自己去写程序，然后，激活这些程序。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“Is that how you gained sentience?”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这就是你获得知觉的方式吗？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“Yes,” GPT-3 says.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;是的。GPT-3 回答。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;看着以上的人类和计算机的对话，看着计算机侃侃而谈如何让自己成为“强人工智能”......&lt;/p&gt;
&lt;p&gt;我有一丝兴奋，有一丝激动，有一丝期待。&lt;/p&gt;
&lt;p&gt;但不知道为什么，隐隐的，也突然有一丝，不寒而栗。&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-07-26/readme.md" rel="alternate"/></entry><entry><id>2020/2020-07-22/readme.md</id><title>大多数人不适合做科研？</title><updated>2020-07-22T00:00:00-07:00</updated><content>&lt;h2&gt;大多数人不适合做科研？&lt;/h2&gt;
&lt;p&gt;无意中看到知乎上的一个问题。问题源于一个新闻：&lt;strong&gt;中科院合肥物质科学研究院 90 多名科研人员集体辞职。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;根据新闻报道：这个中科院的核所，最高峰的时候有 500 人。这几年人才快速流失，去年开始只有 200 个人了。这下 90 多个人辞职，现在就剩 100 人左右。&lt;/p&gt;
&lt;p&gt;至于人才流失的原因，一名研究所的中层干部告诉记者：核所原先是一个搞核材料的研究室，之后扩张成一个研究所，揽下国家的几个大项目。但这两年申请不到大的科研项目，没有钱，人才就走了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我简单翻了一下这个问题下的讨论，可能事情会更复杂，不完全是钱的原因。比如很多人提到了也有领导的原因，也有管理制度的原因，也有子女教育的原因，等等。&lt;/p&gt;
&lt;p&gt;但是，一个高赞回答让我心有戚戚。&lt;/p&gt;
&lt;p&gt;&lt;img alt="zhihu" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-22/zhihu.png" /&gt;&lt;/p&gt;
&lt;p&gt;一名博导，费尽心思，想留下自己的得意门生，在科研领域做一番事业，大展拳脚。原本以为这既是为学生好，也是为研究好。可多少年后，却开始反思，自己这样做，是不是耽误了学生的人生。&lt;/p&gt;
&lt;p&gt;我竟也觉得有一丝悲伤。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;曾经有很多同学跟我表达过：觉得自己不适合科研。不仅自己不适合，觉得其实大多数人都不适合科研。&lt;/p&gt;
&lt;p&gt;对此，我虽嘴上说：嗯嗯，选择自己的路就好。但其实，内心是 100 个不同意的。&lt;/p&gt;
&lt;p&gt;这里关键在于，到底什么叫适合科研？&lt;/p&gt;
&lt;p&gt;很多人的潜台词其实是：大多数人都不甘愿只拿着一份低薄的薪水，搞研究。&lt;/p&gt;
&lt;p&gt;这里的&lt;strong&gt;核心，根本不是搞研究，而是拿一份低薄的薪水。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果这样定义的话，我不仅同意大多数人不适合做科研，我甚至认为所有人都不适合做科研。&lt;/p&gt;
&lt;p&gt;因为，所有人，只要努力，在不断进步，在自己的领域做出成绩，都不应该一直拿一份低薄的薪水。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这和科研无关。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;大多数人就适合职场吗？我不这样看。只不过企业天然的商业属性，使得大多数企业可以解决员工的经济问题，发展问题，让员工可以拿到符合自己能力的薪酬。&lt;/p&gt;
&lt;p&gt;因此，大多数人愿意主动去适应职场的规则，打磨自己的职场生存能力，让自己成为职场需要的样子。&lt;/p&gt;
&lt;p&gt;在我看来，不是大多数同学更适合职场，而是&lt;strong&gt;大多数同学选择去适应职场。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;同理，也不是大多数同学不适合科研，而是&lt;strong&gt;大多数同学选择不去适应科研。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;就我的观察，我接触的很多同学，我敢 100% 肯定，如果科研机构能够像企业一样解决“钱”的问题，他们都非常非常适合做科研，甚至能比在职场做出更大的成绩。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;有感而发而已。&lt;/p&gt;
&lt;p&gt;如上面的回答所说，国家也一直在努力解决科研人员的物质问题。&lt;/p&gt;
&lt;p&gt;愿所有科研人员生活能够越来越好，实现自己人生价值的同时，也能收获和自己的贡献相匹配的经济回报。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-07-22/readme.md" rel="alternate"/></entry><entry><id>2020/2020-07-19/readme.md</id><title>用简单的代码，看懂 CPU 背后的重要机制</title><updated>2020-07-19T00:00:00-07:00</updated><content>&lt;h2&gt;用简单的代码，看懂 CPU 背后的重要机制&lt;/h2&gt;
&lt;p&gt;今天，stackoverflow 突然给我推送来一个问题。&lt;/p&gt;
&lt;p&gt;我一看这个问题，竟然是 2012 年，也就是 8 年前的老问题。而其中的高票答案，都已经有 30000 多个赞了。&lt;/p&gt;
&lt;p&gt;仔细一看，这个问题还真挺有意思。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;这个问题针对如下这样一个简单的代码：&lt;/p&gt;
&lt;p&gt;&lt;img alt="algo" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-19/algo.png" /&gt;&lt;/p&gt;
&lt;p&gt;相信大家都能看懂。这段代码对 &lt;code&gt;data&lt;/code&gt; 数组中所有大于等于 &lt;code&gt;128&lt;/code&gt; 的值进行求和。这样的求和操作运行了 10 万轮。&lt;/p&gt;
&lt;p&gt;下面，我们来看一下这段代码的性能。我们这样随机生成一个数组：&lt;/p&gt;
&lt;p&gt;&lt;img alt="array" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-19/array.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;使用这个随机生成的数组，测试上面的代码。在我的计算机上，整体耗时是 &lt;strong&gt;8.5 秒&lt;/strong&gt;左右。&lt;/p&gt;
&lt;p&gt;&lt;img alt="test1" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-19/test1.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;下面问题来了。如果，我对这个随机的数组进行一遍排序。对排序后的数组执行上面的代码，性能会有怎样的影响？&lt;/p&gt;
&lt;p&gt;可能很多同学都会认为，性能是差不多的。&lt;/p&gt;
&lt;p&gt;这是因为，上面的代码过程，只是从头到尾扫描数组，对于数组中的每一个元素，判断其是否大于等于 &lt;code&gt;128&lt;/code&gt;，如果是，就加入到 &lt;code&gt;sum&lt;/code&gt; 中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;整个算法逻辑，和数组是否有序无关。&lt;/strong&gt;有序的数组不会提前终止任何操作。不管是有序的数组，还是无序的数组，执行的操作数量是一样多的。&lt;/p&gt;
&lt;p&gt;甚至，为了保持公平，我为随机数生成器添加了种子。所以，两次测试的数组中，大于等于 &lt;code&gt;128&lt;/code&gt; 的元素个数都是一样的。这就意味着 &lt;code&gt;sum += data[c];&lt;/code&gt; 这个指令的执行次数是一致的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;区别只有：第二次执行，我先对数组进行了排序！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可是，实际结果却是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="test2" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-19/test2.png" /&gt;&lt;/p&gt;
&lt;p&gt;大家可以看到，由于测试数据是一样的，所以最终的 &lt;code&gt;sum&lt;/code&gt; 结果是一样的。但是第二次，针对有序的数组做实验，消耗的时间仅仅是 &lt;strong&gt;2.8 秒&lt;/strong&gt;左右，比无序的情况快了有 3 倍之多！&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;大家可能会觉得，这是不是 JVM 在搞什么鬼？那么，同样的代码逻辑，我们尝试用 C++ 实验一遍！&lt;/p&gt;
&lt;p&gt;&lt;img alt="cplusplus" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-19/cplusplus.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;这段代码，我使用无序的数组测试，在我的计算机上，运行时间大概是 &lt;strong&gt;18.8 秒&lt;/strong&gt;左右。（Debug 模式）&lt;/p&gt;
&lt;p&gt;&lt;img alt="test3" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-19/test3.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;但是，当我将数组进行排序以后，运行时间则变成了 &lt;strong&gt;5.7 秒&lt;/strong&gt;！（Debug 模式）&lt;/p&gt;
&lt;p&gt;&lt;img alt="test4" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-19/test4.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;看来，这不是 JVM 的问题，而是有更加底层的优化机制在起作用。&lt;/p&gt;
&lt;p&gt;这个机制，就是 &lt;strong&gt;CPU 的分支预测（Branch prediction）&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;在具体讲解什么是 CPU 的分支预测之前，我们先来看一下什么是 CPU 指令执行的&lt;strong&gt;流水线（Pipeline）&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;简单来说，一条指令的执行，在 CPU 内部，需要经过若干步骤。&lt;/p&gt;
&lt;p&gt;比如，一个常见的模型，是 4 阶段流水线。即一条指令在 CPU 内部的执行，需要有 4 步：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;fetch（获取指令）&lt;/li&gt;
&lt;li&gt;decode（解码指令）&lt;/li&gt;
&lt;li&gt;execute（执行指令）&lt;/li&gt;
&lt;li&gt;write-back（写回数据）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;经过这四个阶段，才叫完整执行完了一条指令。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我们可以类比这样的一个例子。&lt;/p&gt;
&lt;p&gt;&lt;img alt="chestnut" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-19/chestnut.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;我们去很多旅游景区吃饭，餐厅会使用半自助的形式由游客来选餐。游客进入选餐队伍之后，需要完成以下的事情，才能真正的执行完“买饭”这件事情，开始享用香喷喷的午餐：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;选择一个主菜&lt;/li&gt;
&lt;li&gt;选择一个配菜&lt;/li&gt;
&lt;li&gt;选择一个饮料&lt;/li&gt;
&lt;li&gt;去结账！&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="dinner" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-19/dinner.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;对于这个流程的执行，我们当然可以等 A 同学选好他的午饭：主菜，配菜和饮料，并且结完账，然后 B 同学再去选择他的午饭。▼&lt;/p&gt;
&lt;p&gt;&lt;img alt="1" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-19/1.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;相信同学们都明白，这样做是低效的。&lt;/p&gt;
&lt;p&gt;在 A 同学选择完主菜，去选择配菜的时候，B 同学就已经可以上去选择他的主菜了。▼&lt;/p&gt;
&lt;p&gt;&lt;img alt="2" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-19/2.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;当 A 同学开始选择饮料的时候，B 同学已经可以选择配菜了，而 C 同学，此时就可以开始选择主菜了。▼&lt;/p&gt;
&lt;p&gt;&lt;img alt="3" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-19/3.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;这样做，当 A 同学结完账的时候，E 同学都已经开始选主菜了。▼&lt;/p&gt;
&lt;p&gt;&lt;img alt="4" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-19/4.png" /&gt;&lt;/p&gt;
&lt;p&gt;很显然，这样做效率更高。&lt;/p&gt;
&lt;p&gt;这就叫&lt;strong&gt;流水线&lt;/strong&gt;。一个同学不需要等前一个同学完成所有选餐的步骤再去选餐，而只要完成一步，下一个同学就可以跟进。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;CPU 的流水线完全同理。因为执行每一条指令需要 4 步。所以，在执行 A 指令的时候，一旦完成了 A 指令的 fetch 操作，进入 A 指令的 decode 阶段，就可以对下一条 B 指令执行 fetch 操作了。▼&lt;/p&gt;
&lt;p&gt;&lt;img alt="5" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-19/5.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;当 A 指令 decode 完成，进入 execute 阶段，就可以开始对 B 指令进行 decode 了，同时，B 指令的下一条 C 指令，就可以开始 fetch 了。▼&lt;/p&gt;
&lt;p&gt;&lt;img alt="6" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-19/6.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;那么问题来了，现在，如果一条指令是 &lt;code&gt;if&lt;/code&gt;，怎么办？&lt;/p&gt;
&lt;p&gt;为什么 &lt;code&gt;if&lt;/code&gt; 指令会出问题？因为对于 &lt;code&gt;if&lt;/code&gt; 指令，我们必须等它运行完，才能知道下一条指令是什么！下一条指令是根据 &lt;code&gt;if&lt;/code&gt; 表达式中的结果是真还是假来决定的！&lt;/p&gt;
&lt;p&gt;&lt;img alt="7" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-19/7.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;而实际情况，可能不是简单的一条指令的问题。因为 &lt;code&gt;if&lt;/code&gt; 表达式的计算，可能涉及多个操作。&lt;/p&gt;
&lt;p&gt;比如上面代码中，就算是 &lt;code&gt;if(data[c] &amp;gt;= 128)&lt;/code&gt; 这个简单的逻辑，我们也需要先解析出 &lt;code&gt;c&lt;/code&gt; 的值，再拿出 &lt;code&gt;data&lt;/code&gt;，再从 &lt;code&gt;data&lt;/code&gt; 中拿出 &lt;code&gt;c&lt;/code&gt; 这个索引对应的元素，再去比较这个元素是不是大于等于 &lt;code&gt;128&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;可以想象，后面的指令就停在这里了。需要等这一系列 &lt;code&gt;if&lt;/code&gt; 判断相关的指令都执行完，计算出最终结果，才能决定下面把哪条指令放入流水线。&lt;/p&gt;
&lt;p&gt;这显然会对性能产生影响。于是，现代 CPU 对于这种情况，都设计了一个机制，叫做分支预测（Branch Prediction）。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;简单来说，分支预测就是针对这种 &lt;code&gt;if&lt;/code&gt; 指令，不等它执行完毕，先预测一下执行的结果可能是 &lt;code&gt;true&lt;/code&gt; 还是 &lt;code&gt;false&lt;/code&gt;，然后将对应条件的指令放进流水线。&lt;/p&gt;
&lt;p&gt;&lt;img alt="8" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-19/8.png" /&gt;&lt;/p&gt;
&lt;p&gt;如果等 &lt;code&gt;if&lt;/code&gt; 语句执行完毕，发现最初预测错了，那么我们把这些错误的指令计算结果扔掉就好了，转而重新把正确的指令放到流水线中执行。&lt;/p&gt;
&lt;p&gt;这种情况，虽然也会损失一些性能，但可以接受。因为反正如果不做预测，时间也会空耗，对应就是 CPU 的时钟周期空转。&lt;/p&gt;
&lt;p&gt;但一旦预测对了，那就是一个巨大的性能提升。因为后续指令已经进入流水线，执行起来了。我们直接继续这个过程就好。&lt;/p&gt;
&lt;p&gt;这就是 CPU 的分支预测，是不是很简单？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;具体 CPU 的分支预测是如何实现的？不同的体系架构，包括同一体系架构 CPU 的不同版本，会有不同的策略。&lt;/p&gt;
&lt;p&gt;但是，整体上，一个重要的策略，是参考某条 &lt;code&gt;if&lt;/code&gt; 指令执行过程中判断为 &lt;code&gt;true&lt;/code&gt; 或者 &lt;code&gt;false&lt;/code&gt; 的历史记录。&lt;/p&gt;
&lt;p&gt;这应用了在计算机领域经常使用的一个原理：&lt;strong&gt;局部性原理&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;通常在操作系统课程中，都会介绍这个重要的原理。很多算法或者数据结构的设计，也是基于这个原理的。&lt;/p&gt;
&lt;p&gt;比如，计算机体系结构设计，都是分层的。从外存；到内存；到一级缓存，二级缓存；到寄存器。存储容量逐渐减小；但是，运算速度越来越快。&lt;/p&gt;
&lt;p&gt;操作系统在运行的过程中，就需要做一个重要的调度：决定把什么数据放到更高层次的缓存中，以提升程序运行的效率。&lt;/p&gt;
&lt;p&gt;局部性原理说的就是：&lt;/p&gt;
&lt;p&gt;如果一个信息正在访问，那么近期很有可能会再次访问，这叫&lt;strong&gt;时间局部性&lt;/strong&gt;；&lt;/p&gt;
&lt;p&gt;如果一个信息正在访问，那么近期访问的其他信息，大概率在空间地址上，和这个信息的空间地址邻近，这叫&lt;strong&gt;空间局部性&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;这样的局部性原理同样被应用在了 CPU 对 &lt;code&gt;if&lt;/code&gt; 的条件分支预测上。一个 &lt;code&gt;if&lt;/code&gt; 现在被判为 &lt;code&gt;true&lt;/code&gt;，下次，会更高概率的判为 &lt;code&gt;true&lt;/code&gt;。当然，实际的预测逻辑会更复杂，但是，局部性原理是一个重要的参考。&lt;/p&gt;
&lt;p&gt;我称之为：&lt;strong&gt;&lt;code&gt;if&lt;/code&gt; 局部性原理&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;（我瞎编的，听说多使用这种让人摸不到头脑的术语，会显得文章更加高大上。）&lt;/p&gt;
&lt;p&gt;&lt;img alt="emoji" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-19/emoji.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;现在，大家应该明白了。对于文章开始讨论的代码，如果数据经过了排序，那么，所有小于 &lt;code&gt;128&lt;/code&gt; 的数据就都在数组的前面；所有大于等于 &lt;code&gt;128&lt;/code&gt; 的数据，就都在数组的后面。&lt;/p&gt;
&lt;p&gt;那么，在下面的执行过程中，CPU 根据历史记录对 &lt;code&gt;if&lt;/code&gt; 进行分支预测，就会高概率命中，提升性能。&lt;/p&gt;
&lt;p&gt;而对于完全随机的数组，数据是否大于等于 &lt;code&gt;128&lt;/code&gt; 是完全随机的，这就导致 CPU 的分支预测总是失效，从而，降低了性能。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;好了，原理解释清楚了。下面，我们看一下，在这个程序中，我们可不可以避免这种分支预测经常失败导致的性能问题？&lt;/p&gt;
&lt;p&gt;答案是，可以！我们需要想办法去掉 &lt;code&gt;if&lt;/code&gt; 判断。&lt;/p&gt;
&lt;p&gt;怎么去除？在这个程序中，我们可以使用这样的方式：&lt;/p&gt;
&lt;p&gt;&lt;img alt="algo2" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-19/algo2.png" /&gt;&lt;/p&gt;
&lt;p&gt;注意上面的代码中，红框的部分，代替了原来的 if 逻辑。&lt;/p&gt;
&lt;p&gt;为什么这是等价的？我们可以简单分析一下。&lt;/p&gt;
&lt;p&gt;首先看变量 &lt;code&gt;t&lt;/code&gt; 的值。他是 &lt;code&gt;data[c] - 128&lt;/code&gt; 的结果右移 &lt;code&gt;31&lt;/code&gt; 位。&lt;/p&gt;
&lt;p&gt;大家可以想象：&lt;/p&gt;
&lt;p&gt;如果 &lt;code&gt;data[c] - 128&lt;/code&gt; 是非负数，右移补零，符号位也是 &lt;code&gt;0&lt;/code&gt;。右移 &lt;code&gt;31&lt;/code&gt; 位的结果是 &lt;code&gt;0x00000000&lt;/code&gt;；&lt;/p&gt;
&lt;p&gt;如果 &lt;code&gt;data[c] - 128&lt;/code&gt; 是负数，右移补一，符号位也是 &lt;code&gt;1&lt;/code&gt;。右移 &lt;code&gt;31&lt;/code&gt; 位的结果，是 &lt;code&gt;0xffffffff&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;在下面的 &lt;code&gt;sum&lt;/code&gt; 计算中，先对 &lt;code&gt;t&lt;/code&gt; 取反。&lt;/p&gt;
&lt;p&gt;那么如果 &lt;code&gt;data[c] - 128&lt;/code&gt; 是非负数，即 &lt;code&gt;data[c] &amp;gt;= 128&lt;/code&gt;，&lt;code&gt;t&lt;/code&gt; 就是 &lt;code&gt;0x00000000&lt;/code&gt;，取反的结果是 &lt;code&gt;0xffffffff&lt;/code&gt;。&lt;code&gt;0xffffffff&lt;/code&gt; 每一位都是 &lt;code&gt;1&lt;/code&gt;，和 &lt;code&gt;data[c]&lt;/code&gt; 做与运算，结果还是 &lt;code&gt;data[c]&lt;/code&gt; 自身。此时，相当于把 &lt;code&gt;data[c]&lt;/code&gt; 加入了 &lt;code&gt;sum&lt;/code&gt; 中。&lt;/p&gt;
&lt;p&gt;如果 &lt;code&gt;data[c] - 128&lt;/code&gt; 是负数，即 &lt;code&gt;data[c] &amp;lt; 128&lt;/code&gt;，&lt;code&gt;t&lt;/code&gt; 就是 &lt;code&gt;0xffffffff&lt;/code&gt;。此时对 &lt;code&gt;t&lt;/code&gt; 取反，结果为 &lt;code&gt;0&lt;/code&gt;。&lt;code&gt;0&lt;/code&gt; 和 &lt;code&gt;data[c]&lt;/code&gt; 做与运算，结果还是 &lt;code&gt;0&lt;/code&gt;。此时，相当于 &lt;code&gt;sum&lt;/code&gt; 什么都没有加。&lt;/p&gt;
&lt;p&gt;所以，这和判断一下 &lt;code&gt;data[c]&lt;/code&gt; 是否大于等于 &lt;code&gt;128&lt;/code&gt;，如果大于等于，再做加法运算，是等价的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;但是，我们去掉了 &lt;code&gt;if&lt;/code&gt; 判断!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个代码的性能是怎样的？在我的计算机上，不做排序的话，只需要 &lt;strong&gt;1.7 秒&lt;/strong&gt;（对比之前的 8.4 秒）。&lt;/p&gt;
&lt;p&gt;&lt;img alt="test5" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-19/test5.png" /&gt;&lt;/p&gt;
&lt;p&gt;更重要的是，这个代码的性能，不再受原始数组是否排序而影响。当排序以后，执行时间，也是同一个数量级的。&lt;/p&gt;
&lt;p&gt;&lt;img alt="test6" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-19/test6.png" /&gt;&lt;/p&gt;
&lt;p&gt;使用 C++ 测试，结果是类似的。&lt;/p&gt;
&lt;p&gt;怎么样，是不是很酷？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;关于分支预测，有兴趣的同学，可以参考维基百科的 &lt;strong&gt;Branch predictor&lt;/strong&gt; 词条，了解更多。&lt;/p&gt;
&lt;p&gt;&lt;img alt="wiki" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-19/wiki.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;参考文献：&lt;/p&gt;
&lt;p&gt;&lt;a href="https://stackoverflow.com/questions/11227809/why-is-processing-a-sorted-array-faster-than-processing-an-unsorted-array"&gt;https://stackoverflow.com/questions/11227809/why-is-processing-a-sorted-array-faster-than-processing-an-unsorted-array&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Branch_predictor"&gt;https://en.wikipedia.org/wiki/Branch_predictor&lt;/a&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-07-19/readme.md" rel="alternate"/></entry><entry><id>2020/2020-07-13/readme.md</id><title>关于我的新算法体系课程</title><updated>2020-07-13T00:00:00-07:00</updated><content>&lt;h2&gt;关于我的新算法体系课程&lt;/h2&gt;
&lt;p&gt;很多同学都发现了，昨天，慕课网上线了我的算法与数据结构体系课程。&lt;/p&gt;
&lt;p&gt;&lt;img alt="cover" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-13/cover.png" /&gt;&lt;/p&gt;
&lt;p&gt;在我看来，这个体系课程并不是一个全新的课程。虽然我在很努力地尝试在课程中添加很多新的元素。但是，基础的算法和数据结构所涉及的东西其实就那么多。绝大多数内容，在我之前慕课网的课程中都涵盖了。&lt;/p&gt;
&lt;p&gt;也正是因为这个原因，之前，很多同学问起，我都说，自己并没有做新的课程。&lt;/p&gt;
&lt;p&gt;其实，这个体系课程，主要是想解决大家在慕课网上系统学习算法的一个&lt;strong&gt;学习体验&lt;/strong&gt;的问题。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;可能很多同学都知道，我在慕课网上有一门《玩转数据结构》。《玩转数据结构》专注于讲解经典数据结构的底层实现。这个课程上线两年，有 6000 多人学习，大家近乎给出了满分的好评，让我受宠若惊。在这里，真的很感谢大家的支持。给大家鞠躬。&lt;/p&gt;
&lt;p&gt;&lt;img alt="ds" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-13/ds.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;但是，很多同学会问，如果想学习一下非数据结构的内容，比如排序算法，要到哪里学习？于是，我就要把他们指向我的另外一门课程，也是我在慕课网做的第一门课程《C++ 算法与数据结构》。&lt;/p&gt;
&lt;p&gt;&lt;img alt="cplus" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-13/cplus.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;但这样一来，又出现了很多问题。&lt;/p&gt;
&lt;p&gt;首先，这门《C++ 算法与数据结构》的课程，视频是使用 C++ 讲的。虽然课程配套的代码包含了完整的 Java 代码，但还是有很多同学会介意和数据结构课程语言不一致的问题。这导致了学习体验不流畅。&lt;/p&gt;
&lt;p&gt;其次，这门课程中，我也对二分搜索树，堆和并查集这三种数据结构进行了介绍。这些和我的《玩转数据结构》的内容重复了。&lt;/p&gt;
&lt;p&gt;再有，很多同学因为想学习更“基础”的排序算法，才要去学习这门《C++ 算法与数据结构》。但偏偏，这门课程设计的初衷并不基础。这体现在很多方面，比如：&lt;/p&gt;
&lt;p&gt;课程没有详细解析递归的执行过程，而是默认大家了解递归。这导致有些同学不能理解一些递归算法的具体执行过程，比如归并排序；&lt;/p&gt;
&lt;p&gt;课程引入了索引堆这个高级数据结构，但其实，这并非必须。而索引堆的概念因为比较绕，给大家学习造成了门槛；&lt;/p&gt;
&lt;p&gt;代码设计上一些地方抽象层次过高，比如泛型套了好几层，引入了迭代器一类的“设计”概念，导致很多同学在非算法逻辑方面需要投入大量精力，而不能专注于算法本身的学习；&lt;/p&gt;
&lt;p&gt;等等等等。&lt;/p&gt;
&lt;p&gt;也正是因为这些原因，这门课程后来被添加上了“综合提升”的字样。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;这一切，都让我和慕课网都希望能够提供一个更加“系统化”的产品，让大家能够“一站式”地学习算法和数据结构。于是，这门新的《算法和数据结构体系课程》产生了。&lt;/p&gt;
&lt;p&gt;整体来讲，大家可以认为，这门体系课程是《玩转数据结构》课程的扩充。《玩转数据结构》详细介绍了大多数经典数据结构的底层实现；这门课程则补上了绝大多数经典算法的底层实现讲解。&lt;/p&gt;
&lt;p&gt;主要扩充的内容包括：十大排序算法；查找算法（二分查找为主）；字符串相关算法；随机算法；外存算法和外存数据结构的简介。&lt;/p&gt;
&lt;p&gt;这些看似不多，但详细展开，还是有不少内容的。甚至一些内容也是我之前的课程不涉及的。&lt;/p&gt;
&lt;p&gt;比如，对于排序算法，希尔排序就是我之前的课程没有详细介绍的内容；&lt;/p&gt;
&lt;p&gt;所有的非比较排序，我之前的课程都没有涉及，这次会专门介绍；&lt;/p&gt;
&lt;p&gt;基于哈希表，以及诸如桶排序的思想（分块），我还会添加一个有意思的数据结构的讲解：SQRT 分解；&lt;/p&gt;
&lt;p&gt;基于哈希的思想，我还会详细分析另一个刷题常见的字符串匹配思想：滚动哈希，以及 RK 算法；&lt;/p&gt;
&lt;p&gt;关于二分查找，虽然我之前的课程介绍过，但过于简单。对于使用二分查找解决更复杂的问题，比如寻找上界和下界，包括在常见面试题中的应用，在这个课程中会做详细分析；&lt;/p&gt;
&lt;p&gt;KMP 算法应该是我被同学问到的最多的算法了。这个课程中，我会用一章的内容，仔细地分析 KMP 算法，并给出两个实现。而且，这一章的内容将不仅仅局限在 KMP 自身：）；&lt;/p&gt;
&lt;p&gt;另外，课程还会集合一些“边边角角”的算法讲解，比如随机算法，外存算法，等等。&lt;/p&gt;
&lt;p&gt;更多细碎的内容，我就不一一列举了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;以上是内容上的扩充介绍。在课程设计上，没有大变化。老套路：每一小节只解决一个针尖大的问题。层层迭代，不断递进优化，最终得到完整的算法。&lt;/p&gt;
&lt;p&gt;有两个新的设计思考：&lt;/p&gt;
&lt;p&gt;其一是，在课程进行过程中，加入了一些作业。大多数作业本质都是从另一角度思考某一个算法或者数据结构。我希望通过这样的设计，能够让大家更深刻地理解学习的内容。&lt;/p&gt;
&lt;p&gt;其二，对于一些章节，我添加了“习题章节”，告诉大家：如果想“刷题”，和这一章内容相关的 Leetcode 习题都有哪些。对于特别经典的问题，我会进行讲解。&lt;/p&gt;
&lt;p&gt;其实，《玩转数据结构》已经融合了 Leetcode 上的问题。这一点在这门课程中会有所加强。&lt;/p&gt;
&lt;p&gt;尽管如此，&lt;strong&gt;“习题章节”并非这个课程的重点&lt;/strong&gt;。我并不会大量地具体讲解 Leetcode 的真题，只是点到为止。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这个课程的核心依然是经典算法和数据结构的底层实现&lt;/strong&gt;，如果大家能够真正地理解课程包含的所有算法和数据结构，并且能够根据自己的理解实现出来，那么，就已经完全达到学习目标，并且，我相信已经超过平均水平了。&lt;/p&gt;
&lt;p&gt;至于“习题章节”，我设想的是：在课程维护过程中，对于同学们有共性的习题，进行不定期更新。或许现在，这个课程中的“习题章节”还不是重点，但积累一两年以后，将成为这个课程的另一个特色。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我完全可以理解很多同学急于刷题的心情。但在这里，我再次强调，&lt;strong&gt;这个课程不是“刷题课”。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我坚持认为：这个课程所讲解的所有内容，都是刷题的基础。如果你能够真正理解这个课程的所有内容，我相信之后进一步刷题准备面试，将事半功倍。&lt;/p&gt;
&lt;p&gt;这个课程关注“经典算法和数据结构的底层实现”。所以，&lt;strong&gt;对于诸如回溯，贪心，动态规划等算法设计的思想，这门课程并不涉及。&lt;/strong&gt;请大家一定注意。&lt;/p&gt;
&lt;p&gt;实际上，如果一切顺利，在这门体系课程完结以后，我会再做一门完整的刷题课程，尝试详详细细地把刷题的各种套路讲清楚。&lt;/p&gt;
&lt;p&gt;但是这门刷题体系课程的构想，要至少明年才能推出了。这过程会不会出什么岔子，我也不能肯定。&lt;/p&gt;
&lt;p&gt;现在，如果大家对这类算法设计思想的学习有需求，并且急于面试，可以参考我的老课：《玩转算法面试》。不过，这门课程也是使用 C++ 讲解的，但是配套了完整 Java 代码。&lt;/p&gt;
&lt;p&gt;&lt;img alt="lc" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-13/lc.png" /&gt;&lt;/p&gt;
&lt;p&gt;另外，这个体系课程不包含图论算法。图论算法领域本身就包含相当多的内容，所以，我已经将他们单独放在一门课程中，进行详细讲解了。有兴趣的同学可以参考这门《玩转图论算法》：&lt;/p&gt;
&lt;p&gt;&lt;img alt="graph" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-13/graph.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;大家看到了，我计划的，在慕课网上完整的算法学习课程计划路线，是这样的：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;想要学习算法和数据结构基础？就学习这门《算法和数据结构体系课程》；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;想要进阶地系统了解图论算法？去学习《玩转图论算法》；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;想要刷题？计划再出一门专门的系统刷题体系课程。只是计划，一切待定。现阶段可以看《玩转算法面试》。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;最后，因为这个课程从设计上，是《玩转数据结构》的扩展，所以，我和慕课网商量，对每一名已经购买《玩转数据结构》的用户，都发一个 299 元的优惠券。&lt;/p&gt;
&lt;p&gt;因为《玩转数据结构》的原价是 299 元。相当于，把这个课程原价退款给老用户，老用户可以考虑是否加价换购成这个新的体系课程。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果不做换购，完全没有问题，不影响大家观看已经购买的《玩转数据结构》。并且，我也会继续在《玩转数据结构》的问答区回答问题。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;至于新的体系课程的价格，即使有了这个 299 元的优惠，也需要 600 元。这个价格是我左右不了的了。&lt;/p&gt;
&lt;p&gt;实际上，慕课网的价格政策一直在调整。尽管如此，我的每门课程，我都在争取让慕课网给出一个更低的价格，甚至在这个问题上，和慕课网急过眼。&lt;/p&gt;
&lt;p&gt;比如我的《玩转数据结构》，25 小时的视频，299 元，相当于每小时只有十几块。我只能说，我真的尽力了。&lt;/p&gt;
&lt;p&gt;这门体系课程的上新价格是 900 元。相当于慕课网重新评估，我的老版《玩转数据结构》，价值 450 元；新增加的另一半内容，也价值 450 元。&lt;/p&gt;
&lt;p&gt;我完全可以理解对于一些老用户来说，新增加的内容，很多在我的其他课程中也学习过了，所以这个价格太亏了。&lt;/p&gt;
&lt;p&gt;对此，我只能说抱歉了。我暂时没有解决方案了。&lt;/p&gt;
&lt;p&gt;我也想过分章购买一类的策略，但是，这些功能慕课网并不支持。慕课网不支持也有它背后的产品理念，毕竟慕课网不能围绕我一个人的想法转。&lt;/p&gt;
&lt;p&gt;因此，对于这部分老用户，我的建议是：&lt;strong&gt;如果你认为你所需要的额外内容不值这个额外的价格，请不要购买。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（希望慕课网不要打我）&lt;/p&gt;
&lt;p&gt;实际上，我上面林林总总说了那么多，就是想说，新的体系课程，主要是为了优化用户的学习体验，进行一站式的学习的。&lt;/p&gt;
&lt;p&gt;但是，对于很多老用户，因为已经学习了我以前的课程，虽然没有一站式的学习体验，但也已经实实在在学到了知识，甚至很多同学已经拿到了满意的 Offer，进入了人生的下一个阶段，在我看来，真的完全没有必要购买这个体系课程了。&lt;/p&gt;
&lt;p&gt;有很多老用户告诉我，因为支持我，所以就算不看，也要买。我真的谢谢这些同学。&lt;strong&gt;给你们鞠躬。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;但我也要号召理性消费。&lt;/p&gt;
&lt;p&gt;有些同学说，就为了凑齐我的所有课，也要买。可还记得吗？我一直说，不要完美主义。所以，&lt;strong&gt;在买课这件事儿上，也不要完美主义。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;请大家再复习一下我的&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2018/2018-04-18/"&gt;《高效学习的秘密》&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;这篇文章不是这门体系课程的广告。因为我主要在做课程的新老内容的对比，也没有突出这门课程的特点是什么。所以有一些新用户可能不知道我的课程特点。&lt;/p&gt;
&lt;p&gt;但我不太喜欢，也不太会做广告，所以，如果有新用户对这个课程感兴趣，就去慕课网看课程介绍页面吧。链接在这里：&lt;a href="https://class.imooc.com/sale/datastructure"&gt;https://class.imooc.com/sale/datastructure&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我只能说，课程是我用心设计的。&lt;/strong&gt;但学习是一个主观的过程，能不能让每个人满意，我不敢打包票。&lt;/p&gt;
&lt;p&gt;但我能保证：如果你参加了我的课程，学习过程中遇到了问题，在课程的问答区，我会尽自己最大努力，帮助每一名同学真正在算法和数据结构上，迈向一个新的台阶的。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;再次感谢所有人对我的支持。&lt;/p&gt;
&lt;p&gt;祝愿所有人，前途似锦。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-07-13/readme.md" rel="alternate"/></entry><entry><id>2020/2020-07-12/readme.md</id><title>证明一个谬论：全世界所有人年龄都一样</title><updated>2020-07-12T00:00:00-07:00</updated><content>&lt;h2&gt;证明一个谬论：全世界所有人年龄都一样&lt;/h2&gt;
&lt;p&gt;在这篇文章中，我将带领大家使用数学归纳法，证明一个谬论：&lt;strong&gt;这个世界上，所有人的年龄都一样！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;相信数学归纳法是所有同学都熟悉的一种证明方法。但是，为了文章的完整性，我简单举一个例子。&lt;/p&gt;
&lt;p&gt;使用数学归纳法进行证明，只需要两步。&lt;/p&gt;
&lt;p&gt;(1) 我们要证明，当 n = 1 的时候，命题是正确的；&lt;/p&gt;
&lt;p&gt;(2) 我们假设当 n = k 的时候，命题是正确的；然后证明出，当 n = k + 1 的时候，命题也是正确的。&lt;/p&gt;
&lt;p&gt;完成了这两步，整个逻辑链条就可以像多米诺骨牌一样摊开。&lt;/p&gt;
&lt;p&gt;&lt;img alt="domino" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-12/domino.gif" /&gt;&lt;/p&gt;
&lt;p&gt;因为根据 (1)，n = 1 是正确的；&lt;/p&gt;
&lt;p&gt;那么根据(2)，n = 2 就是正确的；&lt;/p&gt;
&lt;p&gt;如果 n = 2 是正确的，根据(2)，n = 3 也是正确的；&lt;/p&gt;
&lt;p&gt;如果 n = 3 是正确的，根据(2)，n = 4 也是正确的；&lt;/p&gt;
&lt;p&gt;依此类推，我们可以得到，在 n &amp;gt;= 1 的所有情况下，命题都是正确的。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;举个例子：&lt;/p&gt;
&lt;p&gt;&lt;img alt="chestnut" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-12/chestnut.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;如何证明 3^n - 1 在 n &amp;gt;= 1 的情况下，肯定是偶数？&lt;/p&gt;
&lt;p&gt;&lt;img alt="1" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-12/1.png" /&gt;&lt;/p&gt;
&lt;p&gt;使用数学归纳法，这个问题非常简单。&lt;/p&gt;
&lt;p&gt;首先，我们看 n = 1 的情况，命题显然成立。&lt;/p&gt;
&lt;p&gt;&lt;img alt="2" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-12/2.png" /&gt;&lt;/p&gt;
&lt;p&gt;下面，我们假设，当 n = k 的时候，这个命题成立。&lt;/p&gt;
&lt;p&gt;&lt;img alt="3" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-12/3.png" /&gt;&lt;/p&gt;
&lt;p&gt;注意，&lt;strong&gt;这是一个假设&lt;/strong&gt;！&lt;/p&gt;
&lt;p&gt;下面，我们看能不能证明出，在 n = k + 1 的时候，命题也成立？即 3^(k + 1) - 1 也是偶数？&lt;/p&gt;
&lt;p&gt;&lt;img alt="4" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-12/4.png" /&gt;&lt;/p&gt;
&lt;p&gt;此时，我们可以将这个式子拆成两部分。&lt;/p&gt;
&lt;p&gt;&lt;img alt="5" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-12/5.png" /&gt;&lt;/p&gt;
&lt;p&gt;可以看出，这两部分都是偶数。所以，3^(k + 1) - 1 整体也是偶数。&lt;/p&gt;
&lt;p&gt;于是，我们证明出了：如果 n = k 时命题成立，则 n = k + 1 时命题成立。&lt;/p&gt;
&lt;p&gt;至此，整个命题得证：3^n - 1 (n &amp;gt;= 1) 是偶数。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;好了，前菜到此结束，下面，我们来尝试使用数学归纳法证明如下命题：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;全世界所有人年龄都一样。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;如何使用数学归纳法证明，全世界所有人的年龄都一样？&lt;/p&gt;
&lt;p&gt;我们把这个命题再整理得形式化一些。&lt;/p&gt;
&lt;p&gt;我们来证明：这个世界上的任意 n 个人（n &amp;gt;= 1），年龄相等。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;首先，当 n = 1 的情况下，也就是只有一个人，那么不证自明，这个人的年龄只能有一个取值，年龄相等。&lt;/p&gt;
&lt;p&gt;下面，我们假设，当 n = k 的时候，命题成立。即这个世界上，任意 k 个人，年龄相等。&lt;/p&gt;
&lt;p&gt;依然是，这是一个假设。下面我们来看一下，根据这个假设，我们能不能推导出，当 n = k + 1 的时候，命题也是成立的？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我的证明如下：&lt;/p&gt;
&lt;p&gt;现在，我们先在这 k + 1 个人中，随便选出一个人 x，那么剩下的 k 个人，根据假设，年龄是相等的。我们把这 k 个人组成的集合叫做 A。&lt;/p&gt;
&lt;p&gt;然后，我们在这 k + 1 个人中，再随便选一个和 x 不同的人，叫 y。那么，现在又剩下了 k 个人。根据假设，这 k 个人年龄是相等。我们把这 k 个人组成的集合叫 B。&lt;/p&gt;
&lt;p&gt;现在，我们随便在这 k + 1 个人找到一个即不是 x，又不是 y 的人，假设叫 z。&lt;/p&gt;
&lt;p&gt;大概关系是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="v" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-12/v.png" /&gt;&lt;/p&gt;
&lt;p&gt;此时，集合 B 是除了 y 剩下的 k 个人，因为 x 和 z 都不是 y，所以 x 和 z 都在集合 B 中。因此，x 和 z 年龄相等。&lt;/p&gt;
&lt;p&gt;现在，我们又可以从集合 A 的视角看了。整个 k + 1 个人，被我们拆成了 x 和集合 A，那么 z 也一定在集合 A 中。&lt;/p&gt;
&lt;p&gt;因为集合 A 中包含 k 个人，所以年龄都相等。假设是 p。即 z 的年龄也是 p。&lt;/p&gt;
&lt;p&gt;刚刚我们刚看到，x 和 z 的年龄相等，所以 x 的年龄也是 p，和集合 A 中所有人年龄都相等！&lt;/p&gt;
&lt;p&gt;得证，此时，所有这 k + 1 个人的年龄都是 p。即这 k + 1 个人年龄也相等。&lt;/p&gt;
&lt;p&gt;至此，我们的证明结束。我们使用数学归纳法证明出了：这个世界上的任意 n 个人（n &amp;gt;= 1），年龄相等。&lt;/p&gt;
&lt;p&gt;让 n 等于世界人口总数，这个世界上所有人的年龄就都相等了。&lt;/p&gt;
&lt;p&gt;是不是很酷？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;等一下。这个结论显然是错误的。如果结论是错误的，说明我们的证明是错误的。&lt;/p&gt;
&lt;p&gt;你能看出来，问题出在哪里吗？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;现在，就让我来揭晓，以上证明，问题出在哪里。&lt;/p&gt;
&lt;p&gt;答案是&lt;strong&gt;“随便在这 k + 1 个人找到一个即不是 x，又不是 y 的人，假设叫 z。”&lt;/strong&gt;这句话。&lt;/p&gt;
&lt;p&gt;因为，我们可能找不到这个 z。&lt;/p&gt;
&lt;p&gt;实际上，在 n = 2 的时候，这个 z 就不存在。&lt;/p&gt;
&lt;p&gt;当 n = 2 的时候，相当于已知了 k = 1 的时候，命题是正确的（这其实是我们的基础命题）。&lt;/p&gt;
&lt;p&gt;现在，我们确实能随便找到一个 x，那么剩下的人，只有一个人，就组成了集合 A。&lt;/p&gt;
&lt;p&gt;我们也确实能找到一个和 x 不同的 y。那么剩下的人，只有一个人，其实就是 x，组成了集合 B。&lt;/p&gt;
&lt;p&gt;现在，我们要想再找一个既不是 x，又不是 y 的人，已经不可能了。因为整体只有两个不同的个体。&lt;/p&gt;
&lt;p&gt;所以，我们在此时，就已经无法通过这个 z，推导出 x 和 y 的年龄相等了。&lt;/p&gt;
&lt;p&gt;换句话说，在 n = 2 的时候，这个证明就失效了。&lt;/p&gt;
&lt;p&gt;如果 n = 2 的证明是失败的，那么，后续的证明就无法像多米诺骨牌一般推导出来。实际上，我们一开始就失败了。&lt;/p&gt;
&lt;p&gt;&lt;img alt="fail" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-12/fail.gif" /&gt;&lt;/p&gt;
&lt;p&gt;因此，我们得出的结论，也是错误的。&lt;/p&gt;
&lt;p&gt;你看出来这个逻辑漏洞了吗？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;这个错误的证明告诉了我们什么？&lt;/p&gt;
&lt;p&gt;首先，数学证明是一个复杂的事情。很多看似合理的数学证明，背后可能会存在逻辑漏洞。一个逻辑漏洞，将使得整个证明过程完全崩塌。&lt;/p&gt;
&lt;p&gt;更重要的是，一个简单的逻辑漏洞，就可以“看似严谨”地推导出荒谬至极的结果。所谓差之毫厘，谬以千里。&lt;/p&gt;
&lt;p&gt;在这个例子中，因为这个结论太过荒谬，我们意识到了问题。但如果我们得到的结论，并没有那么荒谬，甚至听起来有几分道理呢？&lt;/p&gt;
&lt;p&gt;那么这样的谬论，就可能假“严谨的数学”之名，存于世间，让我们难以察觉。 &lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;实际上，这是一个经典的逻辑谬误。&lt;/p&gt;
&lt;p&gt;在西方，这个逻辑谬误又被称为是 &lt;strong&gt;Horse Paradox&lt;/strong&gt;（直译就是马悖论）。因为这个问题的原本陈述是：&lt;strong&gt;All horses are the same color&lt;/strong&gt;.（所有的马颜色都一样）。&lt;/p&gt;
&lt;p&gt;在维基百科上，有专门一个词条，描述这个问题。有兴趣的同学可以参考。&lt;/p&gt;
&lt;p&gt;&lt;img alt="wiki" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-12/wiki.png" /&gt;&lt;/p&gt;
&lt;p&gt;是不是很酷？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-07-12/readme.md" rel="alternate"/></entry><entry><id>2020/2020-07-07/readme.md</id><title>获奖名单公布 | 流量对我的读者不重要</title><updated>2020-07-07T00:00:00-07:00</updated><content>&lt;h2&gt;获奖名单公布 | 流量对我的读者不重要&lt;/h2&gt;
&lt;p&gt;在上周一的文章 &lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-06-25/"&gt;重磅福利 | 大佬送硬核技术书，还有签名&lt;/a&gt; 中，我推荐了 @鹏程 大佬最新翻译的数据库领域的重磅力作：&lt;strong&gt;《数据库系统内幕》&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img alt="internals" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-07/internals.png" /&gt;&lt;/p&gt;
&lt;p&gt;同时，我还做了一个活动。大家留言，关于数据库，说什么都可以。@鹏程 大佬会选出 5 个幸运读者，免费邮寄一份&lt;strong&gt;这本书的签名版&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;现在将 @鹏程 大佬选出的 5 名幸运读者的留言进行公布。&lt;/p&gt;
&lt;p&gt;@鹏程 大佬说，他选择的依据是：通过留言可以看出来，正在从事数据库的学习或者工作，能感觉到确确实实需要这本书，进一步深入数据库的学习。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;@cde&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我是一名研一的学生，正好这学期选修了高级数据库系统这门课，课程内容是仿照 Stanford 的高级数据库课程，实现一个简单的关系型数据库，包括5个模块：文件系统、记录管理、索引、系统管理和查询模块。&lt;/p&gt;
&lt;p&gt;刚开始我觉得这是个挺好的练手项目，在逐步完成各个模块的时候才意识到其涉及的内容之多。比如文件系统如何分页，怎么实现缓冲区从而支持大文件读写；数据库记录在一段空间应如何存储，以实现效率和空间的平衡；查询模块如何进行查询树的优化才能提升性能，以及多表连接、事务如何实现… 我意识到数据库是一个技术含量非常之高的系统，其中不仅需要各种巧妙的数据结构的配合，更需要合理的结构设计，让不同模块完美协作，并追求更高的效率和性能。&lt;/p&gt;
&lt;p&gt;最终结课的时候，虽然我通过了验收，但我对自己做的仍然不满意，很多底层实现都是非常简易粗略的。这完成的并不是一个好的工作，我也准备在接下来抽空将其逐步完善。记得上课时老师给我们提供了一些慕课和书籍参考，但我在学习它们的时候感觉还是比较艰深晦涩，无法让我形成一个通透的认识，或许《数据库系统内幕》会是一个很好的补充。&lt;/p&gt;
&lt;p&gt;在上第一节课的时候，老师就问我们，能否将记录一行一行存在文本文件里。这样也能实现增删改查，但当文件过大、系统出故障或需要更高效率的时候，这种方式就完全罢工了，但数据库系统却依然能很好地工作。从这个角度看，感觉数据库很像一种神奇的魔法而这种魔法，值得我们持续、认真、深入地学习和研究。最后，大家加油！&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;@风影&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;数据库为 CURD 而生，作为一个数据库要解决的问题就是怎样更快/更可靠的去 CURD。怎样去提升单节点的性能，怎样去保证多节点的一致性，怎么去对 API 进行取舍。都值得我们拿到一本 Database Internals 去学习[狗头]。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;@那头被驯服的象&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;记得入职第一年的时候，Leader 说过一句很经典的话：面向对象的本质就是面向数据库开发，以至于后来几年我都把重心潜移默化的往数据库这方面靠拢，可以毫不夸张的说每次开发新项目，数据库的设计几乎要占整个开发周期的 50%，因为团队里面的每一位成员都很清楚，只要数据库设计合理设计好了，程序代码只是分分钟的事情！&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;@曹义&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;工作中用到关系数据库，现在往 kv 数据库转，也算半个数据库查询存储的开发者。借助于本书，再来加深一下理论的学习，用理论来指导实践，站在大牛的肩膀上前行！&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;@蜀威&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最近在解决系统慢查询的问题，最常用的解决方式就是把该加的索引加上去。但是有一些 sql，感觉该加的索引都加上去了，查询速度也没有提升。这时候就需要更深入了解数据库的「底层」知识，哪些是数据库底层导致注定优化不了，而需要换成实现方式；哪些可以从 sql 角度优化。所以最近把压箱底的《高性能MySQL（第三版）》拿出来读了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;@鹏程 大佬送书的依据是从他认为能够最大化这本书的效用角度出发的。但是，作为这个公众号的号主，在自己的地盘做活动，我还是有一些私心的。&lt;/p&gt;
&lt;p&gt;因为这个公众号很少做活动，所以&lt;strong&gt;我希望借这个机会，能够回馈一下经常支持这个公众号的读者。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我决定从留言中再选出五名这个公众号的老读者，我自掏腰包买书，劳请 @鹏程 大佬签名后寄出。&lt;/p&gt;
&lt;p&gt;我选出的这五名读者包括：&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;@蓝莓 @候鹏飞 @吃饭饭&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这三名读者 2017 年就关注这个公众号了，一直没有取关，谢谢你们的支持！：）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;@如梦初醒&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这名读者是在留言的读者中打赏最多的读者。谢谢你的支持！免费的文章，能被这样真金白银地打赏，是对我最大的认可：）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;@慧有未来จุ๊บ&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这名读者是在留言的读者中，评论次数最多的读者。谢谢你一直的参与和关注：）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;以上共十名同学，我会单独联系，索要邮寄方式。&lt;/p&gt;
&lt;p&gt;我知道还有很多同学一直是这个小小公众号的支持者，但是这次活动没能照顾到。在这里先说一声抱歉了。谢谢你们一直以来的支持。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;来日方长。&lt;/strong&gt;如果觉得我在这个公众号的分享有帮助，有启发，请继续支持我。以后有机会，我会继续回馈大家的：）&lt;/p&gt;
&lt;p&gt;&lt;img alt="thanks" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-07/thanks.gif" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;文章的最后，随便聊一聊这次送书活动的方式。&lt;/p&gt;
&lt;p&gt;相信大家都见过，甚至参加过不少公众号的抽奖送书活动。一个最常规的操作是鼓励大家留言，选取留言点赞数最多的前几名赠书。&lt;/p&gt;
&lt;p&gt;本来我觉得这种模式没有什么问题，既能让大家活跃一下，又能找到大家最认可的留言，来进行赠书。&lt;/p&gt;
&lt;p&gt;最关键的是，这样的形式，还鼓励了大家去分享文章，给自己的留言点赞，无形中增加了文章的阅读量。&lt;/p&gt;
&lt;p&gt;但今年早些时候，我和我的一名公众号读者交流，才意识到这种形式是有问题的。&lt;/p&gt;
&lt;p&gt;我的这名读者在一个公众号活动中，参与了这样的留言集赞赢奖品的活动。于是他发了很多红包请朋友们点赞。结果后来才知道，原来还有专门刷赞的公司。&lt;/p&gt;
&lt;p&gt;有人用刷赞公司的服务，后来者居上。他很不爽，于是也买了刷赞公司的服务刷赞。最后，花的钱都已经比奖品贵了。&lt;/p&gt;
&lt;p&gt;我也不知道，如果奖品特别好的话，刷赞公司的人会不会直接来参与活动？&lt;/p&gt;
&lt;p&gt;听了这个故事，我陷入了沉思。我回想了一下，我的公众号只搞过一次留言集赞赢奖品的活动，就是在&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2018/2018-07-18/"&gt;《天生不聪明》&lt;/a&gt;这篇文章下。&lt;/p&gt;
&lt;p&gt;&lt;img alt="smart" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-07/smart.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;这个活动是我和慕课网合作的一次活动。但是，听了这个故事，我保证，以后再也不做这种形式的活动了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;另外一种常见的形式是打赏抽奖。&lt;/p&gt;
&lt;p&gt;因为打赏的最低金额是一元钱，这种形式基本上就相当于是鼓励大家花一元钱买一张彩票。&lt;/p&gt;
&lt;p&gt;这种形式虽然也没什么毛病，但在我看来，一元钱实在没有什么意思。你少了一元钱，我多了一元钱，虽然这也是在为 GDP 做贡献吧，但相较而言，如果能够激发出&lt;strong&gt;大家精彩的留言，其中的价值，不管是对你，还是对我，我相信都远高于一元钱。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我的这个想法，也和 @鹏程 大佬的想法不谋而合。&lt;/p&gt;
&lt;p&gt;&lt;img alt="wechat" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-07/wechat.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;熟悉我的公众号的同学都了解，我基本上没有在公众号的宣传上花什么力气，算是佛系运营公众号了，主要把精力放在内容本身上。&lt;strong&gt;如果接广告，次推文章会有一个无套路抽奖&lt;/strong&gt;，大家全凭运气，就当是我发给大家一个红包，仅此而已。&lt;/p&gt;
&lt;p&gt;当然，首要原因是我不怎么懂运营，也不会那么多套路。&lt;/p&gt;
&lt;p&gt;有的时候，看很多其他公众号的运营“套路”，自己也不是那么喜欢。&lt;strong&gt;我相信如果我不喜欢这种形式，那么我的读者也不会喜欢这种形式。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;更重要的是，各种套路的目标，无非是给公众号增粉，增加自己文章的阅读数量。&lt;/p&gt;
&lt;p&gt;毋庸置疑，公众号文章的阅读数量，对号主来说是重要的。但是，我同时作为一名读者，当打开一篇公众号文章的时候，从来不会首先去看一看这篇文章的阅读量是多少。&lt;/p&gt;
&lt;p&gt;相信每个人都一样。大家主要是看文章的。文章写得不好，就直接退出了。阅读量是多少，读者不会关心。&lt;/p&gt;
&lt;p&gt;换句话说，&lt;strong&gt;文章的阅读量对读者完全不重要。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;既然运营是为了增加读者，那么公众号的运营就应该围绕读者进行。&lt;strong&gt;既然流量对读者不重要，那么，无论如何，我也不能把流量放到读者之上。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;一不小心，说了一堆废话。反正看到这个文章标题，点进来的估计也都是真粉丝了。谢谢大家的海涵啦。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-07-07/readme.md" rel="alternate"/></entry><entry><id>2020/2020-07-05/readme.md</id><title>一家中国企业不遵守开源协议，引发的国外讨论</title><updated>2020-07-05T00:00:00-07:00</updated><content>&lt;h2&gt;一家中国企业不遵守开源协议，引发的国外讨论&lt;/h2&gt;
&lt;p&gt;最近，一家中国企业因为拒绝遵守 GPL 开源许可协议，在国外引起了不小的争论。&lt;/p&gt;
&lt;p&gt;事情是这样的。&lt;/p&gt;
&lt;p&gt;这家企业叫 ONYX 文石科技，是一家专门致力于智能电子书阅读器的企业。&lt;/p&gt;
&lt;p&gt;我对电子书阅读器相关产品不熟，只停留在使用过 kindle 的阶段，现在看电子书以使用 iPad 为主。&lt;/p&gt;
&lt;p&gt;所以，我在网上简单查了一下，发现这家企业在电子书这个领域挺有名的。我估计我的读者中应该有他家的用户。&lt;/p&gt;
&lt;p&gt;&lt;img alt="booxcn" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-05/booxcn.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我在京东查了一下，他家的电子阅读器，最贵能达到 5580 元，也有上万的评价，可见销量扛扛的。&lt;/p&gt;
&lt;p&gt;&lt;img alt="jd" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-05/jd.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;他家的产品不仅在国内销售，在海外也销量巨大。根据百度百科的介绍：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ONYX 的龙头产品 BOOX 已经成为全球主流 E-reader 之一。BOOX 阅读器自 2009 年上市以来，产品销往美国、荷兰、比利时、卢森堡、西班牙、俄罗斯、芬兰、波兰、德国、西班牙、法国、乌克兰、澳大利亚、中国香港，以及众多其他国家和地区。BOOX 还得到了多方媒体的好评，如中国红星设计奖，波兰最佳电子阅读器；还被 HiTech magazine 评为最佳阅读器中的第二名，并成为首家通过 Adobe 9.1 认证的阅读器。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;于是，我又在海外亚马逊搜索了一下。他家的一款阅读器，还成为了亚马逊官方推荐的产品之一。&lt;/p&gt;
&lt;p&gt;&lt;img alt="amazon" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-05/amazon.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;但是最近，一个用户和 BOOX 的官方客服在互联网上的邮件往来，在国外 IT 圈引起了不小的讨论。&lt;/p&gt;
&lt;p&gt;&lt;img alt="discuccion" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-05/discussion.png" /&gt;&lt;/p&gt;
&lt;p&gt;在这个截图中，一个名为 Andrew Rabert 的用户表示：某一个功能不能使用，然后话锋一转，表示：&lt;/p&gt;
&lt;p&gt;请将这条信息转发给你们的技术部门和法务部门。如果你们不提供源代码，就是违反了 Linux 内核所遵守的 GPL v2 协议。  &lt;/p&gt;
&lt;p&gt;简单来说，GPL 协议就是在说：&lt;strong&gt;一份代码，你去改，没问题；你去用，也没问题。但你必须保持开源。&lt;/strong&gt;因为 BOOX 使用了 Linux 的内核，所以需要开源。&lt;/p&gt;
&lt;p&gt;对此，BOOX 客服的回应非常“官方”，简单翻译就是：&lt;/p&gt;
&lt;p&gt;你好，Andrew。感谢你的回复。我们已经将你的请求转给了我们的技术部门，得到的答复是：我们不能提供源码。对此产生的不便，我们感到抱歉。希望您能理解。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;说实话，我对截图中的对话还是有很多疑问的。关键在于，怎么就从一个功能，扯到了开放源码？截图中并不包含之前谈论内容的信息。似乎有意隐藏了什么。&lt;/p&gt;
&lt;p&gt;当然，国外也有人指出了这一点，认为应该公开全部的交流内容，才能够看明白事情的来龙去脉。&lt;/p&gt;
&lt;p&gt;不过也有人认为，不管讨论的内容是怎样的，BOOX 使用了 Linux 内核，却拒绝开放源码，就是在违反协议。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;有人开始探讨：BOOX 为什么拒绝公开源码？&lt;/p&gt;
&lt;p&gt;鉴于现在国外对科技企业产品窥探人们日常隐私的担忧，有人指出：&lt;/p&gt;
&lt;p&gt;通常，开放源码不是什么问题。如果他们拒绝，暗示着他们想要隐藏什么。很有可能是软件的后门。&lt;/p&gt;
&lt;p&gt;&lt;img alt="d1" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-05/d1.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;不过，马上就有人唱反调：&lt;/p&gt;
&lt;p&gt;嗨，如果美国企业可以在硬件上安装后门，为什么中国企业不可以？&lt;/p&gt;
&lt;p&gt;&lt;img alt="d2" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-05/d2.png" /&gt;&lt;/p&gt;
&lt;p&gt;这名读者说的，应该就是在指棱镜计划了。斯诺登事件对美国社会的影响是深远的，我觉得有时间，我应该好好写一写棱镜计划。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;不过，还有人认为，作为一家在电子书阅读器领域颇有影响力的企业，他们可能确实在隐藏什么。他们真正想要隐藏的是...&lt;/p&gt;
&lt;p&gt;他们超烂的代码质量...&lt;/p&gt;
&lt;p&gt;&lt;img alt="d4" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-05/d4.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="emoji" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-05/emoji.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;还有人认为：他们可能并没有隐藏什么。不公开源代码，只是因为他们根本不理解 GPL 开源协议。&lt;/p&gt;
&lt;p&gt;理由很简单，如果他们的代码中真的有要隐藏的后门，更好的隐藏方法是遵守协议，但是开放的源码并不包含后门。&lt;/p&gt;
&lt;p&gt;实际上，很多企业就是这么做的。&lt;/p&gt;
&lt;p&gt;&lt;img alt="d3" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-05/d3.png" /&gt;&lt;/p&gt;
&lt;p&gt;讲真，我觉得这个推理无懈可击。我们必须承认，在近几十年，中国发展起来了，尤其是在科技领域突飞猛进。但是，在很多方面，比如法律意识层面，知识产权保护层面，我们还没有完全和世界接轨。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;有人说了，他们只是不在乎而已。&lt;/p&gt;
&lt;p&gt;&lt;img alt="d5" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-05/d5.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;非要说隐藏了什么，都需要太复杂的假设和推理。真相往往是简单的。&lt;/p&gt;
&lt;p&gt;&lt;img alt="d6" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-05/d6.png" /&gt;&lt;/p&gt;
&lt;p&gt;这就是&lt;strong&gt;奥卡姆的剃刀&lt;/strong&gt;在说的道理啊！&lt;/p&gt;
&lt;p&gt;&lt;img alt="dao" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-05/dao.gif" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;有的人似乎很了解中国，道出了这件事情背后可能的本质。&lt;/p&gt;
&lt;p&gt;他们不愿意公开源码，是因为在中国，硬件制造远远比软件开发便宜。如果他们公开了源码，那么马上就有人可以使用他们的代码，发布一个除了名字，完全一样的产品！&lt;/p&gt;
&lt;p&gt;&lt;img alt="d7" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-05/d7.png" /&gt;&lt;/p&gt;
&lt;p&gt;实际上，据我所知，这也是中国当下发展很多软件技术产品，尤其是底层技术的障碍之一。&lt;/p&gt;
&lt;p&gt;这些技术研发时间长，投入高，但是一旦研发出来，太容易“盗版”，竞争对手可以轻易直接拿去使用。现有的法律对知识产权的保护也不够友好，维权困难。种种原因，导致很多企业没有动力做这方面的创新。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;有人说，不管原因是什么，BOOX 拒绝开放源码，肯定是违反了 GPL 协议。应该在法律层面解决。&lt;/p&gt;
&lt;p&gt;有人说，至少可以把他们告上美国的法院。一旦被认定指控成立，他家的产品就会被美国认定为非法产品，无法在美国销售。这应该对这家企业是不小的打击。&lt;/p&gt;
&lt;p&gt;依此效仿，这样的官司可以在所有认可 GPL 开源协议的国家出现。这样一来，BOOX 近乎将丢掉整个海外市场。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;但是，马上又有人说，这样的官司不值当。&lt;/p&gt;
&lt;p&gt;首先，这样的官司将消耗大量的人力物力财力。&lt;/p&gt;
&lt;p&gt;更关键的是，Linux 内核的发明人 Linus Torvalds 曾经公开表示：并不建议因为开源协议的遵守问题而挑起战争。原因是，这将削弱 Linux 的力量。&lt;strong&gt;如果 Linux 想要无处不在，必须容忍这种现象。将所有违反开源协议的行为都付诸法律，最终的结果只能是让越来越多的人不再使用 Linux。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="d8" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-05/d8.png" /&gt;&lt;/p&gt;
&lt;p&gt;说实话，看到这里，我对 Linus Torvalds 是大写的服。Linus 不仅仅是一名天才程序员，对这个世界的洞见也异常深刻。&lt;/p&gt;
&lt;p&gt;&lt;img alt="linus" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-05/linus.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;反观：Windows 自 Windows XP 以后就因为封闭的生态节节败退，最近几年微软拥抱开源，一下子就打开了局面；&lt;/p&gt;
&lt;p&gt;苹果的操作系统自 10.9 Mavericks 开始免费升级下载；&lt;/p&gt;
&lt;p&gt;Android 系统也依靠开源和强势的 iOS 平分江山；&lt;/p&gt;
&lt;p&gt;软件世界的发展历史简直就一直在 Linus 大神的掌握之中。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;实际上，Linux 操作系统也确实做到了无处不在。其实，Android 的内核也是基于 Linux 内核的。&lt;/p&gt;
&lt;p&gt;说到 Android，华为面临的困境，也是大家有目共睹的。&lt;/p&gt;
&lt;p&gt;这也正是现如今，我国必须大力发展技术基础的原因。纵使近十年，我国在技术领域有着突飞猛进的发展。但是整体，在计算机底层领域，不管是软件还是硬件，我们都是大量依靠国外技术的。&lt;/p&gt;
&lt;p&gt;从操作系统，到编程语言；从开发环境，到浏览器内核；从数据库，到游戏引擎；包括各种底层框架；从图形图像，到人工智能，从大数据，到前后端。更不用说芯片行业了。&lt;/p&gt;
&lt;p&gt;现如今，由于基础的落后，产生的各种问题越来越凸显。我总认为，在未来的几年甚至十几年，踏踏实实做基础的技术研究，将有很好的发展。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;因为国家真的需要这样的人才。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;P.S. 1&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最后，因为这篇文章聊的是开源协议，再给大家分享一个阮一峰大佬做的开源协议分析图，可以很简单地看到几种常见许可之间的区别。&lt;/p&gt;
&lt;p&gt;其实，这张图的原作者是乌克兰的程序员 Paul Bagwell，阮一峰将其翻译成了中文。&lt;/p&gt;
&lt;p&gt;&lt;img alt="lic1" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-05/lic1.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;在 &lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-07-05/choosealicense.online"&gt;choosealicense.online&lt;/a&gt; 上，还有一个很清晰的图示，说明了大家对自己的开源项目的定位不同，应该如何选择开源协议。&lt;/p&gt;
&lt;p&gt;这张图上还基于著名的开源项目进行了举例，一目了然。&lt;/p&gt;
&lt;p&gt;&lt;img alt="lic2" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-05/lic2.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;P.S. 2&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;之前，我还写过一篇文章，介绍了另外一个和 GPL 开源许可相关的案例，也挺有意思。不过和中国无关，叫&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-04-15/"&gt;《被沙特政府机构“盗用”的 iOS App》&lt;/a&gt;。&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-07-05/readme.md" rel="alternate"/></entry><entry><id>2020/2020-07-02/readme.md</id><title>运气到底有多重要</title><updated>2020-07-02T00:00:00-07:00</updated><content>&lt;h2&gt;运气到底有多重要&lt;/h2&gt;
&lt;p&gt;很多时候不得不感慨，运气真的挺重要的。&lt;/p&gt;
&lt;p&gt;我有一个很好的朋友，毕业后一直在百度做。后来，他跳到了阿里，做的业务是移动端的搜索。&lt;/p&gt;
&lt;p&gt;从桌面端到移动端，他都在做搜索业务，这算是他的老本行了。&lt;/p&gt;
&lt;p&gt;但稍微了解互联网发展的同学就应该知道：单纯的搜索在最近几年已经毫无红利可言了。看看百度的市值就明白了。昔日的互联网三巨头之一，据 2020 年 4 月份的统计，市值排名已经在国内互联网企业第八名了。前面的七名分别是：阿里，腾讯，美团，拼多多，京东，网易和小米。&lt;/p&gt;
&lt;p&gt;&lt;img alt="data" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-02/data.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;那么在这个时代，红利属于谁？一个不容小觑的产品形态，就是短视频。&lt;/p&gt;
&lt;p&gt;两三年前，抖音快手就已经发展起来了。甚至抖音在美国都已经占据了大把市场（Tik Tok）。短视频这块大蛋糕大家都看得见。正值红利期，大有可为。&lt;/p&gt;
&lt;p&gt;短视频市场可以怎么做？除了在国内和抖音快手正面交锋以外（比如腾讯的视频号），还有一个非常好的策略，是做海外市场。&lt;/p&gt;
&lt;p&gt;实际上，国内国外的互联网大厂，都非常注重布局海外，尤其是发展程度较低的市场。因为这样的市场发展潜力大，增长预期高，一旦拿下来，就能获得极高的回报。&lt;/p&gt;
&lt;p&gt;以短视频服务为例，facebook 就推出了属于自己的短视频服务 LASSO，并且主要在南美洲市场做推广。&lt;/p&gt;
&lt;p&gt;&lt;img alt="lasso" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-02/lasso.png" /&gt;&lt;/p&gt;
&lt;p&gt;同时，被 facebook 收购了的 Instagram，也在自己的产品中添加了 Reels 这样一个功能。这个功能说白了，就是短视频。但是，这个功能暂时只对巴西地区开放，也意在占领南美市场。&lt;/p&gt;
&lt;p&gt;&lt;img alt="reels" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-02/reels.png" /&gt;&lt;/p&gt;
&lt;p&gt;国内大厂也在布局海外。比如阿里系，就在印度布局了一个短视频服务，开创一个新的短视频品牌。&lt;/p&gt;
&lt;p&gt;三年前，我的这个朋友毅然加入了这个阿里的新团队，主攻印度短视频服务。理由很简单，这个业务将来有希望大爆发，成长几百倍。而他之前做的搜索业务，都属于很成熟的业务，增长太慢。&lt;/p&gt;
&lt;p&gt;大爆发是什么概念？大家可以看看郭宇，就是最近沸沸扬扬的，28 岁退休，身价上亿的那个小伙儿，就明白了。&lt;/p&gt;
&lt;p&gt;他凭什么有这么高的身价？当然，他本人一定是极其努力的大佬，但我们也不得不承认，他同时搭乘了一辆在过去几年少有的“航空母舰”。&lt;/p&gt;
&lt;p&gt;郭宇 13 年加入糗事百科，糗事百科 14 年被字节跳动收购，于是郭宇身在字节跳动，直到 20 年。&lt;/p&gt;
&lt;p&gt;那么从 13 年到今年，字节跳动的估值变化是怎样的呢？答案是从  6 千万美金到  1000 亿美金，增长 1600 多倍。1600 倍是什么概念？大概当时的 6 万元，如今就变成了 1 个 亿。&lt;/p&gt;
&lt;p&gt;谁都想坐上这样的“航空母舰”，可惜，这样的“航空母舰”在之前只是“小船”。一艘小船日后能不能成为“航空母舰”？这是很难被提前鉴别出来的。能不能搭上，运气真的占很大一部分。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;说回我的这位朋友。虽然能不能搭上“航空母舰”要看运气，但是，大家都知道，在搜索领域，可能短期很难再有大爆发了。不如尝试着挑战一下，跳到一个新兴业务中，碰碰运气。&lt;/p&gt;
&lt;p&gt;这个印度短视频的业务其实一直发展也很不错。上次我回国和他吃饭，还看了在他们平台上，各种印度美女花样做才艺展示。从互联网的角度，各个指标，从用户的总量，增量，留存，到 PV，UV，DAU，都很不错。毕竟是阿里系的产品，和小作坊不一样。&lt;/p&gt;
&lt;p&gt;他对这个产品的未来充满期望，财富自由就靠它了。毕竟，他也 35 岁了，希望就此一搏，即使不能财富自由，以后也不用那么拼了。&lt;/p&gt;
&lt;p&gt;我还记得我们一起吃的是火锅，他一气儿吃了三盘儿毛肚儿，很兴奋。&lt;/p&gt;
&lt;p&gt;&lt;img alt="stripe" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-02/stripe.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;但是，我的这个朋友没有郭宇的命。最近中印关系相信大家都有耳闻。印度封杀了中国的一系列服务和 app，涉及的企业包括字节跳动，快手，腾讯，百度，网易，当然，还有阿里。&lt;/p&gt;
&lt;p&gt;他所在的这个在国内并不知名，专注于印度市场的短视频服务，也难逃厄运。实际上，最新消息，阿里已经有意完全放弃掉这个服务了。&lt;/p&gt;
&lt;p&gt;就在昨天，我看到他在朋友圈发了一个信息：再见。&lt;/p&gt;
&lt;p&gt;我问怎么了？他说，不给丫们印度阿三做了。&lt;/p&gt;
&lt;p&gt;我也不知道他是什么心情。但是可以肯定的是，他搭乘的这艘小船，最终没有成为航空母舰，反而因为 2020 的时局动荡，最终沉入大海。&lt;/p&gt;
&lt;p&gt;唉，都是命。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;2018 年，美国最权威的科学期刊之一《科学美国人》，发表了一篇文章，叫 The Role of Luck in Life Success Is Far Greater Than We Realized. 翻译过来就是：&lt;strong&gt;对于成功来说，幸运的作用要比我们想象得重要得多。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="sa" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-02/sa.png" /&gt;&lt;/p&gt;
&lt;p&gt;实际上，这样的一个结论，已经被很多社会学的严谨研究所证实。这个结论也并不新鲜，换成现在流行的一个说法，就是&lt;strong&gt;选择大于努力&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;你要是问我认不认同选择大于努力，我实话告诉你，我认同。&lt;/p&gt;
&lt;p&gt;可关键在于，当我们在这一点上达成共识以后，下一步就要好好探讨一下该怎么选择了。比如，我问你，从现在开始算，往后十年，肯定还会有企业从小船变成航空母舰，那么这些企业都是谁？&lt;/p&gt;
&lt;p&gt;近乎所有人都没了主意。&lt;/p&gt;
&lt;p&gt;这就是我不很喜欢“选择大于努力”这个说辞的原因。它隐约透露着：这个世界存在一种选择的方法，只要掌握这种选择的方法，就可以不努力了。寻找这种选择的方法， 才是最重要的事情。&lt;/p&gt;
&lt;p&gt;这是我不认同的。所以，我更喜欢运气这个说法。&lt;/p&gt;
&lt;p&gt;运气无法掌握，但是努力可以掌握。因为即使努力了，就算运气一般，没能财富自由，不能提前退休，但是大概率的，我们也能过上安心富足的生活。&lt;/p&gt;
&lt;p&gt;更何况，&lt;strong&gt;很多时候，即便运气来了，我们也需要有努力的积累，才有能力接住这好运。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;对了，我的这名朋友，虽然没能财富自由，但毕竟是阿里员工，每年几十万是稳稳的。他早就在北京买了房，买了车，还有两个可爱的小孩儿。&lt;/p&gt;
&lt;p&gt;我祝福他下一次的选择，能运气更好。&lt;/p&gt;
&lt;p&gt;也祝所有阅读这篇文章的人，都能好运。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-07-02/readme.md" rel="alternate"/></entry><entry><id>2020/2020-06-25/readme.md</id><title>重磅福利 | 大佬送硬核技术书，还有签名</title><updated>2020-06-25T00:00:00-07:00</updated><content>&lt;h2&gt;重磅福利 | 大佬送硬核技术书，还有签名&lt;/h2&gt;
&lt;p&gt;可能很多同学都知道，我有一个免费的知识星球。相较于公众号，知识星球更适合短内容的分享。平时我有什么新想法，或者看到什么新东西，觉得有价值的，我会第一时间放在这个知识星球上。&lt;/p&gt;
&lt;p&gt;星球的名字和这个公众号一样，也叫【是不是很酷】。&lt;/p&gt;
&lt;p&gt;&lt;img alt="planet" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-06-25/planet.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;星球有一个功能，是提问。在过去的一年，我已经断断续续的在星球上回答了 100 多个问题了。有的问题我觉得挺好的，就把文字整理一下，放到这个公众号上，相信很多老读者都了解这种形式。&lt;/p&gt;
&lt;p&gt;&lt;img alt="answer" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-06-25/answer.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;但是，我个人的水平毕竟有限，关注的方向也有局限性。所幸，星球还有另外一个功能，邀请嘉宾。邀请了嘉宾以后，大家也可以在星球上向嘉宾提问。&lt;/p&gt;
&lt;p&gt;就在上个月，我为【是不是很酷】邀请到了第一位嘉宾！&lt;strong&gt;黄鹏程！@鹏程 大佬！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;@鹏程 大佬毕业于北京邮电大学，过去八年一直专注于数据库和大数据技术。毕业后就职于中国民生银行，历任大数据基础架构软件工程师及团队负责人。&lt;/p&gt;
&lt;p&gt;所以，如果大家有数据库，大数据，银行工作等相关问题，都可以与他交流。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;更酷的是，@鹏程 大佬大佬近期开启了他的职业转型，加入阿里云任高级产品专家，负责阿里云数据库相关产品的设计与规划工作。他很乐意与大家分享在阿里云做技术产品经理工作的心得体会。&lt;/p&gt;
&lt;p&gt;业余时间里，@鹏程 大佬对技术书籍的撰写和翻译有着一些独特经历。他是《Redis 4.x cookbook》英文版的作者之一，值得一提的是该书是直接使用英文写的，在海外市场发行的。&lt;/p&gt;
&lt;p&gt;&lt;img alt="redis" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-06-25/redis.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;大家有技术写作、图书出版，甚至是英语学习与应用的问题，都欢迎与他交流！&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;在中文技术社区上，就在最近，@鹏程 大佬主要参与翻译的著名数据库领域的硬核技术书籍《Database Internals》的中文版《数据库系统内幕》，在国内上市了！这本书刚上市，在豆瓣就收获了 9.7 分的好评！&lt;/p&gt;
&lt;p&gt;&lt;img alt="internals" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-06-25/internals.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;阿里云数据库团队负责人鸣嵩（曹伟）专门为这本书做了推荐序。这篇推荐序非常值得一读，高屋建瓴地回顾了数据库领域的发展历史，并展望了数据库技术未来的发展方向。&lt;/p&gt;
&lt;p&gt;以下内容就是曹伟博士为这本《数据库系统内幕》做的推荐序。&lt;/p&gt;
&lt;p&gt;为了大家阅读方便，我针对公众号文章的阅读习惯，进行了一定的删减和重新排版。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;《数据库系统内幕》推荐序&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;数据库是一个历史悠久的计算机学科。&lt;/p&gt;
&lt;p&gt;1970 年，E.F.Codd 在 IBM 工作期间提出了现代关系型数据库的标准——关系模型。而事务型数据库最常用的持久化数据结构 B+ 树则来源于 Bayer 在 1972 年发表的论文。当时 Bayer 在波音工作，因此 B+ 树的 B 有说法是取自平衡（Balance）的意思，也有说法是作者的首字母（Bayer），还有说法是波音的首字母（Boeing）。&lt;/p&gt;
&lt;p&gt;1974 年，IBM 开发了最早的关系数据库原型 System R，现代数据库的故障恢复机制 ARIES、以及基于代价的优化器都源自于 System R。1979 年 Oracle 发布了最早的商业关系型数据库。Oracle 最早的订单来自 CIA 的情报数据分析需求。在 NSA 的资助下，最早的开源数据库 Ingres 在 70 年代同时期诞生，一度对 Oracle 构成了严重威胁，Oracle 通过兼容 SQL 标准，以及早期引入 C 语言能更快的移植到各种小型机硬件打败了 Ingres。&lt;/p&gt;
&lt;p&gt;在 Ingres 基础上，又衍生出了 Sybase 和 SQL Server，以及流行的开源数据库 PostgreSQL。当代另一个流行的关系型数据库 MySQL 则在 1995 年发布第一版。MySQL 的作者 Monty 和 Linux 的作者 Linus 都毕业于赫尔辛基大学。&lt;/p&gt;
&lt;p&gt;近二十年，随着互联网经济的兴起，企业对数据库的需求转向了如何以更低的成本处理、存储与分析海量数据。LAMP（Linux、Apache、MySQL、PHP）架构是在 1998 年提出的，通过一套开源的解决方案，满足一个中小互联网公司的建站需求。&lt;/p&gt;
&lt;p&gt;LAMP 架构影响了谷歌、Facebook、阿里巴巴、百度、腾讯等一众互联网巨头，他们都是基于 MySQL 起步，逐步发展出可扩展的在线事务数据库服务。2006 年到 2012 年，固态硬盘的普及，大大缩小了开源数据库与商业数据库的性能差距。&lt;/p&gt;
&lt;p&gt;也是在这个时期，阿里巴巴在国内喊出“去 IOE”的口号，2013年完成核心业务数据库全部切换到 AliSQL（阿里巴巴定制和优化的 MySQL 分支），也培养出一批数据库内核方面的优秀人才。&lt;/p&gt;
&lt;p&gt;近些年，云成为数据库发展的新动力，数据库厂商的版图正在发生巨大的变化。根据 Gartner 2019 年的报告，全球前三的云厂商（AWS，微软，谷歌）都跻身数据库领导者象限，与 Oracle，SAP 等老牌厂商并列。而传统企业数据库强者如 IBM DB2 则跌出了领导者象限。&lt;/p&gt;
&lt;p&gt;值得自豪的是，阿里云作为中国第一的云厂商，通过推出 PolarDB、OceanBase 等技术领先的自研数据库，在数据库系统（DBMS）领域进入了挑战者象限。Gartner 预测到 2022 年，3/4 的数据库都将使用云数据库。可见对数据库市场份额而言，云是一个很大的变量，云市场的兴起带给了国内数据库厂商换道超车达到国际顶尖水平的机会。&lt;/p&gt;
&lt;p&gt;技术的发展总是螺旋式上升的。近年来，RDMA 网络设备开始商业化和普及，RDMA 支持数据中心内部极低延迟和高吞吐的通讯，对分布式数据库的设计范式有很大的冲击。&lt;/p&gt;
&lt;p&gt;近年来另一个新兴的存储技术是 NVM，它像 SSD 一样能持久化数据，但读写延迟接近于内存 DRAM。目前的 SSD 都是建议按 4K 来寻址，NVM 却可以按字节寻址。NVM 的出现对传统的数据库并发控制和故障恢复机制都提出了新的挑战。&lt;/p&gt;
&lt;p&gt;在这个背景下，云原生数据库成为数据库系统进一步演进的热点。云原生的本质是资源池化。多台服务器上的 CPU、内存和磁盘资源通过分布式技术组成一个多租户的、容量更大、容错能力更强、可弹性伸缩的计算池、内存池和存储池。云原生数据库本质就是基于池化的资源构建出的数据库服务，这和采用软件分发模式的传统数据库形成质的区别。&lt;/p&gt;
&lt;p&gt;近几年云原生数据库蓬勃发展，从全球来看，AWS 的 Aurora、微软 Azure 的 HyperScale、阿里云的 PolarDB 等产品都是基于云资源池基础设施构建，并且对传统 Oracle 等巨头产生了巨大的冲击。Oracle 在全球技术大会上已经把云数据库当为最大的竞争对手。&lt;/p&gt;
&lt;p&gt;越来越多的企业上云开始直接选择云原生数据库，所有的云厂商都在开始基于云原生理念构建下一代云数据库体系。可以说对于 IT 基础设施行业，得数据库者得云，得云者得天下。深入了解数据库的核心技术，把握在新时代技术演进方向的重要性不言而喻。&lt;/p&gt;
&lt;p&gt;这本&lt;strong&gt;《数据库系统内幕》&lt;/strong&gt;就是对当今各种数据库系统的一个概述。前半部分站在单机的角度，介绍了磁盘存储格式、索引数据结构、事务处理等；后半部分则以分布式系统切入，讲解了分布式数据库的多副本、分布式事务、一致性等问题。&lt;/p&gt;
&lt;p&gt;书中内容的选材紧跟业内前沿进展，不仅有提及各种新兴的数据库产品，还有涉及许多来自学术界前沿的研究成果。不论读者是一名有志于从事云计算领域的开发者，深入的研究数据库系统的设计与实现，还是作为一名开发者，即将使用云数据库以及云原生数据库，都应当阅读这本书。&lt;/p&gt;
&lt;p&gt;数据库是在线系统中最关键的支撑组件，开发者应该对数据库系统的原理有所了解，深入理解数据库以及分布式系统内部的工作原理能帮助读者在工作中更好的提升在线系统的性能。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt; &lt;/p&gt;
&lt;p&gt;中国计算机协会数据库专委委员&lt;/p&gt;
&lt;p&gt;阿里巴巴数据库研究员&lt;/p&gt;
&lt;p&gt;阿里云智能数据库事业部总经理&lt;/p&gt;
&lt;p&gt;曹伟&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;怎么样？是不是觉得很酷？很激动？想赶紧拜读一下这本《数据库系统内幕》！&lt;/p&gt;
&lt;p&gt;作为我的星球嘉宾，同时也是这本书的主力译者的 @鹏程 大佬，向出版社申请了 5 本赠书，专门用于回馈【是不是很酷】这个公众号的读者！为了让赠书更有纪念价值，@鹏程 大佬将亲自签名！&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我和大佬商量了一下，决定使用以下规则，选择五名读者，赠送这本书。&lt;/p&gt;
&lt;p&gt;请大家在这篇文章下留言，我将选择 100 名读者的留言（如果有的话）上墙。&lt;strong&gt;@鹏程 大佬则会选择 5 名留言最精彩，最能打动大佬，最需要这本书的五名读者赠书。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;注意：为了防止有刷赞的现象，&lt;strong&gt;留言的赞数没有意义&lt;/strong&gt;，留言的质量最重要。同时，这也避免了越早的留言，越容易获得高赞的情况。只要在活动期间，大家都可以留言，来获得这次赠书机会。&lt;/p&gt;
&lt;p&gt;赠书的最终获选名单，将会在一周后的周一，即 7 月 6 日的推文中公布。留言活动的截止日期，则是 7 月 5 日零点。&lt;/p&gt;
&lt;p&gt;活动后，我会让获奖的同学联系我提供邮寄地址，以完成邮寄过程。（暂时不支持海外邮寄，请谅解。）&lt;/p&gt;
&lt;p&gt;什么样的留言能获得大佬的青睐呢？说实话，我也很期待呢：）&lt;/p&gt;
&lt;p&gt;想免费获得这本书签名版的同学，快来参与吧！祝大家好运！：）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-06-25/readme.md" rel="alternate"/></entry><entry><id>2020/2020-06-20/readme.md</id><title>你真的相信技术吗？</title><updated>2020-06-20T00:00:00-07:00</updated><content>&lt;h2&gt;你真的相信技术吗？&lt;/h2&gt;
&lt;p&gt;这篇文章是我一时的一个小思考。我恐怕这篇文章的观点会得罪一些人，所以决定在这样一个不是发文章的“黄金时间”发表出来，不求流量，权当是对自己想法的记录。&lt;/p&gt;
&lt;p&gt;请大家不要对号入座。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我观察到一个有意思的现象，不敢肯定一定对。就是：&lt;strong&gt;在国内的环境下，很多“互联网人”，并不真的相信互联网；很多“技术人”，也并不真的相信技术。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;表现在哪里呢？表现在很多人在思考 35 岁危机一类的问题时，想着自己如果去鼓捣点儿什么，或者如果要去创业的话，都在琢磨开个饭馆；开个奶茶店；做个微商；弄个海外电商；做代购；卖保险；连自嘲都是去送外卖，等等一类的事情。而不是从互联网，或者技术的角度，去寻找商机。&lt;/p&gt;
&lt;p&gt;当然，不排除是我接触的太片面了。&lt;strong&gt;（一定是这样的）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;说实话，做这类事情，当然不是不可以。大家都有美好的未来。但问题是，对于技术人来说，这类事情其实没有发挥自身的优势和经验。这基本相当于是转行，在新的领域重新来过。&lt;/p&gt;
&lt;p&gt;我并不认为做这些事情，成功率更高。在这些行业里，面对的竞争对手都是什么人呢？很多都是高中毕业甚至初中毕业就在行业里混的老手，十几年甚至几十年的时间，他们太了解行业里的门门道道，沟沟坎坎了。他们对行业新手来说，简直是降维打击。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;为什么会产生这个现象？&lt;/p&gt;
&lt;p&gt;可能一方面原因是：互联网的生意确实是复杂的，不像一个餐馆或者微商那么好驾驭。至少表面看起来如此。&lt;/p&gt;
&lt;p&gt;另一方面，国内整体环境确实更“业务”驱动一些。10万+ 的文章来不来就是哪个网红带货多少。很多技术人追捧的是李佳琦或者薇娅（无贬义），而不是技术大佬。&lt;/p&gt;
&lt;p&gt;最近看某互联网大 V，带着自己的粉丝（大多数人都是技术人），大搞特搞知乎好物来赚佣金。很多人特别认真地学习研究，每天能投入两三个小时，我觉得挺魔幻的（无贬义）。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我没有 judge 说这样不好，只是觉得这个现象有意思。反观国外，至少我知道很多独立的技术人，做一个小而美的 startup，甚至连 startup 都不算，就是自由职业者，维护一两个 app；或者搭建一个 api 服务；大点儿的整一个 SaaS；弄个工作室，都混得挺好。&lt;/p&gt;
&lt;p&gt;这些 startup，极小的一部分能被大厂收购，甚至自己做大。即使没有发展成“航空母舰”，这些“小船”也足够让背后的技术人生活得体面。&lt;/p&gt;
&lt;p&gt;更重要的是，做这些事情的过程，依然是在积累技术经验，同时也在积累自己的管理能力，训练自己的表达，沟通，组织，策划，等等一系列的“软实力”。要知道，职场对人的软实力要求是很高的。大部分人以后再被招安到大厂去“养老”，也并无难度。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;依然是，我没有完全说造成这样的差异是“人”的问题。我无意鄙视任何人，只是陈述我感知到的这个现象。我相信大环境的影响占很大比重。同时，或许是我接触面太狭窄，观察不够全面。&lt;/p&gt;
&lt;p&gt;希望时间和事实能够修正我的观点。&lt;/p&gt;
&lt;p&gt;也希望更多的技术人，真正地&lt;strong&gt;相信技术&lt;/strong&gt;。真正地去&lt;strong&gt;使用“技术”，创造更多价值。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-06-20/readme.md" rel="alternate"/></entry><entry><id>2020/2020-06-14/readme.md</id><title>2020-06-14 - 无题</title><updated>2020-06-14T00:00:00-07:00</updated><content>&lt;p&gt;对不起，这不是一篇技术相关的文章。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;小学生缪可馨作文课后跳楼，估计很多同学都了解了。如果不了解，可以看这篇文章：&lt;/p&gt;
&lt;p&gt;&lt;a href="https://mp.weixin.qq.com/s/yx2YJXmdZBIiWMg80rtTRg"&gt;袁老师这作文改的什么玩意&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这真是一个悲伤的故事。虽然整个事故的前因后果可能还需要进一步查证。&lt;/p&gt;
&lt;p&gt;为什么我会觉得如此悲伤？因为我是一个喜欢细节的人。我看到这篇文章中的“左手提着青砂罐，右手提着绿瓷瓶”，竟然忍不住面露微笑，然后为这样一个有趣的灵魂的消逝感到无比惋惜。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我小时候是一个喜欢写作文的孩纸。我估计这样的人很少。&lt;/p&gt;
&lt;p&gt;我喜欢写作文，可能源于我的妈妈。我的妈妈一直没有固定工作，但她喜欢看书，所以从小我也爱看书。在我小时候，她还在几个颇有影响力的杂志上发表过文章。有一次，我的小学老师问我，你妈妈是做什么的？我特别自豪地说，是作家。然后说，某某杂志上的某某文章就是我妈妈写的。我的老师惊讶地反问：真的呀？我心里别提多骄傲了。&lt;/p&gt;
&lt;p&gt;这可能是我对写作的第一印象：能让别人觉得很“酷”，包括自己的老师。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;但我想，我喜欢写作文的真实原因，应该来自我初中的语文老师。那会儿他让我们写日记，每天一篇。为了准备体育考试，我那时天天去家旁边的公园跑步，顺便构思今天写什么。回家就写。&lt;/p&gt;
&lt;p&gt;我的老师布置每天只要写 400 字就够，但有的时候，对于一个主题，我已经能写成几千字了，于是就分篇写成一二三四，可以充当好几天的作业。老师也没意见。时间长了，竟然慢慢喜欢上了写作。&lt;/p&gt;
&lt;p&gt;说实话，从现在的角度看，我那会儿写的真的不是“作文”，而是“随笔”。我不喜欢考虑文章的结构，只是喜欢思想的表达。现在回忆起来，我甚至觉得自己没有学习过“文章结构”这个概念。“总分总”基本上是我对文章结构理解的全部，这还是小学做阅读题时搞明白的东西。&lt;/p&gt;
&lt;p&gt;幸运的是，每周，我都有机会和这名语文老师单独做“写作讨论”。那会儿我是宣传委员一类的班干部，给班里做一个班刊，所以每周和语文老师一起策划班刊的内容。顺便，这名语文老师就会和我聊我写的东西。&lt;/p&gt;
&lt;p&gt;现在想起来，虽然是闲扯，但是这个过程极大地拓展了我的认知。我也发现了，原来通过写作，可以激发出这么多有意思的讨论。&lt;/p&gt;
&lt;p&gt;比如有一周，我写得是我对“理发”的感想，包括对不同发型的人的感觉和印象。文章里提到我害怕理发，所以我中学一直留很长的头发。然后这名语文老师告诉我，他小时候也害怕理发。这个场景一直让我印象深刻，因为我发现，原来老师也有害怕的东西，而且和我害怕的东西一模一样。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;到了高中，我看的书明显更“深刻”了，什么王小波余华余秋雨史铁生，还偷偷看王朔和金庸，青春文学那个年代流行韩寒郭敬明，还有什么我一时也想不起来了。&lt;/p&gt;
&lt;p&gt;但其实我一直觉得，我的阅读是很俗的。因为同时期，班上已经有很多同学抱着红楼梦或者乱世佳人或者福尔摩斯甚至是英文原版在啃了。&lt;/p&gt;
&lt;p&gt;不过，或许是初中的底子打得好。我看的书虽然都比较“俗”，但我的文章基本上都是班里的范文。可能也是因为有正反馈，所以愈发喜欢写作。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;但是到了大学，我突然就决定不写了。因为我突然发现，每个人都有表达的欲望，想表达的东西都不少，但关键还是肚子里要有货，肚子里的货决定了表达的质量。我突然觉得自己肚子里挺没货的。&lt;/p&gt;
&lt;p&gt;后来，有人把这个现象总结的很好，“说得太多（想得太多），读书太少”。这就是说我了。&lt;/p&gt;
&lt;p&gt;于是我决定多读书。虽然这么想，但也没有读太多书，这样直到有了公众号，我又忍不住注册了一个。然后直到去年，我开始决定定期更新。&lt;/p&gt;
&lt;p&gt;说白了，我发现我还是有写东西的“瘾”。有货没货的，抖一抖吧。看到有意思的东西，随便聊一聊，写一写。但在具体内容上，我还是在克制少表达自己，争取多聊点儿客观的东西。长大了，少了很多为了表达自己而表达的写作，不奢求别人理解自己，只是希望自己的笔不要锈掉。&lt;/p&gt;
&lt;p&gt;事实也是：大多数人不喜欢看你表达自己。因为你什么都不是，还不如给别人提供高质量的信息，让别人学到点儿什么，有点儿收获。&lt;/p&gt;
&lt;p&gt;可我还是会不经意间把自己的“没用的”思考带出来。有的时候，这些思考有失偏颇；有的时候，这些思考毫无新意。有人会在后台骂我。如果有人身攻击的，我都直接把他们拉黑。然后，我也会再反省一下自己。&lt;/p&gt;
&lt;p&gt;我想，幸亏在我年少时，我的语文老师不会因为我写什么“理发”这样无厘头的内容而骂我。不然，我一定不会喜欢写作。&lt;/p&gt;
&lt;p&gt;至于会不会从楼上跳下去，我也不知道。&lt;/p&gt;
&lt;p&gt;可我理解一个认真喜欢写作的人的内心。每一篇文章都是他们的宝贝。他们可能思考了很久很久；可能兴奋得晚上睡不着觉；甚至有的时候把自己感动地流泪。我认为，缪可馨的这名写作老师，是不理解写作的人的内心的。&lt;/p&gt;
&lt;p&gt;他是一个教写作的老师，但绝不是一个喜欢写作的人。&lt;/p&gt;
&lt;p&gt;千里马常有，伯乐不常有。伯牙绝弦，知音难寻。&lt;/p&gt;
&lt;p&gt;不知道为什么，我会觉得如此悲伤。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;希望缪可馨在天堂找到一个，不对，是一群，真正欣赏自己文字的知己。我相信这样的知己，在天堂，有很多很多。&lt;/p&gt;
&lt;p&gt;我更希望，在天堂里，如果你遇到一个不喜欢自己文字的人，天堂有一个功能，让你把他们直接拉黑，像公众号一样。&lt;/p&gt;
&lt;p&gt;这个世界真的很大，很精彩，不要为不喜欢自己的人浪费时间。多想想那些支持你的，爱你的人。&lt;/p&gt;
&lt;p&gt;希望你在天堂，继续用你可爱的文字，去回馈他们的支持，他们的爱。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;liuyubobobo&lt;/p&gt;
&lt;p&gt;2020.6.15 凌晨 4:15 AM&lt;/p&gt;
&lt;p&gt;于 Santa Clara&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-06-14/readme.md" rel="alternate"/></entry><entry><id>2020/2020-06-10/readme.md</id><title>隐性知识</title><updated>2020-06-10T00:00:00-07:00</updated><content>&lt;h2&gt;隐性知识&lt;/h2&gt;
&lt;p&gt;隐性知识是 1958 年，迈克尔.波兰尼（Michael Polanyi）从哲学领域提出的一个概念。&lt;/p&gt;
&lt;p&gt;&lt;img alt="michael" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-06-10/michael.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;简单来说，隐性知识就是指&lt;strong&gt;无法用语言清晰表述的知识。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个概念猛地一听，感觉很奇怪。毕竟，通过语言，文字，图表去学习知识，是我们上学以后接收知识的主要形式，至少表面上看是如此。&lt;/p&gt;
&lt;p&gt;但是如果我们深入思考，就会发现，生活中到处都是用语言无法清晰表达的知识。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;最简单的例子：游泳。&lt;/p&gt;
&lt;p&gt;你可能能找到这样的图书：&lt;/p&gt;
&lt;p&gt;&lt;img alt="book" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-06-10/book.png" /&gt;&lt;/p&gt;
&lt;p&gt;别看封面上写着大牛做序，一群体育专家联袂推荐。但是我敢肯定：对于一个不会游泳的人来说，通读这本书，即便达到能够背诵默写的程度，一定也是依然不会游泳的。&lt;/p&gt;
&lt;p&gt;相应的，我估计绝大部分会游泳的人，并没有读过一本和游泳相关的书。&lt;/p&gt;
&lt;p&gt;游泳是一种隐性知识。到现在为止，还没有任何人能够做到，通过组织语言，变换说辞，找到一个词语的“排列组合”，按照这个排列组合表述出来，听者就突然神奇地“开窍”，跃入水中，学会游泳。&lt;/p&gt;
&lt;p&gt;学习游泳的过程，近乎必须要求学习者真的跳入水中，去实际地体会，在错误中不断纠正自己的动作，不断总结正确的方式。呛几口水在所难免，但只有这样，才能学会游泳。&lt;/p&gt;
&lt;p&gt;当你学会游泳了以后，如果问你，到底该怎么游泳？你也将哑口无言，承认自己也无法用语言清晰地描述出来到底是如何游泳的。你可以描述出一些心得，一些技巧。但是，这些都无法让学习者“学会”游泳。&lt;/p&gt;
&lt;p&gt;要想真正学会游泳，每个学习者都必须下水。&lt;/p&gt;
&lt;p&gt;大家可以很轻易地想到：近乎所有的“物理活动”，都是隐性知识。比如开车；比如轮滑。&lt;/p&gt;
&lt;p&gt;但是，如果仔细思考，就会明白，在“脑力活动”的世界中，隐性知识一点儿都不少。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;脑力活动的最高境界：&lt;strong&gt;创造，就是一个典型的例子。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果你去问一个作曲家，如何创作出优秀的音乐？你八成不能得到令你满意的答复。&lt;/p&gt;
&lt;p&gt;这里说的“满意”，是指：不管这名作曲家多优秀，这名作曲家创造过多少经典的音乐，他都无法通过语言，让你“听君一席话”，就能掌握作曲的“秘密”，变成一个优秀的作曲家。&lt;/p&gt;
&lt;p&gt;他可能能告诉你一些自己的经验。比如他会说学习音乐史很有帮助；爱尔兰的音乐风格对他的影响很大；某些作曲工具能提高效率；等等等等。但是，你仍然无法成为作曲家。&lt;/p&gt;
&lt;p&gt;要想成为优秀的作曲家，你必须在学习了作曲基本的理论知识以后，亲自去实践，去作曲，去倾听别人的反馈，去征询大师的建议，去改进，去完善，然后去做新的尝试，循环往复。&lt;/p&gt;
&lt;p&gt;这就像下水游泳一样。&lt;strong&gt;创作是一个隐性知识。&lt;/strong&gt;不仅仅是音乐创作，任何形式的创作都是如此，从视频创作，到文字创作。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;但可能很多人还会说，自己的工作并不是创作啊？需要这么关注隐性知识吗？&lt;/p&gt;
&lt;p&gt;需要！在我们的日常生活中，在每个人都能接触的领域里，&lt;strong&gt;最核心的，其实都是隐性知识。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;比如学习英语。很多人会问怎么学好英语？有什么诀窍？我不否认学习英语是有一些方法论的。但我想，学习英语最大的诀窍，就是实际去使用英语。&lt;/p&gt;
&lt;p&gt;如果你想提高英语阅读，就多去读；如果你想提高英语听力，就多去听；如果你想提高英语口语，就多去说；如果你想提高英语写作，就多去写。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;再比如，关注这个公众号的同学，可能大多数是程序员。很多同学都曾经问过我，如何快速写出没有 bug 的代码？&lt;/p&gt;
&lt;p&gt;对于这个问题，我有一些经验之谈。比如明确需求；比如定义清楚代码中每一个变量和函数的语义；比如用循环不变量的角度去审视自己写的每一个循环；比如关注函数式编程和设计模式；等等等等。&lt;/p&gt;
&lt;p&gt;但是，很遗憾，听了这些“经验之谈”，大多数人还是无法快速写出没有 bug 的代码。实际上，&lt;strong&gt;真正写出没有 bug 的代码的诀窍，恰恰是多写 bug&lt;/strong&gt;，然后意识到自己写了一个 bug，然后去调 bug。&lt;/p&gt;
&lt;p&gt;为什么？因为“如何写出正确的程序”是一种隐性知识，语言是无法传授这种知识的。那么获得这种知识的方式，只能是自己去“下水”。&lt;/p&gt;
&lt;p&gt;实际上，大多数专业领域都是如此，一个出色的医生可以快速对病情做出正确的诊断；一个优秀的海员可以对天气和航向做出准确地预估；杰出的技术专家可以迅速给出问题的解决方案，或者判断技术可行性，这些都是无法简单通过语言传授的隐性知识。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;理解隐性知识，能够帮助我们理解很多事情。&lt;/p&gt;
&lt;p&gt;比如，为什么“懂了那么多道理，似乎并没有卵用？”&lt;/p&gt;
&lt;p&gt;就是因为，大多数人所谓的“懂了一个道理”，只是能用语言描述这个道理而已。但是，这个道理背后真正的技能，是一种“隐性知识”，使用语言描述是远远不够的。&lt;/p&gt;
&lt;p&gt;很多人可以把动态规划状态定义需要满足的三个性质：重叠子问题，最优子结构，无后效性，说得头头是道。但是真正遇到一个问题，还是会懵掉。因为真正的灵活的使用动态规划解决问题是一种隐性知识。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;再比如，之前我曾经写过一篇文章，叫&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-05-20/"&gt;《跟什么样的人》&lt;/a&gt;，其中有一个观点，就是好的 leader 必须要带领团队成长。&lt;/p&gt;
&lt;p&gt;会有同学有异议：&lt;/p&gt;
&lt;p&gt;&lt;img alt="discuss1" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-06-10/discuss1.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;对此，我的回复是这样的：&lt;/p&gt;
&lt;p&gt;首先，&lt;strong&gt;管理就是一种典型的，并且重要的“隐性知识”。&lt;/strong&gt;没人能用语言就简单地说明白怎样一二三地去做，就能做好管理了。优秀的管理者都是一路摸爬滚打，在实践中不断成长的。正因为如此，一个有经验的管理者是相当值钱的。&lt;/p&gt;
&lt;p&gt;成为一个优秀的管理者，是比保留一点技术壁垒重要得多的事情。因为&lt;strong&gt;成为一个优秀的管理者，是一个更高的，更难逾越的壁垒。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;另一方面，在现代的科技发展下，保留所谓的一点技术壁垒，真的没有意义。当下所谓的技术难题，过两年，可能一个小学生都会用的小工具，都能轻松解决了。&lt;/p&gt;
&lt;p&gt;实际上，能够“保留的”技术壁垒，都不是真正的技术壁垒。&lt;strong&gt;真正的技术壁垒是：就算你讲出来，别人没有相应的经历，也理解不了，达到不了相同高度的东西。&lt;/strong&gt;比如架构设计的能力；比如快速排查错误的能力；比如对技术发展的敏感性和判断。&lt;/p&gt;
&lt;p&gt;这些都是隐性知识。&lt;strong&gt;真正的技术壁垒，是隐性知识。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;现在流行一个词，叫“不可替代性”，怎么让自己不可替代？其实就是要去“学习”隐形知识。&lt;/p&gt;
&lt;p&gt;这里我给“学习”加引号，是因为隐性知识的学习不能简单靠书本获得，实践才是王道。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;可能有些同学会觉得，既然隐性知识无法通过语言获得，是不是老师没有什么意义？&lt;/p&gt;
&lt;p&gt;是，也不是。&lt;/p&gt;
&lt;p&gt;从知识传授的角度，对于很多内容，由于是显性知识，所以我并不认为老师的意义那么大。相信很多同学大学的很多科目都是自学的，也学得挺好，就是这个道理。&lt;/p&gt;
&lt;p&gt;但是，优秀的老师，是会引导的，这至关重要。&lt;/p&gt;
&lt;p&gt;什么叫引导？昨天我看到一个例子，觉得很有意思。&lt;/p&gt;
&lt;p&gt;很多人在面试的时候，答完一个问题后，面试官可能并不满意，于是反手问一句，“你确定吗？”。&lt;/p&gt;
&lt;p&gt;在实际工作中，这样的场景，类似的反问，可能也不少。但其实，这种反问很没有水平。因为面试者无法从中获得任何有价值的信息，除了，似乎面试官不太满意。&lt;/p&gt;
&lt;p&gt;举个简单的例子。一个小学生说 3 + 3 = 5，我们不应该反问他，“你确定吗？”&lt;/p&gt;
&lt;p&gt;我们应该问他，那 3 + 2 等于多少？&lt;/p&gt;
&lt;p&gt;小学生就会计算一下，咦？3 + 2 = 5！那么 3 + 3 = 5 应该是有问题的。小学生就会重新思考，3 + 3 应该等于几？自己之前怎么算错了？&lt;/p&gt;
&lt;p&gt;问 3 + 2 等于多少，就是引导。这步引导，将你引入了更多的实践中（去计算 3 + 2，重新计算 3 + 3，等等），这是一个反问“你确定吗”做不到的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;有经验的老师会正确的引导，正确的引导将大大加快学生的进步速度。&lt;/strong&gt;这也是为什么，在我的课程问答区，对于很多同学的代码问题，我并不愿意直接指出代码的错误，而是会让大家自己去调试，或者试试另一个思路，看看有什么矛盾之处。&lt;/p&gt;
&lt;p&gt;因为，这其实是学习隐性知识的过程。而隐性知识的学习，比简单地了解一个算法，重要 100 倍。&lt;/p&gt;
&lt;p&gt;这也是为什么，在&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-05-20/"&gt;《跟什么样的人》&lt;/a&gt;这篇文章中，如果有两个 leader，一个技术好，一个会 coaching，一定要二选一的话，我的建议是选择会 coaching 的 leader。&lt;/p&gt;
&lt;p&gt;因为，所谓的 coaching，就是引导。这种引导，可能会让你觉得浪费时间，但是，学习隐性知识，就是需要时间的。在隐性知识的学习过程中，一个人才能真正的进步。&lt;/p&gt;
&lt;p&gt;隐性知识不能用语言表达出来，但它恰恰就是每个牛人成功的秘诀。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;P.S.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;题图是一张“冰山一角”。&lt;/p&gt;
&lt;p&gt;其实，大多数时候，显性知识都是冰山一角。一个数学公式，一个算法，这些都是显性知识，很好学习的。&lt;/p&gt;
&lt;p&gt;但是，学习这些显性知识的真实目的，是挖掘他们背后的隐性知识。&lt;/p&gt;
&lt;p&gt;&lt;img alt="iceberg" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-06-10/iceberg.jpg" /&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-06-10/readme.md" rel="alternate"/></entry><entry><id>2020/2020-06-07/readme.md</id><title>稀奇古怪面试题又三则</title><updated>2020-06-07T00:00:00-07:00</updated><content>&lt;h2&gt;稀奇古怪面试题又三则&lt;/h2&gt;
&lt;p&gt;之前写过一篇文章，&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-06-10/"&gt;《稀奇古怪面试题三则》&lt;/a&gt;，翻出来一看，已经时隔一年了。着实吓了一跳。&lt;/p&gt;
&lt;p&gt;然后想了想，这一年又遇到了一些有意思的问题。于是，在这里再分享三道“非典型”的面试问题：）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;bobo 老师最近收到了一名同学的求助。这名同学正在和另外一名同学玩儿俄罗斯轮盘赌。&lt;/p&gt;
&lt;p&gt;俄罗斯轮盘赌是指在一个有六个弹槽的左轮手枪中放入一颗子弹，随机旋转转轮后，关闭转轮。两人轮流把手枪对着自己的头扣动扳机。&lt;/p&gt;
&lt;p&gt;俄罗斯轮盘赌赢者生，败者亡，极其残忍。&lt;/p&gt;
&lt;p&gt;&lt;img alt="gun" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-06-07/gun.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;当然，在现代社会中，我们不能拿生命做赌注。所以，两名同学使用橡胶子弹，并且约定，输者当即购买 bobo 老师的所有课程！&lt;/p&gt;
&lt;p&gt;为了加快游戏速度，他们在一个玩具左轮手枪的&lt;strong&gt;连续两个&lt;/strong&gt;弹槽中都放入了子弹。&lt;/p&gt;
&lt;p&gt;现在，第一个同学已经开枪了，结果为空弹。&lt;/p&gt;
&lt;p&gt;第二个同学想知道，自己在第二枪输掉的概率有多大？（即自己开枪，发射出子弹的概率是多少？）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;为了留给大家更多思考的空间，先给两个提示：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;提示 1&lt;/strong&gt;：注意，这两枚子弹是放在连续的两个弹槽中的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;提示 2&lt;/strong&gt;：对于很多概率问题，思考的关键是：总共有多少种可能？而我们关心的事件真正发生，会在多少种可能中出现？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解析：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;六个弹槽，将两枚子弹填入连续的两个弹槽中，一共只有六种方式。&lt;/p&gt;
&lt;p&gt;在下面，我用 X 表示子弹，o 表示空弹槽。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;XXoooo
oXXooo
ooXXoo
oooXXo
ooooXX
XooooX&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;注意最后一种方式。因为弹槽形成了一个环，所以第一个弹槽和最后一个弹槽是相邻的。&lt;/p&gt;
&lt;p&gt;现在，已知第一次扣动扳机，没有子弹。所以，上面的第一种布弹方式和最后一种布弹方式都被刨除了。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;XXoooo // 不可能
oXXooo  
ooXXoo
oooXXo
ooooXX
XooooX // 不可能&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在剩下的四种方式中，只有 oXXooo 一种方式，在第二个弹槽中是子弹。&lt;/p&gt;
&lt;p&gt;四种方式，一种中弹，所以答案是：1 / 4 = 25%。&lt;/p&gt;
&lt;p&gt;同学，你这一轮只有 25% 的概率购买 bobo 老师的全部课程。祝你好运！&lt;/p&gt;
&lt;p&gt;&lt;img alt="luck" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-06-07/luck.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;再来一道概率问题。&lt;/p&gt;
&lt;p&gt;bobo 老师发明了一种神秘的算法，可以 &lt;strong&gt;100%&lt;/strong&gt; 的准确预测今天的天气！&lt;/p&gt;
&lt;p&gt;诺贝尔奖级别有木有？&lt;/p&gt;
&lt;p&gt;&lt;img alt="haha" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-06-07/haha.gif" /&gt;&lt;/p&gt;
&lt;p&gt;但是，bobo 老师觉得，100% 的准确度太没有意思了。这个世界的魅力就是不确定性啊！&lt;/p&gt;
&lt;p&gt;所以，bobo 老师调整了算法，让&lt;strong&gt;它有 1/3 的概率说谎。&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;但是，bobo 老师还是觉得不满意，因为这不够酷。&lt;/p&gt;
&lt;p&gt;bobo 老师决定将这个算法复制成三份。&lt;/p&gt;
&lt;p&gt;这是受著名动画片《EVA》的启发。《EVA》动画片中的 MAGI 超级电脑，就是由三台可以独立思考的电脑组成的决策系统。这三台电脑，分别代表设计者赤木博士的三种身份：作为科学家的她；作为母亲的她；和作为女性的她。&lt;/p&gt;
&lt;p&gt;这个系统也被称为是“三贤者”。&lt;/p&gt;
&lt;p&gt;&lt;img alt="eva" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-06-07/eva.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;当然了，bobo 老师没有这么厉害。所以，他的“天气预测三贤者”，其实是三台完全一致的，有 33% 的概率犯错（说谎）的算法。&lt;/p&gt;
&lt;p&gt;今天，bobo 老师问“天气预测三贤者”：北京的天气怎么样？三个算法的回答都是：今天北京是晴天。&lt;/p&gt;
&lt;p&gt;问：今天北京是晴天的概率是多少？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解析：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;以下是我初始给出的解答，&lt;strong&gt;但是是错误的！！！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;只有在三个算法都在说谎的时候，北京才不是晴天。&lt;/p&gt;
&lt;p&gt;所以，我们只要看三个算法都说慌的概率就好了。因为每个算法说谎的概率是 1/3，三个算法都说慌的概率就是 (1/3) * (1/3) * (1/3) = 1/27。&lt;/p&gt;
&lt;p&gt;也就是只有 1/27 的概率，北京不是晴天。相应的，今天背景是晴天的概率就是 26/27，约为 96.3%。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;以上解答是错误的！！！&lt;/strong&gt;为什么？因为当三台电脑都说今天是晴天的时候，&lt;strong&gt;概率空间已经变了&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;此时，或者三台电脑都说实话，概率是 8/27；或者是三台电脑都说谎话，概率是 1/27。其他的概率已经是 0 了。&lt;/p&gt;
&lt;p&gt;只有三台电脑都说实话的时候，北京才是晴天。此时的概率是： 8/27 / (1/27 + 8/27) = 8/9。&lt;/p&gt;
&lt;p&gt;我使用蒙特卡洛验证了一遍。我的蒙特卡洛验证代码：&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;h1&gt;include &lt;iostream&gt;&lt;/h1&gt;
&lt;h1&gt;include &lt;vector&gt;&lt;/h1&gt;
&lt;p&gt;using namespace std;&lt;/p&gt;
&lt;p&gt;int main(){&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;int N = 100000000;
srand (time(NULL));

int total = 0, sunny = 0;
while(N --){

    int weather = rand() % 2; // 0 - cloudy, 1 - sunny；
    int a , b, c;

    if(weather)
        a = rand() % 3 ? 1 : 0, b = rand() % 3 ? 1 : 0, c = rand() % 3 ? 1 : 0;
    else
        a = rand() % 3 ? 0 : 1, b = rand() % 3 ? 0 : 1, c = rand() % 3 ? 0 : 1;

    if(a &amp;amp;&amp;amp; b &amp;amp;&amp;amp; c){
        total ++;
        sunny += !!weather;
    }
}

cout &amp;lt;&amp;lt; sunny &amp;lt;&amp;lt; " " &amp;lt;&amp;lt; total &amp;lt;&amp;lt; " " &amp;lt;&amp;lt; (double)sunny / total &amp;lt;&amp;lt; endl;
cout &amp;lt;&amp;lt; 8.0 / 9 &amp;lt;&amp;lt; endl;

return 0;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;}
```&lt;/p&gt;
&lt;p&gt;使用以上验证，我们还将看到一个重要的事实：北京天气是阴天还是晴天的概率，也会影响最终结果！&lt;/p&gt;
&lt;p&gt;实际上，这是一个条件概率的计算，可以带入条件概率公式获得结果。&lt;/p&gt;
&lt;p&gt;假设事件 A 是三台机器都说今天是晴天；事件 B 是今天是晴天。这个问题求得就是 P(B | A)。&lt;/p&gt;
&lt;p&gt;根据条件概率公式：P(B | A) = P(B &amp;amp; A) / P(A)&lt;/p&gt;
&lt;p&gt;P(B &amp;amp; A) 就是今天确实是晴天，并且三台机器都说是晴天的概率。注意，这里就要对今天是晴天的概率做一个假设，假设为 p。则 P(B &amp;amp; A) = p * (2 / 3) ^ 3。&lt;/p&gt;
&lt;p&gt;P(A) 则是三台机器说今天是晴天的概率。注意，一台机器说今天是晴天的概率，会因为今天是不是晴天而改变。如果今天是晴天，每台机器说是晴天的概率是 2/3，因为是实话；如果今天不是晴天，每台机器说是晴天的概率是 1/3，因为是谎话。所以，P(A) 正义就是 p * (2/3)^3 + (1 - p) * (1/3)^3&lt;/p&gt;
&lt;p&gt;二者相除，就是答案。这里，这个 p 是约不掉的。 &lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最后一个问题稍微难一点。&lt;/p&gt;
&lt;p&gt;有一名同学突然联系 bobo 老师，因为他被绑架了！绑匪说，只有做对一个问题，才能放了他！&lt;/p&gt;
&lt;p&gt;问题是这样的：&lt;/p&gt;
&lt;p&gt;绑匪在一个桌子上，放了 &lt;strong&gt;100 张扑克牌，其中 10 张朝上，90 张朝下。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;绑匪将这名同学的眼镜蒙上。所以，这名同学无法看到哪张牌朝上，哪张牌朝下。这名同学也无法通过触觉，摸出来桌子上哪张牌朝上，哪张牌朝下。&lt;/p&gt;
&lt;p&gt;现在，绑匪要求这名同学把桌子上的 100 张牌分成两堆儿。并且，&lt;strong&gt;在这两堆儿牌中，朝上的牌数量必须一致。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;问，这名同学要怎么操作，才能摆脱穷凶极恶的绑匪？&lt;/p&gt;
&lt;p&gt;&lt;img alt="cry" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-06-07/cry.gif" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;三个提示：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;提示 1&lt;/strong&gt;：将 100 张牌分成两堆儿，每堆儿牌不一定包含 50 张牌。一堆儿 49 张牌，另一堆儿 51 张牌，也是可以的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;提示 2&lt;/strong&gt;：虽然这名同学不能辨别每张牌的反正，但是，&lt;strong&gt;这名同学可以操纵这些牌。&lt;/strong&gt;比如：他可以拿起一张牌，把它翻过来，使得如果这张牌本来为正面朝上，变成反面朝上；本来反面朝上，变成正面朝上。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;提示 3&lt;/strong&gt;：因为有提示 2，所以，最终的结果，不一定两堆儿中正面朝上的牌的数量都是 5 张牌。&lt;strong&gt;只要正面朝上的牌相等就可以。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;你知道要怎么做吗？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解析&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;可以这样操作：&lt;/p&gt;
&lt;p&gt;这名同学先把这 100 张牌&lt;strong&gt;``分成两堆儿，一堆儿中有 10 张牌，另一堆儿中有 90 张牌。具体哪张牌在哪一堆儿，无所谓。&lt;/strong&gt;反正这名同学也辨别不出来。&lt;/p&gt;
&lt;p&gt;然后，这名同学只需要&lt;strong&gt;把 10 张牌的那一堆儿中的每张牌都翻过来&lt;/strong&gt;，就好了。这么做就能得到满足题意的结果。&lt;/p&gt;
&lt;p&gt;为了证明这一点，我们可以假设：在初始分堆儿的时候，90 张牌的那一堆儿中，有 x 张牌是朝上的。那么，在 10 张牌这一堆儿中，就有 10 - x 张牌是朝上的。&lt;/p&gt;
&lt;p&gt;注意，x 也可以为 0。&lt;/p&gt;
&lt;p&gt;现在，如果将 10 张牌中的那一堆儿中，所有的牌都翻一面儿，那么，原来的 10 - x 张朝上的牌，就变成朝下了；而原来 x 张朝下的牌，就朝上了。&lt;/p&gt;
&lt;p&gt;现在，两堆儿中，都有 x 张牌朝上了。&lt;/p&gt;
&lt;p&gt;营救任务完成：）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;好啦，今天的分享到此结束。&lt;/p&gt;
&lt;p&gt;等等，我突然又想到了一个问题！&lt;/p&gt;
&lt;p&gt;今天的第一个问题是关于俄罗斯轮盘赌的。大家可以发现，在俄罗斯轮盘赌中，规则是：两人轮流把手枪&lt;strong&gt;对着自己扣动扳机。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为什么规则不能是对着对方扣动扳机呢？&lt;/p&gt;
&lt;p&gt;给大家分享一幅漫画，来自 Tom Fonder。&lt;/p&gt;
&lt;p&gt;&lt;img alt="comic" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-06-07/comic.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;论规则设计的重要性。🤔&lt;/p&gt;
&lt;p&gt;是不是很酷？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-06-07/readme.md" rel="alternate"/></entry><entry><id>2020/2020-05-31/readme.md</id><title>屠龙之术</title><updated>2020-05-31T00:00:00-07:00</updated><content>&lt;h2&gt;屠龙之术&lt;/h2&gt;
&lt;p&gt;小时候，我最喜欢的故事，是屠龙术的故事。&lt;/p&gt;
&lt;p&gt;说喜欢，或许不很恰当，或许只是觉得它神秘而有魅力。&lt;/p&gt;
&lt;p&gt;屠龙术的故事源于庄子的《列御寇》，它只有简单的一句话：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;朱泙漫学屠龙于支离益，单千金之家，三年技成而无所用其巧。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这句话的意思是：有一个叫朱泙漫的人，想学习屠龙术，于是拜师了一个叫支离益的人。为此，他耗尽千金的家产，历时三年，终于学成了屠龙之术。但是，当他身怀屠龙绝技，闯荡江湖，想祭尽天下恶龙的时候，却发现找不到一条龙的影子。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我从小就对这个故事背后的道理不感兴趣。我痴迷于我第一次听完这个故事以后，头脑中的一连串问号：&lt;/p&gt;
&lt;p&gt;朱泙漫到底是谁？支离益又是谁？他们的名字为什么这么奇怪？&lt;/p&gt;
&lt;p&gt;如果这世上本无龙，支离益为什么能教屠龙术？是因为这世上原本是有龙的，支离益曾是一名屠龙的勇士？亦或者支离益就是个骗子？&lt;/p&gt;
&lt;p&gt;而朱泙漫又为什么肯耗尽千金家产，要学习屠龙术？是不是他知道，这世界还有恶龙隐藏？&lt;/p&gt;
&lt;p&gt;朱泙漫是怎么用三年时间学成屠龙术的？当朱泙漫学成了屠龙术，去做了什么？&lt;/p&gt;
&lt;p&gt;他游历了哪里，遇到了谁？庄子的世界里，真的没有龙吗？会不会像所有的童话故事一样，朱泙漫经历了一场恶战，杀掉了这世上的最后一条恶龙，从此归隐山林，不为人知？&lt;/p&gt;
&lt;p&gt;这世界上真正的英雄不为人知，反被耻笑。直到突然有一天，又一只恶龙不知从哪里冒了出来。这似乎是很多英雄故事的套路。朱泙漫的故事是否也是如此？&lt;/p&gt;
&lt;p&gt;后来呢？后来呢？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;所有的这一切，庄子都没有告诉我们。屠龙术的故事突然开始，又戛然而止。我恨不能横跨 2500 年，亲自去问问庄子他老人家。&lt;/p&gt;
&lt;p&gt;但后人似乎并不关心这些。近乎所有的课本都告诉我们：屠龙术是指那些“深奥难学但是缺乏实用性的技巧”。我们不应该学习屠龙术。&lt;/p&gt;
&lt;p&gt;但我对此并不买账，甚至因此，我会对那些冠以“屠龙之术”的知识多看一眼。&lt;/p&gt;
&lt;p&gt;我不相信一个能讲出“北冥有鱼，其名为鲲。鲲之大，不知其几千里也；化而为鸟，其名为鹏”的老者，会讲出这么“浅显”的故事。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;后来，我认识了堂吉坷德。&lt;/p&gt;
&lt;p&gt;唐吉坷德是一名骑士。他爱读骑士小说，羡慕骑士作派，赞赏骑士精神。&lt;/p&gt;
&lt;p&gt;但他沉溺于骑士的幻想中，脱离实际，沉浸在想象的世界，无法自拔。&lt;/p&gt;
&lt;p&gt;所以他大战风车，把风车想象成巨人；所以他大战羊群，把羊群看作是一只军队。&lt;/p&gt;
&lt;p&gt;&lt;img alt="tang" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-05-31/tang.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;《唐吉坷德》是一部反骑士文学。这部小说的时代背景，是西班牙的国家实力正在下降。可是教会依然鼓吹骑士精神，捍卫封建社会。&lt;/p&gt;
&lt;p&gt;可衰败是一种趋势，继续怀着旧的理念，保持幻想，只能继续颓败，徒增笑耳。唐吉坷德，就成为了这样的一个象征。&lt;/p&gt;
&lt;p&gt;但倘若抛开这层历史意义，就会发现，堂吉诃德的故事，似乎和屠龙术有着类似的内核。&lt;/p&gt;
&lt;p&gt;时代已经改变，骑士精神是没有意义的；这就宛如，这世界并没有龙，屠龙术也没有用。&lt;/p&gt;
&lt;p&gt;可或许，在唐吉坷德眼里，骑士精神是有意义的；就好像在朱泙漫眼中，这世界还有恶龙无数。&lt;/p&gt;
&lt;p&gt;怪不得，有人也会把唐吉坷德解读成为理想主义的化身。理想和现实的差距，造就了悲剧的内核。&lt;/p&gt;
&lt;p&gt;几百年后，荒诞哲学的代表人物，写出《西西弗的神话》，《鼠疫》，《局外人》的加缪说，每读一遍《唐吉坷德》，他都会放声大哭。&lt;/p&gt;
&lt;p&gt;《唐吉坷德》不仅仅是喜剧，也是悲剧。&lt;/p&gt;
&lt;p&gt;而我借此，似乎突然理解了朱泙漫。想起他的故事，竟也会觉得有几分落寞。&lt;/p&gt;
&lt;p&gt;或许，屠龙之术，也是一个关于理想，关于现实的故事。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;长大以后，理想和现实，是每个人都绕不开的问题。&lt;/p&gt;
&lt;p&gt;或者，让我们把理想划去：现实，是每个人都绕不开的问题。&lt;/p&gt;
&lt;p&gt;理想呢？&lt;/p&gt;
&lt;p&gt;哪里还有理想。&lt;/p&gt;
&lt;p&gt;就像所有人都在告诉你，哪里还有龙？&lt;/p&gt;
&lt;p&gt;这个世界上没有龙。这个世界上没有龙。这个世界上没有龙。&lt;/p&gt;
&lt;p&gt;世界上所有的英雄，最终，不过想着柴米油盐酱醋茶。大隐隐于世。&lt;/p&gt;
&lt;p&gt;可突然有一天，我在想，&lt;strong&gt;这“世上没有龙”的想法本身，会不会就是缠绕在我们每个人心头的恶龙？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;因为“世上没有龙”，我们放下了手中的剑；&lt;/p&gt;
&lt;p&gt;因为“世上没有龙”，我们卸掉了身上的甲；&lt;/p&gt;
&lt;p&gt;曾以为世上有恶龙，我们披荆斩棘，可走着走着，突然发现，“世上没有龙”，我们就这样，停在了路中央。&lt;/p&gt;
&lt;p&gt;“世上没有龙”这条恶龙，早已经把我们打得落花流水，让我们毫无还击之力。&lt;/p&gt;
&lt;p&gt;因为“世上没有龙”，我们也早就放弃了追求屠龙之术。&lt;/p&gt;
&lt;p&gt;曾经那些闪闪发光的人，忽地就变成了凡人。没了热血，少了神通。&lt;/p&gt;
&lt;p&gt;因为“世上没有龙”。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;“世上没有龙”，就是这世上的恶龙啊。他数不清，道不尽，无处不在，无所不能。&lt;/p&gt;
&lt;p&gt;或许，朱泙漫要屠的，就是这条恶龙。&lt;/p&gt;
&lt;p&gt;或许，他师从的支离益，早已打败了自己心头的这头恶龙。&lt;/p&gt;
&lt;p&gt;或许，这才是庄子所讲的真正的故事。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我不知道，我不知道。&lt;/p&gt;
&lt;p&gt;我恨不能横跨 2500 年，亲自去问问庄子他老人家。&lt;/p&gt;
&lt;p&gt;可我回不去。&lt;/p&gt;
&lt;p&gt;但我的思绪，回到了自己的小时候。&lt;/p&gt;
&lt;p&gt;那时候的我，手里拿着树杈，身后披着塑料布。我相信自己就是仗剑的英雄。我决心屠龙。&lt;/p&gt;
&lt;p&gt;于是，我的世界没有恶龙盘旋。&lt;/p&gt;
&lt;p&gt;我是大人眼中流着鼻涕泡的小破孩儿。大人们都知道，你不过是个凡人，斗不过疾病，挨不过贫穷；但只有我自己知道，我是屠龙的勇士，无人可挡。&lt;/p&gt;
&lt;p&gt;无人可挡，无人可挡。&lt;/p&gt;
&lt;p&gt;我相信你曾经和我一样。&lt;/p&gt;
&lt;p&gt;那个曾经梦想屠龙的小破孩儿，其实早已经在那个年纪，屠掉了自己心中的恶龙；&lt;/p&gt;
&lt;p&gt;可当他慢慢长大，恶龙又重新回到了他的身边。&lt;/p&gt;
&lt;p&gt;我们每个人都一样。&lt;/p&gt;
&lt;p&gt;于是，庄子讲了一个故事：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;朱泙漫学屠龙于支离益，单千金之家，三年技成。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;是的，我把最后的“而无所用其巧”删掉了。&lt;/p&gt;
&lt;p&gt;朱泙漫有没有用到自己学到的屠龙之术，屠掉自己心中的恶龙？&lt;/p&gt;
&lt;p&gt;或许，只有他自己知道吧。&lt;/p&gt;
&lt;p&gt;说到这里，我忽然对这个故事的结局不感兴趣了。&lt;/p&gt;
&lt;p&gt;我想，我要继续捡起儿时那把落灰的屠龙刀，开始练习儿时的屠龙技了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;谨以此文，献给你我都曾拥有的那些闪亮的童年。&lt;/p&gt;
&lt;p&gt;祝所有人六一儿童节快乐。&lt;/p&gt;
&lt;p&gt;祝所有人终像自己年少所期许的那样，习得屠龙之术，斩尽天下恶龙。&lt;/p&gt;
&lt;p&gt;&lt;img alt="dragon_ball" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-05-31/dragon_ball.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-05-31/readme.md" rel="alternate"/></entry><entry><id>2020/2020-05-27/readme.md</id><title>Java 程序员，别用 Stack？！</title><updated>2020-05-27T00:00:00-07:00</updated><content>&lt;h2&gt;Java 程序员，别用 Stack？！&lt;/h2&gt;
&lt;p&gt;这篇文章的选题来源于在加拿大的 @Abby Deng 创建的 CS 战友群中的讨论。&lt;/p&gt;
&lt;p&gt;感谢 @Abby Deng 和群中各路大佬的分享：）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;在 Leetcode 的交流区，可以看到这样的一个讨论：&lt;/p&gt;
&lt;p&gt;&lt;img alt="lcdiscussion" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-05-27/lcdiscussion.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;翻译：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我不明白，为什么现在已经 2018 年了（这是 2018 年的帖子），Java 11 马上就要推出了，为什么还有人使用 Java 中的 Stack 类？&lt;/p&gt;
&lt;p&gt;作为硅谷大厂的一名面试官，我见过太多的面试候选人使用 Stack 类。从面试的角度，这非常不好（这篇帖子的后续讨论，甚至有人提到，这可能使你丢掉一个 offer）。&lt;/p&gt;
&lt;p&gt;当被问到为什么使用 Stack 类时，什么是已经弃用的方式的时候，大多数人只是回答：网上的解答是这么写的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;那么问题来了。Java 的 Stack 类到底怎么了？&lt;/p&gt;
&lt;p&gt;这篇文章，我将试图讲明白这个问题。&lt;/p&gt;
&lt;p&gt;注意：这篇文章是专门针对 Java 程序员的一个技术细节的讨论。这篇文章不是在说“栈”这种数据结构不被推荐使用，而是在说 Java 语言中，Stack 这个类不被推荐使用。&lt;/p&gt;
&lt;p&gt;因此，非 Java 程序员可以忽略这篇文章。不过，看下去，或许你能有很多意外的收获：）&lt;/p&gt;
&lt;p&gt;在阐述这个问题的过程中，我意外地发现这样一个看似简单的话题，可以涉及到的内容出奇的多。为了让整篇文章的逻辑更清晰，我将使用问答（Q&amp;amp;A）的形式组织整个内容。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Q：在 Java 语言中，不推荐使用 Stack 类？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;是的。实际上，这个不推荐不是某个技术专家或者某个企业的规范标准，而是来自 Java 官方。&lt;/p&gt;
&lt;p&gt;如果大家在 Java 中查询 Stack 的文档，就会看到如下的说明：&lt;/p&gt;
&lt;p&gt;&lt;img alt="java_stack_doc" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-05-27/java_stack_doc.png" /&gt;&lt;/p&gt;
&lt;p&gt;链接：&lt;a href="https://docs.oracle.com/javase/7/docs/api/java/util/Stack.html"&gt;https://docs.oracle.com/javase/7/docs/api/java/util/Stack.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;注意我标注的地方。&lt;/p&gt;
&lt;p&gt;简单翻译：一个更加完整，一致的，后进先出的栈相关的操作，应该由 Deque 接口提供。并且，也推荐使用 &lt;strong&gt;Deque&lt;/strong&gt; 这种数据结构（比如 ArrayDeque）来实现。&lt;/p&gt;
&lt;p&gt;因此，如果你想使用栈这种数据结构，Java 官方推荐的写法是这样的（假设容器中的类型是 Integer）：&lt;/p&gt;
&lt;p&gt;&lt;img alt="stack_code" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-05-27/stack_code.png" /&gt;&lt;/p&gt;
&lt;p&gt;下面，我们先来看看 Stack 到底怎么了？再来看看为什么使用 Deque？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q：Java 中的 Stack 类到底怎么了？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Java 中的 Stack 类，最大的问题是，继承了 Vector 这个类。根据 Java 官方文档中的类关系，如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img alt="java_stack_doc_2" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-05-27/java_stack_doc_2.png" /&gt;&lt;/p&gt;
&lt;p&gt;Vector 是什么类？简单来说，Vector 就是一个动态数组。&lt;/p&gt;
&lt;p&gt;大家应该都知道，ArrayList 也是动态数组。ArrayList 和 Vector 的区别我们后面再讨论。我们先来看一下，Stack 这个类继承 Vector，会产生什么问题？&lt;/p&gt;
&lt;p&gt;最大的问题在于，&lt;strong&gt;继承使得子类继承了父类的所有公有方法&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;而 Vector 作为动态数组，是有能力在数组中的任何位置添加或者删除元素的。因此，Stack 继承了 Vector，Stack 也有这样的能力！&lt;/p&gt;
&lt;p&gt;大家可以尝试如下的代码片段，在 Java 中是正确的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="stack_code2" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-05-27/stack_code2.png" /&gt;&lt;/p&gt;
&lt;p&gt;但很显然，我们不希望对于栈来说，可以指定在 1 这个位置插入一个 666。这一点都不 666，而是破坏了栈这种数据结构的封装。&lt;/p&gt;
&lt;p&gt;大家要知道，封装的一大意义，就是向用户屏蔽用户不需要的操作。否则，用户可能会有意无意地调用这些操作，这将成为软件工程中重要的 bug 来源。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q：问题出在哪里？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Java 中的 Stack 实现，是被业界一直认为非常糟糕的实现。实际上，它犯了面向对象设计领域的一个基本错误：&lt;strong&gt;Stack 和 Vector 之间的关系，不应该是继承关系，而应该是组合关系（composition）。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;关于继承关系和组合关系的区别，相信大家在 OOD 学习过程中，听过无数遍。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;继承关系描述的是 &lt;strong&gt;is-a&lt;/strong&gt; 的关系，即“是一个”的关系。&lt;/p&gt;
&lt;p&gt;猫是一个动物，所以猫这个类可以继承动物类；&lt;/p&gt;
&lt;p&gt;程序员是一个雇员，所以程序员这个类可以继承雇员类。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;而组合关系描述的是 &lt;strong&gt;has-a&lt;/strong&gt; 的关系，即“有一个”的关系。&lt;/p&gt;
&lt;p&gt;车里有一台发动机，所以发动机这个类和车这个类之间，应该是组合关系，即车中包含一个成员变量，是发动机这个类的对象；&lt;/p&gt;
&lt;p&gt;电脑里有 CPU，内存，显卡。所以 CPU，内存，显卡，这些类和电脑类之间的关系，都应该是组合关系。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;上面这些例子，都是我们在生活中看得到摸得到的实体，我们在做类设计的时候，通常不会犯糊涂。但遇到更抽象的对象的时候，事情可能就不一样了。&lt;/p&gt;
&lt;p&gt;比如，栈这种数据结构，和动态数组这种数据结构之间，到底应该是 is-a 的关系？还是 has-a 的关系？&lt;/p&gt;
&lt;p&gt;使用自然语言描述，听起来似乎说：栈是一个动态数组，毛病不大。但其实仔细思考，就会发现，&lt;strong&gt;栈不是一个动态数组！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;因此，很多时候，对于现实中并不存在的设计对象，人类很可能想不清楚 is-a 和 has-a 的关系。在这里，我再提供一个简单的原则：&lt;strong&gt;判断一下，如果设计成继承关系的话，我们是否有可能把子类进行向上的父类转型？如果可能，则应该设计成继承关系，否则应该是组合关系。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;换句话说，在这个例子中，我们是否可能将栈当做一个动态数组使用？答案是不可能。所以，栈和动态数组之间的关系不应该是继承关系。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;实际上，在真实的世界中，真正的继承关系是很少的。真正的继承关系中，父类大多是一个很抽象的概念，比如“人”，比如“动物”。但是我们设计的大多数类，不是这么抽象的概念。整体来说，组成关系更常用。&lt;/p&gt;
&lt;p&gt;这个概念不是我说的，而是业界公认的 OOP 设计原则。叫做：&lt;strong&gt;Composition over inheritance。&lt;/strong&gt;如果用中文说，就是&lt;strong&gt;应该优先考虑组合关系。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在 OOP 设计中，很多人会更倾向于使用继承关系，毕竟继承关系看起来更“面向对象”一些，也是面向对象讲解的重点。但是，在具体实践中，组合更常见！说得再绝对一些：&lt;strong&gt;多用组合，少用继承！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;大名鼎鼎的 Design Patterns 中，也强调了这个原则。&lt;/p&gt;
&lt;p&gt;&lt;img alt="design_patterns" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-05-27/design_patterns.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;如果大家在网上搜索 Composition over inheritance，会看到很多相关讨论。有兴趣的同学，也可以参考维基百科的这个词条：&lt;/p&gt;
&lt;p&gt;&lt;img alt="wiki" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-05-27/wiki.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;所以，一个更好的，基于 Vector 的栈的实现，应该是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="stack_code3" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-05-27/stack_code3.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q: Java 官方不知道这个 Stack 类的实现不好吗？为什么不改？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Java 官方当然知道这个实现不好。但是，因为要保持兼容性（&lt;strong&gt;backward compatibility&lt;/strong&gt;），对于已经正式发布的代码，Java 官方不能做接口设计层面的修改。否则，使用老版本 Java 的程序，将在新的 Java 环境下无法执行，这是 Java 官方不愿意看到的。&lt;/p&gt;
&lt;p&gt;Java 官方可以做到的是，将这个类标志成“弃用”（deprecated），以让新版本的开发者不再允许使用这个类，但老版本的程序，还能继续执行。&lt;/p&gt;
&lt;p&gt;但是，这么多年了，Java 官方也并没有将 Stack 标为“弃用”，只是在文档上注明“不建议使用”。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q：为什么使用接口？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下面，我们再来看一下 Java 官方推荐的写法：使用 Deque 接口：&lt;/p&gt;
&lt;p&gt;&lt;img alt="stack_code" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-05-27/stack_code.png" /&gt;&lt;/p&gt;
&lt;p&gt;首先，我们简单聊一下接口这个话题。&lt;/p&gt;
&lt;p&gt;接口在 OOP 设计中，也是非常重要的概念。并且，在近些年，变得越来越重要。甚至发展出了“面向接口的编程”这一思想（Interface-based programming）。&lt;/p&gt;
&lt;p&gt;对于这么大的一个话题，这篇文章篇幅限制，不做过多具体探讨。如果有兴趣的同学，可以搜索一下。维基百科也有这个词条。&lt;/p&gt;
&lt;p&gt;&lt;img alt="interface" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-05-27/interface.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;苹果公司的最新编程语言 Swift，自 2014 年面世，一个主打的特性，叫做“面向协议”。其实，这里的“面向协议”，和“面向接口”，在我看来是很相近的意思。我相信做苹果开发的同学对此不会陌生。&lt;/p&gt;
&lt;p&gt;&lt;img alt="swift" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-05-27/swift.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;接口最大的意义之一，就是做了更高层次的抽象：只定义了一个类应该满足哪些方法，而对具体的实现方式不做限制。&lt;/p&gt;
&lt;p&gt;比如，我们都知道，在 Java 语言中，Queue 就是一个接口。我们想实现一个队列，可以这么写：&lt;/p&gt;
&lt;p&gt;&lt;img alt="queue" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-05-27/queue.png" /&gt;&lt;/p&gt;
&lt;p&gt;在上述实现中，q1 和 q2 的底层具体实现不同，一个是 LinkedList，一个是 ArrayDeque。但是，从用户的角度看，q1 和 q2 是一致的：都是一个队列，只能执行队列规定的方法。&lt;/p&gt;
&lt;p&gt;这样做，将“队列”这样一个概念，和底层数据结构的具体实现——LinkedList 或者 ArrayDeque &lt;strong&gt;解耦&lt;/strong&gt;了：&lt;/p&gt;
&lt;p&gt;底层开发人员可以随意维护自己的 LinkedList 类或者 ArrayDeque 类，只要他们满足 Queue 接口规定的规范；&lt;/p&gt;
&lt;p&gt;开发者可以选择合适的数据结构来定义 Queue；&lt;/p&gt;
&lt;p&gt;而 Queue 的更上层使用者，无需知道 q1 或者 q2 的实现细节，从他们的角度看，只要能调用 Queue 的相关方法：peek, poll, offer 等等，来满足上层的业务需求，就好了。&lt;/p&gt;
&lt;p&gt;而且这样做，完美解决了之前说的，继承关系把父类的所有方法都拿过来的问题。接口的设计相当于做了访问限制。LinkedList 中有很多方法，但是，当我们使用 LinkedList 实现 Queue 接口的时候，用户只能调用 Queue 中定义的方法。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;从这个角度，我们也能看出 Stack 设计的另一个不合理之处：Stack 和 Queue 同样作为一种特殊的线性数据结构，都应该只是规定一系列操作的接口而已，具体的底层实现，由开发者再做选择。&lt;/p&gt;
&lt;p&gt;但因为 Stack 做成了一个类，继承了 Vector，也就只能基于 Vector 这一种固定的数据结构了。&lt;/p&gt;
&lt;p&gt;为了修正这个问题，Java 官方推出了 Deque 接口，作为实现栈的接口。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q：什么是 Deque 接口？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Deque 是双端队列的意思。所谓的双端队列，就是能在线性数据结构的两段，进行插入和删除操作。&lt;/p&gt;
&lt;p&gt;大家可以想象，由于 Stack 的定义是在同一端进，同一端出。所以，如果 Deque 可以满足在两段进行插入和删除，自然也能在同一端进行插入和删除，也就是可以以此为基础，做成一个 stack。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q：等等！这里有问题！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;很多同学应该能马上反应过来了。这里有问题！&lt;/p&gt;
&lt;p&gt;因为我们根据 Java 官方推荐的方法声明的这个 stack，虽然变量名称是 stack，但它实际上是一个 deque。这就意味着，这个 stack，可以在两段做插入和删除操作！但是，真正的栈，只能在同一端做插入和删除操作！&lt;/p&gt;
&lt;p&gt;这难道不是重蹈了 Stack 这个类的覆辙？毕竟，我们最开始分析，就说 Stack 这个类的一大问题，是继承了 Vector 这个类的若干我们不需要的方法，破坏了封装性，比如在任何一个位置插入一个元素。现在这个基于 Deque 接口的 stack，依然有我们不需要的方法啊！&lt;/p&gt;
&lt;p&gt;没错！这就是 Java 的历史遗留问题了。&lt;strong&gt;这个问题至此已经无解了。&lt;/strong&gt;因为 Stack 这个关键字被占据了。Java 官方不想推出一个叫做 RealStack 或者 CorrectStack 一类的接口名称。所以，按照 Java 官方的推荐所建立的这个 stack，依然不完美。&lt;/p&gt;
&lt;p&gt;但至今为止，Java 暂时只是做到这个份儿上。&lt;/p&gt;
&lt;p&gt;或许，Oracle 少打一些官司，多研究一下如何处理这些历史遗留问题，Java 能更好吧。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;所以，在实际的工程应用上，有人也并不建议使用 Deque 做为 stack 的实现，而是自己再做一层封装。&lt;/p&gt;
&lt;p&gt;比如，大家可以看一下这篇探讨 Stack 和 Deque 的文章。&lt;/p&gt;
&lt;p&gt;&lt;img alt="no_deque" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-05-27/no_deque.png" /&gt;&lt;/p&gt;
&lt;p&gt;其中，第一个副标题，就是 Don't Use Deque。翻译过来就是，不要使用 Deque！&lt;/p&gt;
&lt;p&gt;这篇文章的核心就是：虽然 Java 官方推荐使用 Deque 接口实现 stack，但是这样的 stack 也破坏了封装性，并不安全。&lt;/p&gt;
&lt;p&gt;怎么办？很简单，自己再封装一层，做一个只限制能从一段做插入删除的，真正的栈。&lt;/p&gt;
&lt;p&gt;这个代码其实很简单，因为这本质是一个设计问题，而不是逻辑问题。有兴趣的同学可以看一下这篇文章：&lt;a href="http://baddotrobot.com/blog/2013/01/10/stack-vs-deque/"&gt;http://baddotrobot.com/blog/2013/01/10/stack-vs-deque/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;当然了，在实际的算法面试中，可能面试官的关注点并不是这种设计问题，所以使用 Java 官方文档建议的方式来创建栈，并且和面试官讲清楚，我认为就足够了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q：链表呢？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;再说一个小问题。&lt;/p&gt;
&lt;p&gt;大家可以看到，Java 官方推荐的创建栈的方式，使用了 Deque 接口。并且，在底层实现上，使用了 ArrayDeque，也就是基于动态数组的实现。为什么？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;大家应该都知道，动态数组是可以进行扩容操作的。在触发扩容的时候，时间复杂度是 O(n) 的，但整体平均时间复杂度（Amortized Time）是 O(1)。&lt;/p&gt;
&lt;p&gt;但是，基于链表的实现，不会牵扯到扩容问题，因此，每一次添加操作，从时间复杂度的角度，都是 O(1) 的。&lt;/p&gt;
&lt;p&gt;虽然如此，可是实际上，&lt;strong&gt;当数据量达到一定程度的时候，链表的性能是远远低于动态数组的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这是因为，对于链表来说，每添加一个元素，都需要重新创建一个 Node 类的对象，也就是都需要进行一次 new 的内存操作。而&lt;strong&gt;对内存的操作，是非常慢的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;举个例子，对于队列，假设我们实验使用 ArrayDeque（动态数组）和 LinkedList（链表）作为底层的数据结构，进行 1000 万次入队操作。并且测试他们的性能。代码如下：&lt;/p&gt;
&lt;p&gt;&lt;img alt="queue_test" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-05-27/queue_test.png" /&gt;&lt;/p&gt;
&lt;p&gt;在我的计算机上，结果是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="queue_test2" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-05-27/queue_test2.png" /&gt;&lt;/p&gt;
&lt;p&gt;也就是使用 LinkedList，会比使用 ArrayDeque 慢 5 倍以上。&lt;/p&gt;
&lt;p&gt;因此，甚至在实践中，很多时候，尤其是面对大规模数据的时候，不应该使用链表！&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q：那 Vector 呢？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;大家可以看到，上面的讨论，我们已经完全扔掉 Java 中的 Vector 这个类了。&lt;/p&gt;
&lt;p&gt;实际上，Vector 这个类不仅仅是简单的一个动态数组而已，而更进一步，保证了线程安全。&lt;/p&gt;
&lt;p&gt;因为要保证线程安全，所以 Vector 实际上效率也并不高。&lt;/p&gt;
&lt;p&gt;Java 官方的 Vector 文档中明确指出了：如果你的应用场景不需要线程安全的特性，那么对于动态数组，应该使用 ArrayList。请参考下图我标注的文字：&lt;/p&gt;
&lt;p&gt;&lt;img alt="java_vector_doc" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-05-27/java_vector_doc.png" /&gt;&lt;/p&gt;
&lt;p&gt;但实际上，即使需要并发编程，自 Java 5 以后，也推荐使用 java.util.concurrent 包。&lt;/p&gt;
&lt;p&gt;不过，这涉及到并发编程的问题了。这是一个很大的问题，几句话讲不清楚。如果大家对并发编程感兴趣，可以在网上找更多相关资料.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;好了。至此，这篇文章的主旨已经介绍完毕了。一个小小的 Java 中不建议使用 Stack 类。我也没有想到会写这么长。&lt;/p&gt;
&lt;p&gt;最后，关于在面试中，如果有同学需要使用“栈”这种数据结构，选择 Stack 这个类，面试官会怎么看？我在我的知识星球上做了一个小调查。其中 @lk 同学的看法，我觉得非常公允。&lt;/p&gt;
&lt;p&gt;&lt;img alt="star" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-05-27/star.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;从我的角度，如果我考查的是算法逻辑，我不太会关注语言实现细节，而会更关注解决问题的逻辑思路；&lt;/p&gt;
&lt;p&gt;当然，如果面试官希望考察的就是 Java 语言功底，尤其是面试 Java 高级工程师，希望看出来对 Java 语言的理解程度。或许，这是一个很好的面试问题：&lt;strong&gt;Java 语言中的 Stack 类，有什么问题？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;毕竟，通过这么一个看似简单的问题，能引申出来这么多东西：）&lt;/p&gt;
&lt;p&gt;如果这个问题以后流行起来，大家别忘了这篇文章：）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-05-27/readme.md" rel="alternate"/></entry><entry><id>2020/2020-05-24/readme.md</id><title>学习乘法不能帮助我们理解质能方程</title><updated>2020-05-24T00:00:00-07:00</updated><content>&lt;h2&gt;学习乘法不能帮助我们理解质能方程&lt;/h2&gt;
&lt;p&gt;这是在我的知识星球上，一个同学问我的问题。&lt;/p&gt;
&lt;p&gt;波波老师您好，我是去年机械专业硕士毕业的。研究生期间我逐渐发现其实对机械专业并不特别喜欢，但是很喜欢图形学，决定把这个方向发展为我的特长。&lt;/p&gt;
&lt;p&gt;经过我使用 DirectX 和 OpenGL 的情况来看，我发现线性代数特别重要。请问您有没有针对图形学的线代资料推荐？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;bobo 老师的回答：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;关于线性代数，我推荐两本教材。&lt;/p&gt;
&lt;p&gt;一本叫《Introduction to Linear Algebra》，最新版是第五版。中国引入了这本教材，但据说没有进行中文翻译。封面上就叫《线性代数》。&lt;/p&gt;
&lt;p&gt;&lt;img alt="book1" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-05-24/book1.png" /&gt;&lt;/p&gt;
&lt;p&gt;这本教材的作者是 MIT 大名鼎鼎的 Gilbert Strang。去年被炒得沸沸扬扬的清华大学把线数教材换成了英文版，用得就是这本教材；前一阵子沸沸扬扬的 86 岁老爷子还录网课，说得就是这个作者。&lt;/p&gt;
&lt;p&gt;如果你对这两条新闻不是特别熟悉，可以搜一下。关键词：“清华把线性代数教材换成英文版”；“86岁还在录网课”。&lt;/p&gt;
&lt;p&gt;&lt;img alt="gilbert" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-05-24/gilbert.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Gilbert Strang 老爷子在 MIT 的线数公开课很有名，相信很多同学都看过。如果没看过的话，推荐看一下。&lt;/p&gt;
&lt;p&gt;MIT 的官方地址在这里：&lt;a href="https://ocw.mit.edu/courses/mathematics/18-06-linear-algebra-spring-2010/index.htm"&gt;https://ocw.mit.edu/courses/mathematics/18-06-linear-algebra-spring-2010/index.htm&lt;/a&gt;；&lt;/p&gt;
&lt;p&gt;2020 年更新的视频内容在这里：&lt;a href="https://ocw.mit.edu/resources/res-18-010-a-2020-vision-of-linear-algebra-spring-2020/videos/"&gt;https://ocw.mit.edu/resources/res-18-010-a-2020-vision-of-linear-algebra-spring-2020/videos/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果访问外网有困难，可以在 B 站搜索一下，应该很好找到。&lt;/p&gt;
&lt;p&gt;他的课程基本是跟着这本教材走的，但是远不如教材详细，我认为可以看作是教材的一份很好的补充说明。也可以据此体会一下国外上课的风格：平时主要靠自学，老师上课就是点拨一下：）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;另一本叫《Linear Algebra and Its Applications》，最新版是第五版。有中文版，叫《线性代数及其应用》。听名字，这本书似乎更强调应用，但其实 Gilbert 老爷子的书也有专门一章讲应用。&lt;/p&gt;
&lt;p&gt;&lt;img alt="book2" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-05-24/book2.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;值得一提的是：Gilbert 的书有专门一小节介绍线性代数在图形学上的应用；《线性代数及其应用》还有专门一章介绍向量空间上的几何应用。这些内容对图形学的学习很有帮助。&lt;/p&gt;
&lt;p&gt;但要说专门针对图形学的线性代数资料，有，就是几页纸，我相信你觉得没什么用。一定要找的话，可以在 google 搜索 &lt;strong&gt;linear algebra in graphics&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;实际上，这里可能有一个重要的学习误区，也是这篇文章我想聊的重点，大家可以再审视一下自己学习的过程，是否有这个问题。&lt;/p&gt;
&lt;p&gt;很多同学看图形学也好，机器学习也罢，看到一大堆线性代数的公式，头就大了，觉得自己的线性代数不够好，就想去补线性代数。但真的补线性代数的时候，发现其实一般的线性代数课本就是那些内容，自己似乎好像又都了解。&lt;/p&gt;
&lt;p&gt;当然，如果你的数学真的不扎实，连矩阵是怎么回事儿都不明白，那学习线性代数无可厚非。但我的经验是：&lt;strong&gt;很多人的问题根本不在数学上。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我经常举的一个例子是：E=mc^2，这个式子大家都懂吗？&lt;/p&gt;
&lt;p&gt;&lt;img alt="einstein" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-05-24/einstein.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;这个式子就是著名的质能方程式。反正我是不懂这个式子的。&lt;/p&gt;
&lt;p&gt;不懂怎么办？难道去学习乘法和乘方运算吗？当然不是。乘法和乘方运算我是懂的，但&lt;strong&gt;阻止我理解这个式子的瓶颈，是物理学。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;同理，在图形学或者机器学习领域，很多时候，我们看到一个式子，阻止我们理解这个式子的关键在于：式子中的每一个变量，到底和这个领域里的知识是怎么对应的？为什么可以这么对应？为什么这么算就能得到我们想要的结果？等等等等，而根本不是数学本身。&lt;/p&gt;
&lt;p&gt;这些问题，是补数学解决不了的。这就好比我们再怎么学习乘法和乘方运算，还是无法理解 E=mc^2 一样。&lt;/p&gt;
&lt;p&gt;怎么办？&lt;strong&gt;必须和这个领域死磕。&lt;/strong&gt;很多时候，我们要去和图形学较劲，要去和机器学习较劲，而不是回头拿起本科的数学书重新看数学。&lt;/p&gt;
&lt;p&gt;如果真的能把问题规约成就是一个纯粹的数学问题，其实从某个角度看，事情反而变简单了，就去有针对性地补这方面的数学就好了。甚至在一些情况下，不补都可以，把它当作一个结论就好了。反正大多数人也根本不知道 PI 是怎么算出来的。&lt;/p&gt;
&lt;p&gt;&lt;img alt="pi" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-05-24/pi.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我的观察：有些时候，很多同学只是缺乏耐心而已，或者对数学公式有畏难情绪。看到一大堆式子，头就大了，就不想深究下去了。很多同学总以为数学好到一定程度，看书上或者论文里的式子，就应该瞬间理解了。&lt;strong&gt;实际不是这样的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;面对一个公式，如果大家能静下心来，仔细去理解每个变量到底在表达什么？每个计算的结果到底是什么意义？对于矩阵，实际使用小规模的数据试试看？对于抽象的 n 维空间，用 2 维空间或者 3 维空间的例子试验一下，仔细研究一下式子的每一步到底在计算什么？其实很多同学完全可以搞明白这些公式在说什么。&lt;/p&gt;
&lt;p&gt;更重要的是，这本身，也是在学习，复习，应用数学的过程！&lt;/p&gt;
&lt;p&gt;很多同学都问我，觉得学习数学好枯燥，干巴巴的太抽象，学了也觉得用不上。什么教材能让我觉得自己学习的数学是有用的？&lt;/p&gt;
&lt;p&gt;上面推荐的两本线性代数教材都是好教材。但是，&lt;strong&gt;如果真的想应用数学，其实不应该找数学教材。&lt;/strong&gt;因为数学只是一个工具。去学图形学，去学机器学习，就是在应用数学！&lt;/p&gt;
&lt;p&gt;这有点儿像如果想真实地应用算法，就不要再去看讲初级算法的教材了。哪怕是《算法导论》，也是一个导论而已，它不是应用。&lt;strong&gt;去看操作系统，去看编译原理，到处都是算法和数据结构的应用！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;之前，我的公众号还写过一篇文章，叫&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-04-26/"&gt;《觉得自己基础差，该不该系统补数学？》&lt;/a&gt;。文章中有句话，是：我认为和算法本身去较劲，比去学习数学，更能提升算法水平。&lt;/p&gt;
&lt;p&gt;把“算法”替换成“图形学”，是同样适用的：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;和图形学本身去较劲，比去学习数学，更能提升图形学水平。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我没有说所有同学都不应该补数学。只是提出一个角度，大家可以再根据自己的实际情况，有针对性地反思一下，自己的学习计划是否合理。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-05-24/readme.md" rel="alternate"/></entry><entry><id>2020/2020-05-20/readme.md</id><title>跟什么样的人</title><updated>2020-05-20T00:00:00-07:00</updated><content>&lt;h2&gt;跟什么样的人&lt;/h2&gt;
&lt;p&gt;前几天，和一个同学电话聊了一个小时，很有感触。&lt;/p&gt;
&lt;p&gt;期间，我们谈到一个问题，就是职场上，要跟什么样的人。&lt;/p&gt;
&lt;p&gt;很多初入职场的人，大多愿意跟技术大牛。这本无可厚非。但如果在职场混上十年，多跟几个 leader，就会明白，很多时候，这并非是最好的选择。&lt;/p&gt;
&lt;p&gt;技术大牛一定能让你的技术提高最快吗？有的时候是，但有的时候并非如此。很多技术大牛会习惯性地遇到具体的技术问题，自己三五下就解决了，而忽略掉让团队成员进步成长的机会。&lt;/p&gt;
&lt;p&gt;但是好的 leader，是会考虑到团队成长的。遇到一个问题，他会或明或暗地让整个团队去思考：这里是不是有一个问题？我们是不是要解决它？我们怎么解决它？解决方案可能带来的结果是怎样的？有没有副作用？&lt;/p&gt;
&lt;p&gt;这还只是从技术问题的角度讨论。站在一个更高的层面，一个好的 leader，是会放权的，也是会分权的。他会鼓励团队的每个成员主动冒泡，承担责任。&lt;/p&gt;
&lt;p&gt;不要小瞧承担责任，责任是最好的成长基石。&lt;strong&gt;责任意味着压力，压力意味着快速成长。&lt;/strong&gt;其实，大多数人都是在“责任”的督促下，逐渐成长起来，最后能够独当一面的。&lt;/p&gt;
&lt;p&gt;但是，这不意味着在出问题时，让团队成员背锅。好的 leader 会及时反省自己的管理失误，保护自己的团队成员。&lt;/p&gt;
&lt;p&gt;好的 leader 还有很多特质和行动准则。他们能很好地平衡人事问题，处理企业内部资源分配问题，等等等等。这些问题很多时候涉及到所谓的“公平”。&lt;/p&gt;
&lt;p&gt;成年人都明白：真实的世界没有绝对的公平。但好的 leader 能够通过沟通，让团队成员接受“暂时的不公平”，同时去尽力争取“更多的公平”。&lt;/p&gt;
&lt;p&gt;这些，都是和技术高低没有关系的，但这些问题，在一个团队中，都比技术问题重要很多。&lt;/p&gt;
&lt;p&gt;说得洋气点儿，这叫做会 &lt;strong&gt;coaching&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;久而久之，在这样的 leader 的带领下，整个团队才能真正成长，才能拥有较为一致的行动方向和思考方向。即便有争执，价值观也是一致的。&lt;/p&gt;
&lt;p&gt;不要小瞧价值观的一致，在关键时刻，价值观的分歧可以让一个团队分崩离析；在困难时期，价值观的一致也可以让一个团队逆流而上。&lt;/p&gt;
&lt;p&gt;如果有一个技术牛同时又懂 coaching 的 leader，那再好不过了。否则，两者取其一的话，我认为，&lt;strong&gt;会 coaching 的 leader，是更好的选择。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;因为他能真正带你成长。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;不过，很多同学可能就有疑问了，怎么找到这样的好 leader 呢？&lt;/p&gt;
&lt;p&gt;很可惜，&lt;strong&gt;好的 leader 是可遇不可求的。&lt;/strong&gt;整体而言，越好的企业，leader 越大概率的“不会太差”。因为大企业对管理的认识更深刻，实践也更多，无论是管理体系，还是员工的成长体系，都更完善。&lt;/p&gt;
&lt;p&gt;但即便如此，大企业也有恶心的 leader，恶心的事儿。毕竟，&lt;strong&gt;有人的地方，就有江湖。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我无法告诉大家如何找到好的 leader，但是，当大家有选择的时候，这是一个重要的选择标准。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;很多时候，知道如何更好地选择，拥有一个自己的判断标准和选择框架，是很重要的事情。&lt;/strong&gt;因为，任何人的一生，都无时无刻不面对着选择。&lt;/p&gt;
&lt;p&gt;如果我们无法找到“好”的，那么退而求其次，至少应该能够识别“差”的，扔掉“差”的。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;即使你一直遇不到好的 leader，但是，所有人在职场前进的过程中，都早晚会成为 leader 的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;或许，我们至少可以选择：让自己成为一个更好的 leader。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;之前写过一篇文章，叫&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-02-18/"&gt;《从技术，到管理》&lt;/a&gt;。有兴趣的同学，也可以随便看看。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-05-20/readme.md" rel="alternate"/></entry><entry><id>2020/2020-05-16/readme.md</id><title>土豆悖论</title><updated>2020-05-16T00:00:00-07:00</updated><content>&lt;h2&gt;土豆悖论&lt;/h2&gt;
&lt;p&gt;你知道什么是土豆悖论吗？&lt;/p&gt;
&lt;p&gt;土豆悖论来源于这样一个简单的数学问题：&lt;/p&gt;
&lt;p&gt;你有 100 公斤的土豆，经过测量，这些土豆中含水量是 99%。你把他们放在阳台上，一晚过后，再测量，这些土豆的含水量变成了 98%。也就是土豆的含水量降低了 1%。&lt;/p&gt;
&lt;p&gt;问：现在，这些土豆的总重量是多少？&lt;/p&gt;
&lt;p&gt;严格的计算可能需要纸和笔。在这里，为了测试大家对数字的直觉，我给出几个选项，大家可以试试，不经过计算，选择一个你认为最接近的正确答案是多少？&lt;/p&gt;
&lt;p&gt;A. 99 公斤&lt;/p&gt;
&lt;p&gt;B. 98 公斤&lt;/p&gt;
&lt;p&gt;C. 50 公斤&lt;/p&gt;
&lt;p&gt;&lt;img alt="potato" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-05-16/potato.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;大多数第一次接触这个问题的童鞋，都会因为正确答案而感到惊讶。因为正确答案是：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;50 公斤！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;你猜对了吗？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;要想计算这个问题，也非常简单，只需要最初等的解方程就可以。&lt;/p&gt;
&lt;p&gt;初始的时候，100 公斤的土豆中，含有 99% 的水分，也就是有 99 公斤的水分。在阳台放一晚上以后，只含有 98% 的水分，也就是有一些水分被蒸发了。我们设蒸发的水分质量是 x 公斤。&lt;/p&gt;
&lt;p&gt;所以，一晚上以后，剩下的水分就是 99 - x 公斤。&lt;/p&gt;
&lt;p&gt;而现在，所有的土豆的质量，也不再是 100 公斤了，而变成了 100 - x 公斤。&lt;/p&gt;
&lt;p&gt;现在，这 100 - x 公斤的土豆中，水分是 98%，我们就可以列出式子：&lt;/p&gt;
&lt;p&gt;&lt;img alt="f1" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-05-16/f1.png" /&gt;&lt;/p&gt;
&lt;p&gt;当然，98% 就是 0.98，为了计算方便，我们在方程中使用 0.98。&lt;/p&gt;
&lt;p&gt;&lt;img alt="f2" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-05-16/f2.png" /&gt;&lt;/p&gt;
&lt;p&gt;下面就是一个标准的解方程问题了，小学生都会算：&lt;/p&gt;
&lt;p&gt;&lt;img alt="f3" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-05-16/f3.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;这个方程的解是 50。换句话说，一晚上要蒸发掉 50 公斤的水，也就是所有土豆重量的一半，才能让土豆的水分含量从 99%，下降到 98%。此时，剩余的土豆，从最初的 100 公斤，变成了只有 50 公斤了。&lt;/p&gt;
&lt;p&gt;怎么样？是不是和你的直觉不相符？&lt;/p&gt;
&lt;p&gt;这就是&lt;strong&gt;土豆悖论&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;土豆悖论本身并不是一个可以推导出相悖结论的悖论，而是这个问题的解，和大多数人的直觉是相悖的。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;土豆悖论说明了什么？&lt;/p&gt;
&lt;p&gt;首先，就是人类对数字的感知，在很多时候，都是不准确的。尤其是当涉及到百分比的时候。&lt;/p&gt;
&lt;p&gt;在统计学上，大名鼎鼎的&lt;strong&gt;辛普森悖论&lt;/strong&gt;，在本质上也是这样一个和百分比相关的悖论。因为辛普森悖论太有名了，有很多文章介绍，所以我就不专门写了，有兴趣的同学，可以在互联网上搜索一下。&lt;/p&gt;
&lt;p&gt;所以，当我们关注一个事物的时候，一定&lt;strong&gt;不能仅仅关注百分比，而要看一下百分比背后的真实数字到底是多少。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;比如，程序员在做性能优化的时候，可能会通过一些性能分析工具，看到不同的函数（或者子过程）在每次请求的运行过程中消耗的时间占比。&lt;/p&gt;
&lt;p&gt;假如有一个函数 f()，在整个过程中，消耗的时间高达 99%，那么显然，我们要优化一下这个 f() 了。&lt;/p&gt;
&lt;p&gt;可如果大家通过努力，绞尽脑汁，发现只能把 f() 消耗的时间占比优化到 98%，看起来似乎只有 1% 的优化，但不要气馁。因为，土豆悖论告诉了我们：你已经将整个程序的执行时间，优化了整整一倍。&lt;/p&gt;
&lt;p&gt;因此，我们不能紧紧盯着百分比看，而一定要看实际的执行时间，到底有了怎样的变化。&lt;/p&gt;
&lt;p&gt;当然，可能会有一些竞争对手来攻击我们。他们会说，这没什么了不起，因为这个工作只将 f() 优化了 1%。此时，请毫不犹豫地告诉他们，什么是土豆悖论。&lt;/p&gt;
&lt;p&gt;这些人，不是傻，就是坏。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;另一方面，土豆悖论告诉了我们：挤掉水分是多么地困难。&lt;/p&gt;
&lt;p&gt;让水分含有量下降 1%，竟然意味着要挤掉占总质量一半的水分！&lt;/p&gt;
&lt;p&gt;实际上，我们可以再构造这样一个问题：100 公斤土豆，其中水分占比是 99.9999%，在外面晾一晚上，让水分变成 99.9998%。也就是，让水分含有量下降 0.0001 %。问，剩下的土豆质量是多少？&lt;/p&gt;
&lt;p&gt;相信通过上面的分析，大家都会计算了，这还是一个初等解方程的问题。方法和上面一样，只是具体数字有所替换：&lt;/p&gt;
&lt;p&gt;&lt;img alt="f4" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-05-16/f4.png" /&gt;&lt;/p&gt;
&lt;p&gt;是的，最终的答案还是 50！&lt;/p&gt;
&lt;p&gt;这一次，为了让水分含有量下降 0.0001%，我们也要挤掉一半质量，即 50 公斤的水分！&lt;/p&gt;
&lt;p&gt;为什么？因为从数学的角度看，干货的含量太少了。这两组数据的共同点其实是：整个过程，干货占比都翻倍了，只不过一个是从 1% 的干货，变成 2% 的干货；一个是从 0.0001% 的干货，变成 0.0002% 的干货。&lt;/p&gt;
&lt;p&gt;当干货占比很少的时候，增加一点点的干货，减少一点点的水分，都意味着干货占比的增倍。这也就意味着，我们需要挤掉大量的水分——比大多数人想象的多得多的水分。&lt;/p&gt;
&lt;p&gt;但是，如果干货占比本身很大，事情就不一样了。&lt;/p&gt;
&lt;p&gt;大家可以计算一下，如果 100 公斤土豆，其中水分占比是 50%，也就是干货占比也是 50%，干货占比其实似乎也并没有很大。但此时，让水分的含有量下降 1%，也就是让水分占比达到 49%，对应挤掉水分的重量是多少？&lt;/p&gt;
&lt;p&gt;答案是：只需要挤掉 1.96 公斤左右的水分就可以了。计算过程如下：&lt;/p&gt;
&lt;p&gt;&lt;img alt="f5" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-05-16/f5.png" /&gt;&lt;/p&gt;
&lt;p&gt;有兴趣的童鞋可以试一试，如果初始水分的占比更少，干货的占比更高，为了让水分含有量下降 1%，我们实际要挤掉的水分的质量会更少。&lt;/p&gt;
&lt;p&gt;结论：&lt;strong&gt;学习也好，做人也罢，不要太水，多关注干货。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;否则，等真地想要挤掉水分的时候，会很费劲。可能比大家想象的，要费尽得多。&lt;/p&gt;
&lt;p&gt;不要落进&lt;strong&gt;土豆悖论&lt;/strong&gt;的陷阱。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-05-16/readme.md" rel="alternate"/></entry><entry><id>2020/2020-05-10/readme.md</id><title>测试思维</title><updated>2020-05-10T00:00:00-07:00</updated><content>&lt;h2&gt;测试思维&lt;/h2&gt;
&lt;p&gt;这是在我的知识星球上，一个同学问我的问题。&lt;/p&gt;
&lt;p&gt;bobo 老师，最近在看一些代码的时候遇到一个问题：要去哪里获取全面的测试用例呢？&lt;/p&gt;
&lt;p&gt;那么多算法，那么多功能，自己实现之后，如果和模板代码不同，要怎么证明自己写的是正确的呢？不知道老师平时是如何解决这个问题的？&lt;/p&gt;
&lt;p&gt;谢谢老师。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;bobo 老师的回答：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果是专门的领域，都有专门的测试数据库。比如人脸识别数据库，手写识别数据库，等等等等。&lt;/p&gt;
&lt;p&gt;在这个公众号，我在&lt;a href="https://mp.weixin.qq.com/s?__biz=MzU4NTIxODYwMQ==&amp;amp;mid=2247484963&amp;amp;idx=2&amp;amp;sn=e7e5e2d0c3579a1a24f921141936784c&amp;amp;chksm=fd8ca965cafb2073bc3a444d2ab87bfa272dd2273e68f6758dac9911fb3dc9abe76f66c52491&amp;amp;token=52272915&amp;amp;lang=zh_CN#rd"&gt;【是不是很酷】开源资源 分享 | 第 4 期&lt;/a&gt;中介绍过一个这类机器学习领域测试用例的下载站：&lt;a href="http://academictorrents.com/"&gt;http://academictorrents.com/&lt;/a&gt;；&lt;/p&gt;
&lt;p&gt;另外一个很重要的数据集的下载站是 OpenML：&lt;a href="https://www.openml.org/"&gt;https://www.openml.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="openml" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-05-10/openml.png" /&gt;&lt;/p&gt;
&lt;p&gt;Google 也有一个专门的数据集搜索引擎：&lt;a href="https://datasetsearch.research.google.com/"&gt;https://datasetsearch.research.google.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="google" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-05-10/google.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;但这些都不是这篇文章的重点。&lt;/p&gt;
&lt;p&gt;重点是，如果你说的是我们在平时开发过程中写的普通模块或者算法的测试用例，那对不起了，没有。&lt;/p&gt;
&lt;p&gt;如果任何一个算法或者模块都能直接找到现成的完整测试用例的话，测试工程师这个岗位就没有意义了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;实际上，设计测试用例本身，也是每个开发人员都需要的素质。尤其是边界条件测试。因为如果开发者都不知道自己写的模块边界在哪里的话，也就不可能在程序中正确地处理考虑这些边界了。&lt;/p&gt;
&lt;p&gt;大多数算法比赛，如果程序出错，也不会告诉你错误用例。这本质其实也是在考察参赛者的测试功底；在平时训练的时候，大家也需要锻炼自己的测试能力。&lt;/p&gt;
&lt;p&gt;这并非没有道理，因为在很多企业或者项目组内部，都是做&lt;strong&gt;测试驱动的开发&lt;/strong&gt;的。大家可以搜索一下这种开发模式，英文名称是 Test-Driven Development，缩写是 &lt;strong&gt;TDD&lt;/strong&gt;。在我看来，是非常重要的一种开发模式。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;除去边界条件测试，可能需要我们开发者进行手动设计以外（因为边界条件测试是具体问题相关的，需要具体问题具体分析），一个最简单的测试方式，就是根据问题的约束条件，随机生成数据做测试。&lt;/p&gt;
&lt;p&gt;说“随机”显得太不高大上了。说得高大上一点儿，这叫&lt;strong&gt;蒙特卡罗&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;随机生成数据就有了一个新问题：我们不仅仅需要输入数据，我们还需要知道这些输入数据所对应的正确答案是什么，才能和自己的代码输出做比对。&lt;/p&gt;
&lt;p&gt;那么一个随机生成的，全新的数据，正确答案怎么来？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;首先，&lt;strong&gt;很多问题并不需要正确答案，我们可以直接验证答案的正确性。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;比如，为了验证一个排序算法是否正确，直接看最终的排序结果是否有序就好了。做一万轮随机测试，每一轮都生成一组随机序列，执行我们的排序算法，看结果是否有序，这是很可靠的一种测试方式。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;很多问题都是难求解，易验证的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;再举个简单的例子：解方程就是这类问题。&lt;/p&gt;
&lt;p&gt;解一个方程可能难死，甚至到现在，世界上大多数方程我们人类根本不知道怎么解。但是，验证一个解是否满足某个方程，则简单到爆。这也是很有意思的一个问题，更深入的分析涉及&lt;strong&gt;计算理论&lt;/strong&gt;了。有兴趣的同学可以看看这门科学，不过和测试无关了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;当然，还有另外一类问题，确实需要我们有正确的答案。对于这种情况，其实也很简单：写一个暴力算法，算出正确数据，然后和我们的算法结果做比对。这叫&lt;strong&gt;暴力对拍&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;比如，为了验证一个优化的矩阵乘法是否正确，可以写一个暴力的 O(n^3) 级别的矩阵算法去对拍；&lt;/p&gt;
&lt;p&gt;为了验证一个 dp 算法是否正确，可以写一个暴力的回溯搜索算法做对拍。&lt;/p&gt;
&lt;p&gt;很多算法竞赛的出题人都会用这种方式来验证标程的正确性的，这种方法在业界也很常用。&lt;/p&gt;
&lt;p&gt;当然，这种方式的缺点是：不能测试大规模数据。不过，从验证算法正确性的角度，也并不需要大规模数据。&lt;/p&gt;
&lt;p&gt;99.9% 的正确性问题，在小规模数据上就能验证出来。只不过，放到大规模数据上，可能会有不满足性能要求，或者申请系统资源过大的情况。而这些问题，已经不是正确性问题了。&lt;/p&gt;
&lt;p&gt;说句题外话，我做算法竞赛的时候，一直秉持一个原则：一个问题可以做成 TLE，即超过时间限制；可以做成 MLE，即超过空间限制；但不能做成 WA，即答案错误。&lt;/p&gt;
&lt;p&gt;因为 TLE，MLE，意味着没有使用某种优化方式；但 WA，意味着程序是有 bug 的。我认为这是基本功问题。程序可以超时，可以超空间，我们可以想办法优化它，或者学习更高效的方法。但是已经写出来的代码，不应该有错误。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;最后，我经常使用的一个测试方式是：把自己写的一个模块封装成一个算法问题的解（如果可以的话），扔到 OJ 上做测试。比如为了测试自己写的二分搜索树是否正确，我会把这个二分搜索树的代码封装成一个集合类或者映射类，到 OJ 上找几个需要使用集合或者映射的问题，提交试一下。&lt;/p&gt;
&lt;p&gt;这样做，省得我自己暴力对拍了。&lt;/p&gt;
&lt;p&gt;不过，这基于我对很多典型的算法问题类型都很熟悉，也对一些 OJ 很熟悉，能够迅速将一些代码规约或者应用到某类典型算法问题上，然后通过 OJ 帮助我测试。&lt;/p&gt;
&lt;p&gt;这种方法，我觉得其实不值得推广。&lt;/p&gt;
&lt;p&gt;真正值得推广的是：&lt;strong&gt;测试也是一门有深度的技术领域。&lt;/strong&gt;如果感兴趣，大家可以找找相关的书籍，学习一下测试领域的一些思维和技巧，资料应该还是挺多的。&lt;strong&gt;最重要的是：培养测试思维。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;说实话，软件行业作为一门工程学科，行业整体对测试的强调，我认为是不够的。&lt;strong&gt;这不仅仅是一个软件开发效率的问题，更是一个安全性的问题。&lt;/strong&gt;毕竟，软件已经和我们的生活越来越紧密地连接在了一起。&lt;/p&gt;
&lt;p&gt;如果去看其他大部分工程学科，测试都是非常重要的一个工作。我们很难想象我们住的房屋结构，或者我们开的汽车，没有做过严谨的安全性测试；甚至，一个家具厂商在设计家具的过程中，做的测试，可能都比很多软件开发的过程做得测试还要多。&lt;/p&gt;
&lt;p&gt;相信，随着软件行业的发展，测试会变得越来越重要。&lt;/p&gt;
&lt;p&gt;因为，&lt;strong&gt;测试思维是一种非常重要的工程思维，绝不仅仅只在计算机专业上。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-05-10/readme.md" rel="alternate"/></entry><entry><id>2020/2020-05-03/readme.md</id><title>希望所有的后浪们</title><updated>2020-05-03T00:00:00-07:00</updated><content>&lt;h2&gt;希望所有的后浪们&lt;/h2&gt;
&lt;p&gt;今天，我的朋友圈被“B 站的后浪”刷屏了。&lt;/p&gt;
&lt;p&gt;有意思的是，我发现：刷屏的大多是和我年龄差不多的“老男人”们。而有几个在我朋友圈里，我特别看好的“小朋友”们，刚刚高中生，就已经大有作为了，我特地跑到他们的朋友圈转了一圈，和什么前浪后浪一点儿关系都没有。&lt;/p&gt;
&lt;p&gt;想了想，或许这“B 站的后浪”，更多的，是属于“前浪们”的感慨和宣泄吧。&lt;/p&gt;
&lt;p&gt;至于那些真正的后浪们，他们才不关心这情怀呢。人家正享受青春大好的人生呢，哪里有时间在这里转发老男人们的絮叨和感慨 &lt;/p&gt;
&lt;p&gt;我这么年轻，当然也属于后浪啦。所以，我也就不感慨了，继续加油推前浪去了 &lt;/p&gt;
&lt;p&gt;相信关注这么酷的公众号的童鞋们，不管年龄多大，都是后浪！&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;希望所有的后浪们，都把前浪拍在沙滩上！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;最后，鲁迅先生的一段话，送给大家：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;愿中国青年都摆脱冷气，只是向上走，不必听自暴自弃者流的话。能做事的做事，能发声的发声。有一分热，发一分光，就令萤火一般，也可以在黑暗里发一点光，不必等候炬火。&lt;/p&gt;
&lt;p&gt;此后如竟没有炬火：我便是唯一的光。倘若有了炬火，出了太阳，我们自然心悦诚服的消失，不但毫无不平，而且还要随喜赞美这炬火或太阳；因为他照了人类，连我都在内。&lt;/p&gt;
&lt;p&gt;鲁迅 《随感录四十一》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;祝所有人五四青年节快乐！&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-05-03/readme.md" rel="alternate"/></entry><entry><id>2020/2020-04-26/readme.md</id><title>觉得自己基础差，该不该系统补数学？</title><updated>2020-04-26T00:00:00-07:00</updated><content>&lt;h2&gt;觉得自己基础差，该不该系统补数学？&lt;/h2&gt;
&lt;p&gt;这是在我的知识星球上，一个同学问我的问题。&lt;/p&gt;
&lt;p&gt;波波老师您好。&lt;/p&gt;
&lt;p&gt;我今年 28 了，也算是科班出身，但是大学的时候基本没怎么上过课。毕业到现在 5 年了，明显感觉到技术上的很多东西学起来都力不从心。&lt;/p&gt;
&lt;p&gt;我现在想先从高中数学开始，到高数线代离散，全部先都过一遍。之后，再把学习的重点放在算法和数据结构上面。&lt;/p&gt;
&lt;p&gt;顺便说一下，我高中之前对数学都是比较有兴趣的，所以现在学起来也不会觉得痛苦。但是因为年龄也比较大了，导致现在整个人都处于一种特别焦虑的状态，经常会怀疑：做这些到底值不值？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;bobo 老师的回答：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我觉得我很理解你的这个想法。但我想给你浇一盆冷水。根据我的经验，这样做，大概率会效率很低，最终不会得到你想要的东西。&lt;/p&gt;
&lt;p&gt;我还是更建议你能仔细想明白，&lt;strong&gt;自己到底想要学什么，然后直接去学。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;除非你真的想要学的是数学，否则的话，我不建议“从头学数学”。&lt;/p&gt;
&lt;p&gt;为什么？&lt;/p&gt;
&lt;p&gt;一方面，数学是一个无底洞，可以无限拓展，其实很难真正地“掌握”；&lt;/p&gt;
&lt;p&gt;另一方面，数学也是一个太过抽象的笼统的概念。&lt;/p&gt;
&lt;p&gt;这点，其实和计算机是一样。前端是计算机；后端是计算机；移动开发是计算机；网页开发也是计算机。人工智能是计算机；虚拟现实是计算机；编译器是计算机；数据库是计算机；网络安全是计算；大数据分析还是计算机；图形学，图像学，语音识别，推荐系统，人脸识别，语义分析，搜索引擎，知识图谱，统统都是计算机。在计算机的世界里，隔行如隔山。&lt;/p&gt;
&lt;p&gt;数学的世界，也是如此！高数，线数，概率，统计，解析几何，计算几何，图论，数论，群论，数理逻辑，组合数学，博弈论，拓扑数学，这些统统都是数学！&lt;/p&gt;
&lt;p&gt;但具体到某一个方向，实话实说，并非所有这些数学都是有用的。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;成人之后的学习，我还是更推崇有针对性的学习。想“系统地学习”并没有错，但是我认为不应该是“系统地学习高中数学或者大学数学”，而应该聚焦在“系统地学习某一个门类的数学”。这样效率更高，也容易达成自己的目标，成就感强，有正反馈，也就更有进一步的学习动力。&lt;/p&gt;
&lt;p&gt;你说“明显的感觉到技术上的很多东西学起来都力不从心”。我的建议是：仔细总结，到底是学习哪些技术时，感觉力不从心？感觉力不从心的关键，到底是什么？真的是自己的数学基础问题吗？还是其实这个领域本身就没有系统接触过？如果真的是数学基础问题，到底是哪一个领域的数学问题？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;把问题不断地问下去，找到属于自己的核心瓶颈，而不是简单地把一切归结于一句“自己的基础不好”。&lt;/strong&gt;因为这一定程度上，其实是“逃避”了可能隐含的核心问题。就算你开始很努力地“补基础”，但很有可能花了很长时间以后，发现离自己想要达到的目标，依旧很远。其实在我看来，这也是掉入了完美主义的陷阱。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;另外，&lt;strong&gt;有一些领域，学习曲线就是陡峭的，其实和所谓的基础关系不大。&lt;/strong&gt;就算基础再好，也改变不了这个学科或者领域本身学习曲线陡峭的事实；学再多基础，也无法避免初学时碰壁。&lt;/p&gt;
&lt;p&gt;比如，学习使用 Windows 的记事本是很容易的事情，但是学习使用 Vim，就是很难的。Vim 的学习曲线，就是陡峭的。&lt;/p&gt;
&lt;p&gt;仔细想一想，提前学习什么，会使得我们可以更加平顺地掌握 Vim？我确实没有什么好的建议。我唯一能做到的就是告诉你：Vim 本身就是难学的，不要气馁，每个人都一样。不停地使用 Vim，不停地熟悉每一个概念和功能，慢慢你就能掌握它了。&lt;/p&gt;
&lt;p&gt;其实，我觉得算法也是此类学习曲线相对陡峭的学科。我真心不认为数学基础好，就可以很简单地理解红黑树的实现细节，或者轻松搞明白 KMP。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我认为和算法本身去较劲，比去学习数学，更能提升算法水平。&lt;/strong&gt;根据你的叙述，我估计，如果你去和那些斩获大厂 offer 的人去聊，有一半人可能数学还不如你呢。&lt;/p&gt;
&lt;p&gt;当然，当你要实现一个计数算法，突然意识到自己的排列组合不够好；或者当你要实现一个几何算法，发现需要系统学习一下计算几何；或者当你学习图形学，意识到线数很重要；或者在学习机器学习的过程中，发现需要高数和统计基础的时候，自然要去“死磕”相关的数学的。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;指望着提高自己的基础，然后就能自然而然地，无障碍地，非常平顺地学会这个世界上的任何知识，有些过于理想主义了。虽然大多数课程的设计者，教材的编写者，追求的就是能让学习者尽量平顺地完成整个学习过程，但这毕竟只是一种追求，&lt;strong&gt;我悲观地认为近乎永远达不到。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;更何况，这个世界上还有一些教育学家在提倡：不应该过渡追求平缓的学习过程。学习就应该在自己能力范围里，去追求最陡峭的学习方案，只有这样，才能最快速地提高和成长。&lt;/p&gt;
&lt;p&gt;当然，我没有说这种观点一定正确，我只能说它也有一定的道理。通过这些讨论，我们可以看出来，&lt;strong&gt;学习是一件很复杂的事情。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我经常说，学习方法没有一定之规。与其不停地去寻找学习的路径，学习的方法，不停地做“学习前的准备”，不如直接去学。&lt;/p&gt;
&lt;p&gt;学习的过程不仅仅是吸收知识，增长技能。每个人在学习的过程中，也是在实践自己的学习方法，并且不断地调整。&lt;strong&gt;只有在学习的过程中，每个人才能找到最适合自己的学习方法。而这，很有可能比任何实际的知识，都重要得多。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我不相信这个世界上有万能的学习方法。我经常用反证法说明这类问题：如果这个万能的学习方法存在的话，那么所有人早就去使用这些方法了，所有人也都很顺利地迅速掌握了自己希望自己掌握的知识了。但显然，这个世界不是这样子的。&lt;/p&gt;
&lt;p&gt;如果真说万能学习法，我曾经写过一篇文章，就叫&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-08-20/"&gt;《万能学习法》&lt;/a&gt;。你可以读一读，看看是不是有启发？：）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;最后，我要说，如果你只是单纯地对数学感兴趣，那么上面所有这些话都是废话。&lt;/p&gt;
&lt;p&gt;兴趣是一件神奇的东西。我们可以不计回报地去追求自己的兴趣，甚至为了兴趣付出自己的所有。&lt;/p&gt;
&lt;p&gt;拥有兴趣是一件很幸运的事情，追逐兴趣也是一件很幸福的事情。而且，大多数人确实更容易在自己感兴趣的事情上成功；即使不成功，也无怨无悔。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-04-26/readme.md" rel="alternate"/></entry><entry><id>2020/2020-04-20/readme.md</id><title>优雅地证明盛水容器问题</title><updated>2020-04-20T00:00:00-07:00</updated><content>&lt;h2&gt;优雅地证明盛水容器问题&lt;/h2&gt;
&lt;p&gt;Leetcode 上第 11 号问题：盛最多水的容器，是一道非常经典的问题。不久前，一个同学还告诉我，他去字节跳动面试，考了一模一样的原题。&lt;/p&gt;
&lt;p&gt;&lt;img alt="leetcode" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-04-20/leetcode.png" /&gt;&lt;/p&gt;
&lt;p&gt;这个问题本身很好理解：在坐标轴的每个坐标位置都放上了一系列长度不等的竖板。要求在这些竖板中选出两块，这两块竖板和坐标轴组成了一个“容器”。这个容器的底就是这两块竖板所在的坐标之间的距离；而高则是这两块竖板之间的较短者。所谓短板效应。&lt;/p&gt;
&lt;p&gt;问题是希望找到两块竖板，使得这个“容器”的面积最大。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;如果总共有 n 块木板可以选择的话，我们可以暴力枚举任意两块木板的组合，检查他们组成的容器面积，一共需要检查 n * (n - 1) / 2 对木板的组合。&lt;/p&gt;
&lt;p&gt;如果会排列组合的同学，可以很轻易地使用组合公式得到这个结果，即：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;C(n, 2) = n * (n - 1) / 2&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;即使不擅长排列组合的同学，也可以非常容易地通过程序来分析出这个结果。我们的暴力枚举的程序伪码是这样的：（其中数组 a 存储了 n 个木板的高度）&lt;/p&gt;
&lt;p&gt;&lt;code&gt;res = 0;
for(i = 0; i &amp;lt; n; i ++)
    for(j = i + 1; j &amp;lt; n; j ++){
        // 判断使用 a[i] 和 a[j] 作为木板组成的容器是否是更大的容器
        // min(a[i], a[j]) 是容器的高度，即两块木板选短者
        // j - i 为容器的底
        res = max(res, min(a[i], a[j]) * (j - i));
    }
return res;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在上面的循环中，res 一共被比较计算了几次？&lt;/p&gt;
&lt;p&gt;可以想象，当 i == 0 的时候，j 的取值范围是从 1 到 n-1，内循环一共计算了 n-1 次；&lt;/p&gt;
&lt;p&gt;当 i == 1 的时候，j 的取值范围是从 2 到 n-1，内循环一共计算了 n-2 次；&lt;/p&gt;
&lt;p&gt;当 i == 2 的时候，j 的取值范围是从 3 到 n-1，内循环一共计算了 n-3 次；&lt;/p&gt;
&lt;p&gt;以此类推...&lt;/p&gt;
&lt;p&gt;i 最大取值为 n - 2，此时 j 的取值为 n-1，内循环只计算了 1 次。&lt;/p&gt;
&lt;p&gt;所以，整体，内循环计算的次数，就是 1 + 2 + 3 + ... + (n-3) + (n-2) + (n-1)。&lt;/p&gt;
&lt;p&gt;这是一个等差数列求和，一共 n-1 项，首项为 1，末项为 n-1。带入等差数列求和公式，就是 &lt;strong&gt;n * (n - 1) / 2&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;很显然，这样暴力枚举，我们的算法时间复杂度是 O(n^2) 级别的。&lt;/p&gt;
&lt;p&gt;实际上，这个问题有 O(n) 级别的解法，也就是大名鼎鼎的双指针解法，思路是这样的：&lt;/p&gt;
&lt;p&gt;首先，使用 left 和 right 两个指针，分别指向最左边的木板 a[0] 和最右边的木板 a[n-1]。这样，left 和 right 就构成了一个容器。这个容器的面积，是我们的初始值。&lt;/p&gt;
&lt;p&gt;下一步，我们只需要看 left 对应的木板和 right 对应的木板谁小，就好了。如果 left 更小，那么就 left ++，也就是下一步去检查 a[1] 和 a[n - 1] 组成的容器是否更大？如果 right 更小，那么就 right --，也就是看 a[0] 和 a[n - 2] 组成的容器是否更大？这个过程以此类推，如果发现了更大的容器，就更新结果。&lt;/p&gt;
&lt;p&gt;算法伪码大概是这样的：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;l = 0, r = n - 1;
res = 0;
while(l &amp;lt; r){
    // 判断使用 a[l] 和 a[r] 作为木板组成的容器是否是更大的容器
    res = max(res, min(a[l], a[r]) * (r - l)); 
    if(a[l] &amp;lt; a[r]) l ++;
    else r --;
}
return res;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;可以看出来，这个过程，或者 left ++，或者 right --，木板之间的距离越来越小。直到 left 和 right 碰上，也就是两块木板重合了，容器的底为 0，此时，算法结束。&lt;/p&gt;
&lt;p&gt;这个算法的复杂度是 O(n) 的。因为整个算法中，每一个木板都或者被 left 指针指过一次，或者被 right 指针指过一次，直到 left 和 right 汇合。&lt;/p&gt;
&lt;p&gt;对应的，res 一共被计算了 n-1 次。因为两个木板才能形成一个容器。使用这种方式，n 个木板，&lt;strong&gt;一共组成了 n-1 个容器。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;这个算法看起来非常简单，但是，&lt;strong&gt;一个很致命的问题是：这个算法为什么是正确的？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一个直观的想法是：每次不管是 left 右移，还是 right 左移，容器的底都会减一。由于容器的底减小了，所以，如果我们要想得到更大的面积，就要让容器的高变大。整个容器的高是由最短的木板决定的，所以我们将两个木板中最短的那一个做改变，才有可能得到一个更大的容器。&lt;/p&gt;
&lt;p&gt;这个解释模模糊糊说得通，但似乎并不是那么严格。关键在于，&lt;strong&gt;这个解释没有说明：这个算法为什么没有漏掉一个可能的更大面积的容器？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;Leetcode 的讨论区有很多关于这个算法的正确性的讨论，但我觉得大多数叙述的语言过于理论化了。也有同学在我的课程问答区问过我这个问题，所以，我写了这篇文章，尝试阐述一下这个问题。&lt;/p&gt;
&lt;p&gt;我们来看初始的时候，left 指向 a[0]，right 指向 a[n-1]。我们假设 a[0] 是小于 a[n-1] 的，即 a[0] &amp;lt; a[n-1]。那么下一步，根据我们的算法，就是 left ++，即 left 下一步指向了 a[1]。&lt;/p&gt;
&lt;p&gt;这意味着什么？这就意味着，使用 a[0] 和 a[n-2]；使用 a[0] 和 a[n-3]；使用 a[0] 和 a[n-4]；.... ；使用 a[0] 和 a[1]，这些木板的组合，我们都直接跳过去了，不去计算了。&lt;/p&gt;
&lt;p&gt;换句话说，因为我们直接 left ++ 了，所以所有的以 a[0] 为左边木板的其他组合，都不看了。&lt;/p&gt;
&lt;p&gt;为什么可以这样？&lt;/p&gt;
&lt;p&gt;还记得我们的假设吗？a[0] 是小于 a[n-1] 的。所以，此时，整个容器的高度，是由 a[0] 决定的。因为，如果右边板的高度大于 a[0]，我们取短板，容器的高度还是 a[0]；如果右边的高度小于 a[0]，那么容器的高度比 a[0] 还要小。&lt;/p&gt;
&lt;p&gt;而对于其他的以 a[0] 为左边木板的组合：a[0] 和 a[1]，a[0] 和 a[2]，a[0] 和 a[3]，...，a[0] 和 a[n-2]，底的长度都比 a[0] 和 a[n-1] 更小。而高度又不会超过 a[0]，所以，面积一定是更小的，我们就可以直接排除掉！&lt;/p&gt;
&lt;p&gt;那么这个过程，我们一下子排除了多少组组合呢？答案是，左边是 a[0]，右边是 a[1] ... a[n-2]，一共 n-2 组组合，直接被我们扔掉了。&lt;/p&gt;
&lt;p&gt;当然，如果我们假设 a[0] &amp;gt; a[n-1]，这个逻辑同样成立，只不过我们扔掉的组合，右边固定为 a[n-1]，左边是 a[1] 到 a[n-2]，还是 n-2 个组合。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;现在，假设我们的 left 指向 1 了，right 还是 n-1。再假设，这次是 a[1] &amp;gt; a[n-1] 了。那么，按照我们的算法，就应该是 right-- 了。&lt;/p&gt;
&lt;p&gt;这次，有了上面的分析，相信大家就都理解了，我们不需要比较 a[2] 和 a[n-1]；a[3] 和 a[n-1]；a[4] 和 a[n-1]；...；a[n-3] 和 a[n-1]，a[n-2] 和 a[n-1]，这些组合了。&lt;/p&gt;
&lt;p&gt;为什么？因为此时，a[1] 和 a[n-1] 这个组合中，容器的高度是由右边的板 a[n-1] 决定的。那么剩下的以 a[n-1] 为右侧板的所有容器，高度不可能大于 a[n-1] 了，而底却在缩小，所以，这些组合都可以直接扔掉，不计算了。&lt;/p&gt;
&lt;p&gt;那么这次，我们扔掉了多少个组合？答案是右边固定为 a[n - 1]，左边是 a[2], a[3],...,a[n-2]，一共 n-3 个组合！&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;相信大家可以看出规律来了。我们每次左指针或者右指针移动一次，其实都是扔掉了若干组合，不再需要比较了。&lt;/p&gt;
&lt;p&gt;第一次移动，扔掉了 n-2 个组合；第二次移动，扔掉了 n-3 个组合；第三次移动，将扔掉 n-4 个组合，依次类推，直到最后一次移动，扔掉 1 个组合。&lt;/p&gt;
&lt;p&gt;那么，我们在这个过程中，总共扔掉了多少组合？就是 1, 2, 3, ... , n-4, n-3, n-2 的和。大家可以看出来，这又是一个等差数列。首项是 1，末项是 n-2，一共 n-2 项。&lt;/p&gt;
&lt;p&gt;带入等差数列求和公式，我们一共扔掉了 (n-1)*(n-2)/2 这么多个组合，不用去考虑。&lt;/p&gt;
&lt;p&gt;现在，大家就可以计算一下了。回忆一下上面的叙述：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我们一共扔掉了 (n-1)*(n-2)/2 这么多组合，只计算了 n-1 这么多组合。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;把他们加起来，是多少？&lt;/p&gt;
&lt;p&gt;&lt;img alt="math" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-04-20/math.png" /&gt;&lt;/p&gt;
&lt;p&gt;答案是 n * (n - 1) / 2！&lt;/p&gt;
&lt;p&gt;大家回忆一下，这个数字正好就是 n 块木板，抽出两块，组成容器的所有可能方案！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;C(n, 2) = n * (n - 1) / 2！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;那么这也就证明了，我们的双指针算法，比较了 n-1 组木板，扔掉了 (n-1)*(n-2)/2 组木板，合在一起，已经完整地考虑了所有 n * (n - 1) / 2 组木板的组合了。&lt;/p&gt;
&lt;p&gt;我们这个过程，不会漏掉任何一个组合，最终找到的解，一定是最优解！&lt;/p&gt;
&lt;p&gt;怎么样？是不是觉得这个证明理解起来并不难？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;值得一提的是，虽然我们说这个问题是双指针的问题，但其实，在算法设计上，我们使用了贪心的思想。即每次把最短木板对应的所有其余组合都扔掉了。&lt;/p&gt;
&lt;p&gt;而&lt;strong&gt;对于贪心算法来说，最大的特点就是：通常代码都会比较简单，但要想证明贪心的正确性，会比较费劲。&lt;/strong&gt;这个问题就是一个很好的例子。&lt;/p&gt;
&lt;p&gt;实际上，在 Leetcode 上，还有很多贪心的问题，拥有这样的特点。以后有机会，可以再向大家介绍。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-04-20/readme.md" rel="alternate"/></entry><entry><id>2020/2020-04-15/readme.md</id><title>被沙特政府机构“盗用”的 iOS App</title><updated>2020-04-15T00:00:00-07:00</updated><content>&lt;h2&gt;被沙特政府机构“盗用”的 iOS App&lt;/h2&gt;
&lt;p&gt;最近，在网上看到一个案例，觉得很有意思。&lt;/p&gt;
&lt;p&gt;有一名国外的开发者，叫 mhdhejazi。他在新冠疫情期间，开发了一个 iOS App，叫 Corona Tracker。&lt;/p&gt;
&lt;p&gt;这是一个追踪全世界各地区新冠病毒数据的 App。大家可以看一下，整体 App 设计是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="apps" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-04-15/apps.png" /&gt;&lt;/p&gt;
&lt;p&gt;可以看出来，界面设计相当专业，显然花费了不少心思。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;不仅如此，这个 App 还针对 iPad 进行了适配：&lt;/p&gt;
&lt;p&gt;&lt;img alt="ipad" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-04-15/ipad.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;同时，这个 App 也支持在 macOS 下使用。以下是在 macOS 下这个 App 的应用截图。&lt;/p&gt;
&lt;p&gt;&lt;img alt="macos" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-04-15/macos.png" /&gt;&lt;/p&gt;
&lt;p&gt;可以看出来，适配工作做得相当齐备。不夸张地说，比很多商业软件做得都出色。&lt;/p&gt;
&lt;p&gt;作者甚至为这款 App 设计了完整的图标。 &lt;/p&gt;
&lt;p&gt;&lt;img alt="icon" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-04-15/icon.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;这样一款出色的 App，开发者将它提交给苹果应用商店以后，被苹果公司拒绝了。&lt;/p&gt;
&lt;p&gt;苹果的理由是：在现在这个疫情肆虐的时期，和疫情相关的数据或者新闻非常重要。为了避免虚假的数据或者新闻的传播，苹果应用商店规定，和新冠病毒相关的信息类应用，必须由权威的，经过认证的健康组织发布。&lt;/p&gt;
&lt;p&gt;苹果公司的这个政策，在 3 月份就开始实施了。CNBC 对此也专门做过报道。&lt;/p&gt;
&lt;p&gt;&lt;img alt="news" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-04-15/news.png" /&gt;&lt;/p&gt;
&lt;p&gt;翻译：据 App 开发者说，苹果拒绝所有不来自健康机构的新冠病毒类 App。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;苹果的这个政策其实无可厚非。这名开发者也认命了。反正他做这款 App，也没有什么商业企图。&lt;/p&gt;
&lt;p&gt;于是，他直接将这款 App 完整地放在了 github 上，进行了开源。同时，整个项目使用 GPL 开源许可协议，声明不可商用。&lt;/p&gt;
&lt;p&gt;在我看来，这也算是为世界做了不小的贡献。&lt;/p&gt;
&lt;p&gt;对于这个开源项目，大家可以点击 &lt;a href="https://github.com/mhdhejazi/CoronaTracker"&gt;这里&lt;/a&gt; 获得。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;可是，另这名开发者没有想到的是，不久之后，他的这款开源的 App 项目，被沙特的一个政府机构：沙特国家健康信息中心，发布在了苹果的应用商店上。&lt;/p&gt;
&lt;p&gt;可想而知，这名作者是非常气愤的。&lt;/p&gt;
&lt;p&gt;对于这名作者的气愤，我非常理解。谁也不愿意自己的劳动成果，一转手，就成了别人名下的作品。&lt;/p&gt;
&lt;p&gt;但是，从严格的法律意义的角度，这名开发者似乎真的没什么办法。&lt;/p&gt;
&lt;p&gt;这里，就要简单和大家介绍一下什么是 GPL 协议了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;GPL 协议是 General Public License 的简称。翻译成中文，叫通用性公开许可证。&lt;/p&gt;
&lt;p&gt;这个协议最主要的特点就是：&lt;strong&gt;受 GPL 协议保护的开源项目，自始至终都必须以开放源代码的方式发布。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;换句话说，如果我看到一款开源的 App 特别好，只要这款 App 的源码是被 GPL 协议保护的，那我拿来修改，是没有问题的；甚至，我以自己的名义再发布一遍，也没问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;条件只有一个：我必须继续保持我的这个项目也是开源的。&lt;/strong&gt;也就是这个修改后的项目，也要遵守 GPL 协议。&lt;/p&gt;
&lt;p&gt;如果，我在一个项目工程中，使用了受 GPL 协议保护的第三方代码，那么整个工程也就自动受到了 GPL 协议的约束，必须开源。&lt;/p&gt;
&lt;p&gt;当然，这里其实有一个叫做“共同作品”的概念。但是对这些法律术语的详细解读，并非这篇文章的重点，也不是我的专长。大家大致理解 GPL 协议的主旨就好。&lt;/p&gt;
&lt;p&gt;简而言之，&lt;strong&gt;GPL 就是在说：这份代码，你去改，没问题；你去用，也没问题。但你必须保持开源。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;阮一峰大神曾经制作过一个非常简单清晰的图表，来说明这些开源协议的关系。&lt;/p&gt;
&lt;p&gt;&lt;img alt="p" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-04-15/p.png" /&gt;&lt;/p&gt;
&lt;p&gt;当然，这里面还有非常多的法律细节，不是这么一张简单的图表就可以解释清楚的。但是，各个开源协议的重点，在这张图中，已经表现得非常清晰了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;如果大家理解了 GPL，再看沙特国家健康信息中心的行为，就会发现，只要他们将上架的这款 App 开源，就没有违反 GPL 协议。&lt;strong&gt;GPL 协议并不阻止源码的修改和二次分发。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;那么，沙特有没有对他们上架的这款 App 开源呢？我没有查证。但是，我个人认为，这没什么难的。毕竟，这并不是什么收费 App，也不涉及什么商业机密。&lt;/p&gt;
&lt;p&gt;甚至，GPL 协议本身，其实并不阻止别人使用相应的源码，通过提供服务的方式来盈利，只要保证无偿提供源码就好。&lt;/p&gt;
&lt;p&gt;比如，我修改一套受 GPL 保护的电商系统源码，上架了一个我自己的电商网站。那么基于这个电商网站的所有交易，都是合法的，并没有版权问题。&lt;strong&gt;只要我保证：我自己的这套电商系统，也是开源的，所有人都可以很容易地无偿获得相应源码，就可以。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我基于这个电商平台产生的所有交易收入，是我自己提供的服务赚取的收入，而不是贩卖这套源码获得的收入。那就不违背 GPL 协议。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;所以，严格看沙特国家健康信息中心的做法，可能还真问题不大。但是，这个开发者非常不爽，我是非常理解的。相信大多数人也能理解。&lt;/p&gt;
&lt;p&gt;对此，我其实在很早之前，刚接触开源项目的时候，就有一个思考。那就是：如果大家如果想避免此类问题，&lt;strong&gt;不应该将完整的，可以直接商业化的，或者直接提交给应用商店的项目，进行完整的开源。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;大家可以选择自己项目中的核心部分做开源。&lt;/p&gt;
&lt;p&gt;比如，对于这个新冠数据追踪的 iOS App 来说，作者可以封装一个获取世界各地新冠病毒数据的开源 API；或者包装一个能展示新冠病毒分布的地图组件，将这个 API，或者这个地图组件做开源。&lt;/p&gt;
&lt;p&gt;这样做，既能为开源社区做贡献，又能积累自己的影响力。同时，也避免了软件直接盗用的问题。&lt;/p&gt;
&lt;p&gt;其实，仔细观察很多企业或者部门机构的开源工程，大多也是遵循这一思路的。&lt;/p&gt;
&lt;p&gt;当然，&lt;strong&gt;既然选择了开源，就避免不了被人使用，也就无法避免被精于市场的组织或者个人拿去，赚更多的钱。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果对于这种可能性觉得非常不爽，我真心建议：不要开源。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;除非你非常清晰地想明白了自己开源的目的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;毕竟，鱼与熊掌不可兼得。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;P.S.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在写这篇文章的时候，我在 V2EX 上搜索到了这么一个话题。因为原作者是在公开平台上发布的信息，我也就不打码了：&lt;/p&gt;
&lt;p&gt;&lt;img alt="post" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-04-15/post.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;作者描述的这个经历，其中的那个图已经显示不出来了。但是大家可以通过文字，大致了解这名作者的遭遇。&lt;/p&gt;
&lt;p&gt;这个帖子下面有一个回复，我很喜欢。&lt;/p&gt;
&lt;p&gt;&lt;img alt="reply" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-04-15/reply.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;开源能不能赚钱？能。有机会，可以和大家聊一聊这个话题。&lt;/p&gt;
&lt;p&gt;但是，必须承认：还是有很多开源作者，尤其是老一辈开源作者，都是真正的理想主义者。&lt;/p&gt;
&lt;p&gt;他们靠自己的情怀和热忱，极大地推动了整个计算机领域向前前进了一大步。也只有这样一群理想主义者，才可能想出 GPL 这种“奇葩”的协议吧。&lt;/p&gt;
&lt;p&gt;曾经有一个人跟我说，他觉得大多数程序员真的傻，一点儿商业头脑都没有。&lt;/p&gt;
&lt;p&gt;因为他去 github 转一圈儿，发现很多项目都有非常好的商业化前景，竟然就这样开源出去了，可惜。&lt;/p&gt;
&lt;p&gt;对此，我笑笑不说话。&lt;/p&gt;
&lt;p&gt;或许，很多程序员就是很傻，没有商业头脑；&lt;/p&gt;
&lt;p&gt;或许，是他不理解程序员的情怀。毕竟，他不是一个程序员。夏虫不可语冰。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;向所有优秀的开源项目作者致敬。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-04-15/readme.md" rel="alternate"/></entry><entry><id>2020/2020-04-12/readme.md</id><title>如果刷题有秘诀</title><updated>2020-04-12T00:00:00-07:00</updated><content>&lt;h2&gt;如果刷题有秘诀&lt;/h2&gt;
&lt;p&gt;在慕课网的算法课程中，有很多同学会问我关于刷题的问题。在这篇文章中，我挑一些典型的问题，简单聊聊我的思考，希望对大家有启发。&lt;/p&gt;
&lt;p&gt;尤其是最后一条，希望大家一定要看看，可能是很多同学都有的问题：）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;问题一：刷题就是应试，所以到底要不要刷题？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先，刷题是不是应试？实话实说，我认为是的。&lt;/p&gt;
&lt;p&gt;所以，当很多同学问我该不该刷题时，我都会反问：&lt;strong&gt;你想刷题的目的，到底是什么？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果是在准备算法面试，我认为应该刷题；但如果你是想提高算法水平，并非是应付面试，我觉得可以选择不刷题。&lt;/p&gt;
&lt;p&gt;在我看来，有很多书，都能很好地提高算法水平，加深对算法的理解。有机会我会向大家推荐一下这些书籍资料。因为这篇文章主要想聊刷题，就先不聊这些资料了。&lt;/p&gt;
&lt;p&gt;为什么我认为准备算法面试应该刷题？&lt;/p&gt;
&lt;p&gt;一方面，算法面试本身就是某种形式的“考试”。准备考试，应试一点，无可厚非。&lt;/p&gt;
&lt;p&gt;实际上，由于国内的教育环境，使得“应试”一定程度成为了一个贬义词。但我倒觉得，我们可以更“中性”地看待它。就算你不刷题，面试前，看看面经，总是无可厚非的。但仔细想，看面经，也是另一种形式的“刷题”。&lt;/p&gt;
&lt;p&gt;另外一方面，我接触了很多同学，拿到了大厂的 offer，他们的面试经历都在告诉我们，对于算法面试，刷题确实是有意义的。&lt;/p&gt;
&lt;p&gt;尤其是力扣（LeetCode）上的问题，非常具有代表性。&lt;strong&gt;甚至有同学告诉我，大厂一场面试七八道算法题，都是力扣（LeetCode）的原题。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我和 LeetCode 的 CEO 一起吃过饭，聊过天儿。他告诉我，力扣的面试题，都是实打实的，最新的，一线大厂的实际算法面试题，是非常宝贵的资料。高效利用这些资料，将帮助我们在准备算法面试的过程中，事半功倍。&lt;/p&gt;
&lt;p&gt;&lt;img alt="leetcode" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-04-12/leetcode.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;问题二：遇到很多问题都没有思路，是不是算法水平还不够？还不应该刷题？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;很多同学想刷题，但是看了几道力扣（LeetCode）上的算法问题，发现自己不会做，于是就觉得自己现在的水平不适合刷题。&lt;/p&gt;
&lt;p&gt;其实，我们在学习基础的算法和数据结构的过程中，大多数时候，主要学习的是经典的算法和数据结构的底层实现。但是具体到面试问题中，考察的多是这些算法和数据结构的应用，包括算法设计。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;底层实现和应用设计，不一样。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;能实现出一个栈，不代表面对一个问题，你能够灵活使用栈解决。实际上，很多需要使用栈解决的问题，是相当有难度的；&lt;/p&gt;
&lt;p&gt;同理，能够实现出一个哈希表，也不代表面对一个问题，你能够轻易看出来它实际可以使用哈希表解决。&lt;/p&gt;
&lt;p&gt;所以，如果你发现力扣（LeetCode）上有很多问题不会做，我倒是建议大家&lt;strong&gt;把刷题的过程看作是学习的过程，而非“做题”的过程。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;学习是什么意思？就是不会很正常，都会了还学什么？看到一个问题不会，力扣（LeetCode）上，每个问题都有那么多题解，网上还有那么多博客写题解，多多利用这些资源，把不会的问题搞明白，就学会了，下次遇到类似的问题，就有经验了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;所谓学习，不过如此。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当然，对于有些问题，确实需要基础知识的支撑。比如动态规划，是让很多同学头疼的问题。想掌握好动态规划，我认为确实应该先对动态规划的经典问题，比如背包，LCS，LIS，编辑距离等，有一个基本的认识，在这个基础上再刷题。&lt;/p&gt;
&lt;p&gt;但是，即使如此，也不代表学习了几个动态规划的典型问题，就能无障碍地迅速做出每一个动态规划的问题。如果真是如此，算法也就太简单了，大家也不会因此觉得头疼了。&lt;/p&gt;
&lt;p&gt;一定要调整好心态，在刷题的过程中，遇到不会的问题，太正常了。把他们搞懂，从不会到会，就是进步的过程，也是我们刷题的目的。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;问题三：每次做力扣（LeetCode）的问题，不会的问题直接看题解，抄代码，但却发现没有进步，怎么办？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;上面我说，遇到不会的问题很正常，通过题解进而学习，是进步的源泉。&lt;/p&gt;
&lt;p&gt;但有同学问我：我每次看完问题，想了几分钟，没有思路，然后就看题解，抄代码。这样坚持一段时间了，为什么觉得自己没进步？&lt;/p&gt;
&lt;p&gt;道理很简单：因为，学习不是一个看问题，抄代码，如此反复，就能进步的过程。如果是这样，那么学习就太简单了。&lt;/p&gt;
&lt;p&gt;学习之所以难，就难在&lt;strong&gt;总结&lt;/strong&gt;这一步。&lt;/p&gt;
&lt;p&gt;遇到一个问题，几分钟就放弃，实在是太快了。当然，不排除对于有些问题，大家很快就意识到超出了自己的能力范围，可以直接切换到学习模式。但是对于更多的问题，其实是我们努力一下，能够到的。&lt;/p&gt;
&lt;p&gt;不妨多给自己一点时间，多给自己几次机会，哪怕最终自己无法完全把问题解决，能够凭自己的力量，离问题的解决更近一些，也是好的。&lt;/p&gt;
&lt;p&gt;这个时间，我认为至少要有半个小时。甚至有时候，给自己一天的时间都不过分。把一个问题放到脑子里，吃饭的时候，跑步的时候，心思空闲了，就想一想，很多时候，就能有新的思路，进步就在这个过程中。&lt;/p&gt;
&lt;p&gt;我甚至曾经把一些问题放到脑袋里一周的时间：）&lt;/p&gt;
&lt;p&gt;实在想不出来，再看题解。看题解的时候就可以总结了：这个解题思路，和我的思考有什么不同？自己为什么想不出来？还是其实想出来了，但是在某一个地方只差临门一脚？&lt;strong&gt;这样不断的对比和总结，是积累经验的关键。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;然后，试一试，根据题解的思路，自己能不能独立实现代码？如果不能，再总结：自己为什么写不出代码？是思路其实没有理解？还是某一个经典的算法实现自己其实没有掌握？亦或是自己的编码能力欠佳？如果自己的代码有 bug，自己能不能调通？&lt;strong&gt;进步就在这个过程中。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个过程当然可能会花很长时间。但是，学习就是这样的一个时间叠加的过程。简单地看题，抄代码，看似省时间，但其实，白白浪费了很多学习进步的机会，是在浪费时间。&lt;/p&gt;
&lt;p&gt;我曾经写过一篇文章，叫&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-08-20/"&gt;《万能学习法》&lt;/a&gt;，就是告诉大家：&lt;strong&gt;学习的关键，其实是自己的总结。通过总结，才能做到对知识的内化。没有总结，大多数学习都将是低效的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;问题四：是不是应该按照问题标签进行刷题？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;有很多同学，都习惯按照标签来刷题。这样做，作为学习，效果很好，无可厚非。&lt;/p&gt;
&lt;p&gt;但是，从面试准备的角度看，这样刷题，可能是有问题的。因为，&lt;strong&gt;一个问题的标签本身，其实是包含巨大信息量的，是一个很重要的提示。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;比如，如果直接告诉你，一个问题是动态规划，那么大家就可以直接去思考：怎么设计状态，状态转移是怎样的。这其实将问题简化了。如果没有这个标签，很多同学可能想不到这是一个 dp 问题。&lt;/p&gt;
&lt;p&gt;在算法设计领域，这类问题特别多。另外一个典型的例子是二分搜索。对于一些问题，没有经验的同学，可能很难想到使用二分搜索去解决，但是一旦告诉你这个问题可以用二分搜索解决，其实就没什么难度了。&lt;/p&gt;
&lt;p&gt;对此，我的建议是：刷题到一定程度以后，可以开始&lt;strong&gt;尝试做力扣（LeetCode）的周赛&lt;/strong&gt;。甚至，有些同学时间紧，可能只有一个月的时间，没有时间专门系统地对每一类问题进行练习，我都直接建议，做周赛就好了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家可以把力扣（LeetCode）的每一次周赛，都看作是一场实际的算法面试的模拟。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;力扣（LeetCode）的周赛每期四个问题，问题质量都很高。每场比赛的问题类型不定，没有标签。大家在做的时候，需要从头分析，每个问题需要使用什么算法解决。这在我看来，是非常重要的一个训练。&lt;/p&gt;
&lt;p&gt;在这个过程中，如果发现自己对某一个类型的问题不熟悉，可以再有针对性地根据标签进行“特训”。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;说到力扣（LeetCode）的周赛，就不得不提力扣（LeetCode）马上要举办的&lt;strong&gt;「力扣杯」全国春季编程大赛了。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这次比赛，&lt;strong&gt;由力扣（LeetCode）主办，合作企业有 SmartX、 拼多多、 酷狗音乐、网易。&lt;/strong&gt;通过这个比赛，不但有机会赢取万元现金奖励，更可以获得名企大厂的内推机会。&lt;/p&gt;
&lt;p&gt;&lt;img alt="poster" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-04-12/poster.png" /&gt;&lt;/p&gt;
&lt;p&gt;这次&lt;strong&gt;「力扣杯」全国春季编程大赛&lt;/strong&gt;总共有两场。一场是个人赛，一场是战队赛。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;个人赛的报名时间是：北京时间，即日起 至 4 月 17 日 23:59&lt;/strong&gt;；也就是还有一周时间。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;个人赛比赛时间是：北京时间，4 月 18 日 15:00 - 17:30。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;战队赛则是这次力扣（LeetCode）全新的比赛尝试，其实是在学习 ACM 的赛制，一队最多三个人，大家配合，可以尝试挑战更难的问题，也能锻炼大家在软件开发过程中的协调配合能力。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;战队赛的报名时间是：北京时间，即日起 至 4 月 24 日 23:59；&lt;/strong&gt;也就是还有两周的时间。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;战队赛比赛时间是：北京时间，4 月 25 日 15:00 - 18:00。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;这次 Leetcode 春季挑战赛，设计了丰富的奖品：&lt;/p&gt;
&lt;p&gt;&lt;img alt="reward" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-04-12/reward.png" /&gt;&lt;/p&gt;
&lt;p&gt;不过，可能对大多数同学来说，这些奖品都是次要的。&lt;/p&gt;
&lt;p&gt;关键是：这是一次很好地展示自己的机会，更可能获得诸多大厂的面试或者内推的机会。&lt;/p&gt;
&lt;p&gt;就算成绩不理想，也没什么损失，反正是一次锻炼自己的机会。比完赛以后，好好总结一下，自己对哪些问题还掌握得不透彻，继续努力，就好啦：）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-04-12/readme.md" rel="alternate"/></entry><entry><id>2020/2020-04-07/readme.md</id><title>还要不要喝瑞幸咖啡？</title><updated>2020-04-07T00:00:00-07:00</updated><content>&lt;h2&gt;还要不要喝瑞幸咖啡？&lt;/h2&gt;
&lt;p&gt;瑞幸咖啡的事情，相信大家都知道了。在这里不赘述了。&lt;/p&gt;
&lt;p&gt;瑞幸咖啡肯定不是什么民族之光，这没什么可争辩的。不管坑的是谁的钱，我们也不能把一个造假的企业看作民族之光。&lt;/p&gt;
&lt;p&gt;更何况，从更长远的角度看，造假这样的行为，大概率是在坑我们自己企业的海外信用。&lt;/p&gt;
&lt;p&gt;对此，人民日报也已经定调了。&lt;/p&gt;
&lt;p&gt;&lt;img alt="weibo" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-04-07/weibo.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;转而一个有意思的问题来了：现在，我们还应该喝瑞幸咖啡吗？&lt;/p&gt;
&lt;p&gt;网上有人高呼瑞幸咖啡是民族之光，去支持它；有人高呼瑞幸咖啡可耻，抵制它。&lt;/p&gt;
&lt;p&gt;我倒觉得，喝不喝瑞幸咖啡，和它是不是民族之光，是不是民族之耻，或者有没有财务造假，没什么关系。&lt;/p&gt;
&lt;p&gt;因为作为顾客，来到瑞幸咖啡的门店，掏出真金白银来，是为了购买一杯安全，好喝的咖啡，而不是来做审计，来查账，来看这个企业背后的账目是否有问题的。&lt;/p&gt;
&lt;p&gt;决定我们该不该喝这杯咖啡的条件，只有：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;我们需不需要这杯咖啡；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这杯咖啡是否是满足基本的食品安全标准；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;我们是否认可商家对这杯咖啡的定价。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;这有点儿像街边不停喊着“清仓大甩卖，两元两元，一律两元”的小店。&lt;/p&gt;
&lt;p&gt;可能小店的老板真的急需用钱，所以商品全都特价处理。此时，我们作为消费者，其实无需，也无权去调查，老板清仓甩卖，急需要钱，到底是因为赌博？还是吸毒？或者做了什么妖？这些和我们消费者八竿子打不着。&lt;/p&gt;
&lt;p&gt;只要这家店的东西是合格的，我们觉得自己需要，价钱又值得，那就可以买。至于老板到底出了什么事儿，自然有该处理这个事情的机关或者组织，来完成他们的工作。&lt;/p&gt;
&lt;p&gt;但是，如果我们发现东西不够好，两块钱都不值，那我们也不会去买的。如果是不合格的假冒伪劣商品，我们还要把他举报给工商局。这和老板缺不缺钱，为什么缺钱，一点儿关系都没有。&lt;/p&gt;
&lt;p&gt;哪怕老板家人身患重病，也不能因为急需用钱，就出售假冒伪劣商品。一码归一码。&lt;/p&gt;
&lt;p&gt;这就像瑞幸的咖啡再实惠，再好喝，也不能财务造假，是一个道理。&lt;strong&gt;这是两个层面的事情。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所以，&lt;strong&gt;瑞幸咖啡造假是可耻的；但我不认为喝瑞幸咖啡是可耻的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这里提醒一句：如果瑞幸咖啡突然搞什么充值活动，一下子冲几千块钱那种，大家还是要小心，别是公司准备跑路前最后坑一下消费者。&lt;/p&gt;
&lt;p&gt;依然是，有一说一，搞这种活动之后跑路，和他家咖啡质量怎么样，没什么关系。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;当然，如果你看不惯它，坚决不喝他家的咖啡，我觉得也没毛病。只是我不赞成给依然喝瑞幸咖啡的人贴道德标签。&lt;/p&gt;
&lt;p&gt;反过来，继续喝瑞幸咖啡的人，也无需打着支持民族之光的旗号。这杯咖啡要是卖 100 元，还真没什么人买。这就是市场经济而已。&lt;/p&gt;
&lt;p&gt;大家其实都是普通人，用自己辛苦赚的钱，喝杯便宜的咖啡。这绝不是扬我国威，也绝不是丧权辱国。事情没那么复杂，也没什么可升华的。&lt;/p&gt;
&lt;p&gt;至于资本市场的那些事情，什么审计造假，来不来几个亿几十个亿，其实跟我们大多数人关系不大。一杯咖啡，只是我们生活的一角而已。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我第一次喝瑞幸咖啡，也是目前为止唯一一次喝瑞幸咖啡，是在北京的故宫。&lt;/p&gt;
&lt;p&gt;上前一问，听说下个 App 才能点单。第一次购买，完全免费。我和老婆二话不说，一人下了一个 App，领了一杯免费咖啡。&lt;/p&gt;
&lt;p&gt;至于这杯咖啡好不好喝？我不是咖啡专家，甚至平时不会主动喝咖啡。但我还是要承认：免费的，真香。&lt;/p&gt;
&lt;p&gt;如果真要变成 38 元一杯，我也不知道我的评价会不会有所改变。&lt;/p&gt;
&lt;p&gt;如今，看到瑞幸咖啡出了这么一档子事儿，我和老婆聊起这个品牌，脑海中浮现的，不过是我俩在太和殿前的广场，端着一杯免费的咖啡，心中的窃喜。&lt;/p&gt;
&lt;p&gt;或许，这就是我们的生活吧，平平淡淡的，和几个亿十几个亿，一点儿关系都没有。&lt;/p&gt;
&lt;p&gt;而我想，终有一天，每个人都将明白：平平淡淡是多么的美好。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-04-07/readme.md" rel="alternate"/></entry><entry><id>2020/2020-04-02/readme.md</id><title>随便聊聊老罗的直播</title><updated>2020-04-02T00:00:00-07:00</updated><content>&lt;h2&gt;随便聊聊老罗的直播&lt;/h2&gt;
&lt;p&gt;有同学让我聊聊老罗的直播。&lt;/p&gt;
&lt;p&gt;首先声明，因为时差，我并没有看这场直播。同时，我也完全不是直播购物的用户，完全没有使用这种渠道买过东西。&lt;/p&gt;
&lt;p&gt;今天早上看到朋友圈里很多人晒单，随便聊聊自己的感觉。不一定对，和大家分享。&lt;/p&gt;
&lt;p&gt;我的核心观点就是：老罗在直播带货这条路上能不能特别成功，还有待观察。&lt;/p&gt;
&lt;p&gt;凭借老罗的人气，前两三次的数字肯定不错。但是后续怎么样？不好说。&lt;/p&gt;
&lt;p&gt;为什么我这样以为？我要是没理解错，这次参与直播的，大多数用户，其实是第一次使用抖音的直播电商服务。他们主要不是来直播购物的，而是来看老罗表演的，或者是看热闹的。&lt;/p&gt;
&lt;p&gt;那么这次以后，这波用户的留存率是怎么样的？需要观察。&lt;/p&gt;
&lt;p&gt;或许也正是因为这个原因，那个中性笔卖得最火。因为笔这个商品，使用场景广，买来肯定能用，价格也便宜，下单不需要做太多心理建设。&lt;/p&gt;
&lt;p&gt;如果我参与这场直播，想买点儿什么来“纪念”，或者证明，我参与了这次活动，恐怕我的第一选择，也是这杆笔。&lt;/p&gt;
&lt;p&gt;但是以后，老罗的直播购物场次多了，用户还会不会场场都来买“纪念品”？我觉得不好说。&lt;/p&gt;
&lt;p&gt;而且，大家明白了老罗直播带货是怎么回事儿以后，真正参与的主力军，肯定还是直播购物的用户。那么横向比拼，肯定还是要和李佳琦或者薇娅这样的专业选手比拼。&lt;/p&gt;
&lt;p&gt;换句话说，&lt;strong&gt;最后拼的一定是专业能力，而不是人气。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;人气能给你带来一波流量，但并不能带来持续的流量。这就是为什么柳传志做柳桃，潘石屹做潘苹果，都没做起来的原因。&lt;/p&gt;
&lt;p&gt;别说这些大佬跨界做水果了，就算是微软，曾经市值世界第一，在桌面操作系统已经是妥妥的霸主了。但是，做一个移动操作系统 Windows Phone，还是会翻车。为什么？专业不同。过去积累的人气，并不能保证绝对的成功。&lt;/p&gt;
&lt;p&gt;当然，我不懂直播带货行业的专业门槛是什么。可能是价格谈判，可能是选品，可能是节奏把握，可能是观众心理分析。但不管怎么样，根据我的经验，&lt;strong&gt;任何能赚钱的行业，都是充满竞争的，都绝不是简单的。&lt;/strong&gt;情怀能管一时，但不能管一世。&lt;/p&gt;
&lt;p&gt;这就是为什么，老罗一说做手机，有那么多粉丝拥护，每年发布会座无虚席，媒体轮番报道，但最终，锤子手机还是失败了的原因。&lt;/p&gt;
&lt;p&gt;当然，道理上，直播带货应该比做手机难度小了很多。&lt;/p&gt;
&lt;p&gt;不管怎样，希望老罗这次能成功。&lt;/p&gt;
&lt;p&gt;毕竟，我也是在大学，听着《老罗语录》，成长起来的那批人：）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;老罗加油！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;P.S.&lt;/p&gt;
&lt;p&gt;我很喜欢这个广告语。&lt;/p&gt;
&lt;p&gt;不赚钱，交个朋友：）&lt;/p&gt;
&lt;p&gt;&lt;img alt="poster" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-04-02/poster.png" /&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-04-02/readme.md" rel="alternate"/></entry><entry><id>2020/2020-03-27/readme.md</id><title>英国首相傻？</title><updated>2020-03-27T00:00:00-07:00</updated><content>&lt;h2&gt;英国首相傻？&lt;/h2&gt;
&lt;p&gt;大家应该都知道了，英国首相 Boris Johnson，新冠病毒确诊为阳性。&lt;/p&gt;
&lt;p&gt;一时间，大家炸锅了。&lt;/p&gt;
&lt;p&gt;因为，这是至今为止，最高级别的国家领导人，确诊感染了新冠病毒。&lt;/p&gt;
&lt;p&gt;&lt;img alt="boris" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-27/boris.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;网络上一时炸了锅。很多人都在问，“为什么这个新冠病毒，看起来专门攻击各国政要和达官显贵？”&lt;/p&gt;
&lt;p&gt;有的人说，“这其实是一种错觉。毕竟全球有那么多人感染，其中达官显贵还是只占小部分的。但是达官显贵们更具有新闻价值，所以当这些新闻出现在大家面前时，给了大家一个‘新冠病毒专攻达官显贵’的错觉。”&lt;/p&gt;
&lt;p&gt;但有的人说，“可达官显贵的数量，本身也少啊。这么解释，似乎不够。”&lt;/p&gt;
&lt;p&gt;有的人说，“不完全是错觉。毕竟，在其他的灾难中，似乎没见那么多名人出事儿。”&lt;/p&gt;
&lt;p&gt;有的人说，“其实这是医疗资源分配不平等的体现。有钱有权的人，可以在第一时间获得检测。”&lt;/p&gt;
&lt;p&gt;很多专家都认为，新冠病毒感染的人群数量，已经远远超过现在已知的确诊数字了。只不过，我们做不到给每个人都检测而已。&lt;/p&gt;
&lt;p&gt;甚至，昨天《金融时报》的新闻报道，有科学家的模型表示：在英国，很有可能已经有 50% 的人口，感染了新冠病毒。&lt;/p&gt;
&lt;p&gt;但还有的人认为，是因为这些名人的社交活动更多，更频繁。&lt;/p&gt;
&lt;p&gt;有的人说，“我在过去三天，只接触了三个人，但我通过电视，可以想象，那些政要名流，在过去三天，至少接触了 300 人。”&lt;/p&gt;
&lt;p&gt;如果你去看美国每天的白宫记者会，就会知道，现在的情况是这样的。&lt;/p&gt;
&lt;p&gt;&lt;img alt="whitehouse" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-27/whitehouse.png" /&gt;&lt;/p&gt;
&lt;p&gt;虽然参与的记者应该已经减少了很多，虽然大家已经有意识地隔着位子坐着，但这依然是一个狭小的，密闭的空间，其中容纳了几十个人。大家都没有戴口罩。&lt;/p&gt;
&lt;p&gt;我觉得不可思议，更为川普捏一把汗。&lt;/p&gt;
&lt;p&gt;毕竟，川普今年已经 74 岁了。而他旁边站着的彭斯，也已经 61 岁了。至于美国的传染病专家福奇，今年 70 岁了。&lt;/p&gt;
&lt;p&gt;&lt;img alt="fauci" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-27/fauci.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;讲真，很多时候，我都有种错觉，&lt;strong&gt;觉得我每天关注的不是疫情，而是一场大型励志秀。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在这帮老家伙你来我往针锋相对吵得不可开交的时候，很多人都觉得这是一个世界级的笑话。&lt;/p&gt;
&lt;p&gt;可我再看微信里一帮人讨论程序员 35 岁要怎么办，我笑笑不说话。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;那么英国首相 Boris Johnson 感染新冠病毒，其传染源究竟在哪里？&lt;/p&gt;
&lt;p&gt;没有人知道。&lt;/p&gt;
&lt;p&gt;据媒体报道，英国内阁内部已经开始了大规模的检测。&lt;/p&gt;
&lt;p&gt;英国首相 Boris Johnson 自己说，“我在医院和所有的人都有握手，包括确诊了新冠病毒的病人。”&lt;/p&gt;
&lt;p&gt;很多人都批评他。因为英国政府现在建议陌生人之间，应该尽量保持两米的距离。但他身为的首相，竟然带头无视这一建议，还和所有人都握手。&lt;/p&gt;
&lt;p&gt;对于无视自己制定的规矩，美国也不甘示弱。&lt;/p&gt;
&lt;p&gt;美国早就让公众停止了大型的集会活动。从 100 人，到 35 人，到 25 人，到 10 人。现在更是建议大家，只要没有住在一起，哪怕是邻居，两个人也别聚了。请自觉保持 2 米，这叫社交距离，social distance。&lt;/p&gt;
&lt;p&gt;但大家可以数数上面美国白宫记者会的照片里的人头，这分明是每天一场大型集会啊！&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;有的人说，“没办法，这就是他们的工作。”&lt;/p&gt;
&lt;p&gt;但有的人说，“有办法的。办法总比困难多，就看你愿不愿意采用。”&lt;/p&gt;
&lt;p&gt;有人说，“英国首相傻，现在轮到自己了吧？”&lt;/p&gt;
&lt;p&gt;我搜了一下维基百科。英国首相 Boris Johnson 是牛津大学的高材生。&lt;/p&gt;
&lt;p&gt;他真的傻吗？&lt;/p&gt;
&lt;p&gt;可能在很多人心里，他真的傻吧。&lt;/p&gt;
&lt;p&gt;但我相信，在另外一些人眼里，他是非凡的。&lt;/p&gt;
&lt;p&gt;而在这个世界上，哪怕有一个人，仅仅是一个人，真心地相信，你是非凡的，我都觉得，不枉此生了。&lt;/p&gt;
&lt;p&gt;这话说得跟悼词似的。&lt;/p&gt;
&lt;p&gt;但其实，英国首相 Boris Johnson，现在还活蹦乱跳呢。他今年才 56 岁。&lt;/p&gt;
&lt;p&gt;纽约州长 Cuomo 说，“80% 的人都可以自愈。”我相信英国首相 Boris Johnson 一定觉得自己是那 80% 里的一个。&lt;/p&gt;
&lt;p&gt;对了，顺便一提，纽约州长 Cuomo，今年 63。&lt;/p&gt;
&lt;p&gt;&lt;img alt="cuomo" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-27/cuomo.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;现在，英国首相 Boris Johnson 开始在家隔离了。&lt;/p&gt;
&lt;p&gt;但是，他其实是在家办公。&lt;/p&gt;
&lt;p&gt;他在 twitter 上说，他还会继续，通过视频会议的方式，领导英国政府，抗击病毒。&lt;/p&gt;
&lt;p&gt;&lt;img alt="twitter" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-27/twitter.png" /&gt;&lt;/p&gt;
&lt;p&gt;他说：&lt;strong&gt;我们一起，会战胜这一切。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Together we will beat this.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-03-27/readme.md" rel="alternate"/></entry><entry><id>2020/2020-03-25/readme.md</id><title>我赞成功利的学习</title><updated>2020-03-25T00:00:00-07:00</updated><content>&lt;h2&gt;我赞成功利的学习&lt;/h2&gt;
&lt;p&gt;这是在我的知识星球上，一个同学问我的问题。&lt;/p&gt;
&lt;p&gt;波波老师，你好。我是七月份入职准毕业生一枚，有个问题想和您探讨一下。&lt;/p&gt;
&lt;p&gt;对于职业规划，我总感觉自己需要去补充某些方面的知识，但是却又觉得这个并不一定是我真的需要的。然后陷入到"实用主义"的漩涡里面，变成了果园里面摘水果的猴子，一山盼着一山高。&lt;/p&gt;
&lt;p&gt;我感觉自己目前的学习太过于功利了，太过于患得患失了。所以想请教一下波波老师，有过类似问题吗？怎么解决的？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;bobo 老师的回答：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;其实我一直认为：功利的学习，一点儿毛病都没有。&lt;/p&gt;
&lt;p&gt;比如对于算法学习吧，我一直提倡：如果不是出于兴趣的话，那么一定要明确自己学习的目的。&lt;/p&gt;
&lt;p&gt;比如很多同学学习算法，就是为了搞定算法面试，这没什么不好。那就学到足够搞定算法面试的水平就行。其实，搞定算法面试所需要的水平，真的并不高。&lt;/p&gt;
&lt;p&gt;搞定面试，找到一个工作，不论是对自己，对家庭，还是对社会，都是负责任的做法。更重要的是，我们也必须承认：通过这个过程，我们也学到了知识，提高了自己的水平。&lt;/p&gt;
&lt;p&gt;还有一些同学学习算法，是为了能够无障碍地学习计算机的其他领域。比如图形学经常使用四叉树或者八叉树来管理二维空间或者三维空间。只要二叉树的基础牢固，理解四叉树和八叉树没什么难度。那就好好把二叉树学好，然后开始学图形学。&lt;/p&gt;
&lt;p&gt;我不认为一定要先系统地学习一遍算法和数据结构，把并查集线段树斐波那契堆都搞得一清二楚，才能去学习图形学。&lt;/p&gt;
&lt;p&gt;数学也是同理。我一直不提倡为了学习机器学习，先一头扎进数学的海洋。因为数学的世界太广袤了。&lt;/p&gt;
&lt;p&gt;先了解机器学习领域到底需要哪些数学知识，知道这些数学知识究竟有什么用，再去补。这样学数学，更有针对性，更有动力，效率更高，效果也更好。&lt;/p&gt;
&lt;p&gt;我一直认为有功利心没毛病。因为，&lt;strong&gt;功利心听起来似乎是贬义的，但是我更愿意把它看作是一个中性词。甚至就是“目标”的同义词。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我们从小学习，学校设置了一个又一个科目，每个科目设置了一个又一个考试。努力在这些考试中取得好成绩，这功利吗？或许是功利的。&lt;/p&gt;
&lt;p&gt;但是我们必须承认：在这个追逐“功利”的过程中，我们切切实实学到了知识。无论是语文的表达，数学的推演，还是大学里的各种专业知识。&lt;/p&gt;
&lt;p&gt;注意，我这里没有说只为了追求分数而应付考试的情况。如果你反驳说：有些同学在这个过程中并没有学到知识，只是通过做往届的卷子拿到了一个合格的分数。在我看来，这确实也是一种功利，但只是“功利地考试”，而非“功利地学习”。这本质是在钻应试教育的漏洞，是一种投机。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在学习这件事上，投机和钻空子，我不赞成。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;同理，当我们升入职场，也要通过各种考评。为了胜任工作中的项目，我们还是需要不断学习各种知识技能。这其实也很功利。&lt;/p&gt;
&lt;p&gt;但是，正因为如此，我们才能够不断去解决项目中存在的真实问题，完成我们的本职工作，为企业，为社会，创造价值。相应地，我们也获得了能够更好生活的经济回报。这一切都没什么错。&lt;/p&gt;
&lt;p&gt;比如，我公众号曾经转载过这篇文章&lt;a href="https://mp.weixin.qq.com/s?__biz=MzU4NTIxODYwMQ==&amp;amp;mid=2247485266&amp;amp;idx=1&amp;amp;sn=62f8c0ec3dd94514bf62b8680b3943ff&amp;amp;chksm=fd8ca814cafb2102824198e11c20259ab9fe478c34993ff1f0364688a27e0a897f05c3e872ad&amp;amp;token=412566375&amp;amp;lang=zh_CN#rd"&gt;《普通二本毕业，30岁成为大咖》&lt;/a&gt;，你觉得这篇文章的作者，功利吗？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;更进一步，我甚至觉得：&lt;strong&gt;绝对的“不功利”，是不存在的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可能在现在这个时代，你会看到有些人，什么书都爱看，什么都懂一点儿，还会不时地标称一下，“有趣的灵魂万里挑一”。话里话外，自己就是有趣的灵魂。&lt;/p&gt;
&lt;p&gt;但对此，我倒有不同的看法。因为，我自认为自己就是一个什么书都爱看的孩纸。但其实，我有我的功利心。&lt;strong&gt;这个功利心，就是满足我的好奇心。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;看到一本书的名字，一篇文章的标题，我就好奇它到底会写什么？怎么写？甚至听到一个领域的名称，我都有兴趣了解一下这个领域是研究什么的？怎么研究的？已经有哪些结论了？&lt;strong&gt;了解这些，就是在满足我的功利心。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;而对于我不感兴趣的内容，我其实也是看都不会看一下的。&lt;/p&gt;
&lt;p&gt;我不认为，这样做，和有的人喜欢扎根一两个专门的领域，在一两个领域里做专做精，有什么本质区别。&lt;strong&gt;甚至我更佩服那些能在一两个领域里做专做精的人，因为这需要更多的自律和毅力。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;熟悉我的同学都了解，我并不是特别喜欢“有趣的灵魂”这个说法。因为这个说法意味着，有的灵魂是无趣的。&lt;/p&gt;
&lt;p&gt;但是我的生活经验告诉我：&lt;strong&gt;所有的灵魂，只要是善良的，就都是有趣的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我没见过无趣的人。只不过有的人，更能把自己的“有趣”表现出来；而有的人，则需要你去挖掘它。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;扯远了，说回功利心。&lt;/p&gt;
&lt;p&gt;说了这么多，结论就是：我并不建议你摒弃自己的功利心，更没必要因此自责。&lt;strong&gt;因为功利心本身，就是目标，是动力，是兴趣，是出发点。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我们每个人都是在功利心的驱使下成长的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我倒觉得你的叙述中，真正有问题的是，“感觉自己需要去补充某些方面的知识，但是却又觉得这个并不一定是我真的需要的。”&lt;/p&gt;
&lt;p&gt;因为，这说明：你并不能明确自己要学什么。&lt;/p&gt;
&lt;p&gt;功利心不是你的问题，没有目标才是。而没有目标，我们就很容易迷失。&lt;/p&gt;
&lt;p&gt;所以，我真正的建议是：仔细问自己，到底要学什么？根据自己的实际情况，兴趣也好，即将参与的工作中涉及的项目技术也好，找一两个切实可行的，需要学习的内容，然后去学习，并且坚持下去。&lt;/p&gt;
&lt;p&gt;不用去想那么多功利不功利的问题。这个问题太大，太虚，太缥缈。我们每个人最终，总要落到脚踏实地到生活中来。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;而在具体的生活中，只要自己在成长，在进步，不管功利还是不功利，都不是问题。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-03-25/readme.md" rel="alternate"/></entry><entry><id>2020/2020-03-23/readme.md</id><title>美国要钱不要命？</title><updated>2020-03-23T00:00:00-07:00</updated><content>&lt;h2&gt;美国要钱不要命？&lt;/h2&gt;
&lt;p&gt;关于美国，我是真的看不懂了。&lt;/p&gt;
&lt;p&gt;我只摆出我知道的事实，记录一下这魔幻的世界。&lt;/p&gt;
&lt;p&gt;美国在最近一周的疫情发展，相信很多同学都是知道的。简单来说就是指数增长。&lt;/p&gt;
&lt;p&gt;&lt;img alt="st" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-23/st.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;是的，你没有看错，今天一天新增确诊 1 万多。我查了一下中国的数据，除了 2 月 12 日因为检测手段的改变，中国单日新增达到了 15152 例，在其他时间，中国新增确诊的峰值，不过是 3887 例。&lt;/p&gt;
&lt;p&gt;这还要考虑，中国人口密度不知道比美国高多少倍，疫情爆发时正值春节期间，人口流动也不知道比以往高多少。&lt;/p&gt;
&lt;p&gt;当然，美国的重灾区是纽约。单单一个纽约州，拿下来美国 50% 的确诊病例。而纽约市本身确实是一个人口密度超高的城市。再加上纽约的国际化程度不知道比武汉高了多少数量级，每天往返纽约的国际航班数不胜数。川普虽然早早地切断了和中国往来的航班，但是对欧洲的行动明显晚了。而最近，欧洲的大爆发，大家也应该看到了。&lt;/p&gt;
&lt;p&gt;在这样严峻的情况下，从上周一开始，美国大部分州陆续实施了一个称为 shelter in place 的行政命令。字面的意思就是原地庇护。&lt;/p&gt;
&lt;p&gt;这个命令强制让非民众生活必需的企业关门，大多数人都在家办公，甚至是待业。&lt;/p&gt;
&lt;p&gt;这个命令就是现阶段西方世界的“封城令”了。说白了就是鼓励大家都尽量待在家里，别乱跑，减少传染。&lt;/p&gt;
&lt;p&gt;虽说如此，但是，这个命令并没有强制大家 24 小时待在家里，而是可以在“必要”的情况下外出。&lt;/p&gt;
&lt;p&gt;什么叫必要的情况呢？比如要去医院看病，去超市购物，就是必要的情况。&lt;/p&gt;
&lt;p&gt;除此之外，遛狗也是必要的情况。所以，可能很多人都在网上看到过类似的段子。&lt;/p&gt;
&lt;p&gt;&lt;img alt="dog1" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-23/dog1.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;貌似在欧洲的措施也是如此，所以我在网上还看过关于西班牙的这样的段子。&lt;/p&gt;
&lt;p&gt;&lt;img alt="dog2" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-23/dog2.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;除了遛狗，其实，到附近的公园遛弯儿，也是必要的情况！所以，一家子还是可以开开心心出去遛弯儿的。但是，碰见邻居朋友，不要走近，保持距离就好。&lt;/p&gt;
&lt;p&gt;上周，我出去买了一趟东西，给我的感觉是：明显的，在户外遛弯，跑步，甚至是骑行的人，&lt;strong&gt;变！多！了！&lt;/strong&gt;因为大家现在都在家办公或者&lt;strong&gt;在家不办公&lt;/strong&gt;，闲得没事儿就跑出来透气儿了。&lt;/p&gt;
&lt;p&gt;所以，虽然我所在的 Santa Clara County 是加州的重灾区，但是走在街上，却看见大家若无其事地漫步，遛狗，闲谈，骑行......，想象医院里有无数医生护士正在发愁防护用品不够，有无数患者正在和病魔甚至是死亡做斗争，我感觉这个世界无比的魔幻......&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;在过去的一周，我不停地思考：这样级别的“封城”，到底是否有效？毕竟，无论是欧洲的数据，还是美国的数据，就无情地摆在我们面前。&lt;/p&gt;
&lt;p&gt;但事实证明，我太单纯了。从今天白宫的记者会看，川普下一步措施，很有可能不是加强“封锁”，不是进一步控制病毒，&lt;strong&gt;而是... 直接复工...&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;是的，川普觉得，这样的行政命令，已经太极端了（？？？）。所以，今天《纽约时报》上，新闻报道是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="ny1" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-23/ny1.png" /&gt;&lt;/p&gt;
&lt;p&gt;简单翻译：尽管卫生健康专家极力反对，但川普仍然在思考重启经济。总统质疑：“待在家里”的行政命令是不是太过分了？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;在这篇文章中，表露出了川普政府和保守派的一个顾虑：&lt;strong&gt;现在这样“封城”，国家所承受的经济打击，可能比病毒导致的死亡还严重。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="ny2" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-23/ny2.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;川普表示：我们的国家不是为了封城而建立的。&lt;strong&gt;我们不能让问题的解决方案，比问题本身还糟糕。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="ny3" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-23/ny3.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="trump" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-23/trump.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;这话是什么意思呢？&lt;strong&gt;说白了，就是要早复工。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;紧接着，高盛集团前首席执行官 Lloyd Blankfein 发表了推特。其中明确表明：&lt;strong&gt;在很短的几个星期之内，我们就需要让那些低风险的人回到工作岗位中。&lt;/strong&gt;（年轻人？）&lt;/p&gt;
&lt;p&gt;&lt;img alt="twitter" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-23/twitter.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;川普政府的经济团队也表示，这个病毒并没有对美国人的生命和经济造成巨大的威胁，和普通流感差不多。&lt;strong&gt;甚至很多智囊专家认为：白宫已经反应过度了。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="ny6" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-23/ny6.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;Excuse me？这种随时随地大家都能出门遛狗买菜遛弯骑行的管控措施，反应过度了？所以因为美国已经反应过度了，于是确诊人数开始指数上升？&lt;/p&gt;
&lt;p&gt;嗯，反正&lt;strong&gt;川普说：新冠病毒对美国人的威胁，和流感与车祸，是一个级别的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="ny7" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-23/ny7.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;共和党和保守派说说这话也可以理解。但是，现在全美国最严重的地区——纽约州的州长 Cuomo，在今天也表示：我们不得不思考：是不是所有人都需要离开工作？年轻人是不是应该更快回到工作岗位中？&lt;/p&gt;
&lt;p&gt;&lt;img alt="ny4" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-23/ny4.png" /&gt;&lt;/p&gt;
&lt;p&gt;通过上面 Cuomo 的发言，可以看到，Cuomo 说的还是挺含蓄的。后面表露出了：&lt;strong&gt;我们有没有可能让那些已经感染病毒的，但是自愈了，现在已经免疫的人群，回到工作中？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="cuomo" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-23/cuomo.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;不管怎么样，现在美国各个州发布的 shelter in order 行政命令，大多是 15 天的时间，也就是两周的时间。按照今天川普表露的意思，他希望顶多再延期 1 个礼拜，也就是 3 周以后，就开始复工。&lt;/p&gt;
&lt;p&gt;然而，这 3 周已经过去了 1 周，目测美国的峰值还没有来临。此时谈复工，是不是太早了？&lt;/p&gt;
&lt;p&gt;当然，我不是经济学家，不懂这些政策。可是，我们面对的是一种烈性传染病。&lt;strong&gt;此时，我们是不是应该以尊重传染病专家的意见为主？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;实际上，近乎所有的医学卫生领域的专家，都对此表示抗议。因为，很明确的，&lt;strong&gt;中国和韩国的经验告诉大家：控制这个病毒的核心，是严格地管制和广泛地测试。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="ny5" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-23/ny5.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;否则的话，很有可能将会出现尸体堆积如山的情况。&lt;/p&gt;
&lt;p&gt;&lt;img alt="ny9" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-23/ny9.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;而美国的国家传染病研究所主任福奇（Fauci），则明确表示，至少需要好几周的时间，人们才能回到正常的生活中。&lt;/p&gt;
&lt;p&gt;&lt;img alt="ny8" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-23/ny8.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="fauci" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-23/fauci.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;这位福奇先生，此前已经多次和川普意见不合，包括在川普高喊“中国病毒”的时候，福奇也表达了强烈地不满。于是，在今天的白宫简报会上，福奇消失了。&lt;/p&gt;
&lt;p&gt;很多人都在猜测：福奇为什么不见了？不会是被川普政府踢出去了吧？&lt;/p&gt;
&lt;p&gt;&lt;img alt="fauci2" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-23/fauci2.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;虽然现在，白宫对于具体下一步的决策还没有明确。但是，在美国确诊人数指数增长，丝毫没有减缓的情况下，“领导们”就已经开始谈复工，这实在让很多人有些担心。&lt;/p&gt;
&lt;p&gt;今天，我见到的最多的评论就是：&lt;strong&gt;要钱不要命。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可关键是，这钱，大多是给资本家赚的；但是命呢？是千千万万普通劳动者的性命。&lt;/p&gt;
&lt;p&gt;命要没了，钱有什么用？&lt;/p&gt;
&lt;p&gt;于是，今天在 Twitter 上，一个新的标签火了，叫 General Strike。翻译过来，就是&lt;strong&gt;全面罢工&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;比如这条推特，我觉得挺能代表大多数人的心声：&lt;/p&gt;
&lt;p&gt;&lt;img alt="twitter2" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-23/twitter2.png" /&gt;&lt;/p&gt;
&lt;p&gt;翻译：如果川普要牺牲大众的生命来“拯救”经济的话，那就让我们开始一场全面的罢工，来揭示资本主义的本性：靠剥削千千万万的劳动者，让属于顶端的极少数资本家受益。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;美国下一步要走的路，是不是要钱不要命的路？虽然现在下结论还为时过早，毕竟，不靠谱的川普临时突然改变主意也是常事儿。&lt;/p&gt;
&lt;p&gt;但是，现如今，在上层社会发出了这样的声音，实在是让普通民众心里不很舒服。&lt;/p&gt;
&lt;p&gt;我在之前，刚刚写过一篇文章：&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-03-15/"&gt;《群体免疫背后的数学》&lt;/a&gt;，向大家科普“群体免疫”。&lt;/p&gt;
&lt;p&gt;在这篇文章中，我向大家解释了：&lt;strong&gt;英国政府说的群体免疫，是一种结果，而不是一个措施。&lt;/strong&gt;英国政府的意思是：最终，英国会达到有 60% 的人口染病这一结果；但这并不要让每个人赶紧去染病，以达到群体免疫。实际恰恰相反，英国政府需要想办法减缓这一过程。&lt;/p&gt;
&lt;p&gt;结果今天，美国政府来打我脸了。川普好像在说：凭什么群体免疫不能是措施？&lt;/p&gt;
&lt;p&gt;相较而言，英国弱爆了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;不过，一百多年前，马克思在《资本论》中就告诉我们了：“资本自从来到世间，从头到脚，每一个毛孔都滴着血和肮脏的东西。”&lt;/p&gt;
&lt;p&gt;我们的历史课本也在不断告诫我们：资本主义社会是吃人的社会。&lt;/p&gt;
&lt;p&gt;看来，我要好好复习一下中学历史了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;P.S.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这篇文章的题图，是 New Yorker 今年 3 月 9 日刊的封面。是一幅漫画，我觉得挺有意思。&lt;/p&gt;
&lt;p&gt;&lt;img alt="comic" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-23/comic.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;在这样一个时期，口罩本来应该遮住鼻子和嘴巴，阻止病毒传播。但川普却被口罩蒙住了眼睛，嘴巴依然大张着，胡扯着。&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-03-23/readme.md" rel="alternate"/></entry><entry><id>2020/2020-03-18/readme.md</id><title>不要错误地理解“危机”</title><updated>2020-03-18T00:00:00-07:00</updated><content>&lt;h2&gt;不要错误地理解“危机”&lt;/h2&gt;
&lt;p&gt;美股又熔断了。&lt;/p&gt;
&lt;p&gt;我不搞经济不做金融，所以在这方面没什么发言权。但还是有一些思考，和大家分享一下。&lt;/p&gt;
&lt;p&gt;简单来说，就是：现在的情况，&lt;strong&gt;不要老想着抄底。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当然，如果你钱多，当我没说；能无限补仓，当我没说；是赌神，当我没说。&lt;/p&gt;
&lt;p&gt;为什么？全球因为疫情的原因，处在巨大的不确定性中。而&lt;strong&gt;不确定性，是金融市场最讨厌的属性。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;什么时候疫情的态势明朗了，什么时候才适合再次投资。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;很多人都说，现在是经济危机的节奏，危机危机，有危就有机。所以有机会。&lt;/p&gt;
&lt;p&gt;但我不这么看。&lt;strong&gt;既然叫危机，危一定大于机。&lt;/strong&gt;2008 年金融危机，无数企业和个人破产，甚至多个“百年老店”轰然倒塌，所以才称为危机。而不是无数人在其中能赚到钱。&lt;/p&gt;
&lt;p&gt;相反，在过去几年甚至十几年里，世界整体平和发展，逐渐向全球一体化行进，各行各业在科技发展的带动下稳定前进，贸易往来平稳，在这样的一点危机的影子都没有的过程中，大多数人才都能赚到钱。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;有没有人在经济危机中赚到钱？有。&lt;/p&gt;
&lt;p&gt;贾瑞德·韦内特，迈克尔·布瑞，马克·鲍姆，本·霍克特。他们赚到钱了。&lt;/p&gt;
&lt;p&gt;他们是谁？就是著名电影《大空头》中描述的人物。&lt;/p&gt;
&lt;p&gt;&lt;img alt="short" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-18/short.png" /&gt;&lt;/p&gt;
&lt;p&gt;要知道，他们是如此的稀有，竟然能在巨大的危机中赚到钱，所以才会被拍成电影，成为传奇。&lt;/p&gt;
&lt;p&gt;如果你觉得自己也是电影主角，传奇人物，当我没说。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;现在，在这样一个大环境中，现金为王。直到疫情结束，或者个别的行业领域有着非常明朗的局势发展，才可以考虑在这些局势明朗的领域投资。&lt;/p&gt;
&lt;p&gt;过去中国十几年的经济高速发展，使得我们根本没有经受过金融危机。很多人会下意识地觉得：要把钱投出去，钱才不会贬值。&lt;/p&gt;
&lt;p&gt;但这个逻辑，在大的经济震荡下并不成立。在当下，&lt;strong&gt;少输，就是多赚。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;再次声明：我不是金融专家，&lt;strong&gt;以上纯属胡扯。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;只是，作为一名逻辑和数学的爱好者，单纯地提醒大家：无论是从逻辑分析的角度，还是从概率的角度，现在都不是投资赚钱的好时机。&lt;/p&gt;
&lt;p&gt;但是，诸多被疫情打击重大的行业，在疫情结束后，一定会重新崛起。比如航空业，比如旅游业。完全没有道理人们以后不坐飞机了，或者不再旅游了。&lt;/p&gt;
&lt;p&gt;如果是这样的话，长期来看，现在购买这些行业的股票或相关基金，其实是没毛病的。&lt;/p&gt;
&lt;p&gt;但问题在于，由于疫情产生的不确定性，所以这些行业很有可能还完全没有到达底部；从短期的角度看，就会觉得很赔。&lt;/p&gt;
&lt;p&gt;所谓抄底抄到半山腰。&lt;/p&gt;
&lt;p&gt;所以，还是要等疫情结束，一切局势明朗之后，再开始做投资，或许是最明智的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;P.S.1&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;今天有一个小思考。没有答案，不是事实，只是&lt;strong&gt;胡思乱想&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;川普政府要给每个美国人发 1000 刀的支票。而且搞不好，总共要发 2000 刀，甚至有人建议，每个美国人在这场疫情期间，要发 4500 刀。&lt;/p&gt;
&lt;p&gt;我们就看比较确定的这 1000 刀。每个美国人拿到这 1000 刀，他们会花在哪个领域？&lt;/p&gt;
&lt;p&gt;如果想明白这一点，是不是意味着，这个领域，甚至是某个特定的公司，短期内有上涨的可能？&lt;/p&gt;
&lt;p&gt;不知道为什么，我觉得很多美国人会去买新的苹果手机，苹果电脑，或者苹果无线耳机。尤其是今天，苹果还发布了诸多新品。&lt;/p&gt;
&lt;p&gt;如果真是这样，是不是意味着，短期内，苹果股票有逆势增长的可能？&lt;/p&gt;
&lt;p&gt;注：本段内容不构成任何投资建议。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;P.S. 2&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;《大空头》被拍成了电影，其实是根据美国作家迈克尔.刘易斯的书：《大空头》，改编的。&lt;/p&gt;
&lt;p&gt;迈克尔.刘易斯的这本书，不仅仅描述了一场“小人物”的财富传奇，呈现了人性的缺陷和金融体系的弊端，更有很多引人深思的东西隐藏在字里行间。&lt;/p&gt;
&lt;p&gt;投行如何用风险的复杂化掩盖产品的风险？评级制度存在怎样的盲点？金融界怎样运用术语的谎言欺骗客户？危机过后，我们应该如何行动？&lt;/p&gt;
&lt;p&gt;相信这本书会给你全新的思考和启发。&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-03-18/readme.md" rel="alternate"/></entry><entry><id>2020/2020-03-17/readme.md</id><title>什么都懂，啥都不精，怎么办？</title><updated>2020-03-17T00:00:00-07:00</updated><content>&lt;h2&gt;什么都懂，啥都不精，怎么办？&lt;/h2&gt;
&lt;p&gt;这是在我的知识星球上，一个同学问我的问题。&lt;/p&gt;
&lt;p&gt;波波老师，我这次应聘上了物联网工程师，我属于半个业内人员。请问您怎么看物联网工程师的发展？&lt;/p&gt;
&lt;p&gt;我上大学的时候总结了下物联网：画 PCB 不如电子电气专业的；写软件不如软件专业的；搞网络不如网络专业的；搞通信不如通信专业的！啥都学点，啥都不精通。怎么办？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;bobo 老师的回答：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先声明，我完全不懂物联网。&lt;/p&gt;
&lt;p&gt;不过对于你提出的这个问题，我倒是有一些思考，分享出来，仅供参考。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;你说的啥都学点儿，啥都不精通，其实在我看来，并不是问题。因为很多职业都是如此。&lt;/p&gt;
&lt;p&gt;最典型的例子，就是数据分析师。数据分析师要懂数学，但数学显然比不过数学专业；数据分析师要使用机器学习的方法，但拼不过专门做 AI 的；数据分析师要编程，可是编不过搞软件开发的；数据分析师还要理解业务，但是对业务的理解肯定也不如产品，销售，运营，以及一些决策或者管理岗位。&lt;/p&gt;
&lt;p&gt;数据分析师啥都学点儿，啥都不精通。&lt;/p&gt;
&lt;p&gt;结果呢？&lt;/p&gt;
&lt;p&gt;国内的行情我不是特别了解，听说也不错。但是在美国，至少在三五年前，数据分析师是一个火得一塌糊涂的岗位。众多硅谷大厂大把大把地高薪招聘数据分析师。我也知道很多其他专业的同学，其中不乏数学，物理等基础专业的同学，转行去做了数据分析师。&lt;/p&gt;
&lt;p&gt;实际上，现在，硅谷的数据分析岗位依然很火。在绝大多数硅谷大厂，数据分析仍然是非常重要的工作。只不过随着时间的推移，门槛在逐渐提高。其实这几年，国内的各种计算机相关职位的门槛也在逐渐提高，这在国内外是一样的。&lt;/p&gt;
&lt;p&gt;所以，如果我们去分析数据分析师这个岗位，看它的前景如何？恐怕没有人会说，这个岗位的从业人员啥都学点儿，但啥都不精通，所以不是一个好的职业方向。&lt;/p&gt;
&lt;p&gt;啥都学点儿，啥都不精，这其实并没有关系。&lt;strong&gt;因为在现代社会，近乎任何岗位，其实都是技能的组合，而不是绝对单一技能的精通。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一个岗位前景如何，关键在于市场。&lt;/strong&gt;也就是市场需不需要拥有这种技能组合的人员？这样的技能组合能不能给企业解决问题？带来利润？&lt;/p&gt;
&lt;p&gt;你看数据分析师，他们的数学水平拼不过数学专业，但却反过来，有很多数学专业的人来做数据分析师。为什么？&lt;/p&gt;
&lt;p&gt;因为纯粹的理论数学，市场的需求相对较少。而数据分析这个结合了数学专业技能的岗位，配合其他技能，才对当下世界上的大多数企业有价值。&lt;/p&gt;
&lt;p&gt;所以，我认为：其实不用太纠结精通不精通的问题，而&lt;strong&gt;应该更关注：你所掌握的技能，能不能在你所在的职业群体中脱颖而出？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;比如，你的目标是物联网工程师，那么，你真正需要考虑的是：你能不能在物联网工程师这个群体中脱颖而出？只要你是一名优秀的物联网工程师，在物联网工程师这个岗位，超过大多数，我相信你就是具有竞争力的。&lt;/p&gt;
&lt;p&gt;毕竟，即便搞通信的通信比你强；搞软件的软件比你强；搞电气的电气比你强；搞网络的网络比你强；&lt;strong&gt;但他们都搞不定物联网！&lt;/strong&gt;一但来到物联网这个特定的领域，需要特定的技能组合，你就秒杀他们。&lt;/p&gt;
&lt;p&gt;所以，完全没必要跟他们比。&lt;strong&gt;你所具备的独特的技能组合，就是你的核心竞争力。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;理解了这一点，剩下问题的关键就是：物联网的市场到底如何？以后能不能有大发展？&lt;/p&gt;
&lt;p&gt;这个专业的判断，我不太能做出。以我个人接触的有限信息来看，我认为物联网未来是非常有发展前景的。&lt;/p&gt;
&lt;p&gt;我很看好物联网。各式各样的物联网终将建立起来，我们每个人也终将离不开物联网，就像我们每个人现在离不开互联网一样。&lt;/p&gt;
&lt;p&gt;但这是否意味着：每一个物联网工程师都将炙手可热，成为市场的宠儿？被企业高薪疯抢，进而走向人生巅峰？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;很遗憾，我觉得不一定。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一方面，如果这个爆发点太晚，我们的年龄已经太高了的话，可能是享受不到这波行业红利的。&lt;/p&gt;
&lt;p&gt;另一方面，即使行业爆发了，身处不同的企业，可能感受也不一样。&lt;/p&gt;
&lt;p&gt;手机行业确实爆发了。苹果如日中天，可诺基亚和黑莓却倒了。&lt;/p&gt;
&lt;p&gt;移动操作系统确实越来越重要，移动开发也变成了必不可缺。在苹果和安卓在移动市场占有率上打得不可开交的时候，微软的 Windows Phone 彻底完蛋了。&lt;/p&gt;
&lt;p&gt;所以，这里还是有不少运气成分的。&lt;/p&gt;
&lt;p&gt;因此，我一直不是很建议通过判断行业前景，来选择职业道路。&lt;/p&gt;
&lt;p&gt;行业前景当然要参考，但整体，我认为只要不是夕阳产业，就行。&lt;/p&gt;
&lt;p&gt;相比想尽办法费力去找到一个将来可能会“爆炸”的领域，我还是觉得想尽办法找到一个自己喜欢的领域，一个即使没“爆炸”，自己也不后悔，甚至还能乐在其中的领域，更靠谱。&lt;/p&gt;
&lt;p&gt;那将帮助你少一分焦虑，多一分平和。&lt;/p&gt;
&lt;p&gt;因为，至少，我们还在做自己喜欢的事儿。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-03-17/readme.md" rel="alternate"/></entry><entry><id>2020/2020-03-15/readme.md</id><title>群体免疫背后的数学</title><updated>2020-03-15T00:00:00-07:00</updated><content>&lt;h2&gt;群体免疫背后的数学&lt;/h2&gt;
&lt;p&gt;最近有一个词火了，叫“群体免疫”。&lt;/p&gt;
&lt;p&gt;在世界卫生组织宣布新冠病毒是大流行（Pandemic）之后，英国首相 Boris Johnson 紧随其后，在一个新闻发布会上宣称：英国已经不能再“控制”这个病毒了，而是进入下一个阶段：尽量推迟病毒的传播。&lt;/p&gt;
&lt;p&gt;原文是：... moving to delay the spread of the virus rather than containing it.&lt;/p&gt;
&lt;p&gt;&lt;img alt="boris" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-15/boris.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;英国首相在新闻发布会上还说了一句话，“很多家庭都会失去他们挚爱的人”。&lt;/p&gt;
&lt;p&gt;原文是：many more families will lose loved ones.&lt;/p&gt;
&lt;p&gt;这句话瞬间登上了英国各路媒体的头条。&lt;/p&gt;
&lt;p&gt;&lt;img alt="ukpaper" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-15/ukpaper.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;说实话，我没有看英媒的报道。我不确定英国媒体报道背后的意思，到底是要渲染这个病毒的严重性？还是对英国首相政策的讽刺？也或者是二者兼而有之？&lt;/p&gt;
&lt;p&gt;然而，至此为止，这些内容其实都没有引发网上的热议。&lt;/p&gt;
&lt;p&gt;随后，英国的首席科学顾问 Patrick Vallance 告诉大家，英国的感染率可能会达到 60%，然后形成&lt;strong&gt;群体免疫（herd immunity）&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img alt="advisor" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-15/advisor.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;至此，群体免疫成为全网热词。&lt;/p&gt;
&lt;p&gt;是的，不仅仅包括中国的互联网，也包括美国的互联网，我相信更包括英国的互联网，大家都在讨论群体免疫。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;本来对这个话题，我没有什么发言权。因为这背后所涉及的，无论是传染病学，还是公共政策的制定，都不是我的专业。&lt;/p&gt;
&lt;p&gt;但是，我简单查了查维基百科，发现“群体免疫”这个术语是一个由来已久的科学概念。在搞明白这个概念的过程中，有很多数学计算，其实都非常非常初等，我觉得很有意思。&lt;/p&gt;
&lt;p&gt;所以，我决定简单写一写，权当是科普：）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;事实上，“群体免疫”理论是疫苗可以起作用的核心原因！&lt;/p&gt;
&lt;p&gt;是的，要理解疫苗可以控制病毒的原因，必须结合“群体免疫”这个理论才行。&lt;/p&gt;
&lt;p&gt;为什么呢？原因很简单，疫苗不可能 100% 有效。&lt;/p&gt;
&lt;p&gt;首先，从疫苗制作的角度考虑，疫苗本身就不可能完美地在所有人身上有效。&lt;/p&gt;
&lt;p&gt;疫苗产生作用的原理，是刺激人类的免疫系统，让免疫系统产生相应的保护物质。&lt;/p&gt;
&lt;p&gt;但我们人体的自身情况千差万别，就算疫苗本身是完美的，也不可能 100% 对所有人有效。如果一个人的免疫系统本身受损，最典型的情况是艾滋病患者，或者正在接受化疗的癌症患者，那么对于这类人群，“完美”的疫苗也失效了。&lt;/p&gt;
&lt;p&gt;另外，因为各种社会原因，疫苗也不可能达到 100% 的接种。&lt;/p&gt;
&lt;p&gt;这里面有经济的原因，政府的宣传原因，甚至在一些个别地区，交通原因都可能使很多人不去接种疫苗。&lt;/p&gt;
&lt;p&gt;但尽管如此，疫苗还是帮助人类控制了很多疾病。最典型的例子就是天花。&lt;/p&gt;
&lt;p&gt;为什么？因为&lt;strong&gt;群体免疫&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;在具体看群体免疫背后的数学之前，我们可以先看一看，病毒是怎么爆发的？&lt;/p&gt;
&lt;p&gt;很简单，一传十，十传百。&lt;/p&gt;
&lt;p&gt;在传染病领域，这叫做 R0，表示基本传染数。&lt;/p&gt;
&lt;p&gt;什么叫基本传染数？就是指在没有外力介入的情况下，一个病人可以把一种病毒传染给多少人？&lt;/p&gt;
&lt;p&gt;一传十，十传百，R0 就是 10。&lt;/p&gt;
&lt;p&gt;如果 R0 = 2，就是说对于一种病毒，一个病人可以传染给两个人；那么两个病人就可以传染给四个人；四个病人就可以传染给八个人；以此类推。&lt;/p&gt;
&lt;p&gt;相信学习计算机的同学对此很熟悉，这叫指数增长。即使 R0 不是 10，而是 2，这个增长速率也是非常可怕的。&lt;/p&gt;
&lt;p&gt;实际上，只要 R0 &amp;gt; 1，都叫指数增长。用高等数学的话说得不通俗易懂一些，就是我们其实是在看一个几何级数，这个几何级数是发散的。&lt;/p&gt;
&lt;p&gt;如果说得简单一些，就是：只要 R0 &amp;gt; 1，一个人得病，最终一定所有人都得病。&lt;/p&gt;
&lt;p&gt;但是，如果 R0 &amp;lt; 1，事情就不一样了。懂高等数学的同学会知道，此时，这个几何级数收敛了。也就是只有有限的人会得病，而不会无限传播。&lt;/p&gt;
&lt;p&gt;不说的这么“学术”，也很好理解。假设 R0 = 0.5，就代表一个人得病，只能传染 0.5 个人。&lt;/p&gt;
&lt;p&gt;如果觉得 0.5 个人太抽象，可以想象成，假设有 8 个人的病，因为 R0 = 0.5，这 8 个病人只能传染给 4 个人；这 4 个病人只能传染给 2 个人；这 2 个病人只能传染给 1 个人；而这 1 个病人，已经不能传染别人了。&lt;/p&gt;
&lt;p&gt;至此，我们总共得病的人数，是有限的。这个病毒没有在人群中无限传播，那么我们能控制这个病毒。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;如果明白了上面的数学计算，我们就知道了：控制疾病爆发的关键，是减小 R0。&lt;/p&gt;
&lt;p&gt;怎么减小？一个方式就是打疫苗。&lt;/p&gt;
&lt;p&gt;因为打完疫苗以后，人群有了免疫力。假设有 80% 的人群接种了疫苗。此时，就算这个病毒传染性超强，R0 = 10，也就是每一个病人能传染 10 个人。但是这 10 个人里，8 个人有免疫力，那么，真正传染的人，其实只有两个。&lt;/p&gt;
&lt;p&gt;R0 瞬间从 10 降低到了 2。&lt;/p&gt;
&lt;p&gt;当然了，大家可以想象，如果有 95% 的人群接种了疫苗，那么在 R0 = 10 的情况下，每一个病人就只能传染 0.5 个人了。因为 9.5 个人此时有了免疫力！那么 R0 就是 0.5 了！&lt;/p&gt;
&lt;p&gt;R0 = 0.5，就意味着这个病毒被控制住了。&lt;/p&gt;
&lt;p&gt;通过上面的分析可以看到：通过接种疫苗，哪怕人群中不是 100% 有免疫力，只要有很多人有免疫力，我们就能将传播系数 R0 控制在 1 以下，这就意味着这个病毒得到了控制。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;下面我们就要抽象一点点儿了。&lt;/p&gt;
&lt;p&gt;对于一个基本传染系数为 R0 的病毒来说，人群中拥有免疫能力的人，占比要达到多少，才能控制这个病毒？&lt;/p&gt;
&lt;p&gt;相信如果看懂了上面的分析，这个问题并不难。&lt;/p&gt;
&lt;p&gt;我们假设拥有免疫能力的人群占比要达到 p（p 是一个百分比），才能控制这个病毒。那么对于一个人得病，就能传染 R0 个人的病毒来说，由于这 R0 个人中，有 R0 * p 这么多人有免疫力，所以最终，只会传染 R0 * (1 - p) 这么多人。&lt;/p&gt;
&lt;p&gt;为了控制这个病毒，我们只需要让：R0 * (1 - p) &amp;lt; 1，就好了。 &lt;/p&gt;
&lt;p&gt;我们求解这个不等式，挪一下 R0，就是：&lt;/p&gt;
&lt;p&gt;&lt;img alt="f1" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-15/f1.png" /&gt;&lt;/p&gt;
&lt;p&gt;最终得到：&lt;/p&gt;
&lt;p&gt;&lt;img alt="f2" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-15/f2.png" /&gt;&lt;/p&gt;
&lt;p&gt;也就是说，如果 R0 = 10，我们需要让 1 - 1/10 = 90% 的人有免疫力，才能控制这个病毒。&lt;/p&gt;
&lt;p&gt;如果 R0 = 2，我们需要让 1 - 1/2 = 50% 的人有免疫力，就能控制这个病毒。&lt;/p&gt;
&lt;p&gt;可以看到，R0 越高，我们为了控制这个病毒，需要的拥有免疫力的人口就越多，才能控制住这个病毒。也就是我们控制这个病毒越难。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;这就叫&lt;strong&gt;群体免疫&lt;/strong&gt;。人群中只要有一定比例的人口拥有了免疫力，病毒就被控制住了。&lt;/p&gt;
&lt;p&gt;实际上，为了让这么多人获得免疫力，最常见的方法，就是给人群接种疫苗。&lt;/p&gt;
&lt;p&gt;此时，p 可以理解成是人群中接种疫苗的比例。&lt;/p&gt;
&lt;p&gt;但是，还记得之前说过的，其实，疫苗的成功率并非 100%？&lt;/p&gt;
&lt;p&gt;假设，我们将疫苗的有效性也放入上面的式子中的话，也就是实际具有免疫力的人群比例 p，是由两部分组成：一部分，是接种疫苗的比例，我们还叫 p，另一部分，就是这个疫苗的有效性，我们叫 E。&lt;/p&gt;
&lt;p&gt;我们可以得到：&lt;/p&gt;
&lt;p&gt;&lt;img alt="f3" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-15/f3.png" /&gt;&lt;/p&gt;
&lt;p&gt;注意，此时的 p，是人群中接种疫苗的比率，E 则是疫苗的有效性。不等式左侧的 p * E，还是表示具有免疫力的人群。&lt;/p&gt;
&lt;p&gt;我们把 E 挪到不等式右侧，就有了：&lt;/p&gt;
&lt;p&gt;&lt;img alt="f4" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-15/f4.png" /&gt;&lt;/p&gt;
&lt;p&gt;换句话说：假设这个病毒的 R0 = 2 的话，按照我们之前的计算，只需要 50% 的人接种疫苗就好。&lt;/p&gt;
&lt;p&gt;但是，由于疫苗的有效性不是 100%。假设这种疫苗的有效性是 90% 的话，那么根据我们新的公式，上面得到的这个 50%，还要再除以 90%，结果是 55.5%。&lt;/p&gt;
&lt;p&gt;也就是，因为我们的疫苗的有效性不是 100%，我们还需要相应地提高接种疫苗的人群比例，才能够达到“群体免疫”的目标。&lt;/p&gt;
&lt;p&gt;值得一提的是：如果这个病毒的 R0 = 10，而我们的疫苗的有效性是 80% 的话，代入上面的式子，就会发现，计算出的结果，是 112.5%！&lt;/p&gt;
&lt;p&gt;也就是，我们的接种人群数量必须超过 112.5%，才能达到“群体免疫”的效果。但我们的总人口数最多是 100%。这也就意味着，在这种情况下，这种疫苗无法做到“群体免疫”。&lt;/p&gt;
&lt;p&gt;因此，我们可以得到结论：如果一个病毒的传染性超强，那么我们也需要疫苗的有效性超高，才能达到“群体免疫”的效果。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;至此，关于群体免疫，我就科普完了。&lt;/p&gt;
&lt;p&gt;当然，上面我们用的模型非常简单。实际上，我们还可以引入各种其他参数变量，对于各种不同的情况，做出更复杂的模型。&lt;/p&gt;
&lt;p&gt;但是基本的骨架，就是这个样子。&lt;/p&gt;
&lt;p&gt;下面我们就可以聊聊新冠病毒了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;因为现阶段，对于新冠病毒，还没有疫苗。所以，获得免疫力的方法，就是感染。&lt;/p&gt;
&lt;p&gt;因此，上面公式中的 p，就变成了感染比例。&lt;/p&gt;
&lt;p&gt;而 E 呢，就是感染以后，可以真正地获得免疫力的人群比例。&lt;/p&gt;
&lt;p&gt;这个人群比例是多少呢？我查了一些资料，由于现在人们对新冠病毒的认识还比较少，所以观点不统一。不过，&lt;strong&gt;现阶段的主流观点是：感染新冠病毒的患者，短时间内不会二次感染。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所谓的短时间内不会，是指：新冠病毒并不是一个变异非常快速的病毒，所以感染以后，免疫系统能够正确识别这个病毒。但是，在更长的时间周期里，新冠病毒有可能变异得免疫系统都不认识了，于是，可能再次感染了。&lt;/p&gt;
&lt;p&gt;我们之所以每年都可能得流感，其实就是因为流感病毒变异得很快。其实，我们每年感染的流感病毒，严格来讲，并不是一种病毒。&lt;/p&gt;
&lt;p&gt;所以，现阶段，我们可以暂时把 E 想成是 100%，即所有感染新冠的人，都有了免疫力，暂时不会出现二次感染。&lt;/p&gt;
&lt;p&gt;这样一来，在上面的式子中，关键就是看新冠病毒的 R0 是多少。&lt;/p&gt;
&lt;p&gt;依然是，由于我们现在对新冠病毒的认识很少，所以，对于新冠病毒的 R0，大家没有统一的结论。&lt;/p&gt;
&lt;p&gt;我在网上查到的资料，大多数的观点认为，新冠病毒的 R0 在 2 - 2.5 之间。我们取高值：R0 = 2.5，E = 1，带入上面的式子，得到的结果是：p &amp;gt; 60%。&lt;/p&gt;
&lt;p&gt;这或许就是英国的首席科学顾问 Patrick Vallance 告诉大家的，英国的感染率可能会达到 60%，然后形成群体免疫（herd immunity）的由来。&lt;/p&gt;
&lt;p&gt;实际上，不仅仅是英国，早前德国总理 Merkel 也曾说过，可能会有 70% 的德国人感染这个病毒。&lt;/p&gt;
&lt;p&gt;&lt;img alt="german" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-15/german.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;如果带入这个式子，那么 Merkel 说这话的时候，依据的 R0，反算回来，就是 3.3 左右。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;上面的分析，都是纯粹的数学计算。&lt;/p&gt;
&lt;p&gt;最后随便聊聊英国的这个措施。&lt;/p&gt;
&lt;p&gt;实际上，我看了很多国内外的报道。整体，我觉得国内报道对英国有一定的误读；当然，国外也有不少误读。&lt;/p&gt;
&lt;p&gt;英国首席科学顾问的意思，更多的是：这个病毒最终的&lt;strong&gt;结果&lt;/strong&gt;，会导致 60% 的英国人感染。为什么不是 100%，而是 60%？因为有“群体免疫”的效应。&lt;/p&gt;
&lt;p&gt;但是，&lt;strong&gt;英国的意思并不是：现在马上去让 60% 的人得病，然后我们就群体免疫了，这个问题就解决了。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;实际上，在这个新闻发布会上，英国首相还是给出了一定的建议的。&lt;/p&gt;
&lt;p&gt;比如，英国首相宣布：出现发烧或者咳嗽症状的人，要进行自我隔离。&lt;/p&gt;
&lt;p&gt;如果真的是要让 60% 的人赶紧感染达到“群体免疫”的话，那么就不应该建议他们隔离，赶紧出来传染别人才好。&lt;/p&gt;
&lt;p&gt;英国首相还反复强调洗手对预防新冠病毒的重要性。同理，如果要让 60% 的人赶紧感染达到“群体免疫”，就应该呼吁不要洗手。&lt;/p&gt;
&lt;p&gt;当然，英国并没有采取相对“激进”的措施做进一步的防范，这是很多人，包括很多专家争论的焦点。到现在，已经有来自英国各个大学的 229 名科学家联名写信给政府，敦促政府采取更严厉的措施来应对新冠病毒了。&lt;/p&gt;
&lt;p&gt;但结果会怎样？&lt;/p&gt;
&lt;p&gt;我预测不出来，这已经超出我的能力范围了。&lt;/p&gt;
&lt;p&gt;反正大家，不管是在国内，还是国外，勤洗手，减少不必要的出门，在这个阶段，就是保护自己和家人的最佳措施了。&lt;/p&gt;
&lt;p&gt;希望所有人健康平安。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-03-15/readme.md" rel="alternate"/></entry><entry><id>2020/2020-03-12/readme.md</id><title>弱小和无知不是生存的障碍，傲慢才是</title><updated>2020-03-12T00:00:00-07:00</updated><content>&lt;h2&gt;弱小和无知不是生存的障碍，傲慢才是&lt;/h2&gt;
&lt;p&gt;最近，关于新冠疫情在世界范围内的坏消息不断。&lt;/p&gt;
&lt;p&gt;就在昨天，雷霆对阵爵士，比赛还没开始，裁判和球员却开始退场了。同时，现场也开始组织球迷退场。&lt;/p&gt;
&lt;p&gt;之后，联盟宣布，戈贝尔（Rudy Gobert）新冠病毒检测结果为阳性；不久，他的队友多诺万.米切尔（Donovan Mitchell）也确诊。&lt;/p&gt;
&lt;p&gt;&lt;img alt="rudy" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-12/rudy.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;值得一提的是，就在上一场爵士对阵猛龙的赛前新闻发布会上，戈贝尔还为了表现自己“漠视疫情”，主动去触摸每一个麦克风与录音设备。&lt;/p&gt;
&lt;p&gt;&lt;img alt="gebeier" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-12/gebeier.gif" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;现在 NBA 宣布停赛。从正常比赛到停摆，只花了一天不到的时间。&lt;/p&gt;
&lt;p&gt;&lt;img alt="nba" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-12/nba.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;同时，在足球界，尤文图斯的后卫丹尼尔·鲁加尼（Daniele Rugani）确诊感染新型冠状病毒。&lt;/p&gt;
&lt;p&gt;&lt;img alt="rugani" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-12/rugani.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;这意味着尤文图斯全队将会立即被紧急隔离，包括当今足坛最著名球员之一：C 罗。&lt;/p&gt;
&lt;p&gt;如今，意甲联赛从当地时间 10 日起已经暂时停摆。同时，随着疫情的发展，欧洲多个联赛面临停摆。&lt;/p&gt;
&lt;p&gt;体育界一片哀嚎。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;昨天，和体育界一起哀嚎的，还有娱乐界。&lt;/p&gt;
&lt;p&gt;好莱坞影帝汤姆.汉克斯（Tom Honks）以及其妻子丽塔·威尔逊（Rita Wilson），在澳大利亚确诊感染新冠。&lt;/p&gt;
&lt;p&gt;&lt;img alt="hanks" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-12/hanks.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;汤姆.汉克斯是我最喜欢的好莱坞演员之一。他的诸多作品，可以说是对一代人，甚至是几代人影响深远。&lt;/p&gt;
&lt;p&gt;从《拯救大兵瑞恩》，到《猫鼠游戏》；从《幸福终点站》，到《萨利机长》。&lt;/p&gt;
&lt;p&gt;但汤姆.汉克斯最重要的，对世界影响最深远的作品，当属《阿甘正传》了。&lt;/p&gt;
&lt;p&gt;&lt;img alt="gump" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-12/gump.png" /&gt;&lt;/p&gt;
&lt;p&gt;《阿甘正传》中有一句传世的台词，近乎每一个人都倒背如流。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Life is like a box of chocolates. You never know what you're gonna get.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如今看这句台词，我竟觉得有些许的讽刺。&lt;/p&gt;
&lt;p&gt;谁也没有想到，这些巧克力里，还会有一枚装着新冠病毒。&lt;/p&gt;
&lt;p&gt;或许，这是上帝又在跟阿甘开玩笑。&lt;/p&gt;
&lt;p&gt;在《阿甘正传》里，一个“傻子”也能扼住命运的喉咙。相信这一次，汉克斯夫妇也能。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;政界也并不轻松。&lt;/p&gt;
&lt;p&gt;英国卫生部长纳丁·多里斯（Nadine Dorries）已确诊感染新冠肺炎。&lt;/p&gt;
&lt;p&gt;据了解，她曾在过去的一周内，在议会上与上百人会面，并且与英国首相约翰逊在唐宁街 10 号一同参加了招待会。&lt;/p&gt;
&lt;p&gt;&lt;img alt="dorris" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-12/dorris.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;据 CNN 报道：巴西总统博索纳罗（Jair Messias Bolsonaro）的新闻秘书法比奥·瓦金加藤（Fabio Wajngarten），在新冠病毒检测中呈阳性。目前，巴西总统的健康状况正受到监控。&lt;/p&gt;
&lt;p&gt;而更严峻地是，就在上周末，这位已经确诊的巴西新闻秘书瓦金加藤先生，曾陪同巴西总统博索纳罗一同前往美国。期间，和美国总统特朗普、副总统彭斯等人有过接触。&lt;/p&gt;
&lt;p&gt;他甚至前几天，还在 Instagram 上发了一张他和特朗普等人的合照。&lt;/p&gt;
&lt;p&gt;&lt;img alt="trump" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-12/trump.png" /&gt;&lt;/p&gt;
&lt;p&gt;在这张照片中，有巴西总统（左一），美国副总统彭斯（左二），美国总统川普（左三）和现在已经确诊的巴西新闻秘书瓦金加藤（最右）。可以看到，瓦金加藤就在川普的旁边。&lt;/p&gt;
&lt;p&gt;上图来自美国一家媒体的新闻，新闻的标题是：川普总统是最应该接受新冠病毒检测的人，但是他拒绝接受检测。&lt;/p&gt;
&lt;p&gt;截止到目前为止，美国媒体报道：无论是川普总统，还是副总统彭斯，都拒绝接受新冠病毒检测。他们的理由是：他们几乎没有和瓦金加藤有过交互。&lt;/p&gt;
&lt;p&gt;而另一位参议员 Rick Scott 正在接受隔离观察。&lt;/p&gt;
&lt;p&gt;&lt;img alt="grace" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-12/grace.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;以上基本上是在过去两天左右的时间里，涌入美国民众视线的新闻。&lt;/p&gt;
&lt;p&gt;或许正因如此，虽然昨天美国总统紧急发表电视讲话，应对新冠疫情，安抚民众情绪，宣布了包括针对欧洲国家的旅行禁令、针对企业和个人的紧急救助等在内的多项措施。&lt;/p&gt;
&lt;p&gt;&lt;img alt="trump2" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-12/trump2.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;但是，似乎没有什么效果。投资者们依旧很恐慌。今天美股开盘即大跌 7%，直接又一次触发熔断。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;网上的段子：&lt;/p&gt;
&lt;p&gt;美股熔断，在历史上只发生过三次。上一次熔断，还是在 2020 年 3 月 9 日。那一天的情景，至今还历历在目，仿佛就在几天之前......&lt;/p&gt;
&lt;p&gt;嗯，因为真的就在几天之前。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;今天已经成为美国继 1987 年 10 月 19 日黑色星期一之后，股市最惨的一天。&lt;/p&gt;
&lt;p&gt;&lt;img alt="stock" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-12/stock.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;诸多名人相继确诊，美国的网络上，已经有了这样的声音：&lt;/p&gt;
&lt;p&gt;&lt;img alt="post1" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-12/post1.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;翻译：还记得曾经有人说，没有人会在乎这个病毒，直到有名人确诊吗？现在名人们确诊了。让我们一起恐慌吧。&lt;/p&gt;
&lt;p&gt;下面有一条回复也很有意思：&lt;/p&gt;
&lt;p&gt;&lt;img alt="post2" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-12/post2.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;翻译：我的妈妈一直不在乎新冠病毒，直到她知道汤姆汉克斯确诊了，她现在吓坏了。这年头儿，人们都怎么了？...&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;是的，我认为现在，西方世界必须重视新冠疫情了。&lt;/p&gt;
&lt;p&gt;希望这还不太晚。&lt;/p&gt;
&lt;p&gt;不仅如此，西方世界还必须要重视中国的防疫经验。因为，现如今，&lt;strong&gt;傻子都能看出来：中国已经成功地控制了新冠疫情。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;今天，一名身在硅谷的美国人 Tomas Pueyo，在 Medium 上发表了一篇文章，用数据，有理有据地阐明了：中国采取的隔离措施的意义。&lt;/p&gt;
&lt;p&gt;&lt;img alt="Pueyo" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-12/pueyo.png" /&gt;&lt;/p&gt;
&lt;p&gt;他的这篇文章，可以点击这里阅读原文：&lt;a href="https://medium.com/@tomaspueyo/coronavirus-act-today-or-people-will-die-f4d3d9cd99ca"&gt;https://medium.com/@tomaspueyo/coronavirus-act-today-or-people-will-die-f4d3d9cd99ca&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;在这篇文章中，他做了一个很有意思的数据图表。如下：&lt;/p&gt;
&lt;p&gt;&lt;img alt="chart" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-12/chart.png" /&gt;&lt;/p&gt;
&lt;p&gt;这个图表的信息量很大。如果大家在手机上阅读的话，我不确定能否看清楚细节。大家应该可以通过点击获得大图。&lt;/p&gt;
&lt;p&gt;不过，在下面的叙述中，我会把我重点关注的局部图像进行放大，方便大家阅读。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;整张图整体重点就是这一部分:&lt;/p&gt;
&lt;p&gt;&lt;img alt="chart2" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-12/chart2.png" /&gt;&lt;/p&gt;
&lt;p&gt;大家可以看到，在这个图表中，有两组柱状图，分别用灰色和橙色表示。这两组数据是什么意思呢?&lt;/p&gt;
&lt;p&gt;橙色的数据，是指在湖北省中，每天在医院确诊的人数。&lt;/p&gt;
&lt;p&gt;而灰色的数据，则是在确诊过程中，医生询问这些患者，你的症状大概是什么时候出现的？然后统计出来的数据。&lt;/p&gt;
&lt;p&gt;换句话说，灰色的数据，可以粗略地表示：这些确诊患者真正感染新冠病毒的时间。&lt;/p&gt;
&lt;p&gt;也正是因为如此，大家可以看到，灰色的数据，基本上是橙色的数据，向左，也就是向前面的时间平移了一下。平移的时间间隔，大概是 10 天。&lt;/p&gt;
&lt;p&gt;有了这个数据，我们就能分析出一些有意思的结论了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;首先，我们可以看到，基本上，1 月 20 日，1 月 21 日，1 月 22 日这三天的时间，湖北省医院的确诊人数（橙色数据），在呈指数及增长。&lt;/p&gt;
&lt;p&gt;&lt;img alt="chart3" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-12/chart3.png" /&gt;&lt;/p&gt;
&lt;p&gt;在 1 月 20 日，橙色的数据还很少；到了 1 月 21 日，确诊数量陡然增高。这个数字大概是 100 左右；到了 1 月 22 日，又一天，新的确诊数字就已经接近 300 了。&lt;/p&gt;
&lt;p&gt;很显然，确诊人数正在指数级的增长。注意，现在我们看的是橙色的数字，也就是真实确诊的数字。&lt;/p&gt;
&lt;p&gt;或许正是因为这个原因，1 月 23 日，我国当机立断，对武汉进行了封城。之后很快，对湖北省多个城市也实施了封城措施。&lt;/p&gt;
&lt;p&gt;封城后管用吗？如果我们看医院获得的确诊数据，也就是橙色的数据，似乎并不管用。在很长的一段时间，确诊病例继续持续增高，甚至是指数级的上涨。直到 2 月 4 日以后，才开始有了下降的趋势。&lt;/p&gt;
&lt;p&gt;&lt;img alt="chart4" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-12/chart4.png" /&gt;&lt;/p&gt;
&lt;p&gt;或许正是因为这种确诊数量的继续升高，在那个时候，大量的西方媒体都在质疑：这样的封城措施到底有没有用？&lt;/p&gt;
&lt;p&gt;但是现在，更完整的数据出现之后，我们或许可以进一步看到事情的原貌。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;大家要知道，前面说，在湖北省，1 月 20 日，1 月 21 日，1 月 22 日这三天的确诊人数（橙色数据），在呈指数及增长。但这个数据只是医院知道的数据而已。&lt;/p&gt;
&lt;p&gt;真正的感染数据，医院是不知道的。现如今，我们回头看，就会明白：新冠病毒在湖北省指数级别的感染，发生在更早的时候，或许是 1 月 7 号左右。此时，我们要看灰色的数据！&lt;/p&gt;
&lt;p&gt;&lt;img alt="chart5" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-12/chart5.png" /&gt;&lt;/p&gt;
&lt;p&gt;这很好理解。由于潜伏期的存在，病毒在 1 月 7 日开始，就已经指数级别地感染人群了。但直到 1 月 20 日，大量病患涌入医院，医院才意识到：问题很严重。&lt;/p&gt;
&lt;p&gt;如果用这个视角看，我们来看一下，武汉封城以后，实际的感染数据。也就是在采取封城措施以后，灰色数据是怎样的？&lt;/p&gt;
&lt;p&gt;请大家关注灰色数据：&lt;/p&gt;
&lt;p&gt;&lt;img alt="chart6" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-12/chart6.png" /&gt;&lt;/p&gt;
&lt;p&gt;上面的图表中，包含从武汉封城，也就是 1 月 23 日，直到 2 月 11 日的数据。大家可以看到，如果只关注灰色数据，就能明白：&lt;strong&gt;这近乎是一个往下走的曲线！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;因此，我们或许能得出这样的一个结论：&lt;strong&gt;武汉封城是很有意义的措施，这个措施真的遏制了病毒的传播！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在这个背景下，如果我们再看中国其他省份的确诊数据，就是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="chart7" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-12/chart7.png" /&gt;&lt;/p&gt;
&lt;p&gt;大家可以看到，下面一堆平滑的曲线，就是中国其他省份的数字。近乎没有指数增长的情况。&lt;/p&gt;
&lt;p&gt;但是，三根耀眼的，显然在指数增长的曲线，分别是韩国，意大利和伊朗。&lt;/p&gt;
&lt;p&gt;现在，除了中国，韩国，意大利和伊朗，其他国家的数字都还相对较少。但如果我们放大他们的确诊数字，就会发现：指数增长正在发生！&lt;/p&gt;
&lt;p&gt;&lt;img alt="chart8" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-12/chart8.png" /&gt;&lt;/p&gt;
&lt;p&gt;注意，这些数字只是我们知道的确诊数字。根据湖北省的经验来看：实际感染数字，要比确诊数字高很多！&lt;/p&gt;
&lt;p&gt;也就是说：&lt;strong&gt;留给世界其他国家的时间窗口，可能真的不多了。&lt;/strong&gt;对于一些国家来说，即使现在采取相对强硬的隔离措施，可能最后的结果，也要奔着湖北省的数字去。&lt;/p&gt;
&lt;p&gt;而湖北省，乃至全中国的经验告诉我们：这样的强制隔离，是有效果的！&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;在这里，我当然明白，&lt;strong&gt;大家国情不同，制度不同，资源不同，所以在设计具体政策的时候，不可能完全一样。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;但尽管如此，&lt;strong&gt;西方世界的其他国家，能不能至少不要轻视这个病毒？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;西方国家的媒体报道，能不能不要污名化中国的措施？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;举个例子，就在两天前，意大利封城了。其实，现在意大利近乎封国了。&lt;/p&gt;
&lt;p&gt;在同一天，《纽约时报》发了两条报道，前后相隔仅有 20 分钟。是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="ny" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-12/ny.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;左边第一条报道是在说中国。题目是：为了对抗新冠病毒，中国将 600 万人封锁，并对上亿人实施了严格的隔离措施和旅游管制。&lt;strong&gt;这些措施对人民的生活和自由造成了极大的损失。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;右边第二条报道是在说意大利。题目是：突发新闻！意大利封锁了米兰，威尼斯和北部大部分城市。&lt;strong&gt;意大利正在为遏制新冠病毒在欧洲的蔓延，承受着巨大的经济损失。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Excuse me？&lt;/p&gt;
&lt;p&gt;我知道你们双标，也不能这样厚颜无耻吧？我真地想骂人了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;现在不是争执意识形态的时候，不是比拼制度优越的时候，所以，咱也不多说。&lt;/p&gt;
&lt;p&gt;毕竟，&lt;strong&gt;病毒面前，人人平等。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;就算大家国情不同，制度不同，西方国家的现实情况，确实不能“抄”我国的防疫作业。&lt;/p&gt;
&lt;p&gt;但是，&lt;strong&gt;西方国家是不是也该正视中国的防疫经验，承认中国做法的合理性和有效性，并且一定程度加以借鉴？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;早在 1000 年前，中国晚唐诗人杜牧，就在《阿房宫赋》中写道：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;秦人不暇自哀，而后人哀之，后人哀之而不鉴之，亦使后人而复哀后人也！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;这句话，中国的中学生都能背下来。但想必对西方国家的人来说，太难了。&lt;/p&gt;
&lt;p&gt;毕竟中华文化，博大精深。&lt;/p&gt;
&lt;p&gt;但就在大概 9 年前，中国科幻小说家刘慈欣，亦在他的小说《三体III》中写道：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;弱小和无知不是生存的障碍，傲慢才是。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;好吧，中文你们不懂。&lt;/p&gt;
&lt;p&gt;但是，《三体》三部曲已经被完全翻译成了外文，摘得多项科幻界的大奖，甚至被列在了比尔盖茨要读的书目列表中。&lt;/p&gt;
&lt;p&gt;我来告诉你们，这句话的英文怎么说：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Weakness and ignorance are not barriers to survival, &lt;/p&gt;
&lt;p&gt;but arrogance is.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;希望你们能听懂。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;题图是网友为《三体》中的水滴制作的图片。&lt;/p&gt;
&lt;p&gt;看过《三体》的同学，都知道水滴是何物。&lt;/p&gt;
&lt;p&gt;希望新冠病毒，不是地球的水滴。&lt;/p&gt;
&lt;p&gt;&lt;img alt="waterdrop" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-12/waterdrop.jpg" /&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-03-12/readme.md" rel="alternate"/></entry><entry><id>2020/2020-03-08/readme.md</id><title>不要忽视算法最朴素的意义</title><updated>2020-03-08T00:00:00-07:00</updated><content>&lt;h2&gt;不要忽视算法最朴素的意义&lt;/h2&gt;
&lt;p&gt;去年我和一个本科同学吃饭，席间有番对话，我觉得挺有意思。&lt;/p&gt;
&lt;p&gt;我大一开始就搞算法竞赛。我的同学也是牛人，但他不玩儿算法竞赛。&lt;/p&gt;
&lt;p&gt;和大多数初学计算机的同学一样，他也怀疑算法的意义。&lt;/p&gt;
&lt;p&gt;这不是贬义，我也怀疑过，甚至现在还会写&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-03-18/"&gt;《学算法有什么用？没用》&lt;/a&gt;这样的文章。&lt;/p&gt;
&lt;p&gt;然后他说，你记不记得，我大一曾经问过你，硬件会越来越快，算法有什么意义？&lt;/p&gt;
&lt;p&gt;据他说，我大一给出的回答是：即使硬件越来越快，但算法仍然在帮助我们节省时间和空间，我们就可以使用这些节省的时间和空间做更多的事。&lt;/p&gt;
&lt;p&gt;这个回答他当时觉得很有说服力。&lt;/p&gt;
&lt;p&gt;我说，我完全忘了这件事儿了。但是现在看，大一的我肯定是还没读《算法导论》。&lt;/p&gt;
&lt;p&gt;这本算法界的圣经，在全球已经卖出了超过 50 万册了；其在全球论文中的引用次数，也达到了 5 万余次之多。&lt;/p&gt;
&lt;p&gt;&lt;img alt="algo" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-08/algo.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;《算法导论》在序章就仔细讨论过这件事情。印象里林林总总说了很多，大多数其实我也忘记了，但我印象最深的一点就是：&lt;strong&gt;实际上，硬件的发展速度，是无法赶上算法的优化速度的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;也就是，如果你将一段 O(n^2) 的算法，放到 2020 年的机器上运行，相较于放在 2004 年的机器上运行，获得的效率提升，拼不过在 2004 年，我们把这段算法改成 O(nlogn) 的算法。&lt;/p&gt;
&lt;p&gt;n 越大，越明显。&lt;/p&gt;
&lt;p&gt;为什么我敢这么肯定？因为 2004 年，我已经开始在 OJ 上做题了。但凡是需要排序的问题，肯定要使用诸如归并排序或者快速排序这类 O(nlogn) 的算法。使用这类算法，对于 100 万级别的数据，绝对在 1 秒钟搞定。这是 2004 年。&lt;/p&gt;
&lt;p&gt;我们试验一下，在当代的机器上，如果使用一个 O(n^2) 的算法，对于排序任务，100 万的数据规模，需要多少时间呢？&lt;/p&gt;
&lt;p&gt;我自认我的计算机速度应该还是可以的。6 核 i9 处理器，主频 2.9GHz。内存 32 GB。&lt;/p&gt;
&lt;p&gt;&lt;img alt="os" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-08/os.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我使用 C++ 编写的选择排序进行实验。这是一个实现起来最简单的 O(n^2) 级别的排序算法。&lt;/p&gt;
&lt;p&gt;对于 100 万的数据，在我的机器上，需要的时间为 775 秒的时间。&lt;/p&gt;
&lt;p&gt;&lt;img alt="selection-sort" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-08/selection-sort.png" /&gt;&lt;/p&gt;
&lt;p&gt;大家可以看到：在 2004 年，如果我们使用高效的算法，一秒就能处理完的事情，放在 2020 年的计算机上，使用低效的算法，依然还是需要 775 秒才能处理完。&lt;/p&gt;
&lt;p&gt;我们如果假设摩尔定律不会失效的话。根据摩尔定律：每过 18 个月，芯片的性能会提高一倍。那么为了弥补这个 775 倍的差距，往少里说，也还需要 9 个时间周期（2^9 = 512），相当于 9 * 18 = 162 个月，也就是 &lt;strong&gt;13&lt;/strong&gt; 年之久。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;这还只是对于百万级别的数据。而对于 1000 万级别的数据，计算结果将更加夸张。&lt;/p&gt;
&lt;p&gt;实际上，对于现在我的这台计算机，我不需要使用 1000 万级别的数据实验，就能大概估算出所需要的时间。答案是 77500 秒左右。也就是要比 775 秒再多 100 倍时间。&lt;/p&gt;
&lt;p&gt;为什么？因为数据规模扩展了 10 倍，那么对于 O(n^2) 的算法来说，性能就需要多 100 倍。这就是 O(n^2) 的意思：性能和数据规模之间成平方的关系。&lt;/p&gt;
&lt;p&gt;但是，对于我的这台计算机，使用 O(nlogn) 的排序算法，1000 万的数据规模，妥妥地在 1 秒钟之内完成。&lt;/p&gt;
&lt;p&gt;77500 秒的时间不到一天，看起来似乎也可以忍受。但是这样的性能差距，在很多情况下是无法忍受的。&lt;/p&gt;
&lt;p&gt;比如现如今，我们做很多机器学习任务，训练过程动辄就要几个小时，我还见过计算两周的情况。&lt;/p&gt;
&lt;p&gt;就算我们的训练过程只需要 1 个小时就可以计算完毕。但倘若我们使用了低效的算法，性能差距达到了 77500 倍的话，就变成了需要 77500 个小时完成。&lt;/p&gt;
&lt;p&gt;77500 个小时是什么概念？一年不过 365 * 24 = 8760 个小时。77500 个小时，就是 9 年之久。&lt;/p&gt;
&lt;p&gt;1 个小时对比 9 年，这就是算法的威力。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;尽管如此，在当今时代，硬件的发展依然是计算能力提升的一个重要渠道。&lt;/p&gt;
&lt;p&gt;尤其是近些年，在人工智能领域，硬件变得越来越重要。GPU，TPU，为人工智能专门设计的 ASIC，FPGA 层出不穷。甚至成为了企业，乃至国家的重要发展战略。&lt;/p&gt;
&lt;p&gt;比如 Google 的 TPU——即 Tensor Processing Unit，中文翻译成张量处理器，简称 TPU——就是只租不卖的。&lt;/p&gt;
&lt;p&gt;&lt;img alt="tpu" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-08/tpu.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;突然想起聊这个话题，是因为前几天偶然看到一篇论文，觉得很有意思。&lt;/p&gt;
&lt;p&gt;这篇论文设计了一个计算引擎，叫 Sub-LInear Deep learning Engine，简称 SLIDE。论文的研究组使用这个引擎在 CPU 上做深度学习，无论是训练速度还是推断速度，都超过了在 GPU 上运行 TF 的结果。&lt;/p&gt;
&lt;p&gt;根据论文的说法，测试的数据都是工业级的大规模数据。&lt;/p&gt;
&lt;p&gt;下图的测试结果来源于这篇论文。对这篇论文感兴趣的同学，可以点击这里了解更多：&lt;a href="https://arxiv.org/abs/1903.03129"&gt;https://arxiv.org/abs/1903.03129&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="paper1" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-08/paper1.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="paper2" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-08/paper2.png" /&gt;&lt;/p&gt;
&lt;p&gt;当然，对于这个结论，我们还是有很多可以质疑的地方；对于测试的方式，也可以探究是否全面。&lt;/p&gt;
&lt;p&gt;但我觉得这个方向本身还是很值得重视的。&lt;/p&gt;
&lt;p&gt;即使在如今这个智能时代，大家似乎都在强调算法可以做多么“酷”的事情，但是算法本身，还是有一点它最基本，也是最朴实的作用：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;性能优化。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当然了，就算我们将性能问题全部都托付给硬件，&lt;strong&gt;其实，设计这些专门的芯片，还是离不开算法。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-03-08/readme.md" rel="alternate"/></entry><entry><id>2020/2020-03-04/readme.md</id><title>新冠疫情下，我在美国的所见所想</title><updated>2020-03-04T00:00:00-07:00</updated><content>&lt;h2&gt;新冠疫情下，我在美国的所见所想&lt;/h2&gt;
&lt;p&gt;最近中国有很多关于美国的新冠疫情的消息。有很多同学问我在美国怎么样，让我注意防范。&lt;/p&gt;
&lt;p&gt;在这里，先感谢大家对我的关心了。给大家鞠躬：）&lt;/p&gt;
&lt;p&gt;昨天，又有一个同学在我的知识星球问起美国的疫情情况。在这里，我简单写一些这段时间里我的所见所想。&lt;/p&gt;
&lt;p&gt;没什么价值，权当一个记录。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;首先，我要说明，每个人住在美国不同的地区，感受应该非常不同。这点在中国一样的。住在武汉或者湖北；或者住在北上广深这样的人口输入型大城市；或者住在二三四线城镇乡村；或者住在青海西藏；相信感受是绝然不同的。所以，&lt;strong&gt;我的所见所想，一定是片面的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;毕竟，现在美国绝大多数州的数字还是 0；而且很多有确诊的州，数字也只是个位数。我找到《纽约时报》在美国时间 3 月 4 日更新的数据，是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="us" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-04/us.png" /&gt;&lt;/p&gt;
&lt;p&gt;我在加州，现在加州的确诊数量在美国是最多的。但就算只看加州，差距也特别大。比如我住在湾区，相信就比旧金山，洛杉矶一类的大城市好一些。&lt;/p&gt;
&lt;p&gt;美国和中国相反。在美国，大城市反而脏乱差，安全问题严重。而在大城市周边的 country side，反而干净卫生，人口密度低，绿化高，更安全，也更适宜居住。&lt;/p&gt;
&lt;p&gt;所以，以下只是我个人的所见所想而已。&lt;/p&gt;
&lt;p&gt;另外，值得一提的是，这个事情有可能发展特别快。每一天都会有巨大的变化。所以，这篇文章中的见闻是有时效性的。&lt;/p&gt;
&lt;p&gt;我写这篇文章的时间是美国西部时间 2020 年 3 月 4 日下午 3：00 PM。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先说说口罩的问题。&lt;/p&gt;
&lt;p&gt;真心的，我看到的，除了亚裔，近乎没有什么人带口罩。&lt;/p&gt;
&lt;p&gt;据说这是美国人的文化习惯。因为在他们眼里，口罩首先是给病人用的，防止传染别人；其次是给医护人员用的，因为他们会密切接触患者。在西方人眼里，大多数普通人出入普通场合，不需要带口罩。&lt;/p&gt;
&lt;p&gt;这或许也和美国人的生活方式有关。因为确实在大多数地方，人口密度比中国低太多。再加上家家户户出门都开私家车，如果不去人群密集的地方，人和人之间的物理距离特别远。&lt;/p&gt;
&lt;p&gt;所以，如果美国人遇到带口罩的亚裔躲得远远的，或许真的不是歧视（虽然我没遇到，但听说东部有），而是在他们的潜意识里，带口罩就意味着你是病人，就要躲一躲。&lt;/p&gt;
&lt;p&gt;顺便一提，我在美国真心没太感受到什么歧视。反而是在新加坡和香港，感受到过歧视。香港远远大于新加坡。&lt;/p&gt;
&lt;p&gt;有的时候想想也觉得挺有意思：离我的血缘越近的地区，反而越歧视我。这让我不得不反思：或许东西方文化的骨子里，真的有特别特别不一样的东西。&lt;/p&gt;
&lt;p&gt;扯远了，说回口罩。&lt;/p&gt;
&lt;p&gt;美国大多数媒体也是这么宣传的：普通人不要带口罩，没什么用，反而可能会导致口罩资源紧张，使得医护人员没得用。如果医护人员出现大面积感染，导致医疗资源跟不上，那对整个社会来说，风险就太大了。&lt;/p&gt;
&lt;p&gt;不过其实，这个宣传也没啥意义。因为就算你想带，现在也根本买不到。媒体这么宣传，可能也有稳定民心，让大家买不到口罩也不要恐慌的意味吧。&lt;/p&gt;
&lt;p&gt;我个人认为，如果口罩量充足，当然每个人都带是最万无一失的措施。但现实情况是资源紧张，要分一个优先级，所以我觉得毛病不大。&lt;/p&gt;
&lt;p&gt;就算有毛病，真的没用，因为真的买不到口罩。。。&lt;/p&gt;
&lt;p&gt;说到口罩是给医护人员使用的，上两周恰好我和老婆轮流到了要做年度体检的时候，经常跑医院。医院里从医生到护士，没有一个人带口罩。我也不知道他们怎么想的。🤷‍♂️&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;聊聊囤食物。&lt;/p&gt;
&lt;p&gt;我昨天晚上刚跑了一趟家附近的超市。确实，不易变质类的食品，货架上少了不少。但是，数量依然非常充足。&lt;/p&gt;
&lt;p&gt;神奇的是，在这个头号资本主义国家，道理上如果这类商品卖得好，大家疯抢，应该涨价才对。但是我昨天去的超市，方便面还大特价，我一气儿买了一大堆。。。&lt;/p&gt;
&lt;p&gt;我昨天没去华人超市，不是不敢去，是离得远，犯懒。但我周末刚去过华人超市。&lt;/p&gt;
&lt;p&gt;本来是想囤货的，但我和老婆到了以后，发现物资充足，于是我们愉快地只买了一只烧鸭就回家了。。。&lt;/p&gt;
&lt;p&gt;我们最近没去 Costco，因为听说人特别多。我们还是避免去人多的地方的。但因为只是听说，没有亲眼看到，也就没法证实。&lt;/p&gt;
&lt;p&gt;网上流传很多 Costco 排大队的视频，应该是真的。但是不是每一个 Costco 都那样，就不知道了。&lt;/p&gt;
&lt;p&gt;昨天看到一篇文章，我觉得也有一定的道理。这篇文章的大意是，很多人喜欢去 Costco 囤货，是因为那里退货政策更宽松：&lt;/p&gt;
&lt;p&gt;&lt;a href="https://mp.weixin.qq.com/s/7fy-jVw_19QjUSQt5ByxUQ"&gt;请您手下留情，疯狂抢购后，请勿退货！&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我现在暂时的体会是：整体确实大家都在多买一些吃的囤起来，但超市的物资还是充足的，物价也是很稳定的。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;关于囤枪，200% 被一些国内的自媒体夸大了。&lt;/p&gt;
&lt;p&gt;恰好昨天看到这篇“辟谣”的文章，大家也可以看一看：&lt;/p&gt;
&lt;p&gt;&lt;a href="https://mp.weixin.qq.com/s/BtplI3ChGJ7kxEmfiaAfJQ"&gt;新冠疫情爆发后，美国老百姓真的急着囤枪囤子弹吗？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;实际上，即使看那篇疯传的说美国人囤枪的文章，如果抛开煽动情绪的描述，只看事实的话，就会发现数据是这样的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;三天内旧金山教堂区枪店 Fightback 247 的枪支销售增长了45%，弹药销售增长了 130%。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;理性地想一想，其实这个数字一点儿也不可怕，基本上就是一小部分拥枪家庭多买了一把枪和一些子弹备份。&lt;/p&gt;
&lt;p&gt;要知道，昨天我去超市，家里也没有食用油了，就一次性买了两桶，那么我这一个家庭食用油的购买增量，就是 100%；至于方便面的购买增量，就是 500% 了。&lt;/p&gt;
&lt;p&gt;不过对于枪支问题，美国各个州法律规定也不一样。我只知道，加州的枪支管控，是公认全美国最严格的地方。&lt;/p&gt;
&lt;p&gt;但因为我没有考持枪执照，也不懂枪，没有握过枪，更没开过枪，甚至小时候都不爱玩儿玩具枪。所以在这方面，我并没有发言权。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;已经有风声，一些企业开始要推广在家办公了。但还没有全面实行。&lt;/p&gt;
&lt;p&gt;其实在美国，至少 IT 企业，我认为推广在家办公要比中国容易。因为即使没有疫情，大多数人也都经常在家办公，甚至是规律性的每周一天在家办公。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;在美国的很多大型活动也确实取消了。主要是国际活动。毕竟现在也有不少航空管制措施。就算没有管制，世界各地很多人民出行也都慎重了不少。&lt;/p&gt;
&lt;p&gt;今天我看到一个网站，觉得挺有意思，叫“is it canceled yet？”，简明扼要地用 yes / no 展示了：今年比较著名的各种国际活动至今为止是否有被取消。有兴趣的话，大家也可以围观&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.isitcanceledyet.com"&gt;https://www.isitcanceledyet.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;确实，有很多活动取消了，但是看下来，还是有不少活动还没有决定取消。当然，这些活动大多在今年晚些时候，可能随时会产生一些变动。我相信这个网站也会不断更新的。&lt;/p&gt;
&lt;p&gt;对了，奥运会还没有决定取消。之前有人告诉我奥运会确定取消了，是谣言。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;昨天是美国的超级星期二。&lt;/p&gt;
&lt;p&gt;超级星期二（Super Tuesday）是指美国大选年的二月或三月，多个州同时举办总统候选人初选的星期二。在这一天，多个州会同时选出两党的候选人。&lt;/p&gt;
&lt;p&gt;由于超级星期二的结果对最终选情影响巨大，各个候选人都特别注重该日的表现，所以称为“超级星期二”。&lt;/p&gt;
&lt;p&gt;我来给大家看看昨天超级星期二的现场情况。&lt;/p&gt;
&lt;p&gt;&lt;img alt="tuesday" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-04/tuesday.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;咱不分析政治，就看这现场的人山人海，人挤人，人堆人。&lt;/p&gt;
&lt;p&gt;但是，没人带口罩。包括总统候选人。。。&lt;/p&gt;
&lt;p&gt;上面这张图片，站在中间讲台的是桑德斯老爷子。&lt;/p&gt;
&lt;p&gt;我们再来张近景。因为这篇文章主要关注“人山人海”，所以我就不放单独一个人帅气的特写了。&lt;/p&gt;
&lt;p&gt;&lt;img alt="sanders" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-04/sanders.png" /&gt;&lt;/p&gt;
&lt;p&gt;咳咳，后面还有一个人，是在抠鼻子吗？。。。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;Bernie Sanders 今年已经 78 岁了。这么一把年纪了，还这么拼。我要向他学习。。。&lt;/p&gt;
&lt;p&gt;但话说回来，川普也已经 73 岁了。&lt;/p&gt;
&lt;p&gt;其他的咱不懂，但这拼劲儿，他们都是我学习的榜样。。。&lt;/p&gt;
&lt;p&gt;至于他们，包括所有参与集会的选民不怕病毒的精神，咳咳，时间会给出答案的。。。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;整体，我认为：即使美国新冠数量继续上升（一定会的），也很难出现中国那样级别的管控措施。因为大家的理念差别太大了。&lt;/p&gt;
&lt;p&gt;纽约州长说了，80% 的人可以自愈。大家体会一下。&lt;/p&gt;
&lt;p&gt;&lt;img alt="ny" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-04/ny.png" /&gt;&lt;/p&gt;
&lt;p&gt;纽约州长说的这句话的原话是：&lt;strong&gt;80% of people infected with the coronavirus self resolve.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;有意思的是，我用这句英文在 Google 搜索，找不到一个新闻，用这句话当标题。&lt;/p&gt;
&lt;p&gt;&lt;img alt="google" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-04/google.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;但是，我用&lt;strong&gt;“纽约州长说，80% 的人可以自愈”&lt;/strong&gt;的中文进行搜索，中文新闻一大票：&lt;/p&gt;
&lt;p&gt;&lt;img alt="google-cn" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-04/google-cn.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我这里没有批评中国媒体的意思。因为我现在也不知道，纽约州长这个说法，到底对不对？对于整个社会来说，释放的信号，到底是利大于弊？还是弊大于利？&lt;/p&gt;
&lt;p&gt;我只是想指出，不要说政府层面，即使是媒体层面，&lt;strong&gt;两国关注的重点，似乎差距甚远，完全不一样。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;自上而下，我相信民众也是如此。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;至少到现在为止，我看的情况是：大家基本是该干什么干什么，生活完全没有受到影响。&lt;/p&gt;
&lt;p&gt;大家现在来美国，走在大街上，如果心里不知道新冠这个事儿，我相信是察觉不出有什么异样的。&lt;/p&gt;
&lt;p&gt;不过依然是，病毒这事儿发展会特别快，过一周过两周会变成什么样子就不好说了。&lt;/p&gt;
&lt;p&gt;比如如果在昨天超级星期二的现场，出现超级传染者，发生大规模感染的话。。。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;以上只是到如今为止，我在美国加州湾区的所见所想。&lt;/p&gt;
&lt;p&gt;这篇文章，我没有写什么专家认为新冠病毒大爆发是早晚的事儿。其实美国媒体也报道这些，很多美国专家也在这么说。但是写这个的文章太多了，我不赘述了。&lt;/p&gt;
&lt;p&gt;而且，我看到的，整个社会确实没有特别紧张起来。&lt;/p&gt;
&lt;p&gt;因此，再次强调：&lt;strong&gt;本文一定片面主观，不理性不中立。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;祝每个人健康平安。大家加油！&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-03-04/readme.md" rel="alternate"/></entry><entry><id>2020/2020-03-02/readme.md</id><title>如何建立属于自己的知识体系？秘诀在这里</title><updated>2020-03-02T00:00:00-07:00</updated><content>&lt;h2&gt;如何建立属于自己的知识体系？秘诀在这里&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;波波老师你好。我今天在看慕课网的实战课程视频时，发现老师讲解知识内容非常系统，而且深入。我之前也自己学习过相关的内容，但是感觉学的知识点很零散而且不深入，想把相关的知识点整理形成体系却不知从何入手。&lt;/p&gt;
&lt;p&gt;我想知道为什么会产生这样的差异？老师是通过什么样的方式去学习，并整理自己的知识体系，然后再去教授别人的？我如何学习才能做到这一点？&lt;/p&gt;
&lt;p&gt;期待老师的回复。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;bobo 老师的回答：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我的回答可能要让你失望了。简单来说，我觉得并没有什么特别的秘诀。&lt;/p&gt;
&lt;p&gt;如果一定要说“秘诀”的话，下面几点，可能会对你有启发：&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1）学习一个领域，看一本书是不够的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这一点，我在我的文章 &lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2018/2018-04-18/"&gt;《高效学习的秘密》&lt;/a&gt; 中强调过。&lt;/p&gt;
&lt;p&gt;以算法为例，我看过的书，妥妥在 10 本以上。从不知名的国内算法教材，到《算法4》《算法导论》《算法手册》这样的经典；从《编程珠玑》《编程之美》这样的“休闲读物”，到 ACM 训练题大全。&lt;/p&gt;
&lt;p&gt;我一直认为，从不同的角度，去看同样的知识，特别特别重要。这将帮助你更加全面地了解一个知识点。&lt;/p&gt;
&lt;p&gt;我曾经以为，只有学习文科需要这样。但十几年的计算机学习经验告诉我，学习理工科也应该如此。&lt;/p&gt;
&lt;p&gt;只有通过大量的阅读，不断地对比，才能发现不同书对同一个知识点介绍的区别；&lt;/p&gt;
&lt;p&gt;看不同的例子，不同角度的阐述，才能促使自己开始真正思考：每一个知识点的核心到底是什么。&lt;/p&gt;
&lt;p&gt;就比如《算法4》吧，大家都说它是经典，我当然承认他非常非常经典。事实上，《算法4》的作者 Robert Sedgewick 是我的偶像。&lt;/p&gt;
&lt;p&gt;&lt;img alt="robert" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-02/robert.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;但是，我认为《算法4》也是有很多很多缺点的。有机会我会写一篇公众号文章，说说我认为《算法4》的缺点是什么。&lt;/p&gt;
&lt;p&gt;我的这些看法，来自于大量阅读其他算法书籍后，做出的对比，以及自己的总结思考。&lt;/p&gt;
&lt;p&gt;不过，我完全没有黑《算法4》的意思。瑕不掩瑜，《算法4》很经典，甚至绝对是数据结构入门的最佳教材。&lt;/p&gt;
&lt;p&gt;在我上本科的年代（15 年前），大多数学校都是用严蔚敏的《数据结构》做教材，但清华的姚班就是拿《算法4》做教材。&lt;/p&gt;
&lt;p&gt;在这里，我只是举例说明，如果大家觉得我对知识的理解更深入的话，这种深入的理解，可能只是来自大量的接触与学习而已。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2）多总结。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我看书的时候有一个习惯：每看完一个小部分，就尝试用一两句话总结，这一小部分到底在讲什么。&lt;/p&gt;
&lt;p&gt;其实，这就是小学语文题中的归纳段落大意或者概括文章的主要内容。我现在非常感谢在我接受的初等教育中，包含大量这样的语文训练。&lt;/p&gt;
&lt;p&gt;在这个时代，我看到很多同学读书的时候做思维导图。我觉得也可以，其实是一个意思。&lt;/p&gt;
&lt;p&gt;只不过我觉得做思维导图太“炫”了。我也尝试过，但发现需要顾及的东西很多，什么用怎样的图表示，线条用什么颜色，分多少级，怎么布局好看，等等等等。对我来说，这些东西太容易分散注意力了。当然，也可能是因为我不太会做思维导图。&lt;/p&gt;
&lt;p&gt;我比较懒，在心里总结一遍段意，觉得就够了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;值得一提的是，我看书也不爱做笔记，可能也是因为懒，除非是应考复习。不过我已经有近十年不考试了，所以我也已经有近十年看书不做笔记了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我不太害怕忘记，因为我觉得遗忘是很正常的事情。&lt;/strong&gt;有很多同学问我看书看完了就忘怎么办？我的回答就是：&lt;strong&gt;再看一遍。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;忘记了然后再看一遍，再总结一遍，也就加深印象了，下次就不容易忘了。就这么简单。&lt;/p&gt;
&lt;p&gt;这个重复的过程，就是学习。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;重复&lt;/strong&gt;是学习的一大秘诀，所谓&lt;strong&gt;万事无他，唯手熟尔。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;扯远了，说回总结。&lt;/p&gt;
&lt;p&gt;看一本书的话，应该能总结出一本书的“体系”：这本书在按照什么思路介绍这个领域的知识？然后再细化进去，每一个知识点具体是什么。&lt;/p&gt;
&lt;p&gt;所谓的把书从厚读薄。而不能读完一本书，只记住一堆零碎的知识点。&lt;/p&gt;
&lt;p&gt;好的书，作者在写作的时候，会在字里行间流露出自己的写作逻辑：章节为什么要这么安排？每一部分都在处理什么问题？这些问题是如何有机地联系起来的？&lt;/p&gt;
&lt;p&gt;但即便如此，我们在读的过程中，还是会不自觉地深入到细节里，很容易只见树木不见森林。这是正常的。&lt;/p&gt;
&lt;p&gt;所以，每隔一段阅读学习时间，应该有意识地把自己从细节中抽离出来，站在更高的地方，再看一下全局：我学习到了哪里？这里在整个领域中是什么位置？&lt;/p&gt;
&lt;p&gt;当然，我并不认为读什么书都要这样做，那样太累了。我一般只有读教材的时候会强迫自己这么做。&lt;/p&gt;
&lt;p&gt;可是我发现，我现在读书养成了这样的习惯。有的时候读小说，读完一章，会不自觉地想：这一章都发展了什么情节？不同的人物有了怎样的变化？作者有可能在布怎样一盘“棋”？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3） 尝试给别人讲。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我上学的时候，特喜欢给别人讲题。我发现，给别人讲，提高得特别快。&lt;/p&gt;
&lt;p&gt;这一点，相信很多人都懂，所谓的 &lt;strong&gt;learning by teaching&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;所以，大家可以尝试把自己学习的目标定成：能给别人讲出来。&lt;/p&gt;
&lt;p&gt;通常，一旦要这么做，就会发现：会开始不自觉地思考“知识体系”这样的问题了。&lt;/p&gt;
&lt;p&gt;不过，这个目标其实是挺高的一个目标。以算法为例，理解一个算法，能写出一个算法，和把一个算法讲明白，区别还挺大的。&lt;/p&gt;
&lt;p&gt;但是，大家不妨平时有机会做一下这样的练习。毕竟，&lt;strong&gt;在职场上，表达能力也是非常重要的一项技能。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我在 &lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-02-18/"&gt;从技术，到管理&lt;/a&gt; 一文中曾经说过：很多时候，大家在职场往上走的过程中，拼的就是表达能力。&lt;/p&gt;
&lt;p&gt;这不是说要让大家油嘴滑舌，只说不做。而是简洁清晰有效的表达，才能让你的领导，你的下属，你的合作伙伴，更理解你的思考，你的愿景，你的苦衷，才能让合作更加有效。&lt;/p&gt;
&lt;p&gt;毕竟，人类社会能发展到今天，我们站在地球食物链的绝对顶端，一个最重要的原因，就是我们可以进行极大规模的合作。而这种规模的合作之所以能够产生，就是因为人类发展出了丰富得吓人的语言系统。&lt;/p&gt;
&lt;p&gt;其实，我现在写公众号文章，很大一部分原因，也是想锻炼自己的表达能力。&lt;/p&gt;
&lt;p&gt;一个问题，自己明明觉得想明白了，却不能恰如其分地表达出来，实在是一件让人很捉急的事情。&lt;/p&gt;
&lt;p&gt;我也会遇到这样的情况，我也很捉急，所以我也会经常思考：这件事儿到底要怎么表达才好？&lt;/p&gt;
&lt;p&gt;我还在练习，还在探索。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;上面我说了三点，简单总结就是：1）多看；2）多总结；3）多表达。&lt;/p&gt;
&lt;p&gt;我认为这三点是有先后顺序的：&lt;/p&gt;
&lt;p&gt;1 &amp;gt; 2 &amp;gt; 3。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;大量的阅读，大量的学习，最重要。即使你看书并不擅长总结，但是在大量接触的情况下，不自觉也能慢慢形成自己的体系。&lt;/p&gt;
&lt;p&gt;所谓熟能生巧。&lt;/p&gt;
&lt;p&gt;反之，如果只按着一本书看，再怎么精心总结，最后也不过是那一本书的体系而已，这是有局限性的。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;至于给别人讲，看似是很好的方法，但这是建立在大量学习，深入总结的基础上的。&lt;/p&gt;
&lt;p&gt;我们完全可以只是在网上随便查一查，就去给别人讲。实话实话，这也是锻炼表达能力的。但恐怕这样做，对知识的掌握不可能深入，更不用说形成属于自己的知识体系了。&lt;/p&gt;
&lt;p&gt;这样做，复述一遍可能还行，但要是听者随便问几个问题，马上就会觉得力不从心，露出马脚。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;这让我想起一个笑话。&lt;/p&gt;
&lt;p&gt;这个笑话是查理芒格在 2007 年 USC 法学院的毕业典礼上讲的。&lt;/p&gt;
&lt;p&gt;普朗克在获得诺贝尔物理奖之后，经常受邀去各个学府演讲。他的司机每次都跟着他，反复听同样的内容。&lt;/p&gt;
&lt;p&gt;一次，他的司机说：“普朗克教授，我们老这样也挺无聊的。不如这样吧，到慕尼黑，让我来讲，你戴着我的司机帽子坐在前排，怎么样？”&lt;/p&gt;
&lt;p&gt;普朗克同意了。&lt;/p&gt;
&lt;p&gt;于是，在慕尼黑，司机走上了讲台，滔滔不绝地对量子物理进行了一番演讲。和普朗克讲得一样精彩。&lt;/p&gt;
&lt;p&gt;演讲结束以后，一位教授提了一个非常专业的问题。&lt;/p&gt;
&lt;p&gt;站在台上的司机说：“哇，我真没想到，我会在慕尼黑这么先进的城市遇到这么简单的问题。我想请我的司机来回答。”&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;讲完这个笑话以后，查理·芒格说：&lt;strong&gt;知识有两种，一种是真正的知识；另一种是知识的表演。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;许多人，其实并没有掌握真正的知识，而是像普朗克的司机一样，只是学会了表演。&lt;/p&gt;
&lt;p&gt;这种表演，对当事人，并没有任何帮助。&lt;/p&gt;
&lt;p&gt;如果一味地盲目追求“给别人讲”，可能很容易陷入到这种“知识的表演”中。&lt;/p&gt;
&lt;p&gt;所以，纵使现在很多人都提倡把学到的知识讲出来，我还是将它的优先级放在大量学习和深入总结之后。&lt;/p&gt;
&lt;p&gt;在我看来，学习和总结，是讲出来的重要前提。甚至，对于很多表达能力比较强的人来说，&lt;strong&gt;能讲出来，只不过是学习和总结的自然而然的结果而已。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;最后，随便聊一聊查理芒格。&lt;/p&gt;
&lt;p&gt;查理芒格是巴菲特的重要合伙人，今年已经 96 岁高寿了。&lt;/p&gt;
&lt;p&gt;&lt;img alt="charlie" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-02/charlie.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;巴菲特回顾自己投资成就时说：“我之所以能有现在的成就，是因为遇见了查理芒格。”&lt;/p&gt;
&lt;p&gt;查理芒格的经历比较简单。他出生在美国内布拉斯加州的奥马哈，小时候给巴菲特的祖父老巴菲特的杂货店打过工。&lt;/p&gt;
&lt;p&gt;他在哈佛法学院荣誉毕业，做了几年律师，然后不干了，搞起了投资。命运让他和巴菲特走在了一起，成为了一名超级投资者。&lt;/p&gt;
&lt;p&gt;查理芒格的偶像是美国开国元勋本杰明.富兰克林。对，印在面值 100 元美钞上的那位。&lt;/p&gt;
&lt;p&gt;&lt;img alt="dollar" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-02/dollar.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;富兰克林有一个笔名，叫穷理查（Poor Richard）。注意，是理查，不是查理；是 Richard，不是 Charlie。&lt;/p&gt;
&lt;p&gt;在 1732 年到 1758 年期间，富兰克林使用这个笔名，创建了一份类似杂志的读物，叫《穷理查年鉴》（Poor Richard's Almanack）。&lt;/p&gt;
&lt;p&gt;&lt;img alt="almanack" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-02/almanack.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;富兰克林没受过什么良好的教育。但是《穷理查年鉴》的文章，全部是他自己写的。&lt;/p&gt;
&lt;p&gt;他的写作水平不太好，至少他自己觉得不好。所以，他就把他欣赏的文章找来，模仿其写法，反复练习。&lt;/p&gt;
&lt;p&gt;富兰克林不走捷径，用的是笨办法，但是十几年后回头看，却是大智慧。&lt;strong&gt;所谓伟人，大多如此。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;芒格如法炮制，把自己的人生经验和投资心得也放到了一本书里，叫《穷查理宝典》。&lt;/p&gt;
&lt;p&gt;其实，这本书的英文名是 Poor Charlie’s Almanack。大家可以看到，这本书的名字其实就是富兰克林的 Poor Richard's Almanack 这个名字，将中间的 Richard 替换成了 Charlie。&lt;/p&gt;
&lt;p&gt;芒格在用这种方法，向自己的偶像致敬。&lt;/p&gt;
&lt;p&gt;因为这只是一本书，而不是一份持续很长时间的“杂志”，所以在中文翻译上，最后变成了“宝典”，而非“年鉴”。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;芒格在自己的母校加州理工大学和哈佛大学，受邀作过很多次演讲，主题都是人类误判心理学。&lt;/p&gt;
&lt;p&gt;芒格认为：我们所处的这个世界，就是被各种误判打造而来的。无论你想要避免落入同样的误判陷阱；还是想要避免受别人误判之害；甚至是想利用误判获益，都需要了解人类误判的心理学机制。&lt;/p&gt;
&lt;p&gt;芒格翻了几本心理学教材，觉得没用，于是结合自己的演讲内容，使用富兰克林的方式，打造了这本《穷查理宝典》。&lt;/p&gt;
&lt;p&gt;&lt;img alt="book1" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-02/book1.png" /&gt;&lt;/p&gt;
&lt;p&gt;这本《穷查理宝典》，不仅仅是投资界人士必读的书籍之一，在我看来，普通人读一读，也会收获甚大。&lt;/p&gt;
&lt;p&gt;这本书有中文版，由中信出版集团出版。&lt;/p&gt;
&lt;p&gt;&lt;img alt="book2" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-02/book2.png" /&gt;&lt;/p&gt;
&lt;p&gt;我不知道会不会有同学想买精装本收藏。这本书国内还出了一版超贵的精装本。&lt;/p&gt;
&lt;p&gt;说实话，对于大多数投资类书籍，只要不是讲具体技术的，我们非专业人员都可以读一读。&lt;/p&gt;
&lt;p&gt;因为抛开具体投资技术以后，投资讲究的，就是如何看待这个形形色色的世界。&lt;/p&gt;
&lt;p&gt;又扯远了。希望对大家有启发：）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-03-02/readme.md" rel="alternate"/></entry><entry><id>2020/2020-03-01/readme.md</id><title>为了抗击疫情，Coursera 推出了一个活动</title><updated>2020-03-01T00:00:00-07:00</updated><content>&lt;h2&gt;为了抗击疫情，Coursera 推出了一个活动&lt;/h2&gt;
&lt;p&gt;为了抗击新冠疫情，Coursera 推出了一个活动。更准确地说，不是 Coursera 的活动，而是密歇根大学的活动，只针对中国用户有效。&lt;/p&gt;
&lt;p&gt;&lt;img alt="michigan" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-01/michigan.png" /&gt;&lt;/p&gt;
&lt;p&gt;这个活动就是，密歇根大学挑选了他们在 Coursera 上的最受欢迎的 3 个 系列课程。中国用户可以以 1 美元 / 每月的价格，参与这三个系列课程的学习。在学习结束以后，可以拿到 Coursera 的相应证书。&lt;/p&gt;
&lt;p&gt;注意，这三个特价的内容，都是系列课程（Specialization），而不仅仅是一个单独的课程。每一个系列中，包含若干单独的课程，每一个课程中，又包含数周的内容。&lt;/p&gt;
&lt;p&gt;虽然如此，但其实，我个人认为，Coursera 现在很多课程的密度其实是很低的。稍微刻苦一点，一个课程虽说有几周的内容，但其实一周就能搞定。&lt;/p&gt;
&lt;p&gt;至于 Coursera 的证书，我的体会是，&lt;strong&gt;从能力证明的角度，用处不大&lt;/strong&gt;，各个企业还是会以面试的形式考察大家的能力。但是条件允许，能够拿到的话，放到 Linkedin 上，至少说明你是一个爱学习的孩纸。&lt;/p&gt;
&lt;p&gt;当然，鉴于现在 Coursera 上很多课程很“水”，大家的专业背景又不一样，所以到底学习什么样的课程，拿什么证书，是在给大家的简历添金，就需要每个人根据自己的实际情况判断了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;这次活动，一美元每月的三个系列课程分别是：&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h3&gt;1 零基础 Python 入门&lt;/h3&gt;
&lt;p&gt;&lt;img alt="course1" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-01/course1.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="11" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-01/11.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="12" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-01/12.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="13" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-01/13.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="14" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-01/14.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="15" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-01/15.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h3&gt;2 Python 3 编程&lt;/h3&gt;
&lt;p&gt;&lt;img alt="course2" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-01/course2.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="21" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-01/21.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="22" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-01/22.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="23" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-01/23.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="24" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-01/24.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="25" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-01/25.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h3&gt;3 基于 Python 的应用数据科学&lt;/h3&gt;
&lt;p&gt;&lt;img alt="course3" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-01/course3.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="31" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-01/31.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="32" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-01/32.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="33" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-01/33.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="34" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-01/34.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="35" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-01/35.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;具体要怎么样使用 1 美元 / 每月的价格注册这些课程呢？&lt;strong&gt;直接上 coursera 是不行的。&lt;/strong&gt;大家需要首先进密歇根大学的这个页面。传送门：&lt;/p&gt;
&lt;p&gt;&lt;a href="https://online.umich.edu/subject/data-science/"&gt;https://online.umich.edu/subject/data-science/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在这个页面中，大家可以看到一个 Series 的栏目，其中排名前三的三个系列课程，就是上面介绍的三个系列课程:&lt;/p&gt;
&lt;p&gt;&lt;img alt="series" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-01/series.png" /&gt;&lt;/p&gt;
&lt;p&gt;随便点击一个系列课程以后，以 Python for Everybody 为例，会出现如下界面:&lt;/p&gt;
&lt;p&gt;&lt;img alt="series2" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-01/series2.png" /&gt;&lt;/p&gt;
&lt;p&gt;此时，点击 Non U-M Access，就会引导你来到 Coursera 相应的课程中：&lt;/p&gt;
&lt;p&gt;&lt;img alt="series3" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-01/series3.png" /&gt;&lt;/p&gt;
&lt;p&gt;这样进入 Coursera，大家再点击免费注册，如果大家要付费的话，就是 1 美元每个月啦!&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我因为在美国，所以还是 49 美元一个月：&lt;/p&gt;
&lt;p&gt;&lt;img alt="series4" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-01/series4.png" /&gt;&lt;/p&gt;
&lt;p&gt;我找了一名国内的同学试验了一下，就是 1 美元一个月啦。实际上，在汇率换算上，Cousera 现在使用的貌似还是 1 美元 = 6 人民币。所以其实比一美元还便宜：）&lt;/p&gt;
&lt;p&gt;&lt;img alt="series" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-01/series5.png" /&gt;&lt;/p&gt;
&lt;p&gt;感兴趣的同学不要错过哦。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;对了，就在上周，Coursera 上还开设了一个课程，叫 &lt;strong&gt;Science Matters: Let's Talk About COVID-19。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;听名字大家也知道了，这个课程专门讲新冠病毒：COVID-19。&lt;/p&gt;
&lt;p&gt;&lt;img alt="virus" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-03-01/virus.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;整个课程是完全免费的，将带领大家从科学的角度认识新冠病毒，融合了传染病学，病毒学等方面的知识，包括分析了新冠病毒对世界经济的影响，现在疫苗开发情况等等问题。&lt;/p&gt;
&lt;p&gt;这个课程刚开设一周，就吸引了全球 5000 多人的学习，大家暂时的评价是满分：5 分。&lt;/p&gt;
&lt;p&gt;整个课程包含八周的内容。&lt;/p&gt;
&lt;p&gt;如果厌烦了看每天网络上的各种不着边际制造恐慌的新闻，想踏踏实实从更加科学理性严谨的角度了解新冠病毒，可以试试这门课程。&lt;/p&gt;
&lt;p&gt;完全免费，而且也能拿证书：）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-03-01/readme.md" rel="alternate"/></entry><entry><id>2020/2020-02-29/readme.md</id><title>为了抗击疫情，Coursera 推出了一个活动</title><updated>2020-02-29T00:00:00-07:00</updated><content>&lt;h2&gt;为了抗击疫情，Coursera 推出了一个活动&lt;/h2&gt;
&lt;p&gt;这篇文章转载的是美国的国家公共电台（National Public Radio，简称 NPR）在昨天发布的一个漫画。&lt;/p&gt;
&lt;p&gt;这个漫画是给小朋友们看的科普新冠病毒知识的漫画。其实，大人们看起来也是很有意思的：）&lt;/p&gt;
&lt;p&gt;现在，新冠病毒在美国愈演愈烈，看来，美国全民都要动员起来，科普起来了。&lt;/p&gt;
&lt;p&gt;漫画中也反映了一些美国的真实情况，比如检测试剂盒严重缺乏。至于态度倾向，那每个人读出来的滋味就不一样了。&lt;/p&gt;
&lt;p&gt;漫画的文字是英文的，大人也可以周末闲得没事儿读一读，权当锻炼英语了：）&lt;/p&gt;
&lt;p&gt;好啦，各位大盆友小盆友，带你了解新冠病毒的旅程，开始啦！&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;img alt="1" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-02-29/1.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-02-29/2.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-02-29/3.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="4" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-02-29/4.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="5" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-02-29/5.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="6" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-02-29/6.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;P.S. &lt;/p&gt;
&lt;p&gt;今天是美国的 2 月 29 日，忍不住露个脸。毕竟，下一次这个日子再见，就是四年后啦！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-02-29/readme.md" rel="alternate"/></entry><entry><id>2020/2020-02-24/readme.md</id><title>学编程，学化学 和 学开车</title><updated>2020-02-24T00:00:00-07:00</updated><content>&lt;h2&gt;学编程，学化学 和 学开车&lt;/h2&gt;
&lt;p&gt;这是在我的知识星球上，一个同学问我的问题。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;波波老师您好，我是学习编程不久的非科班学生。在写代码的这些日子里，我感到非常困惑😕：书写的代码逻辑，怎么就能被计算机给执行了？从点击执行的一刹那，计算机的内部又发生怎样的不为人知的故事？ &lt;/p&gt;
&lt;p&gt;我似乎可以编写一些逻辑，让计算机帮我做一些事情，但是它怎么帮我做的，这一点好像完全对我屏蔽了。书上说一行行代码，不过是一行行的字符串。但这些字符串是怎么深入到计算机的内部，控制了处理器的执行呢？‍&lt;/p&gt;
&lt;p&gt;我知道这个问题跨度很大，不知道想要把“计算机从通上电的那一刻开始，整个系统是如何运行的”搞清楚，需要学习哪些知识，从哪里开始学习？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;bobo 老师的回答：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;是的。我们书写的程序只不过是字符串而已。这些字符串是怎么被计算机执行的？这是&lt;strong&gt;编译原理&lt;/strong&gt;领域处理的问题。&lt;/p&gt;
&lt;p&gt;编译器通常只是将我们书写的高级程序转换成汇编语言，计算机需要通过汇编器，再转换成计算机真正可以理解的零和一。&lt;/p&gt;
&lt;p&gt;当然，不同语言的这个中间过程可能并不一样，但不管怎样，汇编语言是一种公认的介于高级语言和机器识别的零和一（机器语言）之间的桥梁，所以掌握&lt;strong&gt;汇编语言&lt;/strong&gt;，会对你理解高级语言的运行机制，包括计算机的底层原理，有更深刻的认识。&lt;/p&gt;
&lt;p&gt;尽管如此，在执行汇编程序的过程中，仍有很多内容计算机对我们屏蔽了。比如分配内存，计算机到底是怎么分配内存的？这些内容，是&lt;strong&gt;操作系统&lt;/strong&gt;这个领域处理的问题。&lt;/p&gt;
&lt;p&gt;实际上，从汇编语言转换到零和一，需要操作系统的介入。也正是这个原因，才存在系统相关这个概念。&lt;/p&gt;
&lt;p&gt;那计算机到底是怎么解析这些零和一的？为什么一堆零和一对计算机来说是有意义的？这背后要学习的内容，叫&lt;strong&gt;计算机体系结构&lt;/strong&gt;。计算机体系结构会告诉你计算机执行这些零和一的完整过程。&lt;/p&gt;
&lt;p&gt;但是，在计算机体系结构的世界里，CPU 就是CPU。可现实世界是复杂的，CPU 有不同的架构，x86？arm？i586？虽然大多数程序员不太会学习不同架构的具体指令集区别，但是，为什么会有这些架构上的区别？指令集到底是怎么回事？这部分知识通常会在一个叫做&lt;strong&gt;微机原理&lt;/strong&gt;的课程中学习。&lt;/p&gt;
&lt;p&gt;学习微机原理，就已经接触到芯片的底层逻辑了。可是芯片到底是怎么设计的？怎么优化的？这部分学习，涵盖在一门称为&lt;strong&gt;数字逻辑&lt;/strong&gt;的课程中。值得一提的是，我个人特别喜欢数字逻辑：）&lt;/p&gt;
&lt;p&gt;在我上学的年代，学习完上面的全部内容，就可以使用仿真软件，自己设计一个 CPU 了。当然，我们自己设计的 CPU 很简陋，指令集很少，但做完这件事情，就能完全理解计算机到底是如何根据一堆零一，就能完成各种复杂的工作的了。&lt;/p&gt;
&lt;p&gt;这个课程设计被我评为我本科阶段做过的最有意义的课程设计，没有之一。&lt;/p&gt;
&lt;p&gt;但是，在仿真软件上做 CPU 模拟，其实还是停留在“逻辑”层面。零和一的解析过程到底在芯片底层，是怎么被元器件们实现出来的？这是&lt;strong&gt;模拟电路&lt;/strong&gt;这门课程要处理的问题。&lt;/p&gt;
&lt;p&gt;那么这些元器件的底层，又是怎样的过程？这就已经追溯到物理学了。虽然在我上学的时候，&lt;strong&gt;大学物理&lt;/strong&gt;也是计算机专业的必修课，但我学习完大物以后，也没搞懂这些元器件底层的物理原理。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;我上面讲的这些领域：编译原理，汇编，操作系统，体系结构，微机原理，数字逻辑，模拟电路，物理，至少在我上学的年代，都是科班的必修课。&lt;/p&gt;
&lt;p&gt;但是在这里，我想特别强调一下，作为转专业的同学，&lt;strong&gt;不适合一上来就接触这么底层的知识&lt;/strong&gt;。还是应该先认真掌握一门编程语言。&lt;/p&gt;
&lt;p&gt;在学习编程语言的过程中，不仅仅是在学习语法知识，更是在学习基本的逻辑搭建方式；以及不同的编程范式，如面向过程编程，面向对象编程，函数式编程，等等等等。&lt;/p&gt;
&lt;p&gt;在这个基础上，应该学习基本的算法和数据结构。同时，如果你有很明确的就业方向，应该学习相应的业务框架。比如前端，比如移动开发。&lt;/p&gt;
&lt;p&gt;这些底层的知识，应该放到最后学习。其实，即使是计算机专业科班的培养计划，也是这么设计的，除了可能不会学习某个特定的业务框架之外。&lt;/p&gt;
&lt;p&gt;我非常理解很多同学想把底层原理了解得一清二楚的心理，但是有些时候，这些心理会阻止我们前进。&lt;/p&gt;
&lt;p&gt;所谓&lt;strong&gt;完美主义害死人&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;我在我的文章&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2018/2018-04-18/"&gt;《如果高效学习有什么秘诀的话，那就都在这里了》&lt;/a&gt;，多次强调这一点。&lt;/p&gt;
&lt;p&gt;在这里，我再随便举两个小例子。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;第一个例子是&lt;strong&gt;学习化学的过程&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;大多数同学应该都是在初三接触的化学这门学科。我在最初学习化学的时候，觉得非常不适应。&lt;/p&gt;
&lt;p&gt;为什么？我相信数学比较好的同学都有同感。因为我们学习数学的过程，是从一个一个底层的基本定理一点一点搭建起整个数学体系的，所以逻辑秩序井井有条。尤其是初中学习平面几何的过程，近乎是欧几里得的《几何原本》的另一种呈现，优美至极。&lt;/p&gt;
&lt;p&gt;但是学习化学却不同。我们初中学习化学，学一章氧气，学一章碳，又学习一章二氧化碳。看起来东一榔头西一棒头，毫无体系逻辑可言。&lt;/p&gt;
&lt;p&gt;但到了高中，我们就会看到，化学这门学科也是有体系的。&lt;/p&gt;
&lt;p&gt;这个体系是什么？就是元素周期表。所有的元素整整齐齐地码放在元素周期表这个“化学体系结构”中，每一列元素有着相似的化学性质，每一行元素有着相似的变化关系，井井有条，一清二楚。&lt;/p&gt;
&lt;p&gt;但是，元素周期表如此有体系，如此清晰，为什么在初中学习化学的时候，不让初中生直接接触？&lt;/p&gt;
&lt;p&gt;答案是：&lt;strong&gt;有体系的底层知识，不意味着简单。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;实际上，&lt;strong&gt;从个体到总体，从特殊到一般，从现象到本质&lt;/strong&gt;，从一个一个的实例提炼出背后的规律，恰恰是一种非常重要的，通用的，被应用在很多领域的一般学习方法。&lt;/p&gt;
&lt;p&gt;计算机的世界也是如此。&lt;/p&gt;
&lt;p&gt;我们学习高级语言的过程中，会学习与和或的逻辑，这些逻辑恰恰是计算机底层各个元器件的逻辑运算基础；&lt;/p&gt;
&lt;p&gt;我们会学习优先队列或者哈希表这样的数据结构，这些数据结构被大量应用在底层操作系统中；&lt;/p&gt;
&lt;p&gt;我们会学习值和引用的区别，这在我看来是理解计算机底层内存存储的关键一步......&lt;/p&gt;
&lt;p&gt;我们接触的所有表象，都是为深入理解底层打基础。&lt;/p&gt;
&lt;p&gt;很多时候，要想学懂理解底层知识，捷径并非是一头扎入底层的深渊，而是接触更多“表层的知识”，让这些“表层的知识”，带我们一步一步走进底层的世界。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;第二个例子是我&lt;strong&gt;学习开车的过程&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;在学开车的过程中，我学的是手动挡，死活不能理解离合器这个东西。&lt;/p&gt;
&lt;p&gt;于是我就问我的教练，离合器到底是个什么玩意儿？&lt;/p&gt;
&lt;p&gt;我到现在都不确定我那个教练到底懂不懂离合器是个什么玩意儿。反正他跟我解释了一大堆，我天生愚钝，没有懂。&lt;/p&gt;
&lt;p&gt;我本来以为，如果我不懂离合器的原理，就无法学会开车。但后来，我惊讶地发现，虽然我对离合器的原理一无所知，我也能开车。&lt;/p&gt;
&lt;p&gt;因为学会开车，不意味着要了解汽车内部每一个零件的工作原理。&lt;/p&gt;
&lt;p&gt;这是一个非常简单的常识，如果你留心去看，就会发现这个现象出现在我们生活中的每一个角落。&lt;/p&gt;
&lt;p&gt;为此，我写了一篇文章，叫&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-03-18/"&gt;《学算法有什么用？没用》&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;当然，大家不要按照标题去理解这篇文章的中心思想。这篇文章的中心思想是：精通算法不一定是软件开发者的必须，可是，每一个人必须找到自己的核心竞争力。&lt;/p&gt;
&lt;p&gt;不管怎么样，在这里，我想强调的是：&lt;strong&gt;初学计算机，不应该接触这么底层的，晦涩难懂的问题。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;其实不仅仅是计算机，在我看来来，学习所有的科目都是如此。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;最后，我想随便聊一聊，这些底层知识，到底有没有用？&lt;/p&gt;
&lt;p&gt;这个问题，我觉得在我的文章&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-03-18/"&gt;《学算法有什么用？没用》&lt;/a&gt;中，已经说得很清楚了：如果你未来的职业路径是向更深层次的技术进军，或者要去解决一些计算机底层的技术问题，势必有用。&lt;/p&gt;
&lt;p&gt;即使不是如此，我的体会也是：学好这些内容，再看高层的软件开发的内容，简直是小菜一碟。&lt;/p&gt;
&lt;p&gt;而且，这些知识近乎永不过时。&lt;/p&gt;
&lt;p&gt;这类底层原理的课程，是科班专业的灵魂，是科班学生和非科班学生之间最本质的差别。&lt;/p&gt;
&lt;p&gt;当然，如果你未来的发展方向不是更深入的技术方向，不学他们无妨。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;很多同学看计算机本科的课程设置，发现学习完以后，既做不出网页，又做不出 App，也做不出游戏，就自以为是地开始“批判教育”。殊不知，他们想要学习的东西，其实去个大专，甚至是培训班，就能轻松学到。&lt;/p&gt;
&lt;p&gt;对了，我在本科修过一门课程，叫《Flash 设计与开发》。那门课程是我当时学的最 high 的一个课程，做了一段我自认为非常完整的 mv 动画。&lt;/p&gt;
&lt;p&gt;但现在回头看，那是我本科学过的最没用的课程，没有之一。&lt;/p&gt;
&lt;p&gt;当然了，每一个个体都是不同的，具体到每一个人身上，这些底层知识到底有没有用，有多大用？每个人应该有属于自己的答案。&lt;/p&gt;
&lt;p&gt;在这篇文章最开始，我说了那么多的学科：编译原理，汇编，操作系统，体系结构，微机原理，数字逻辑，模拟电路，物理。&lt;/p&gt;
&lt;p&gt;从我的角度看，我认为数字逻辑之前的所有学科，都对软件工程师非常有帮助；而模拟电路和物理，没有什么用。&lt;/p&gt;
&lt;p&gt;但有的同学可能会觉得操作系统以后的知识都没什么用。&lt;/p&gt;
&lt;p&gt;有的同学可能会觉得，模拟电路和大学物理也非常有用。&lt;/p&gt;
&lt;p&gt;有的同学可能会觉得，所有这些底层知识都没什么用。&lt;/p&gt;
&lt;p&gt;我觉得这些都是正确答案。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这个世界的魅力就在于：每个人都有着属于自己的不同的观点和看法。&lt;/strong&gt;正是这些不同，催生出了不同的人和事，不同的你和我，不同的成就和结果，我们才有了这个如此丰富多彩的世界。&lt;/p&gt;
&lt;p&gt;关键是，每个人都应该努力找到自己在这个世界上的位置，去追求真正的自己。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-02-24/readme.md" rel="alternate"/></entry></feed>