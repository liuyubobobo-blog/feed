<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh-CN"><id>https://github.com/liuyubobobo/my-blog</id><title>是不是很酷</title><updated>2019-09-24T22:49:06-07:00</updated><author><name>liuyubobobo</name><email>liuyubobobo@gmail.com</email></author><link href="https://github.com/liuyubobobo/my-blog" rel="alternate"/><generator uri="https://github.com/StdioA/bobobo-feed" version="0.0.1">bobobo-feed</generator><icon>https://www.gravatar.com/avatar/c4c67099540a54bd845d8e404fe8cc41</icon><subtitle>坚持有质量的技术原创，用技术人的视角看世界</subtitle><entry><id>2019/2019-09-17/readme.md</id><title>周杰伦与绝对音感</title><updated>2019-09-17T00:00:00-07:00</updated><content>&lt;h2&gt;周杰伦与绝对音感&lt;/h2&gt;
&lt;p&gt;周杰伦 2019 年全新单曲《说好不哭》，刷屏了。&lt;/p&gt;
&lt;p&gt;这首歌，在 QQ 音乐上，只用了两个小时，销量就超过了 1000 万人民币，还一度搞崩了腾讯的服务器。其影响力可见一斑。&lt;/p&gt;
&lt;p&gt;说实话，这首新歌，在我听来，属于周杰伦很平均水平的一首歌，如果放在以往的专辑里，甚至排名可能要偏后。但周杰伦的名气在那里，随随便便一首很“一般”的歌，就能产生这么大的影响力。&lt;/p&gt;
&lt;p&gt;杰迷勿喷，我只是有一说一，说一下自己的实际听感。实际上，我也是杰迷。高考结束那一年，《叶惠美》发布，整个寒假，我都是在《以父之名》的音乐中度过的。不信，我们可以到 KTV 飚这首歌去。&lt;/p&gt;
&lt;p&gt;80 后 90 后，谁的青春里没有周杰伦呢？&lt;/p&gt;
&lt;p&gt;&lt;img alt="yehuimei" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-17/yehuimei.jpg" /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;这次，周杰伦的新歌发布，让很多人惊喜的是，这首歌的词是方文山填的。周杰伦方文山再次合作。&lt;/p&gt;
&lt;p&gt;如果你查一下方文山的履历，就会知道，他是台湾桃园市成功高级工商职业学校电子科毕业的。这其实就是一个职业院校。毕业后的方文山，曾一度在桃源市当电子器材装配员。&lt;/p&gt;
&lt;p&gt;他喜欢创作，但家里毫无背景。电影，音乐，他都做不了。最终，他选择了门槛最低的创作形式——写歌词。&lt;/p&gt;
&lt;p&gt;方文山的伯乐也是吴宗宪。对于当时，自己毫无背景，吴宗宪怎么会看中他？方文山曾在一个访谈中直言：应该是看中了自己的“量”。&lt;/p&gt;
&lt;p&gt;&lt;img alt="fangwenshan" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-17/fangwenshan.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="fangwenshan2" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-17/fangwenshan2.png" /&gt;&lt;/p&gt;
&lt;p&gt;什么量呢？他写了一百多首词。&lt;/p&gt;
&lt;p&gt;不仅写了一百多首词，他还别出心裁，将这一百首词装订成册，制作了清晰的索引，比如关键字是“悲伤”的词都在哪里；关键字是“离别”的词都在哪里...... 方便别人翻阅。&lt;/p&gt;
&lt;p&gt;这样的一个小册子，他一共复印了 100 份。&lt;/p&gt;
&lt;p&gt;然后，他找到当时流行的 CD 唱片，看背面的制作人名单，每一个制作人都寄去。滚石，飞碟，宝丽金，索尼，燕麦...... 这些唱片公司的制作人，无论大小，都是方文山的目标。&lt;/p&gt;
&lt;p&gt;方文山当时是这么计算的：这 100 份小样，寄到唱片公司的前台，可能前台会被当做粉丝信处理，所以，只有 50 份会真正地转给制作人的经纪或者助理；&lt;/p&gt;
&lt;p&gt;制作人的经纪或者助理，可能并不会把这份小样真正交给制作人，所以，可能只有 25 份会真正落到制作人手里；&lt;/p&gt;
&lt;p&gt;制作人收到小样不一定看，所以，可能只有 12 个制作人，真的打开了这个小样，看了看；&lt;/p&gt;
&lt;p&gt;看了的制作人，不一定觉得好，所以，可能也就有 5，6 个制作人觉得好，能给他一个机会，当面聊一聊。&lt;/p&gt;
&lt;p&gt;方文山计算自己能收到 5，6 封回信，最终，他只收到了 1 封回信。就是吴宗宪的回信。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;说到周杰伦，大家可能马上想到被吴宗宪逼着 10 天写 50 首歌的事情。这个故事太俗了，不说了。&lt;/p&gt;
&lt;p&gt;我马上想到的另一个事情，是周杰伦具有绝对音感。&lt;/p&gt;
&lt;p&gt;对于绝对音感，我一直很好奇。因为，在我看来，这就像你拥有一个超能力一样。&lt;/p&gt;
&lt;p&gt;当然，现在，我知道了，经过后天训练，是可以培养出绝对音感的。绝对音感的培养，最佳时期是在 3 岁到 9 岁之间。尤其是学习钢琴的孩子，用专业的方法训练，有不小的概率能够培养出绝对音感。所以，我认为，周杰伦的绝对音感，大概率是后天培养出来的。&lt;/p&gt;
&lt;p&gt;但是，仍然有很小比例的人，是先天就具有绝对音感的。这个比例是多少呢？大概是 0.01% 左右，即万分之一。&lt;/p&gt;
&lt;p&gt;看起来很低，但从全球人口的角度，这并不是一个很低的数字。全球现如今有 75 亿人口，就算是万分之一，也有 75 万的人，天生就具有绝对音感。&lt;/p&gt;
&lt;p&gt;我有的时候总在想：这 75 万人，是不是都在做音乐相关的工作呢？大概率的不是。虽然，如果他们做音乐，有着天然的优势。&lt;/p&gt;
&lt;p&gt;我就又在想：他们之中，会不会有很多人，也梦想过做音乐呢？但是因为各种原因，他们没有尝试。&lt;/p&gt;
&lt;p&gt;绝对音感就是这样一个神奇的天赋，你很有可能拥有它，但如果你不尝试学习音乐，你就永远不知道自己拥有这样的天赋，更谈不上发挥这个天赋了。&lt;/p&gt;
&lt;p&gt;如果周杰伦不尝试，不去 10 天创作 50 首歌，他就不会推出自己的第一张专辑，《Jay》；&lt;/p&gt;
&lt;p&gt;如果方文山不尝试，不去写 100 首词，寄给唱片公司，他还是一名流水线上的工人。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;无独有偶，就在昨天，在我的知识星球，有同学向我提问：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;波波老师，怎样确定自己到底适合做什么呢？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我的回答是这样的：&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;bobo老师的回答：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;怎么才能知道自己适合什么？个人认为，只能去尝试，通过尝试做不同的事情，找到自己适合什么。否则，一个人就是不知道自己适合什么。&lt;/p&gt;
&lt;p&gt;“自己究竟适合什么”这个问题的答案背后，是包含巨大的信息价值的。如果每个人都能轻易知道自己适合什么，大多数人就少了很多患得患失的烦忧。可惜，世界不是这个样子的。除了极少数的人，一出生就知道自己适合什么，大多数人都是不知道的。这其实和只有极少数人是富二代是一个道理。&lt;/p&gt;
&lt;p&gt;无论国内外，近乎所有专业的本科阶段的学习，都是某一个领域的全面教育，而非专业教育。本科阶段，会让你接触一个领域的方方面面，目的就是让大家找到自己适合哪个方向。到了研究生阶段，才会具体钻进某一个细分领域深耕。&lt;/p&gt;
&lt;p&gt;往前捯，我们的初等教育更是如此。小学初中高中，我们简直无所不学，天文地理，艺术哲学，美术音乐，物理化学。这些都是为了让我们在小时候接触这个世界尽量多的领域，在这个过程中找到自己适合什么。&lt;/p&gt;
&lt;p&gt;其实，我一直认为，每个人的一生，都在不断寻找自己适合什么的道路上。我也一样。我适合写字吗？我也不知道。所以，今年开始，我决定定期更新我的公众号，就是逼自己不断去写字，看自己到底适合不适合。&lt;/p&gt;
&lt;p&gt;一旦做了，我判断“是否适合”的标准很简单：看自己做起来，会不会觉得厌烦，如果不厌烦，不抵触，我觉得就是适合的。&lt;/p&gt;
&lt;p&gt;至于能不能做出成绩。说实话，这个世界上的大多数事情，对于大多数正常智商的人来说，只要坚持去做，总能做出一点儿小成绩的。有没有大发展不好说，但混口饭吃肯定是没问题的。&lt;/p&gt;
&lt;p&gt;必须有天赋才能去做的事儿，在这个世界上，其实挺少的。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-09-17/readme.md" rel="alternate"/></entry><entry><id>2019/2019-09-16/readme.md</id><title>答读者问 | 如何寻找学习资料？</title><updated>2019-09-16T00:00:00-07:00</updated><content>&lt;h2&gt;答读者问 | 如何寻找学习资料？&lt;/h2&gt;
&lt;p&gt;最近，有个同学在我的知识星球问我：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我是个程序员小白，是其他专业转来的，看了您的课，真仿佛要上天一般。想求教老师 ，除了学习您的数据结构和算法课程，能推荐一下我还能到哪里找到讲得这么容易理解的课程，来提高技术水平吗？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;bobo老师的回答：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我的回答可能要让你失望了。&lt;strong&gt;简单来说，我没有任何秘密的资料，或者秘密的资料源，这些资料通俗易懂，看了就上天了。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;各个领域的经典资料，通常都是好资料。关键是它是否适合你。即使是我经常不推荐的《算法导论》，它的经典程度也是毋庸置疑的。只不过对大多数人来说，尤其是初学者来说，水平完全不适合看《算法导论》而已。实际上，很多同学会在我的课程问答区问出一些水平很高的偏理论的问题，我的回答都会引用《算法导论》中的推导。&lt;/p&gt;
&lt;p&gt;怎么找各个领域的经典资料？我的经验，在大多数情况下，网上一搜，评价高的书籍或者课程，都不会太差。&lt;/p&gt;
&lt;p&gt;但是，关键在于，不能指望某一个资料，跟着它学就“从入门到精通”了。这是不现实的。&lt;strong&gt;大多数资料，都是有的地方很精彩，但有的地方一塌糊涂。我的课程也不例外。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我的经验：&lt;strong&gt;比对参考不同的资料，对于同一个知识点，看不同的人怎么说，是非常非常重要的。&lt;/strong&gt;很多时候，一本书这里的例子举得不好，但是看那本书的例子就懂了；可是那本书的那个公式推导过程又不清晰，看这本书就很清晰了。&lt;/p&gt;
&lt;p&gt;这是正常的学习过程，不能犯懒。也不能“完美主义”：认准一个教材就一路走到黑。只有这样，才能慢慢综合众家之言，形成自己对知识的理解。对此，我强烈建议再阅读一遍我的公众号文章：&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2018/2018-04-18/"&gt;《高效学习的秘密》&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;如果真要说找资料有什么诀窍的话，我认为有以下几点可以分享：&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在这个时代，不要只关注出版物或者大平台上的课程。很多网络上的帖子的讨论，或者博客，或者简单的教学视频，或者一些大学的公开课件，出奇的棒。尤其是当你不需要系统学习某个领域，只是想学习某一个知识点的时候，通过网络上的碎片化知识介绍进行学习，其实是非常高效的。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;找英文资料。&lt;/p&gt;
&lt;p&gt;不吹不黑，在当下，就我接触的资料范畴，英文资料，真的比中文资料强太多。不仅仅在出版物方面，还在我上面说的网络讨论或者博客或者简短的教学视频上。比如 Youtube，在我看来就是超牛的教育网站。&lt;/p&gt;
&lt;p&gt;这里，我说的强太多，首先，就在于可读性和可理解性上。对于大多数英文教材，别看厚厚一大本，其实里面涵盖的内容，和很多中国教材薄薄的一小本儿，内容量是一样的。甚至中国教材涵盖的内容可能更多。但国外教材为什么厚？很多时候，就是翻来覆去地说，站在不同角度用不同例子说，生怕你看不懂。&lt;/p&gt;
&lt;p&gt;另外一点，就是英文世界资料涵盖内容的丰富程度和细腻程度，很多时候出乎我的意料。&lt;/p&gt;
&lt;p&gt;比如，我在我的知识星球分享过一份资料，一本书的厚度，只讲贝塞尔曲线一个主题。把贝塞尔曲线的来龙去脉讲得一清二楚。要知道，一般，在图形学课本中，贝塞尔曲线只是一章甚至是半章的内容。&lt;/p&gt;
&lt;p&gt;比如，我的算法或者数据结构课程，大量使用面向对象的编程特性。就有很多同学问我，如果用 C 语言怎么办？我会推荐他们读一本书《Object-Oriented Programming With ANSI C》。这本书在网上完全是开源的。它使用 C 语言——一个没有面向对象语言特性的语言，重构了面向对象语言的各种特性。通过这个过程，绝对既对面向对象有了深刻的底层理解，同时对 C 语言有了更深刻的理解。传送门：&lt;a href="https://www.cs.rit.edu/~ats/books/ooc.pdf"&gt;https://www.cs.rit.edu/~ats/books/ooc.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;比如，有的同学学习深度学习，却总是想把高数线数重新学习一遍。我在很多地方都说过，只要你本科的高数线数及格了，就没必要。直接去学习机器学习，遇见数学发现自己搞不定，再有针对性地补一下数学。目标性强，效率高。但如果你一定要因为学习深度学习复习一下相关数学的话，英文的世界里早就有这样的材料了。比如这份 The Matrix Calculus You Need For Deep Learning ：&lt;a href="https://explained.ai/matrix-calculus/index.html"&gt;https://explained.ai/matrix-calculus/index.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这些资料在我看来都还太“古板”，再举几个例子。比如你想自己搞一个邮箱服务器？来看看这 How To Run Your Own Mail Server ：&lt;a href="https://www.c0ffee.net/blog/mail-server-guide/"&gt;https://www.c0ffee.net/blog/mail-server-guide/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;想了解一下量子计算是怎么回事儿？来看看这个 An Interactive Introduction To Quantum Computing ：&lt;a href="http://davidbkemp.github.io/QuantumComputingArticle/"&gt;http://davidbkemp.github.io/QuantumComputingArticle/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;... ...&lt;/p&gt;
&lt;p&gt;这样的例子太多太多了，举也举不完。&lt;/p&gt;
&lt;p&gt;所以，英语真的很重要。虽然我曾经写过&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-06-02/"&gt;《答读者问 | 这个年代，还有必要学英语吗？非说没必要，也没毛病》&lt;/a&gt;，但那是因为有的人很明确自己不需要英语。那就没必要学。&lt;/p&gt;
&lt;p&gt;但从接受技术资料的角度，如果你能无碍接受任何英文资料，我个人认为，学习速率将直接超越 99%，甚至 99.99% 的程序员。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;现在，越来越多的资料，以开源的形式呈现，也都非常好。我在上面举的很多例子，其实就是开源资料，而非出版物。如果翻我的知识星球中【资源共享】的标签，还能看到更多例子。&lt;/p&gt;
&lt;p&gt;不过，我的知识星球建立时间也不长，积累不够多。很多我过去接触到的好资料，都“丢失”了。我最近在思考创建一个开源项目，整理这些“非正规出版”，但极其有价值的开源资料：）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;最后，因为这个回答里有提及了英语，所以多说两句。&lt;/p&gt;
&lt;p&gt;我之前写了一篇文章，叫&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-08-27/"&gt;《慢增长》&lt;/a&gt;，其中举的例子里“炫耀”了一下我在扇贝单词的打卡记录，于是，很多同学也开始天天背单词了。&lt;/p&gt;
&lt;p&gt;在这里，我必须说，直接背单词并不是我推荐的英语学习方式。脱离具体的英语资料，用中英对应的方式去背单词，在大多数时候是低效的。&lt;/p&gt;
&lt;p&gt;正确的积累单词的方式，是在英语使用中去积累。最常见也是成本最低的英语使用方式，就是阅读。在大量英语阅读的基础上，不认识的或者模糊的单词记录一下，每天复习一下，效果比死记硬背好太多。具体阅读什么，大家不用太纠结，你喜欢就好。人文，社科，历史，政治，科幻，恐怖，奇幻...其实...小黄书都可以...关键是你喜欢，读得下去。如果连中文都不想读的材料，就算了。&lt;/p&gt;
&lt;p&gt;当然，除了阅读以外，电影、游戏、漫画、音乐......都可以。我曾经写过一篇文章：&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-05-30/"&gt;《看美剧学英语靠不靠谱？我说靠谱，方法都在这里了》&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;前几天，我在我的知识星球，也转载了我朋友圈里一位妈妈的分享。她观察自己的孩子在英国学习，是怎样积累词汇量的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="star_share" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-16/star_share.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;最后，对我的知识星球感兴趣的同学，欢迎扫码加入。&lt;strong&gt;免费的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;不在公众号的日子里，我都在知识星球。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-09-16/readme.md" rel="alternate"/></entry><entry><id>2019/2019-09-15/readme.md</id><title>没有解的问题</title><updated>2019-09-15T00:00:00-07:00</updated><content>&lt;h2&gt;没有解的问题&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;小的时候，有一类智力题特别流行，就是一笔画问题。现在我们都知道了，这本身就是欧拉图问题。但小时候哪有那么多理论知识，就是觉得笔不离纸，一笔能画出那么多图案，是件很酷的事情。&lt;/p&gt;
&lt;p&gt;我印象很清晰，有一次去科技馆，在一个角落，我遭遇了经典欧拉回路问题的起源 —— 柯尼斯堡七桥问题 (Seven Bridges of Königsberg)。在这样一幅图中，我们能否从一个陆地出发，经过所有的桥一次且仅一次，最终回到出发的陆地？&lt;/p&gt;
&lt;p&gt;&lt;img alt="seven" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-15/seven.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;小学时候的我，在那个角落研究了很长时间，都没有完成这个任务。我还想把这个问题抄到小本本上，回家好好研究。然后，科技馆的小姐姐告诉我：不用研究了，这个问题无解。&lt;/p&gt;
&lt;p&gt;现在，相信大家都知道，对于一个图，如果图中的每一个顶点的度都是偶数，整幅图才存在欧拉回路。这可能是每个小学生都知道的结论，但是，这个结论对于当时的我来说，是非常震撼的。&lt;/p&gt;
&lt;p&gt;在我印象里，这是我第一次意识到：&lt;strong&gt;原来，这个世界上有的问题，是没有解的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;有一道网传的微软面试题是这样的：&lt;/p&gt;
&lt;p&gt;一个直角三角形，斜边长是 10，斜边上的高是 6，问这个直角三角形的面积是多少？如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img alt="right_tr" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-15/right_tr.png" /&gt;&lt;/p&gt;
&lt;p&gt;如果你认为结果是底乘以高除以二，即 10 * 6 / 2 = 30，那么你就上当了。&lt;/p&gt;
&lt;p&gt;这个问题的答案是：这样的直角三角形完全不存在。&lt;/p&gt;
&lt;p&gt;为什么？其实，如果我们将这个斜边，想做是一个半径为 5 的圆的直径，就可以很清晰地看到这一点。所有的斜边长为 10 的直角三角形，都可以在这个圆中找到。圆上的任意一点，和这条直径的两个端点相连，就构成了一个斜边长为 10 的直角三角形。&lt;/p&gt;
&lt;p&gt;&lt;img alt="right_tr_solution" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-15/right_tr_solution.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;很显然，这样的直角三角形，其斜边的高，最大为 5。&lt;/p&gt;
&lt;p&gt;所以，斜边长是 10，斜边上的高是 6 的直角三角形是不存在的。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一个据说骗过爱因斯坦的问题，是这样的：&lt;/p&gt;
&lt;p&gt;一辆汽车，要行驶 2 英里，上山和下山各 1 英里。这辆车上山时的平均速度为 15 英里/小时。问：它下山要开多快，才能使上下山的平均速度是 30 英里/小时？&lt;/p&gt;
&lt;p&gt;如果跟随直觉，很容易给出 45 这样一个错误的答案。但是，如果我们仔细计算一下，就会发现，事情没有这么简单。&lt;/p&gt;
&lt;p&gt;这个问题的标准计算方法是这样的，我们假设下山速度要达到 &lt;em&gt;v&lt;/em&gt;，才能使上下山的平均速度达到 30 英里/小时。&lt;/p&gt;
&lt;p&gt;所以，我们就知道了，上山的过程，我们用的时间是 1 / 15；&lt;/p&gt;
&lt;p&gt;下山的过程，我们用的时间是 1 / &lt;em&gt;v&lt;/em&gt;；&lt;/p&gt;
&lt;p&gt;上下山的总过程，我们用的总时间，就是这二者相加：&lt;/p&gt;
&lt;p&gt;&lt;img alt="t" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-15/t.png" /&gt;&lt;/p&gt;
&lt;p&gt;而上下山的路程总和，是 2 英里，因此，上下山的平均速度，就是 2 除以上面的时间表达式。所以，要想让上下山的平均速度达到 30，就是求解下面方程中的 &lt;em&gt;v&lt;/em&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img alt="eq1" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-15/eq1.png" /&gt;&lt;/p&gt;
&lt;p&gt;对于这个方程，首先，等号左右两边可以同时除以 2，就变成了这个样子：&lt;/p&gt;
&lt;p&gt;&lt;img alt="eq2" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-15/eq2.png" /&gt;&lt;/p&gt;
&lt;p&gt;我们再次可以把左侧分式的分母挪到右边，而右侧的 15，挪到左边的分母，上式就变成了这样：&lt;/p&gt;
&lt;p&gt;&lt;img alt="eq3" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-15/eq3.png" /&gt;&lt;/p&gt;
&lt;p&gt;很显然，等号左右两边都有 1/15，所以，原问题等价于求解 &lt;em&gt;v&lt;/em&gt;，使得： &lt;/p&gt;
&lt;p&gt;&lt;img alt="eq4" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-15/eq4.png" /&gt;&lt;/p&gt;
&lt;p&gt;相信大家都了解了，从初等数学的角度，这意味着无论 &lt;em&gt;v&lt;/em&gt; 取多少，都无法使得原问题中的汽车上下山的平均速度是 30 英里/小时。&lt;/p&gt;
&lt;p&gt;站在高等数学的角度，用极限的眼光去看，这意味着原问题中的汽车要无穷快，才能使得上下山的平均速度是 30 英里/小时。&lt;/p&gt;
&lt;p&gt;是的，比光速还要快。但这显然不可能。所以，这个问题没有解。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;网传另一个亚马逊的面试题是这样的：&lt;/p&gt;
&lt;p&gt;有两个杆子，高是 50m。两个杆子之间挂了一根绳子，绳子的长度是 80m。两个杆子间的绳子耷下来，最低点距离地面是 10m。如下图所示。&lt;/p&gt;
&lt;p&gt;问：两个杆子之间的距离是多少？&lt;/p&gt;
&lt;p&gt;&lt;img alt="amazon" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-15/amazon.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;正确答案是，这两个杆子之间没有距离，即距离为零。因为，只有当这根长度是 80m 的绳子对折的时候，其长度为 40m，距离地面才会有 10m。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一个问题为什么没有解？因为问题的条件限制。说得文驺驺一点，叫做&lt;strong&gt;约束&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;对于柯尼斯堡七桥问题，当前的七座桥连接陆地的方式，让这个问题没有解。如果我们改变这个约束，多添加一些桥，或者少走一些桥（拆掉一些桥），都能让这个问题有解；&lt;/p&gt;
&lt;p&gt;一个直角三角形，斜边长是 10，斜边上的高是 6，这里的“直角”，“斜边的长度”，“高的大小”，都是约束，只要改变一个约束，这个三角形都会存在；&lt;/p&gt;
&lt;p&gt;同理，对于两根杆之间的距离问题，杆的高度，绳子的长度，绳子离地面的高度，这些约束合在一次，让这两个杆之间的距离只有可能为 0。上述约束稍作改变，都会让这个问题的场景更加合理；&lt;/p&gt;
&lt;p&gt;至于上下山的问题，我们只需要对汽车上下山平均速度的要求稍微低一点，哪怕希望汽车上下山的平均速度是 29 英里/小时，这个问题都是有解的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;不合理的约束合在一起，让我们的问题无解。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;上面的问题都是数学问题，虽然很 tricky，但我相信，这些问题对我的这个公众号的读者来说，都太小儿科了。&lt;/p&gt;
&lt;p&gt;一个数学问题没有解，这似乎并不是什么稀奇事。但是，放在生活中，似乎很多人会忘记这一点。&lt;/p&gt;
&lt;p&gt;比如，我会收到很多类似这样的问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;我算法很差，想用一个月的时间，把算法面试准备得差不多，要怎么学习？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;我大专学历，计算机专业，要求不高，在北上广找一个 8k 的工作就知足了，但一直没有着落，怎么办?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些问题，在我看来，都是无解的。&lt;/p&gt;
&lt;p&gt;但是无解的问题，并非没有意义。分析一个问题为什么没有解，可以说是一件非常有意义的事情。&lt;/p&gt;
&lt;p&gt;通常，是问题的约束，导致了问题的无解。所以，&lt;strong&gt;在大多数情况下，解决方案，都是改变约束。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;“一个月的时间把算法面试准备得差不多”是无解的，但是，如果改变约束条件，两个月呢？三个月呢？半年呢？问题可能就有解了。&lt;/p&gt;
&lt;p&gt;或者，现在真的只剩下一个月的时间了，不能系统准备算法面试的方方面面了，那只准备算法领域的一个子集呢？如果只把数据结构扎扎实实拿下来呢？或者就把 Leetcode 上的腾讯面试题都刷一遍，认认真真把这些题都搞懂呢？&lt;/p&gt;
&lt;p&gt;现在的形势，大专学历在北上广找一个 8k 的工作如果有难度的话，那么，如果改变约束条件呢？6k 呢？4k 呢？工资太少，在北上广生活不容易，换一个城市呢？杭州？南京？苏州？武汉？&lt;/p&gt;
&lt;p&gt;或者，会不会，在这个问题中，决定性的约束条件其实是学历。一狠心，花几年时间，来个专升本，改变学历这个约束条件，以后找工作会不会就会简单很多了呢？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;当然，每个人的情况不同，我很理解，很多时候，约束条件不是那么容易就可以替换，甚至取消掉的。&lt;/p&gt;
&lt;p&gt;如果这样的话，那么我们就必须承认：&lt;strong&gt;这个世界上，有很多问题，就是无解的。数学尚且如此，生活更是如此。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在我看来，承认很多问题没有解，并没有什么不好。&lt;/p&gt;
&lt;p&gt;一方面，这能让我们更聚焦在“有解”的问题上；&lt;/p&gt;
&lt;p&gt;另一方面，这能让我们从一个全新的角度看待那些无解的问题。&lt;/p&gt;
&lt;p&gt;很多时候，想明白让那些问题无解的约束条件究竟是怎样的，我们可不可能改变这些约束条件，就是创新的来源。&lt;/p&gt;
&lt;p&gt;而另外一些时候，想明白一个问题为什么没有解，也就离这个世界的真相不远了。&lt;/p&gt;
&lt;p&gt;比如，&lt;/p&gt;
&lt;p&gt;钱就是难赚的；&lt;/p&gt;
&lt;p&gt;生活就是不易的；&lt;/p&gt;
&lt;p&gt;很多成绩的获得，就是需要时间的积累的。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-09-15/readme.md" rel="alternate"/></entry><entry><id>2019/2019-09-10/readme.md</id><title>iPhone 设计“崩溃”史</title><updated>2019-09-10T00:00:00-07:00</updated><content>&lt;h2&gt;iPhone 设计“崩溃”史&lt;/h2&gt;
&lt;p&gt;2019 年苹果秋季发布会结束了。重头戏就是发布了全新的 iPhone 11, 11 Pro 和 11 Pro Max。相信大家已经都知道了。如果还不知道，随便翻翻朋友圈或者公众号文章，应该到处都是类似的新闻。&lt;/p&gt;
&lt;p&gt;作为一个非常酷的公众号，把苹果发布会的内容重复一遍，这就太不酷了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;说到不酷，苹果最新发布的 iPhone 11 系列，最大的槽点就是：太不酷了。或者，咳，让我们直白一点，&lt;strong&gt;太丑了&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;iPhone 11 整体的视觉效果是这样的。&lt;/p&gt;
&lt;p&gt;&lt;img alt="iphone11" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-10/iphone11.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;这个双摄像头放在一个方块儿里的排列方式，像极了某种很无奈的表情。&lt;/p&gt;
&lt;p&gt;&lt;img alt="emoji" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-10/iphone11-emoji.png" /&gt;&lt;/p&gt;
&lt;p&gt;如果有表情包制作者看到这篇文章，建议深挖一下，做个表情包，搞不好能火。大概就是这么一个风格：&lt;/p&gt;
&lt;p&gt;&lt;img alt="emoji" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-10/emoji.png" /&gt;&lt;/p&gt;
&lt;p&gt;不用谢我了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;至于近一万大洋的 iPhone 11 Pro 和 11 Pro Max，视觉效果是这样的。&lt;/p&gt;
&lt;p&gt;&lt;img alt="iphone11pro" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-10/iphone11pro.png" /&gt;&lt;/p&gt;
&lt;p&gt;在 iphone 5 发布的时候，果粉们以为苹果手机会越做越长。&lt;/p&gt;
&lt;p&gt;&lt;img alt="iphone5" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-10/iphone5.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;乃至 iphone 20 可能是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="iphone20" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-10/iphone-20.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;但是，时间证明：果粉们错了。苹果怎么可能只在屏幕的长度上做文章呢？这样的科技趋势预测，显然没有考虑到：摄像将成为手机最重要的功能之一，同时迎来直播业，网红业等行业的井喷式增长。&lt;/p&gt;
&lt;p&gt;现在，大家终于明白了，到 2029 年，苹果手机第 21 代，应该是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="iphone2029" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-10/iphone2029.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;当然了，现在刚 iphone 11，只有 3 个摄像头而已。放在一个方块儿里，像极了灶台。正好，现在苹果 CEO 姓 Cook...&lt;/p&gt;
&lt;p&gt;&lt;img alt="iphone11-cook" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-10/iphone11-cook.png" /&gt;&lt;/p&gt;
&lt;p&gt;但是，可能国内这种无火的灶台不是特别多。所以，我还是觉得说它像浴霸更贴切。&lt;/p&gt;
&lt;p&gt;&lt;img alt="iphone11-yuba" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-10/iphone11-yuba.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;总而言之一句话：&lt;strong&gt;苹果的设计全面“崩溃”&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;但其实，苹果设的计“崩溃”，已经不是一天两天了。最早可以追溯到 iOS 7 发布的那一天。&lt;/p&gt;
&lt;p&gt;苹果自 iOS 7 起，摒弃了一直使用的拟物化设计，采用了全新的扁平化的设计风格，引起了设计界的轩然大波。至今，整个设计界对于扁平化设计，还是褒贬不一。&lt;/p&gt;
&lt;p&gt;咱也不是专业设计，咱也不懂设计专业。反正美丑是比较主观的事情，仁者见仁，智者见智。远观对比图如下：&lt;/p&gt;
&lt;p&gt;&lt;img alt="ios6vs9" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-10/ios6vs9.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;但是，逻辑咱们还是听得懂的。其实，我看到很多设计师的评论，并非反对苹果的扁平化设计，而是觉得苹果的很多扁平化设计，非常“业余”。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;比如，照相的图标。左边是过去的设计，右边是新的扁平化设计。很明显的，右边的图标更加平庸，只是一个剪切画而已。&lt;/p&gt;
&lt;p&gt;&lt;img alt="camera-icon" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-10/camera-icon.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;再比如游戏中心（Game Center）的图标。右边是新的扁平化设计，四个气球叠在一起，完全不知道是什么意思。我承认，“游戏中心”是一个相对比较抽象的概念，很难用一个图标准确表达。但左侧以前的设计，告诉你这是“游戏中心”，你会觉得合理；而对于右侧的新设计，就算知道它是“游戏中心”，大多数人多半一脸蒙圈，为什么这个图标是游戏中心？&lt;/p&gt;
&lt;p&gt;&lt;img alt="gamecenter-icon" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-10/gamecenter-icon.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;再比如，扁平化以后的“照片”图标，右侧新设计到底是什么？&lt;/p&gt;
&lt;p&gt;&lt;img alt="photo-icon" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-10/photo-icon.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;还有一些图标的改变，很多专业设计师的评价是，“为了扁平而扁平”。&lt;/p&gt;
&lt;p&gt;比如 newsstand，以前的设计是一个书架，上面摆放着你订阅的报纸杂志，一看就知道什么意思。但是新的扁平设计，让人觉得是一个三流的内容聚合 App：&lt;/p&gt;
&lt;p&gt;&lt;img alt="newsstand-icon" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-10/newsstand-icon.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;不过没有关系，反正现在苹果已经没有 newsstand 了，取而代之的是全新的 News。&lt;/p&gt;
&lt;p&gt;嗯，说实话，我一直不知道这个 news 的新图标，和“新闻”有什么关系？&lt;/p&gt;
&lt;p&gt;&lt;img alt="news-icon" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-10/news-icon.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;我们不吐槽 iOS 的扁平化设计了，毕竟，iOS 7 已经是 2013 年的事情了，说实话，我已经习惯了。&lt;/p&gt;
&lt;p&gt;时间飞逝，来到了 2015 年，苹果发布了全新一代的&lt;strong&gt;苹果鼠标第二代&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;和所有的苹果中文翻译一样，苹果鼠标 2 代，有一个拗口得不能再拗口的中文名字，&lt;strong&gt;妙控鼠标 2&lt;/strong&gt;。它的英文名字明明是 Magic Mouse 2，我实在不理解，直译的“魔法鼠标”哪里不好？&lt;/p&gt;
&lt;p&gt;除了没有魔法以外？&lt;/p&gt;
&lt;p&gt;&lt;img alt="magic-mouse-2" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-10/magic-mouse-2.png" /&gt;&lt;/p&gt;
&lt;p&gt;我现在使用的鼠标就是这款“妙控鼠标2”。这款鼠标比起 1 代鼠标，最大的区别是从使用七号电池，变成了充电电池。&lt;/p&gt;
&lt;p&gt;但是...... 充电的设计是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="magic-mouse-2-charging" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-10/magic-mouse-2-charging.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;这意味着，在充电的时候，你无法使用这款鼠标。&lt;/p&gt;
&lt;p&gt;2015 年，这样的设计简直不可思议。&lt;/p&gt;
&lt;p&gt;我们可以看看罗技的充电鼠标是怎么设计的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="logitech-mx" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-10/logitech-mx.png" /&gt;&lt;/p&gt;
&lt;p&gt;充电时完全不影响使用。&lt;/p&gt;
&lt;p&gt;我本来不觉得这是什么了不起的设计，直到遇到了苹果的“妙控鼠标2”。&lt;/p&gt;
&lt;p&gt;咱也不懂鼠标产业，也不懂设计。咱就是个小白，想弱弱地问一句：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这个设计，对苹果来说很难吗？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;时间来到了 2016 年，苹果发布了 iphone 7。嗯，取消了 3.5mm 耳机接口。于是，如果你需要边充电边戴耳机的话，基本上是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="iphone7" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-10/iphone7.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;当然了，后来我们才知道，这可能是在给苹果即将推出的无线耳机 airpod 铺路。&lt;/p&gt;
&lt;p&gt;不仅如此，2016 年最新的 Macbook Pro，苹果还取消了所有的 USB 接口。于是，使用新款 Macbook 的画风就成这样了。&lt;/p&gt;
&lt;p&gt;&lt;img alt="adapters" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-10/adapters.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;反正苹果的转换头儿生意是火爆了。在苹果官网，只看“显示器适配器”，就有 10 个选择，都是 200 大洋起步的。&lt;/p&gt;
&lt;p&gt;&lt;img alt="adapter-page" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-10/adapter-page.png" /&gt;&lt;/p&gt;
&lt;p&gt;对了，苹果的转换头还特容易坏，我也习惯了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;不说 Macbook 了，我们说回 iPhone。2018年，大名鼎鼎的 iPhone X 系列发布。&lt;/p&gt;
&lt;p&gt;全新的 iPhone，掀起了一阵全世界范围最新的手机设计风潮：&lt;strong&gt;刘海屏&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img alt="notch" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-10/notch.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;当然，采用刘海屏，也有不得已的技术原因。但是，很多设计师都表示，完全可以使用更巧妙的设计，避免这个视觉灾难。&lt;strong&gt;毕竟，苹果曾经是将技术和设计结合得最完美的科技公司啊！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;比如，对于 iPhone 应用的整体设计，可以采用如下方式：&lt;/p&gt;
&lt;p&gt;&lt;img alt="notch-soluution" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-10/notch-solution.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;大家可以看到，对于右侧的设计，其实“刘海”还是存在的，但是，在视觉上，被隐藏了。与此同时，刘海两侧的屏幕并没有浪费，依然可以显示时间和电量等信息。&lt;/p&gt;
&lt;p&gt;但不知道为什么，苹果坚持把刘海大大地展示在自家应用上。可能是考虑到土豪们使用起来，需要让周围人知道，这是最新的 iPhone X 吧。&lt;/p&gt;
&lt;p&gt;所以，我们看到的全屏照片或者电影，都是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="notch-photo" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-10/notch-photo.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;如今，很多注重用户体验的 app 设计——是的，比苹果还注重用户体验的 app 设计师们——将自己的 app 在全屏展示画面或者图片时，修改成了下图最后的设计：&lt;/p&gt;
&lt;p&gt;&lt;img alt="notch-soluution2" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-10/notch-solution2.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;但是，对于苹果的官方 app，就没辙了。所以，使用 safari 横屏浏览网页的话，效果是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="notch-page" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-10/notch-page.png" /&gt;&lt;/p&gt;
&lt;p&gt;怎么办呢？很多网页设计的教程会告诉你：请考虑刘海屏的问题。当移动网页横屏浏览的时候，&lt;strong&gt;网页的左右两边，应该留出一定的安全距离...&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;不知道这是不是当下前端设计必考的知识点...&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;于是我试验了一下，在我的手机上，横屏看我的微信公众号《是不是很酷》的文章目录，效果是这样的...&lt;/p&gt;
&lt;p&gt;&lt;img alt="weixin" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-10/weixin.JPG" /&gt;&lt;/p&gt;
&lt;p&gt;嗯，&lt;strong&gt;不愧是腾讯，绝不向丑恶的设计低头...&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;好了，时间来到了 2019 年，最新的 iPhone 11 Max Pro 浴霸版，大家也看到了。&lt;/p&gt;
&lt;p&gt;&lt;img alt="iphone11" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-10/iphone11pro.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;可是，你猜怎样？&lt;/p&gt;
&lt;p&gt;就算苹果的设计大家都说“丑”，但每次都有大批跟风者。&lt;/p&gt;
&lt;p&gt;就说刘海屏手机吧，现在的手机行业形势是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="notch-phones" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-10/notch-phones.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;至于大方块儿三摄像头手机呢？嗯，据说 Google 的 Pixel 4 是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="pixel4" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-10/pixel4.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;刘海，方砖浴霸三摄像头，一个都不能少。&lt;/p&gt;
&lt;p&gt;其他手机呢？我们拭目以待。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;或许，我们都冤枉苹果了。&lt;strong&gt;不是苹果的设计太丑，只是，我们太不时尚。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最新消息，发布会结束后，苹果股价呈上涨趋势。&lt;/p&gt;
&lt;p&gt;&lt;img alt="stock" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-10/stock.png" /&gt;&lt;/p&gt;
&lt;p&gt;所以，亲爱的同学们，你们准备好购买，最新出炉的，最时尚的，iPhone 11 , 11 Pro 和 11 Pro Max 了吗？&lt;/p&gt;
&lt;p&gt;反正，我的课程群里已经有很多小伙伴表示，iPhone 11 还是很便宜的。性价比不错。&lt;/p&gt;
&lt;p&gt;嗯，国行起步价，5499，确实比起往届便宜了。新款绿色看上去确实也挺有气质。&lt;/p&gt;
&lt;p&gt;&lt;img alt="iphone-11-green" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-10/iphone-11-green.png" /&gt;&lt;/p&gt;
&lt;p&gt;更良心的，其实是一起发布的新款 iPad，起步价 2699：&lt;/p&gt;
&lt;p&gt;&lt;img alt="ipad" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-10/ipad.png" /&gt;&lt;/p&gt;
&lt;p&gt;看来经济不景气，中美贸易战，谁都不容易。尤其是苹果——这个被外媒称为：&lt;strong&gt;全美国对中国依赖最深的科技巨头。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="cook" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-10/cook.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;库克同学应该也很无奈吧。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-09-10/readme.md" rel="alternate"/></entry><entry><id>2019/2019-09-02/readme.md</id><title>我不看好 ZAO，即使没有隐私和版权问题</title><updated>2019-09-02T00:00:00-07:00</updated><content>&lt;h2&gt;我不看好 ZAO，即使没有隐私和版权问题&lt;/h2&gt;
&lt;p&gt;ZAO 在朋友圈刷屏了。&lt;/p&gt;
&lt;p&gt;但是，在我的朋友圈，我不是被用 ZAO 换脸后的视频刷的屏，而是被谴责 ZAO 的隐私问题和版权问题的文章刷的屏。&lt;/p&gt;
&lt;p&gt;关于 ZAO 背后所涉及的隐私问题，安全问题和版权问题，我就不深入分析了，相关文章很多了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这篇文章我想讲的是，即使没有这些问题，ZAO 也不会长久地火下去。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为什么？因为现在，ZAO 的模式完全没有“消费性”。&lt;/p&gt;
&lt;p&gt;什么意思？大家不要误会，这里的“消费性”，和钱没有关系。我的意思是，这个模式，大家根本不会消费时间。&lt;/p&gt;
&lt;p&gt;对于互联网模式来说，时间就是钱。大众对自己时间的消费，最终会被平台方或者内容提供方转换成金钱。&lt;/p&gt;
&lt;p&gt;为什么我说 ZAO 的模式不具备“消费性”？因为自由度太低。&lt;/p&gt;
&lt;p&gt;从目前 ZAO 的玩法来看，官方提供了一系列的影视片段“模板”，用户可以基于这些影视片段“模板”进行换脸。但是，除了脸，什么都没有改变。&lt;/p&gt;
&lt;p&gt;问题来了。&lt;strong&gt;用户为什么要选择看同一个影视片段 100 次， 1000 次， 10000 次，他们的区别只是这些片段中的人脸发生了变化？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;虽然在近几年，确实有越来越多的流行的元素，我发现我有点儿理解不了了。但我还是坚信“逻辑”的意义。我的观察告诉我，“逻辑”依然是世界的支柱。没有逻辑的事情不会发生。用户不是傻子，如果用户决定付出时间，绝对是有内在逻辑的。&lt;/p&gt;
&lt;p&gt;大批用户可能会在初始的时候，因为“好玩”，所以尝试 ZAO。这波流量背后的逻辑是“猎奇心理”。但“猎奇心理”是极其容易被满足的。除非 ZAO 能够做到不停地创造“奇”。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;但不停地创造“奇”，比做出 ZAO 的难度还大。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;那么其他平台是怎么解决这个问题的？答案就是&lt;strong&gt;发动群众的力量和智慧&lt;/strong&gt;。所谓的 UGC (User Generated Contents)，即用户生成内容。&lt;/p&gt;
&lt;p&gt;以微信为例，微信公众号生态的活力在哪里？在于不同背景经历的人，每天可以基于不同时间，不同地点，不同国家，不同的人身上发生的不同的事情，发表不同的观点。&lt;/p&gt;
&lt;p&gt;这么多的“不同”是核心，我管这些“不同”叫自由度。因为有了自由度，所以，在微信公众号上，&lt;strong&gt;信息量足够大&lt;/strong&gt;，每个人能够根据自己的年龄，身份，职业，心态，兴趣，爱好，找到适合自己的信息。&lt;/p&gt;
&lt;p&gt;而 ZAO 只是根据固定的影片模板改变“脸”。说实话，&lt;strong&gt;“脸”这个元素蕴含的信息量太低了&lt;/strong&gt;。虽然每个人的“脸”都是极其重要的信息，随着科技的发展，甚至成为了标识每个人身份的验证信息。但是，从信息量的角度，&lt;strong&gt;“重要”不等于“信息量大”&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;对于大多数人来说，脸其实就像自己的学号工号身份证号一样。即使是马云，那张脸只是一张脸而已，你从中看不到他为了创建阿里巴巴付出了什么；遭遇了什么；解决了什么；对中国造成了怎样的影响；对世界又造成了怎样的影响；他对未来怎么想，怎么看......这些信息，是用户真正愿意付出时间获得的信息。&lt;/p&gt;
&lt;p&gt;同理，知乎，抖音，甚至是直播，都在基于 UGC 的模式创建不同的信息，满足不同人的“需求”，这是他们具有“消费性”的底层逻辑基础。拥有自由度，用户才能创作出满足不同需求的内容。这和所使用的技术难不难，先不先进，完全没有关系。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;不过，在严重的隐私问题和版权问题下，似乎这些也不重要了。&lt;/p&gt;
&lt;p&gt;大家因为 ZAO，开始关心隐私问题和版权问题，我也是很开心的。也许，这也是 ZAO 的正面意义吧。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;题外话。&lt;/p&gt;
&lt;p&gt;今天是美国的劳动节，在网上偶遇这幅图片。&lt;/p&gt;
&lt;p&gt;&lt;img alt="labor" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-02/labor.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;There is dignity in labour, even if it means getting dirty to put food on your table. Do it, rather than stay clean and go begging while disturbing others.&lt;/p&gt;
&lt;p&gt;我的投资老板在朋友圈让我翻译一下。我发现，翻译真的好难啊。&lt;/p&gt;
&lt;p&gt;献丑了，如果有同学有更好的翻译，欢迎交流斧正：）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;什么是劳动的尊严？就是自食其力。把自己的双手搞脏，真正地去做。这远胜于保持自己双手干干净净，却只能叨扰别人，四处乞讨。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-09-02/readme.md" rel="alternate"/></entry><entry><id>2019/2019-09-01/readme.md</id><title>《美国工厂》到底在讲什么？</title><updated>2019-09-01T00:00:00-07:00</updated><content>&lt;h2&gt;《美国工厂》到底在讲什么？&lt;/h2&gt;
&lt;p&gt;这两天终于补看了最近朋友圈火热的《美国工厂》。&lt;/p&gt;
&lt;p&gt;&lt;img alt="cover" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-01/cover.png" /&gt;&lt;/p&gt;
&lt;p&gt;简单地说，《美国工厂》讲述了一家中国企业在美国开办工厂的艰难。&lt;/p&gt;
&lt;p&gt;之前看到很多文章，都在说这个纪录片是在讲述中美文化的差异和冲突。我本以为影片会重点刻画中国人民的勤劳刻苦和美国人民的自由散漫懒散。但是真的看完以后，我才发现，完全不是那么回事儿。&lt;/p&gt;
&lt;p&gt;影片的态度显然不是夸耀美国，但也很难说是夸耀中国。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;比如，在影片中，外国高管来中国参观学习，采访中国工人的时候，中国工人说，每天上 12 个小时班，一个月也就休息两三天。美国人呢？每周 5 天，每天 8 个小时。都 9102 年了，我实在不觉得这些数字代表我们更加勤劳刻苦。&lt;/p&gt;
&lt;p&gt;&lt;img alt="film1" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-01/film1.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;再比如，这帮外国高管偶然看到中国工厂外，两个老人蹲在玻璃堆里分拣碎玻璃，都惊呆了。因为他们既没有佩戴护目眼镜，也没有使用防割手套——完全没有安全措施。这真的是在说我们不畏艰难，迎难而上吗？&lt;/p&gt;
&lt;p&gt;&lt;img alt="film2" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-01/film2.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;回到美国那边，我不知道为什么，总觉得导演的剪辑在吞吞吐吐，刻意把事情说得很模糊。比如，采访一位员工，员工表示，拒绝用机器抬起两倍重量的货物，因为超过了机器的最大负载，她认为是不安全的。她不愿意冒生命的危险。&lt;/p&gt;
&lt;p&gt;&lt;img alt="film3" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-01/film3.png" /&gt;&lt;/p&gt;
&lt;p&gt;有毛病吗？我觉得一点儿毛病都没有。我们中国的工厂，不也到处贴着“抓生产更要抓安全”吗？只能说，似乎中美两国对“安全”的定义不太一样，中国人觉得用用机器抬起最高承重两倍的货物，也是安全的。&lt;/p&gt;
&lt;p&gt;然后，镜头转向了一位曾经通用汽车厂的老员工，这位老员工表示：他在通用汽车厂干了 15 年，一次工伤都没有。但是，在这个中国投资的玻璃厂，他受工伤了。可是不知道为什么，影片不详细地介绍他究竟是因为什么受了工伤？是他个人的原因？还是厂子的原因？是制度不合理？还是设备有问题？统统没有解释。&lt;/p&gt;
&lt;p&gt;影片想要描述的重点是，这家中国开办的厂子，似乎安全有些隐患，进而，引出了全片中美双方最大的冲突点 —— 工会问题。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;在工会问题上，两边人打起了“舆论战”，支持工会的人上街游行，中国这边呢，“干掉”工会积极分子。&lt;/p&gt;
&lt;p&gt;&lt;img alt="film4" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-01/film4.png" /&gt;&lt;/p&gt;
&lt;p&gt;其实，公平地讲，这种“办公室政治”，哪里都有。所谓有人的地方就有江湖。这些问题我不想评价谁是谁非。因为这件事情真的太复杂。企业想要追求更大的效应没毛病；工人想要追求更多的福利也没毛病。企业主和员工本来就是站在不同位置看问题的。因为屁股坐的位置不一样，所以脑袋里想的事情也就不一样。&lt;/p&gt;
&lt;p&gt;就这样，这家中国人投资的美国工厂，从刚一进入美国，受到了当地的热烈欢迎，甚至被很多人认为是救世主——拯救了很多家庭多年没有收入的窘境；到慢慢被美国人不接受，甚至反对。&lt;/p&gt;
&lt;p&gt;我们可以说是中美的文化差异导致了这样的冲突。但是认真反观，在中国，冲突不存在吗？回头看影片中对在中国工人的采访和表情，其实，似乎只不过因为环境不同，文化不同，中国工人不会大声说 No，不会上街抗议。但中国工人也没那么幸福。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;累啊，肯定累，那有什么办法？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;或许，这个纪录片真正揭示的，是现代制造业的现状：不管是中国文化，还是美国文化，人们对于这样的工作，都越来越不能接受了。&lt;/p&gt;
&lt;p&gt;引自影片中一段美国工人的话：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;工作的状况并不是很好。&lt;/p&gt;
&lt;p&gt;一再重复做同样的事情，会让你很疲惫。&lt;/p&gt;
&lt;p&gt;你有时候会想：为什么我要做这个？&lt;/p&gt;
&lt;p&gt;你会考虑自己有没有精力和毅力，做这个工作。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可是，在通用汽车厂，这些人就不会这么想吗？&lt;/p&gt;
&lt;p&gt;&lt;img alt="film5" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-01/film5.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;其实，从工厂主的角度，也并不喜欢用工人。&lt;/p&gt;
&lt;p&gt;影片的结尾，机器臂娴熟地做着原本是工人做的事情。主管告诉身边的曹德旺主席，下次就能把这里的人取消掉了，再下次就能把那里的人取消掉了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;没办法，人做的太慢了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;![film6.png]&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;人不仅仅做的慢，人还会劳累，还会出错，还要被管理，还要沟通，还要休假。人要自由，要尊严，要福利，要工会。这些问题机器统统都没有。&lt;/p&gt;
&lt;p&gt;这在我看来，这才是《美国工厂》的核心。不管是美国文化，还是中国文化，都越来越不能适应现代制造业的发展了。在我们还在争论谁好谁坏的时候，企业家已经给出了答案——机器最好。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;之前看过一个很有意思的统计数据。现在美国有很多的失业人口，造成了一定程度的社会不稳定。很多美国人喜欢将这些失业归咎为大量的移民，尤其是非法移民，抢了美国人民的饭碗。&lt;/p&gt;
&lt;p&gt;但实际上，真实原因很有可能不是这样，如果我们看一下美国的制造业的产值，就会发现，它是在保持一个不断上升的趋势的；但是，制造业相关的工作数量却在逐渐降低。&lt;/p&gt;
&lt;p&gt;下图中，蓝色的线条是制造业的产值；而红色的线条则是制造业的工作数量。&lt;/p&gt;
&lt;p&gt;&lt;img alt="chart1" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-01/chart1.png" /&gt;&lt;/p&gt;
&lt;p&gt;为什么会产生这种现象？就是因为自动化。自动化让企业主可以雇佣更少的人，创造更多的价值。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;如果我们聚焦到一个具体行业中看，就更有意思了。一个偶然的机会，我在网上看到了这样一张图。&lt;/p&gt;
&lt;p&gt;&lt;img alt="chart2" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-01/chart2.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;这个图描述的是，在石油行业里，石油钻机的数量和石油工人数量之间的关系。绿色线条是石油钻机的数量，红色线条是石油工人的数量。&lt;/p&gt;
&lt;p&gt;大家可以看到，在 2015 年，工作的石油钻机和石油工人的数量都在疯狂下降。因为 2015 年，国际油价出现暴跌。有兴趣的同学可以搜索一下那会儿的新闻。&lt;/p&gt;
&lt;p&gt;因为原油价格暴跌，大多数油企没有动力继续钻井采油了。所以，很多钻井平台停止了作业，很多石油工人也下岗了。&lt;/p&gt;
&lt;p&gt;但是，油企在这个时间里可并没有闲着。油企们在投资，实验，研究自动钻井平台。&lt;/p&gt;
&lt;p&gt;一方面，这是油企的求生之路。如果油价一直这么低，就必须要尽快将成本降低下来。怎么降低成本？大规模使用机器。虽然短期可能需要大量资金，但是长期来看，机器最省钱。&lt;/p&gt;
&lt;p&gt;另外一方面，石油行业的实地钻井平台作业，是充满危险的，机器代替人类进行危险作业，本来就是早晚的事情。只不过，这波石油价格的暴跌，推动油企们更快地完成了这一进程。&lt;/p&gt;
&lt;p&gt;结果是怎样的呢？2016 年 6 月开始，石油价格逐渐回升，美国的很多石油钻井机逐渐开始作业。但是，石油工人的雇佣量完全没有上升。&lt;/p&gt;
&lt;p&gt;两年的时间，美国石油企业在自动化上的投资，已经可以让原先需要 20 人做的工作，现在只需要 5 个人就好。据统计，这波油价的暴跌，让美国 44 万石油工人下岗，但是，其中 22 万的工人，永远不会回到石油行业了。因为自动化的原因，石油行业不再需要这么多人了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;什么美国文化，中国文化。机器没有文化，机器赢了。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;机器的逐渐发展完善，是否会让大多数人类失去工作，从而引发巨大的社会不稳定？这其实是一个老生常谈的问题。&lt;/p&gt;
&lt;p&gt;截至目前为止，还没有发生这样的情况，并且，与之相反的，研究表明，因为机器的逐渐普及和应用，更多的工作岗位被创建出来了。&lt;/p&gt;
&lt;p&gt;一个典型的例子，是 ATM 机的普及。&lt;/p&gt;
&lt;p&gt;1970 年的美国，由于银行逐渐开始普及 ATM 机，一度导致大量银行的业务人员下岗。但是，随后，统计数据表明，正是由于 ATM 机的普及，导致银行慢慢开始需要更多的人才了。&lt;/p&gt;
&lt;p&gt;为什么？因为 ATM 让简单的存款，取现等常规业务变得极其简单廉价，使得银行开一个支行的成本变低了。于是，银行开始了扩张，到处都有支行，每个支行都需要人员，虽然，他们的工作不是简单的为客户存钱和取现。&lt;/p&gt;
&lt;p&gt;另一方面，因为这些常规业务的简单化，也使得人们对金融的需求越来越多元化，银行业开设了越来越多的业务种类，满足人们的金融需求。银行业，金融业蓬勃发展，导致需要更多的人才。&lt;/p&gt;
&lt;p&gt;这还没有算维护 ATM 机器，升级 ATM 机器带来的就业。&lt;/p&gt;
&lt;p&gt;所以，一派观点认为，机器逐渐普及，其实将带来更多的就业。只不过，&lt;strong&gt;这些工作，不可能是原来那些轻松的任务了。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;以银行业为例，在过去，只是帮助用户存钱和取现，就可以成为一个体面的白领，&lt;strong&gt;但在这个时代，已经不可能了。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在机器逐渐发展的时代，所有人的知识必须升级。持续学习很有可能不只是一种生活理念或者是优秀的人才拥有的素质，而是每个人想要生存下去必须经历的生活方式。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;否则呢？《美国工厂》里给出了一个很好的例子。&lt;/p&gt;
&lt;p&gt;原来在通用汽车厂工作的工人，时薪是 29 美元一个小时；但是在福耀玻璃厂，继续当蓝领，每小时只能赚 12.84 美元，一半儿都不到。&lt;/p&gt;
&lt;p&gt;注意，这其中还有时间差距，十几年前的 29 美元，和现在的 29 美元，完全不是一个概念。&lt;/p&gt;
&lt;p&gt;按照影片的说法，在以前，孩子要想买双新的运动鞋，这些工人随随便便就买了，但现在不可能这么随性了。甚至，他们失去了自己的房子和汽车。&lt;/p&gt;
&lt;p&gt;&lt;img alt="film7" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-01/film7.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;这才是真真正正的，美国在过去十几年，很多人经历的生活变化。曾经幸福美好的生活，突然就没了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;看着《美国工厂》中的代顿，我总是在不可遏制地想：今天的硅谷，会不会就是明天的代顿？今天风光的码农们，会不会就是明天的这些美国蓝领？&lt;/p&gt;
&lt;p&gt;我也不知道答案。未来太远，我们只能把握今天。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-09-01/readme.md" rel="alternate"/></entry><entry><id>2019/2019-08-27/readme.md</id><title>慢增长</title><updated>2019-08-27T00:00:00-07:00</updated><content>&lt;h2&gt;慢增长&lt;/h2&gt;
&lt;p&gt;这两天，我的公众号不知道为什么，突然有了一大波关注，增速是平常正常增长量的 20 倍之多。这让我有些惶恐。&lt;/p&gt;
&lt;p&gt;为什么惶恐？&lt;/p&gt;
&lt;p&gt;熟悉我的人都知道，我其实是一个很“慢”的人。所谓的慢，并不是指执行力低。我自认为自己的执行力还是可以的。这里说的“慢”是指，通常对于一个计划，我会给出一个很长的时间周期。比如一年，三年，甚至五年，十年。&lt;/p&gt;
&lt;p&gt;之所以会这样，一个很重要的原因是，在我不长的人生历程中，我发现，“快”的结果通常都不尽如人意。至少在我的身上是这样。&lt;strong&gt;我是一个不适合“快”的人。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所以，在给自己制定计划的时候，我通常都不用任务量的方式做计划。&lt;/p&gt;
&lt;p&gt;比如打算看一本书，我不会要求自己每天看10页。虽然这样算下来，一整本《算法导论》，4 个月就能看完了。但实际情况却是：这样的计划，近乎一定无法完成。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;无法完成的计划，除了打击自己的自信心，没有任何好处，不如没有。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我是在列出了无数的计划，然后毫无意外地无数次完不成计划，之后无数次质疑自己，无数次人生观崩塌，然后无数次再把自己重新拾掇起来，无数次继续努力以后，得出这个结论的。&lt;/p&gt;
&lt;p&gt;现在我通常是怎么给自己做计划的呢？给自己制定任务时间。&lt;/p&gt;
&lt;p&gt;比如打算看一本书，我要求自己，每天看 40 分钟。这 40 分钟是看半本书还是 1 页纸，无所谓。只要高效利用这 40 分钟，努力吸收这本书中的知识，我觉得就够了。&lt;/p&gt;
&lt;p&gt;所谓每天进步一点点。&lt;/p&gt;
&lt;p&gt;毕竟，对于一本书，不同章节有难有易，有的地方进度快一些，有的地方进度慢一些，是很正常的。读懂，消化，学到知识才是目的。&lt;/p&gt;
&lt;p&gt;我发现，这个方法对我特别有效。虽然这样算下来，完整学习一本教材的时间，通常都会比我最初预估的时间慢三倍甚至五倍。但关键是，我终于能完成自己的目标了。慢一点又何妨？积累起来，我比过去那个制定了无数目标却都完成不了的自己，强了不知道多少倍。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;过去追求“快”，结果却很慢。真的慢下来，才发现：慢就是快。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;其实，我也无法做到每天都按时按量完成自己的学习任务。毕竟，长大了，不像在学校里，近乎所有的时间都可以用来学习。生活中，总会有各种意外打断原本的计划。&lt;/p&gt;
&lt;p&gt;但一旦明白很多事情都“快”不来，对于这种生活中的“意外”，也就不会那么焦虑了 —— 毕竟，对于大多数事情，不差那么一两天。&lt;/p&gt;
&lt;p&gt;“不差这一两天”，这听起来似乎很“违背主流价值观”，我也不建议你和你的领导这么讲，但我确实是这么认为的。&lt;/p&gt;
&lt;p&gt;已经有好几个同学，在不同的群里，扒出了我的扇贝账号。我在很早之前，就开始使用扇贝记单词了。最初只是想扩充词汇量，增强英语水平，但到现在，已经近乎是一个兴趣了。看见一个单词我不认识，我就觉得好奇，就会习惯性地拿扇贝单词给它记下来。（我没收扇贝一分钱广告费。）&lt;/p&gt;
&lt;p&gt;到现在，我在扇贝单词上已经积累了 55734 个单词，打卡 1310 天了，折合下来，大概是三年半的时间。&lt;/p&gt;
&lt;p&gt;&lt;img alt="shanbay" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-08-27/shanbay.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;如果对词汇量有概念的同学，一定明白，55734 个单词是一个很夸张的数字。因为，在英语为母语的国家，普通的成年人，词汇量大概是 2 万到 3.5 万之间。&lt;/p&gt;
&lt;p&gt;当然，我在扇贝单词上积累了 5 万多个单词，不代表我的词汇量真的就是 5 万多。实际上，怎样计算词汇量，也有不同的标准。再加上这其中包含了很多词组或者固定搭配，而不仅仅是单词而已。&lt;/p&gt;
&lt;p&gt;但是，这个数字确实也让我自己吓了一大跳。很多同学都说，波波老师太刻苦了。但是我自己知道，我一点儿都不刻苦，比我刻苦的人多了去了。&lt;/p&gt;
&lt;p&gt;我不是在谦虚，因为，我的打卡日历大概是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="calender" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-08-27/calender.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;大家可以看到，典型的三天打鱼，两天晒网。&lt;/p&gt;
&lt;p&gt;现在的我，一般每天都会阅读很多英文文章。遇到不认识的词，就在扇贝里记录下来。晚上有时间，就过一下；没时间，就算了。有的时候一天遇不到几个新词，有的时候则能遇到上百个，甚至几百个。&lt;/p&gt;
&lt;p&gt;虽然我在扇贝上真正打卡了 1310 天，但其实，这是大概六七年积累的量。&lt;/p&gt;
&lt;p&gt;慢不慢？当然慢。但是回头看，我却发现，自己比六七年前，真的进步了一大截。毕竟，在六七年前，说要和我一起学习英语的小伙伴，没坚持几个月就放弃了。&lt;/p&gt;
&lt;p&gt;在那几个月里，我估计他的进度比我快不少。但其实，站在更长的时间尺度上看，&lt;strong&gt;这短暂的“快”，意义并没有那么大。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;更关键的是，我意识到了，&lt;strong&gt;很多东西，是快不来的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于理工科的同学，本科课本上的大部分学科都能考前突击，甚至花一晚上的时间，把一个学期的课程内容掌握得八九不离十。我估计，在国内读大学的同学们，99% 都有类似的经历。我也有。&lt;/p&gt;
&lt;p&gt;但经验告诉我，这样“快速”掌握的知识，最终无一例外，只有可能忘记，到头来，真到需要的时候，还要重新学起。&lt;strong&gt;以为很快，其实很慢。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;还有很多知识，根本快不起来，比如英语，比如算法。近乎所有的“内功知识”，都有这样的特点。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;不仅仅个人学习如此，很多领域的创新，乃至产业的发展，亦是如此。&lt;/p&gt;
&lt;p&gt;比如这阵子网上讨论得很热的芯片和操作系统，在我看来，就是快不起来的领域。大家固然要努力奋斗，但是所有的进步也要符合客观规律。这个世界并非“人有多大胆，地有多大产”。&lt;strong&gt;对于很多领域来说，时间的积累是必须的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;再说一个大家可能不熟悉的领域——农业（包括养殖业）。我在国内创业的时候，访谈了很多农企，深知农业技术创新的艰难。&lt;/p&gt;
&lt;p&gt;为什么艰难？不是资源不到位。国家每年的一号文件，第一个提到的都是农业，每年大把的资金流向农业领域。&lt;/p&gt;
&lt;p&gt;但是，客观事实是，一茬农作物，怎么也要半年一年，才能有收成。甚至一些果树，要几年的时间，才能结果。常言道“桃三杏四梨五年，核桃结果十五年”。什么意思？桃树要三年结果；杏树要四年结果；梨树要五年结果；核桃树呢？十五年。&lt;/p&gt;
&lt;p&gt;慢不慢？太慢了。随便做个实验，几年过去了，搞不好还什么成果都没有。这种“慢”，和现代社会的节奏格格不入。这年头，没有几个人能熬住这种慢。因此，人才很难流向农业。&lt;/p&gt;
&lt;p&gt;但这个“慢”有没有什么好处呢？&lt;/p&gt;
&lt;p&gt;前一阵子，我在知乎看到的一个问答，很受启发。讲述了北欧国家是如何维持高福利的社会生活的。我将这个答案放在了这篇文章的“阅读原文”中。&lt;/p&gt;
&lt;p&gt;其中有一条，就是在产业发展上，北欧国家在尽量选择“&lt;strong&gt;高附加值，低发展速度&lt;/strong&gt;”的产业。&lt;/p&gt;
&lt;p&gt;“高附加值”好理解，“低发展速度”是怎么回事？&lt;/p&gt;
&lt;p&gt;互联网就是典型的“高发展速度”的领域。表现就是，技术更新换代快。结果就是，一款产品很难做到真正的“积累”，产品优势可能也就三五年的时间。&lt;/p&gt;
&lt;p&gt;之前我们还在用人人网，突然就都去微博了；微博玩着玩儿着，就都来到微信了。微信稳稳地站住了社交服务的脚跟了吗？抖音快手等视频社交又来势汹汹，谁也不知道未来会怎样。&lt;/p&gt;
&lt;p&gt;“高发展速度”的行业因为变化太快，所以很难有所积累，也因此，大家通常危机意识会很强。因为大家知道，自己被打败的时候，连渣儿都不会剩。所以，这些领域的人都在疯狂创新，生活节奏越来越快。&lt;/p&gt;
&lt;p&gt;不仅仅是中国，其实美国也是如此，美国最发达的产业，是那些“高附加值，高发展速度”的产业。比如互联网，比如金融。&lt;/p&gt;
&lt;p&gt;但欧洲国家，尤其是北欧国家，发展思路似乎完全不同。当然，这个不同背后，不一定完全是主观选择的结果，也是在很多历史政治经济等等方面的条件下，“被迫”采取的选择。但不管怎样，最终结果是：他们的支柱产业，大多是“高附加值，低发展速度”的产业。&lt;/p&gt;
&lt;p&gt;农业就是典型的这类产业。尤其是畜牧业。&lt;/p&gt;
&lt;p&gt;以乳制品为例，如果你认为养奶牛没什么技术含量，那就大错特错了，这里面的技术含量极高。在丹麦，能够做到 95% 的牧场，每毫升牛奶的细菌数低于 3 万。而美国标准是每毫升牛奶细菌数 10 万。至于中国，我查到的数据是 200 万。&lt;/p&gt;
&lt;p&gt;当然，我不是畜牧业专家，现在是不是有什么变化并不了解，我也完全没有不爱国的意思，毕竟我们改革开放以后，发展时间并不长，我们在一些方面和发达国家还有差距，这个要承认。&lt;strong&gt;我只是想用这个数据辅证，畜牧业是很有技术含量的一个行业。&lt;/strong&gt;达到丹麦的标准是极难的，需要漫长时间里的不断耕耘发展。在乳制品行业，可以和丹麦媲美的是荷兰，也是一个北欧国家。&lt;/p&gt;
&lt;p&gt;欧洲的其他国家也有类似的“产业优势”，比如德国的发动机，在我看来也是如此，“&lt;strong&gt;高附加值，低发展速度&lt;/strong&gt;”。这些产业变化很慢，一旦取得了成果，这些成果很容易积累下来，在很长时间里产生效益。所谓的“传统行业”。&lt;/p&gt;
&lt;p&gt;当然，这样的选择也有损失，毕竟，变化才代表着机会，在迭代速度快的行业里，才有超越的机会。中国如今取得现在的国际地位，一个很大的原因是，在这类变化很快的新兴行业抓住了机会。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;但是，这并不意味着，“快”，是唯一的选择。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;我很早就认命了，自知自己无法像马云乔布斯那样，创造出阿里或者苹果一样的商业帝国。因为我太“慢”了。&lt;/p&gt;
&lt;p&gt;研究生刚创业的时候，一腔热血，觉得自己要学习乔布斯，改变世界。&lt;strong&gt;Change the World&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;后来，来了美国，和一个 Google 的同学聊天，启发很大。其实，我们不需要改变世界，对这个世界产生一点影响，就够了。所谓的 &lt;strong&gt;Make an Impact&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;但是现在，我的观念又变了。我觉得，产生一点影响都是奢求。现在，我喜欢的说法，是产生一点涟漪。&lt;strong&gt;Make a Ripple&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;你看，我是不是越来越没追求？&lt;/p&gt;
&lt;p&gt;但我却觉得，我越来越进步了。因为，不再年少轻狂，理解了梦想和现实的分界。&lt;/p&gt;
&lt;p&gt;慢慢来，哪怕产生一点涟漪，或许才是实现梦想的开始。&lt;/p&gt;
&lt;p&gt;再不济，涟漪虽浅，但也证明，我在这里。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-08-27/readme.md" rel="alternate"/></entry><entry><id>2019/2019-08-21/readme.md</id><title>反设计：简单的音量调节控件，你能设计得有多糟糕？</title><updated>2019-08-21T00:00:00-07:00</updated><content>&lt;h2&gt;反设计：简单的音量调节控件，你能设计得有多糟糕？&lt;/h2&gt;
&lt;p&gt;在昨天公众号更新的文章 &lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-08-20/"&gt;&lt;strong&gt;《万能学习法》&lt;/strong&gt;&lt;/a&gt; 中，我以设计为例，向大家介绍了一个看起来很朴素的学习方法：&lt;strong&gt;将自己的作品不断去和大师的作品作对比，仔细总结，自己的作品到底哪里有不足，然后去改进。如此反复。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不过，有的时候，反向思维也是很有意思的事情。&lt;/p&gt;
&lt;p&gt;我们也可以设想，一个东西，最糟糕的情况，是什么样子？&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;最近，我在国外 Reddit 论坛上，看到了一个很有意思的帖子。大家可以点击 &lt;a href="https://www.reddit.com/r/ProgrammerHumor/search?q=volume&amp;amp;restrict_sr=on"&gt;这里&lt;/a&gt; 查看原帖。&lt;/p&gt;
&lt;p&gt;音量控制，是一个每个人都接触过的控件。无论是电脑操作系统，还是手机操作系统；无论是在线视频，还是游戏，都一定有音量控制的功能，让用户选择合适的音量。&lt;/p&gt;
&lt;p&gt;在大多数情况下，音量控制的 UI 都是这样一种形式：&lt;/p&gt;
&lt;p&gt;&lt;img alt="good" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-08-21/good.gif" /&gt;&lt;/p&gt;
&lt;p&gt;但是，这个帖子的标题是：&lt;strong&gt;对于音量控制这样一个控件，你能设计得有多糟糕？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这样一个问题，已经有了上百个网友的脑洞。通过这些设想，我们其实能总结出：&lt;strong&gt;到底什么是坏的设计？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;简单举几个例子。&lt;/p&gt;
&lt;p&gt;用户如果想要调整音量，一定是有非常明确的调整方向。或者用户觉得现在音量太大了，要调小一些；或者用户觉得现在音量太小了，要调大一些。&lt;/p&gt;
&lt;p&gt;但如果，我们的音量调整是随机的，就很麻烦了。&lt;/p&gt;
&lt;p&gt;比如：&lt;/p&gt;
&lt;p&gt;&lt;img alt="random1" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-08-21/random1.gif" /&gt;&lt;/p&gt;
&lt;p&gt;甚至是这样：&lt;/p&gt;
&lt;p&gt;&lt;img alt="random2" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-08-21/random2.gif" /&gt;&lt;/p&gt;
&lt;p&gt;好像很好玩的样子？🤔🤔🤔&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;说到好玩，&lt;strong&gt;游戏化&lt;/strong&gt;是这几年产品设计界很流行的概念。如果不了解的同学，可以查一查 &lt;strong&gt;Gamification&lt;/strong&gt; 这个概念。&lt;/p&gt;
&lt;p&gt;如果把音量控制做得具有游戏性，会怎样？&lt;/p&gt;
&lt;p&gt;比如，愤怒的小鸟？&lt;/p&gt;
&lt;p&gt;&lt;img alt="game1" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-08-21/game1.gif" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;或者是，打冰壶？&lt;/p&gt;
&lt;p&gt;&lt;img alt="game2" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-08-21/game2.gif" /&gt;&lt;/p&gt;
&lt;p&gt;看起来很绚丽，但我们真的需要这样的音量控制吗？&lt;/p&gt;
&lt;p&gt;不过，我觉得另外一个有意思的问题是，&lt;strong&gt;在什么时候，我们其实需要这样的控制方式？&lt;/strong&gt;🤔🤔🤔&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;当然，和“好玩儿”呈反方向的设计，就是&lt;strong&gt;过度专业&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;比如：&lt;/p&gt;
&lt;p&gt;&lt;img alt="expert1" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-08-21/expert1.png" /&gt;&lt;/p&gt;
&lt;p&gt;过度专业是很多理工专业的同学做设计的时候常犯的问题。在他们眼中，事情很复杂，琐碎，但是在用户眼中，是否真的需要这么专业的设置？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;与之相对应的，&lt;strong&gt;过度设计&lt;/strong&gt;，则是很多设计专业的同学容易犯的错误。&lt;/p&gt;
&lt;p&gt;比如，设计专业很多时候强调“直观感受”。但是，下面的例子，我觉得特别好的说明了：过度直观感受，不一定是好的设计。&lt;/p&gt;
&lt;p&gt;比如，对于音量来说，显然音量越大，就越“震撼”，那么，我们有没有必要把音量控制设计成这个样子？&lt;/p&gt;
&lt;p&gt;&lt;img alt="material" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-08-21/material.gif" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;另一类过度设计，则是应用最“前沿”的科技，做“烂创新”。&lt;/p&gt;
&lt;p&gt;这和创业同理。&lt;strong&gt;虽然好的创业项目通常都会和最前沿的技术做结合。但是，应用最前沿的技术，不一定是好的项目。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;比如，我们把音量控制和现在最流行的人工智能结合起来？&lt;/p&gt;
&lt;p&gt;&lt;img alt="ai" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-08-21/ai.gif" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;最后，作为产品设计，很多时候，我们要做价格设计。那么，音量控制这个功能如果做成这样？用户会是什么反应？&lt;/p&gt;
&lt;p&gt;&lt;img alt="money1" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-08-21/money1.png" /&gt;&lt;/p&gt;
&lt;p&gt;翻译：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;最右侧 - 免费：您可以（并且只可以）将音量调到 100%。（有声音就不错了）&lt;/p&gt;
&lt;p&gt;中间 - 我们最流行的套餐，2.97 刀一个月：可以无限次使用音量调节杆！&lt;/p&gt;
&lt;p&gt;最左侧 - 每年只要 29.95 刀，您不仅享受到了 17% 的折扣和无限次使用音量调节杆的权限，还包括：静音功能；使用快捷键迅速调节音量；保护您的音量隐私！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有的同学干脆直接在 iOS 上做了这么一个 demo：&lt;/p&gt;
&lt;p&gt;&lt;img alt="money2" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-08-21/money2.gif" /&gt;&lt;/p&gt;
&lt;p&gt;是不是很酷？🤔🤔🤔&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;这些设计方案，我称为是“&lt;strong&gt;反设计&lt;/strong&gt;”，因为，它们是向着设计目标的反方向 —— “不好用”，甚至是“不能用”去努力的。&lt;/p&gt;
&lt;p&gt;但很多时候，我觉得这样的反方向，也能为我们提供很多灵感。&lt;/p&gt;
&lt;p&gt;比如，在做算法设计的时候，我经常使用这样的方式。假设我的计算机算力无穷，空间无限大，对于一个算法问题，我可以怎么解决？然后，基于这个最差的解决方案，再去优化。&lt;/p&gt;
&lt;p&gt;为什么设想这样一个最差的解决方案是有意义的？&lt;/p&gt;
&lt;p&gt;一方面，一个差的解决方案，也是一个解决方案。它比什么都没有强。&lt;/p&gt;
&lt;p&gt;另一方面，一个差的解决方案，通常不言自明地向我们揭示了，这个解决方案到底差在哪里。很多时候，这将为我们提供优化的路径和方向。即使我们最终没有成功，我们也拥有了一个方向。&lt;/p&gt;
&lt;p&gt;不要小瞧这一点，拥有方向，比面对一个问题毫无头绪，强了太多。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-08-21/readme.md" rel="alternate"/></entry><entry><id>2019/2019-08-20/readme.md</id><title>万能学习法</title><updated>2019-08-20T00:00:00-07:00</updated><content>&lt;h2&gt;万能学习法&lt;/h2&gt;
&lt;p&gt;我曾拜一个师傅学习设计，更准确的说，是页面设计。&lt;/p&gt;
&lt;p&gt;为什么要学习页面设计，因为我觉得页面设计很实用，也很简单。说“简单”或许不准确，说“门槛低”应该更准确。&lt;/p&gt;
&lt;p&gt;毕竟，对于普通的开发者来说，做页面设计，其实主要是摆弄不同的文字或者图像元素，将他们进行合理的排列，调整方向，大小和布局；决定字体和颜色，大概也就如此，并不需要真正的去“创造”什么。&lt;/p&gt;
&lt;p&gt;实际上，任何一个人，在生活中，近乎都一定会接触这样的设计。从写一份文档进行排版，到做 PPT；从为自己设计一张名片，到搭建个人网站。&lt;/p&gt;
&lt;p&gt;设计有没有什么理论，技巧和原则？有。&lt;/p&gt;
&lt;p&gt;对于程序员朋友，我强烈推荐一本书，叫《给大家看的设计书》。这本书的英文名字其实更准确，叫《The Non-Designer's Design Book》，即《给非设计师看的设计书》，里面介绍了很多极其基本的设计原则。现在已经是第四版了。&lt;/p&gt;
&lt;p&gt;&lt;img alt="cover" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-08-20/cover.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;这本书我在拜师前就翻了两遍了。还是觉得对设计不得要领。总以为，还有很多更深刻的理论知识我没有掌握，所以设计出的页面总不能让自己满意。&lt;/p&gt;
&lt;p&gt;师傅听说我看过这本书，告诉我，你已经不需要学习其他理论知识了。对于你的需求，这本只有 200 来页的小册子足够了。&lt;/p&gt;
&lt;p&gt;那么这个师傅还能怎么教我呢？&lt;/p&gt;
&lt;p&gt;他问我：你随便说一个你觉得好看的页面设计。&lt;/p&gt;
&lt;p&gt;那个时候，苹果的设计风格风靡全世界。我说：苹果官网的页面设计就很好看啊。&lt;/p&gt;
&lt;p&gt;师傅说，那好，给你留一个作业。你一定都记得苹果官网主页都有什么内容吧？回去，不要看苹果官网，按照自己的记忆和想象，把苹果官网的页面设计重复出来，下次带来。&lt;/p&gt;
&lt;p&gt;就这么简单的一个事情，让我明白了什么叫“&lt;strong&gt;我以为我知道得一清二楚的东西，但我其实完全不知道&lt;/strong&gt;”。&lt;/p&gt;
&lt;p&gt;按理说，苹果官网我访问过那么多次；因为觉得它好看，还几次特意停留，长时间观察它的页面效果；甚至在浏览器的开发者模式下，看过其中的源码。&lt;/p&gt;
&lt;p&gt;但是，当我从零开始，要再次把这个页面的设计重复出来——注意，只是重复而已，没有任何创造——我却发现，我完全做不好。&lt;/p&gt;
&lt;p&gt;第二次，我拿着自己的“苹果主页设计”找到师傅，师傅只是打开苹果官网，和我的设计一点一点对照，对于其中的区别，讲了讲而已。其实，所有的理论我都懂。&lt;/p&gt;
&lt;p&gt;相信很多同学了解这个师傅的“套路”了。大家一定觉得，他的第二次作业是，再问我一个我觉得好的页面，让我复制吧？至少当时我是这么觉得的。&lt;/p&gt;
&lt;p&gt;但是，我错了。&lt;/p&gt;
&lt;p&gt;师傅的第二次作业是：怎么样？是不是对苹果官网的设计理解更透彻了？那么好。回去，不要看苹果官网，按照自己的想象，把苹果官网的设计再重复一遍，下次带来。&lt;/p&gt;
&lt;p&gt;是的，一样的作业。&lt;/p&gt;
&lt;p&gt;这次，我能让自己满意吗？答案是不能。虽然有进步，但是，我发现，还是有很多细节，是被自己忽略的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我以为我知道得一清二楚的东西，但我其实完全不知道。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;再找师傅，师傅依然是，打开苹果官网，和我的设计一点一点对照，对于其中的区别，讲了讲而已。当然，这次，会触及很多更细节的内容，比如字体的选择，字号的选择，颜色的选择，等等等等。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;这个师傅没教过我几次课。但是，我从他身上学到了一个重要的学习设计的方法：看再多理论都没用，去设计就好了。&lt;/p&gt;
&lt;p&gt;只是，自己动手设计以后，还没有结束。还要用自己的作品，和别人的优秀设计再去做对比，仔细总结，自己的设计和优秀的设计，区别到底是什么。自己欠缺的到底是什么。&lt;/p&gt;
&lt;p&gt;这步总结至关重要，&lt;strong&gt;所有的进步，都在这步总结中&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;如果你认为有的人似乎没有那么努力，但却能取得不错的成绩，我认为关键就是这步总结做得是否到位了。&lt;/p&gt;
&lt;p&gt;在一年的时间里，如果我做了 100 个设计，你只做了 10 个设计，但是，每个设计都认真和大师级作品做对比，总结，积累。我认为，大概率的，你的进步会更明显，取得的成就也会更大。&lt;/p&gt;
&lt;p&gt;但不要以为这是什么捷径。实际上，认真和别人的设计做对比，总结，修改，很有可能比再设计 90 个稿子更熬人，累心。经历过的人都懂。&lt;/p&gt;
&lt;p&gt;你为了做这 10 个设计，付出的努力，很有可能远远超过我做 100 个设计付出的努力。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;为什么讲这个故事？&lt;/p&gt;
&lt;p&gt;因为，有很多同学都问我：老师，听你的课，觉得自己都懂，但是一写代码，就不会写了，怎么办？&lt;/p&gt;
&lt;p&gt;我的回答非常简单：&lt;strong&gt;硬着头皮去写。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;实在写不出来了，开始总结，自己为什么写不出来？是语法原因？概念没搞懂？还是哪里的逻辑没有理清楚？&lt;/p&gt;
&lt;p&gt;然后，再看一遍视频，特别是你没有理清楚的那部分，再仔细体会一下课程中是怎么完成这段逻辑的。&lt;/p&gt;
&lt;p&gt;然后，关上视频，再尝试自己去写。&lt;/p&gt;
&lt;p&gt;还写不出来？很正常。继续仔细总结，自己为什么仍然写不出来。当然，你也有可能写出有 bug 的代码，那就仔细去调试。看看 bug 在哪里？关键是总结：为什么自己觉得已经理解的逻辑，落实到代码上，却写出了 bug？是不是某一个变量的语义，或者初值，或者某些边界，其实是自己没有在意的地方？甚至，其实，自己以为自己理解了，但实际并没有理解？&lt;/p&gt;
&lt;p&gt;然后再打开课程视频的代码，比较，总结。&lt;/p&gt;
&lt;p&gt;如此反复。&lt;/p&gt;
&lt;p&gt;说实话，看一遍视频，却写不出代码，这太正常了。&lt;strong&gt;要是看一遍就会了才不正常。&lt;/strong&gt;那样的话，算法也太简单了一点，也就不会有那么多同学因为算法感到头疼了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;这个方法只适用于学习设计和算法吗？&lt;/p&gt;
&lt;p&gt;当然不是。这个方法在我看来，是&lt;strong&gt;万能学习法&lt;/strong&gt;，可以应用在一切领域的学习中。&lt;/p&gt;
&lt;p&gt;说白了，&lt;strong&gt;不断地重复，不断地总结。不断地把自己的学习成果，和专业人士的成果作对比，不断反思，自己的差距在哪里。在不知不觉中，我们就进步了。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;有的同学可能会说，不断重复，怎么能激发创造力，做出创新呢？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;所有的创新，都根基于对基础的深刻理解，而不是信马由缰的异想天开。&lt;/strong&gt;只是，在大多数时候，我们只能看见创新者的创新，却看不见他们基础扎实的那一面。&lt;/p&gt;
&lt;p&gt;我们看到毕加索的《梦》，觉得这个好简单，我也能画。&lt;/p&gt;
&lt;p&gt;&lt;img alt="dream" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-08-20/dream.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;但是，我们看不到，毕加索自小就有着扎实的美术功底。&lt;/p&gt;
&lt;p&gt;比如，毕加索 13 岁的油画《老渔夫》&lt;/p&gt;
&lt;p&gt;&lt;img alt="painting1" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-08-20/painting1.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;毕加索 14 岁的油画《艺术家的母亲》&lt;/p&gt;
&lt;p&gt;&lt;img alt="painting2" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-08-20/painting2.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;毕加索 15 岁的油画《科学与慈善》&lt;/p&gt;
&lt;p&gt;&lt;img alt="painting3" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-08-20/painting3.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;很多人只看到毕加索的这只牛，觉得好简单，我也能画：&lt;/p&gt;
&lt;p&gt;&lt;img alt="niu1" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-08-20/niu1.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;却忽视了，这只牛，是从一头完整的牛，不断做减法，得到的艺术抽象的结果。&lt;/p&gt;
&lt;p&gt;&lt;img alt="niu8" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-08-20/niu8.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="niu8" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-08-20/niu7.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="niu8" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-08-20/niu6.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="niu8" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-08-20/niu5.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="niu8" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-08-20/niu4.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="niu8" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-08-20/niu3.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="niu8" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-08-20/niu2.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="niu8" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-08-20/niu1.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-08-20/readme.md" rel="alternate"/></entry><entry><id>2019/2019-08-07/readme.md</id><title>罗振宇和“乌鸦嘴”</title><updated>2019-08-07T00:00:00-07:00</updated><content>&lt;h2&gt;罗振宇和“乌鸦嘴”&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最近，罗振宇被骂了。&lt;/p&gt;
&lt;p&gt;被骂的原因，说白了，是因为不靠谱。&lt;/p&gt;
&lt;p&gt;2014 年，在北京大火的黄太吉，得到了罗振宇的加持。他说，黄太吉的成功，意味着过去商业世界所有观察角度全错。甚至一度，很多白领都在探讨，是不是去卖煎饼果子，才是通往财富自由的正确方式。&lt;/p&gt;
&lt;p&gt;结果，2016 年，黄太吉陆续关店。很多白领梦碎。&lt;/p&gt;
&lt;p&gt;2015 年 12 月 31 日，罗振宇第一次跨年演讲，他公开表示，乐视和暴风影音这样的公司，不能用传统的眼光看待，这是一个新物种，一定会改变我们的环境。&lt;/p&gt;
&lt;p&gt;结果大家也看到了，贾老板欠债高达 70 个亿，现在还躲在美国不敢回国；至于冯鑫，也已经被采取强制措施。这里面，盘子太大，水太深，咱也不知道，咱也不敢问。不管怎样，他们都是失败的，真要说改变了我们的环境，也是向着坏的方向。&lt;/p&gt;
&lt;p&gt;2016 年，罗振宇又公开表示看好罗永浩。彼时，罗永浩发布了锤子手机 M1。但与此同时，锤子手机正在以每年 4 亿人民币的速度亏损，财务问题从锤子科技诞生的那一刻起，就一直萦绕在这家网红企业上空。&lt;/p&gt;
&lt;p&gt;2019 年 3 月，罗永浩不再担任锤子软件（北京）有限公司法人代表。&lt;/p&gt;
&lt;p&gt;至于 ofo，说实话，罗振宇并没有在 ofo 失败前表示极度看好小黄车，只是认为戴维虽然当前深陷困境，但还年轻，未来还有很多可能。&lt;/p&gt;
&lt;p&gt;对此，我是非常认同的，不能算是罗振宇的“乌鸦嘴”，真要算，是无良自媒体强行凑黑材料，带节奏。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;就算抛去 ofo 不看，黄太吉，乐视，暴风影音，锤子科技，这么多证据，似乎也能说明罗振宇的“乌鸦嘴”了。&lt;/p&gt;
&lt;p&gt;但对此，其实我是不太同意的。照我看，罗振宇只是“单纯得可爱”而已。&lt;/p&gt;
&lt;p&gt;我曾经写过一篇文章，&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2017/2017-09-02/"&gt;《网购有助"脱单"?我还实现了一个准确率99.9%的癌症预测系统呢》&lt;/a&gt;，讲的是机器学习或者统计学领域的一个很朴素的思想。&lt;/p&gt;
&lt;p&gt;假设，有一种疾病，发病率是千分之一，即 0.1%，那么，我可以利用这个事实，不作任何事情，就发明出一个准确率高达 99.9% 的疾病预测系统。&lt;/p&gt;
&lt;p&gt;怎么做？很简单，对于任何一个人，我都无差别地预测：这个人是健康的。反正只有 0.1% 的人会得病，对这 0.1% 的人，我的预测是错误的；但是，对剩下的 99.9% 的人，我的预测都是正确的。整体看来，我的预测准确率高达 99.9%。虽然没有任何技术含量。&lt;/p&gt;
&lt;p&gt;这种情况，被称为数据极度倾斜（Extremely Skewed Distribution）。患病人群相比健康人群，少太多了。所以，“准确率”这个常用的指标，不再能反映出真实的问题。在统计学或者机器学习领域，会使用其他指标，来鉴别出，这样的预测，其实是无意义的。&lt;/p&gt;
&lt;p&gt;具体技术细节，在这里不探讨了，也不是这篇文章的重点。&lt;/p&gt;
&lt;p&gt;但是，这种数据极度倾斜的情况，在生活中，其实也很常见。&lt;/p&gt;
&lt;p&gt;创业就是如此。&lt;/p&gt;
&lt;p&gt;对于创业来说，失败的概率，是远远大于成功的概率的。大概是多少呢？我之前写的文章&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-07-31/"&gt;《成功者的年龄》&lt;/a&gt;中，引用了哈佛商业评论的一个数据：不管创始人的年龄是怎样的，创业成功率都稳稳地在千分之三以下。&lt;/p&gt;
&lt;p&gt;&lt;img alt="prob" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-08-07/prob.png" /&gt;&lt;/p&gt;
&lt;p&gt;在这样的一个概率分布下，很显然，&lt;strong&gt;去看衰你所知道的任何一个企业，才是当“先知”的最佳策略。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;其实，这样的例子，在生活中随处可见。&lt;/p&gt;
&lt;p&gt;算命是另外一个很好的例子。&lt;/p&gt;
&lt;p&gt;大多数算命先生，肯定要说你将要遇到一点儿小挫折，小磨难，而绝对不会说你一帆风顺。&lt;/p&gt;
&lt;p&gt;除了因为人家要靠消灾解难赚钱以外，还有一个重要的原因：这么说，是近乎百分百不会错的。&lt;/p&gt;
&lt;p&gt;所谓人生不如意，十有八九。&lt;/p&gt;
&lt;p&gt;我们身边很多人，也会有意无意地运用这套逻辑。具体表现就是，不管你做什么，他们都不看好，觉得八成做不成。&lt;/p&gt;
&lt;p&gt;如果你真的没做成，他们会洋洋得意地表示，你看你看，我早就跟你说了吧，这事儿有问题的；&lt;/p&gt;
&lt;p&gt;但倘若你做成了，他们会开心地表示，之前只是善意地提醒，能成功，我也很开心啊。&lt;/p&gt;
&lt;p&gt;怎么都不得罪人。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;看衰一个企业同理，煞有介事地表现出对一个企业的担心，指出运营模式的问题，其实是十拿九稳的方式。&lt;/p&gt;
&lt;p&gt;事实上，在现实世界中，大多数人也是这么做的。&lt;/p&gt;
&lt;p&gt;苹果自打乔布斯时代，依靠 ipod, iphone 等产品一路逆袭，也一路伴随着众多质疑声。随着乔布斯“驾崩”，库克“上位”，苹果药丸的声音更是没有断过。&lt;/p&gt;
&lt;p&gt;苹果的市值，也伴随着这些质疑声，慢慢超越了谷歌脸书等巨头，甚至一度排名世界第一。&lt;/p&gt;
&lt;p&gt;尽管如此，如果大家去翻翻媒体报道，最多的声音依然还是苹果药丸。&lt;/p&gt;
&lt;p&gt;为什么？&lt;/p&gt;
&lt;p&gt;因为大家都知道，苹果早晚药丸。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在商业界，有一个共识，就是&lt;strong&gt;企业法人的寿命，是远远小于自然人的寿命的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;说白了，就是没有什么企业能活 100 岁，哪怕你是现在的巨头。看看雅虎，柯达，就明白了。&lt;/p&gt;
&lt;p&gt;如果觉得这些企业的例子离我们太远，那就看看黄太吉，乐视，暴风影音和 ofo 吧。去翻翻三五年前的新闻，感受一下那时候的媒体报道，然后，再看看今天。&lt;/p&gt;
&lt;p&gt;我在&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-04-18/"&gt;《从巴黎圣母院的大火，到消逝的IT巨头》&lt;/a&gt;一文中，引过 BBC 的数据。BBC 在 2012 年，曾发表过一篇振聋发聩的文章，叫《Can a company live forever?》（一家公司可能永远活着吗？）其中的统计数据表示，现如今，美国标普 500 指数的公司，平均寿命竟然只有 15 年。&lt;/p&gt;
&lt;p&gt;换句话说，15 年后，大部分现在耳熟能详的大企业，都会被新的公司替换掉。&lt;/p&gt;
&lt;p&gt;中国呢？我能查到的数据是，中小企业的平均寿命仅 2.9 年，中国集团企业的平均寿命仅 7-8 年。&lt;/p&gt;
&lt;p&gt;这个数据不一定准确，毕竟，我国在数据统计方面，还不够完善。但是，趋势是毋庸置疑的：大多数企业的寿命，其实是很短的。&lt;/p&gt;
&lt;p&gt;所以，大家经常能看到新闻，什么硅谷神童，七八岁的样子，收到了苹果谷歌微软的 Offer，让小朋友长大以后来工作。小朋友们笑着表示，不要不要不要，我长大以后要自己做企业。&lt;/p&gt;
&lt;p&gt;可不是嘛。先不说打工和创业的区别，关键是，等小朋友长大了，苹果谷歌微软，指不定什么样子了呢。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所以，在大多数情况下，大多数人其实是悲观的。&lt;/p&gt;
&lt;p&gt;用这样的视角看，罗振宇这个也看好，那个也看好，结果看好的都黄了，真的是“单纯得可爱”。&lt;/p&gt;
&lt;p&gt;之所以给“单纯得可爱”加引号，是因为，商业的世界里，难免有各种利益纠葛。到底怎么回事儿，里面的人可能都说不清，更不要提外面的人了。&lt;/p&gt;
&lt;p&gt;如果这里没有什么利益关系，&lt;strong&gt;我倒是真的很欣赏罗振宇这个“敢夸”的性格。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;但是现在媒体这么一闹，不知道罗振宇先生会不会不再这么“单纯”了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;至于“乌鸦嘴”，其实有很多文学作品和科学研究，都在为乌鸦正名。&lt;/p&gt;
&lt;p&gt;不好的事情发生了，却怪罪乌鸦，这实在不能称为理性。&lt;/p&gt;
&lt;p&gt;不过，并不是所有人都追求理性。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;值得一提的是，科学研究表明，乌鸦的智商，其实是极其高的。&lt;/p&gt;
&lt;p&gt;人类大脑，约占自身总体重的 1.5%，普通渡鸦则约为 1.3％，有一种短嘴鸦，大脑重量，竟能占总体重的 2.3％。&lt;/p&gt;
&lt;p&gt;但人们依然说乌鸦不吉利。&lt;/p&gt;
&lt;p&gt;毕竟，&lt;strong&gt;把问题归咎于一种长相丑陋，叫声难听的鸟，比实际去分析清楚问题的真正原因，要简单太多。&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-08-07/readme.md" rel="alternate"/></entry><entry><id>2019/2019-08-06/readme.md</id><title>2019-08-06 - 无题</title><updated>2019-08-06T00:00:00-07:00</updated><content>&lt;p&gt;&lt;img alt="love" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-08-06/love.png" /&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-08-06/readme.md" rel="alternate"/></entry><entry><id>2019/2019-07-31/readme.md</id><title>成功者的年龄</title><updated>2019-07-31T00:00:00-07:00</updated><content>&lt;h2&gt;成功者的年龄&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;老婆的老板，是一位在认知神经科学领域很牛的教授。一名 50 多岁的大叔，不仅在专业领域是佼佼者，为人还谦和有礼，没有一点儿老板的架子。总之，就是给他干活儿很舒服的那种。&lt;/p&gt;
&lt;p&gt;有一次，我和我老婆突然在路上聊到了这位老板的履历，倒推回去，我们惊讶地发现，这名大牛老板，竟然是在大概 45 岁的时候，才拿到了正教授的职称。&lt;/p&gt;
&lt;p&gt;为什么说是“惊讶”呢？因为，如果你在学术圈混，近乎每隔那么几个月，就会听到“某某大牛 30 多岁获得某某学校正教授职称”的新闻。给人的感觉就是，人家 30 多岁都当上正教授了，你要是 30 岁连副教授都不是，就别在学术圈儿混了。&lt;/p&gt;
&lt;p&gt;可事实却是，这样一位圈内知名的大牛，45岁才是正教授。这个事实引起了我的好奇：平均来讲，大学的正教授，都是多少岁拿到的呢？&lt;/p&gt;
&lt;p&gt;我 Google 了一下，结果是这样的。&lt;/p&gt;
&lt;p&gt;&lt;img alt="google" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-31/google.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;答案是 55 岁&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;换句话说，能在 45 岁拿到正教授的职称，已经比平均水平提前 10 年了。而且是在一流的学府。确实是大牛。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个月，哈佛商业评论的一篇文章引起了我的兴趣。这篇文章统计了一下成功的企业，创始人的平均年龄是多大。&lt;/p&gt;
&lt;p&gt;大家可以先猜猜，大概多少岁？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;答案是 45 岁。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;哈佛商业评论的这篇文章的标题就是&lt;a href="https://hbr.org/2018/07/research-the-average-age-of-a-successful-startup-founder-is-45?gig_events=socialize.login"&gt;《Research: The Average Age of a Successful Startup Founder Is 45》&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;如果你经常看到 20 多岁或者 30 多岁创业成功的案例，很遗憾，这只是媒体制造的幻觉。&lt;/p&gt;
&lt;p&gt;为什么媒体更愿意报道“年轻人”创业成功的案例？从道理上讲，是因为人们更愿意看到这样的案例。&lt;/p&gt;
&lt;p&gt;每年的苹果开发者大会，让人印象最深刻的，就是那些最年轻的开发者。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;比如 2016 年最年轻的苹果开发者 Anvitha Vijay，九岁。&lt;/p&gt;
&lt;p&gt;&lt;img alt="ios" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-31/ios.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;比如 2017 年最年轻的苹果开发者 Yuma Soerianto。&lt;/p&gt;
&lt;p&gt;&lt;img alt="ios2" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-31/ios2.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;这些都让人不禁怀疑，是不是现在 9，10 岁的小朋友，都是编程达人了？&lt;/p&gt;
&lt;p&gt;于是，我查了一下。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;全世界的移动开发者大概有 8700 万人。平均年龄，北美地区是 34 岁；欧洲是 32 岁；亚洲是 27 岁。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;说回《哈佛商业评论》的这篇文章。他们基于美国的数据，调查了一下，&lt;strong&gt;大多数企业初创的时候，创始人的年纪是多大？答案是 42 岁。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;但是，这些企业，很多只是很小的生意，比如一家洗衣店或者饭馆。这些生意背后的老板从来不会进入公众的视野，也不会被媒体报道。&lt;/p&gt;
&lt;p&gt;为此，他们又特意看了一下大众比较关注的“高科技”企业。他们定义“高科技”企业的标准是：看一家企业是否有专利；是否被风险投资；以及是否雇佣了大量科学、技术、工程、数学，等专业领域的人才。&lt;/p&gt;
&lt;p&gt;结果并没有改变，这些“高科技”企业的创始人年纪，&lt;strong&gt;平均也是 40 出头。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;大家注意，在上面的“高科技”定义中，并没有特指软件行业。实际上，如果只看软件行业，创始人的平均年龄是 40 岁，但是看其他领域的高科技行业，比如生物医疗行业，&lt;strong&gt;创始人的平均年龄骤升至 47 岁。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当然了，这样去看所有的企业，大家觉得不过瘾。毕竟，大家只对那些超级成功的企业感兴趣。于是，这个团队抽出了所有这些“高科技”企业中，5 年时间里增长最快的那千分之一的企业，看他们的创始人平均年龄。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;答案就是这篇文章标题声称的：45 岁。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果考虑到成功率这个概念，就更夸张了。近乎每个存活的企业，背后都有成百上千家失败的企业作陪衬。如果考虑成功的概率，这个团队的数据分析结果表示，50 岁以后，创业成功的概率才是最大的。具体见下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="prob" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-31/prob.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;可能还会有同学说，不对啊。好像乔布斯 25 岁就创建了苹果公司？&lt;/p&gt;
&lt;p&gt;但是，大家忽视了，苹果公司至今看家的产品 —— iPhone，首次发布会，是在乔布斯 52 岁的时候。&lt;/p&gt;
&lt;p&gt;同样的道理，这篇文章认为，&lt;strong&gt;那些创始人年龄很小的企业，真正高速发展，成为足以改变世界的巨头的时候，大多都是在创始人步入中年以后。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;说回中国。就在上周，备受关注的科创板在上海正式开市。首批 25 家公司在上交所挂牌上市。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这 25 家企业的创始人，平均年龄是多大呢？答案是：52 岁。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;其中40 后，50 后，60后，70后，有 24 位，占 96% 之多。80 后只有孤零零的 1 位。90 后？抱歉，没有。&lt;/p&gt;
&lt;p&gt;你没有看错，还有 40 后，50 后。其中，40后，也就是大概 75 岁了，有 1 位；50 后，也就是大概 65 岁了，有 3 位。&lt;/p&gt;
&lt;p&gt;这位 40 后的创业者，叫&lt;strong&gt;尹志尧&lt;/strong&gt;，他先后获得中科大物理系学士的学位，北大化学系硕士学位，之后赴美留学，获得加利福尼亚大学洛杉矶分校物理化学博士学位。此后 20 年，一直在硅谷工作。&lt;/p&gt;
&lt;p&gt;2004 年，60 岁的尹志尧回国创业，此时，他已经手握近 300 项国际专利。&lt;/p&gt;
&lt;p&gt;2019 年，又是 15 年以后，这位大牛的企业成功在科创板上市。&lt;/p&gt;
&lt;p&gt;&lt;img alt="yin" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-31/yin.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;这样一位大牛，创建一家企业，在改革东风的吹拂下，尚需要 15 年的时间，还只是在科创板上市。我不明白为什么很多人会觉得， 20 来岁的小年轻，可以用 3 年的时间，做成改变世界的大企业。&lt;/p&gt;
&lt;p&gt;反正，我看到了凡客诚品，ofo，和最近网上一直讨论的暴风影音。&lt;/p&gt;
&lt;p&gt;另外，大家可能已经感受到了，尹志尧是一名名副其实的学霸。值得一提的是，科创板的大多数创始人都是学霸。据统计，这 25 人中，有 11 人拥有博士学历，有 8 人拥有硕士学历。这还是在那个年代。&lt;/p&gt;
&lt;p&gt;但是，就如同媒体喜欢宣传“低龄”创始人一样，媒体也喜欢宣传“没学历的”创始人。搞得大家都觉得读书无用。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;有意思的是，如果我们去看风投愿意投资的对象，很明显的，风投更愿意投给年轻人。&lt;/p&gt;
&lt;p&gt;为什么？&lt;/p&gt;
&lt;p&gt;《哈佛商业评论》给出了两个解释。&lt;/p&gt;
&lt;p&gt;第一个解释，很简单。风投获取信息的来源之一，也是大众媒体。所以，风投也被媒体带歪了，误以为年轻人的成功概率更高。&lt;/p&gt;
&lt;p&gt;但是，一个正儿八经的投资公司，有那么多分析师和内部消息，真金白银的把钱投下去，肯定是经过深思熟虑的。&lt;/p&gt;
&lt;p&gt;所以，或许，第二个解释更靠谱。&lt;/p&gt;
&lt;p&gt;那就是，虽然年轻人成功率低，但是，年轻人经验少，人脉少，通常财务状况也更紧迫，或者更急需证明自己。在这样的情况下，风投更容易以更低的价格介入，进而，让自己投资的收益更高。&lt;/p&gt;
&lt;p&gt;换句话说，&lt;strong&gt;风投不是选择成功率更高的企业，而是选择收益率最大的企业，进行投资。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;但是，人到中年，经验足够丰富了，接触的人和事更多，思考也更加成熟，对投资的看法就会产生巨大的不同。毕竟，我在北大商学院，还看到很多老板，坚持不融资，不上市。按照他们的话说，我的企业利润这么高，效益这么好，为什么非要拿别人的钱？为什么非要让自己变成给投资人打工？&lt;/p&gt;
&lt;p&gt;从这个视角看，&lt;strong&gt;投资人青睐年轻的创始人，很大一部分原因，是年轻创始人更容易被欺负。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这多多少少有些像企业更喜欢年轻的职员。因为他们要的工资更少，加班也没意见，天天 996，也不见怎么声张。搞不好还在网上怼那些对 996 怨声载道的中年人：不愿意 996，那就辞职呗。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;很多同学问我，要 30 岁了，怎么办？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;其实，我也不知道怎么办。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;但我就是觉得，什么时候开始都不晚。哪怕自己 60 岁，80 岁。&lt;/p&gt;
&lt;p&gt;很多人告诉我们，高考以后，上了大学，就轻松了。&lt;/p&gt;
&lt;p&gt;但相信所有大学生都明白，上大学根本不轻松。高考根本不是结束，只是开始。&lt;/p&gt;
&lt;p&gt;很多人告诉我们，大学毕业，找个好工作，就轻松了。&lt;/p&gt;
&lt;p&gt;但相信所有职场人都理解，上班根本不轻松。找到工作根本不是结束，只是开始。&lt;/p&gt;
&lt;p&gt;所以，30 岁，35 岁，40 岁，还没车子，房子，票子，工作还不稳定，事业也还不成功。&lt;/p&gt;
&lt;p&gt;怎么办？怎么办？怎么办？&lt;/p&gt;
&lt;p&gt;其实，回头看，对于大多数所谓的成功者而言， 30 岁，35 岁，40 岁，只是开始。&lt;/p&gt;
&lt;p&gt;不要着急，路，是一步一步走出来的。&lt;/p&gt;
&lt;p&gt;没有人是例外。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;大家加油！&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-07-31/readme.md" rel="alternate"/></entry><entry><id>2019/2019-07-22/readme.md</id><title>关于图论算法的杂七杂八</title><updated>2019-07-22T00:00:00-07:00</updated><content>&lt;h2&gt;关于图论算法的杂七杂八&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Google 有一道很经典的面试题。大意就是，在一个二维平面上，有一些自行车，用字母 B 表示（Bike）；还有一些人，用字母 P 表示（Person）。比如下图，有两个人，四辆自行车。其中*代表什么都没有。&lt;/p&gt;
&lt;p&gt;&lt;img alt="graph" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-22/graph.png" /&gt;&lt;/p&gt;
&lt;p&gt;现在，要给每个人都分配一辆自行车，并且要求所有人到分配的自行车的距离总和最小。求分配方案。&lt;/p&gt;
&lt;p&gt;距离的定义是曼哈顿距离。&lt;/p&gt;
&lt;p&gt;原始的问题有一个条件：假设所有人到所有自行车的距离都不相同，该怎么处理？&lt;/p&gt;
&lt;p&gt;这是一个初等图论问题。用 BFS 就能解决。&lt;/p&gt;
&lt;p&gt;但是，这个条件稍微变一下，这个问题的难度陡然增加：如果有可能有多个人，到多辆自行车，距离相等，怎么办？&lt;/p&gt;
&lt;p&gt;在这种条件下，一辆自行车可能离多个人的距离都是最近的，且距离相等，这辆自行车该分配给谁呢？随机分配是不行的，因为全局可能只有一个最优解。&lt;/p&gt;
&lt;p&gt;但其实，这也是一个经典的图论算法问题。带权图的最小匹配。&lt;/p&gt;
&lt;p&gt;当然，这个问题其实还有一个更简单的版本，就是不要求一人一车的匹配关系。可以理解成把题目中的自行车换成小卖部。要求每个人找到离自己最近的小卖部，大热天儿的，买根冰棍吃。多个人可以到同一个小卖部。&lt;/p&gt;
&lt;p&gt;这基本上就是 Leetcode 上的 286 号问题了。有兴趣的同学可以找来看一看。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;去年，有一个同学，给我在慕课网上的课程《玩转数据结构》打了一个差评。原因是：课程不包含图论算法。&lt;/p&gt;
&lt;p&gt;我当时很不爽。虽然我知道，近乎在所有的大学教育体系中，图论都是和数据结构一起教的。但是，在我的观念中，图论算法和其他数据结构的知识有很大的不同。再加上一门课程的时间有限，所以我将图论算法和其他数据结构分开了。这一点，在我的课程导论中，特意强调了 n 遍。&lt;/p&gt;
&lt;p&gt;我们谈起一般的数据结构，比如数组，链表，队列，栈，二分搜索树，红黑树，哈希表，等等等等，这些数据结构主要的作用是内存数据存储。我们关注如何把数据放进这些结构中，如何取出来，如何删除，如何更新。说白了，就是在内存中做CRUD。不同的数据结构，有不同的优势，适用于不同的场景。&lt;/p&gt;
&lt;p&gt;因此，在一般语言的标准库中，都有一个概念，叫容器类。不同的容器类，有着自己的优缺点和适用场景，其实本质就对应了不同的数据结构底层实现。我的《玩转数据结构》课程，基本上就是在和主流的容器类设计对标，讲解容器类的底层原理，并一一进行了代码实现。学习完《玩转数据结构》，大家应该能实现出一个属于自己的小型容器类库。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;但是，图论不同。大家应该可以观察到，近乎没有一个语言的标准库中包含“图”这种数据结构。&lt;/p&gt;
&lt;p&gt;为什么？因为在通常情况下，我们不需要使用“图”这种数据结构做数据存储。如果我们把数据组织成为“图”的形式，一定是因为要计算一些隐藏在这些数据关系中的属性。&lt;/p&gt;
&lt;p&gt;比如，我们将城市交通系统组织成图的形式，绝对不是为了存储这些城市的信息，而是为了能方便的计算出：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;从某个城市，到另外一个城市，最短时间应该怎么走；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;路费最小应该怎么走；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;是不是有些城市和另外一些城市没有联通；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;是不是有一些路或者城市，担任着重要的交通枢纽作用，负荷过大；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果新建一条公路，在哪两个城市之间修建最好；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;等等等等。&lt;/p&gt;
&lt;p&gt;对于这些问题的求解，都要使用图论算法来解决。&lt;/p&gt;
&lt;p&gt;但是，解决不同的问题，无论是从图的存储角度，还是算法的细节，都有着细微的区别和变化，这使得对于一般语言来说，创建一个图的标准库，太沉了。&lt;/p&gt;
&lt;p&gt;正因为如此，我决定把图论从数据结构中拆出来。&lt;/p&gt;
&lt;p&gt;虽然，通过学习我的图论课程，也能够实现一个小型的图论算法库，但是，我更希望同学们能够体会使用图论模型解决问题的灵活性，掌握使用图论对问题建模的能力。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;说到使用图论对问题建模，我想到了我在公众号写过一篇文章：&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-04-11/"&gt;《什么叫学会了？自己到底有没有学会？知识掌握的七个境界》&lt;/a&gt;，其中在“灵活应用的境界”中，提及了这样两道经典面试问题。&lt;/p&gt;
&lt;p&gt;过河问题：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;农夫需要把狼、羊、菜和自己运到河对岸去，只有农夫能够划船，而且船比较小。除农夫之外每次只能运一种东西。还有一个棘手问题，就是如果没有农夫看着，羊会偷吃菜，狼会吃羊。请考虑一种方法，让农夫能够安全地安排这些东西和他自己过河&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;装水问题：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;有两个水桶，一个装5升，一个装 3 升。怎么利用水桶，得到 4 升水？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这两个问题都可以使用图论的方法解决。&lt;/p&gt;
&lt;p&gt;我的老婆看了这篇文章，马上问我怎么求解。&lt;/p&gt;
&lt;p&gt;你看，我老婆对图论的掌握，没有达到“灵活应用的境界”。&lt;/p&gt;
&lt;p&gt;当然了，人家本身也不是搞计算机的，没必要对图论的掌握达到“灵活应用的境界”。人家是搞认知神经科学的。&lt;/p&gt;
&lt;p&gt;但是，有意思的是，其实在认知神经科学领域，大量使用图论模型。认知神经科学，主要是研究人脑的运作机制。其中，一个主流的方式，就是将人脑不同认知区域看作是图的顶点，认知区域之间的信号传输看做是图的边。&lt;/p&gt;
&lt;p&gt;所以，很多次，我和老婆交流认知科学领域的问题，最后竟然发现，其实，我们是在讨论一个图论算法。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;就在上周，七月老师和我交流了一个多小时。我们讨论，对于电商业务场景中的 SKU 查找问题，有没有效率更高的算法。&lt;/p&gt;
&lt;p&gt;由于我平时很少接触这类业务场景的问题，所以，搞明白这个问题的本质，用了半个小时。但是，当我搞明白这个问题以后，竟然发现也能抽象成为一个图论问题。&lt;/p&gt;
&lt;p&gt;我正在思考能否把这个问题再做一下抽象，有时间单独写文描述一下。&lt;/p&gt;
&lt;p&gt;不过，这样的业务底层算法问题，通常的业务开发者应该不需要管。我一下子就想到了图数据库这个概念。&lt;/p&gt;
&lt;p&gt;这个名词，连同大名鼎鼎的 NoSQL，我在各类科技新闻的标题上看到无数遍了，但因为犯懒，一直没有深入去理解到底是怎么回事儿，更别提上手实践了。&lt;/p&gt;
&lt;p&gt;借着这个机会，我简单学习了一下图数据库的思维和应用场景，果然，很多业务问题，可以直接靠图数据库，得到更好的解决。而图数据库的底层实现，恰恰就是图论算法。&lt;/p&gt;
&lt;p&gt;上一次我关注数据库的最新发展，学习的还是动态数据库的概念。&lt;/p&gt;
&lt;p&gt;每每看到数据库的发展，我都会感慨，这样一个“古老”的领域，仍然在 21 世纪不断推陈出新，各种新概念层出不穷，可见计算机科学领域依然年轻蓬勃的生命力。&lt;/p&gt;
&lt;p&gt;而更关键的是，&lt;strong&gt;这些最新的发展，骨子里都离不开那些“古老”而经典的算法和数据结构。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我的研究生毕业设计论文，是做动作捕捉和建模。简单地说，就是在身上放传感器，做各种姿态的运动。计算机获取传感器的信号，然后在虚拟的世界中恢复真实世界中人的动作。&lt;/p&gt;
&lt;p&gt;大概就是这么个意思：&lt;/p&gt;
&lt;p&gt;&lt;img alt="motion" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-22/motion.png" /&gt;&lt;/p&gt;
&lt;p&gt;对于这个任务，如果传感器足够多，就能恢复的很好。但是，传感器太多，就会很麻烦，不方便。&lt;/p&gt;
&lt;p&gt;能不能使用更少的传感器完成这个任务，是我的毕业论文核心。&lt;/p&gt;
&lt;p&gt;使用更少的传感器，就需要在算法中，添加一定的预测能力。比如通常需要 32 个传感器，现在我只用 4 个传感器，那就需要用这 4 个传感器的信息，想办法预测出剩下的 28 个传感器的信息。&lt;/p&gt;
&lt;p&gt;在我读研的时候（10年前），机器学习还不火。甚至在我的印象中，我还没有听说过“机器学习”这个名词，更别提深度学习了。现在很多机器学习算法，那时我都是在一门叫做“模式识别”的课程中接触的。&lt;/p&gt;
&lt;p&gt;对于我要解决的这个运动捕捉问题，由于还牵扯时间序列的问题，最后，我选择基于大名鼎鼎的隐马尔科夫的模型（HMM）进行实现和改进。相信很多同学都听说过这个模型，在语音识别等领域，有着重要的应用。&lt;/p&gt;
&lt;p&gt;现在的知识体系，通常把隐马尔科夫模型，归入一类叫做&lt;strong&gt;概率图模型&lt;/strong&gt;的范畴中。在这个范畴中，除了隐马尔科夫模型，还有诸如贝叶斯网络，马尔科夫随机场，条件随机场等模型。很多深入一些的人工智能课程，会专门介绍概率图模型。&lt;/p&gt;
&lt;p&gt;简单来说，概率图模型就是结合了概率论和图论的模型，用来解决一些预测问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;又是图论。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;大名鼎鼎的迪杰斯特拉，英文名是 Dijkstra，相信大家都知道。因为有一个以他命名的非常著名的算法：有权图的单源最短路径算法，又叫 Dijkstra 算法。&lt;/p&gt;
&lt;p&gt;通常计算机专业的学生，会在至少三门不同的课程中学习这个算法，分别是数据结构，离散数学，和计算机网络。&lt;/p&gt;
&lt;p&gt;但是，如果你翻开迪杰斯特拉的履历，就会发现，迪杰斯特拉的很多成就，都集中在在编译原理领域。&lt;/p&gt;
&lt;p&gt;为什么？因为编译原理是图论算法应用的重灾区。随手拿起一个编译原理领域的问题，基本都能被抽象成一个图论问题。&lt;/p&gt;
&lt;p&gt;最典型的就是内存管理，我随手搜了一个网上讲解 JVM 垃圾回收机制的示意图，大家可以感受一下。&lt;/p&gt;
&lt;p&gt;&lt;img alt="gc" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-22/gc.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;至于计算机网络，就不用说了，天然就是一个图模型，每一个物理设备都是一个节点。设备间的通信是边。&lt;/p&gt;
&lt;p&gt;&lt;img alt="networks" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-22/networks.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;操作系统亦是如此。我在网上找了一个讲解任务调度算法的文章，其中的配图如下：&lt;/p&gt;
&lt;p&gt;&lt;img alt="schedule" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-22/schedule.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;当然，我的课程只是图论算法基础，不会涉及这些内容。但我希望通过这些例子告诉同学们，我们学习这些基础的算法和数据结构有什么用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;它们是组建更高级逻辑的基石，是学习计算机科学领域更高级内容的前提。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;肯定还是会有同学跟我讲，“我觉得我在工作中，没用到过这些算法啊？”&lt;/p&gt;
&lt;p&gt;对此，我不想反驳，我在我的公众号文章 &lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-03-18/"&gt;《学算法有什么用，没用》&lt;/a&gt; 中，已经说得很清楚了。&lt;/p&gt;
&lt;p&gt;再次强调一遍文中的观点，&lt;strong&gt;这个时代，我不认为每一名程序员都需要极佳的算法基础，才能做出成绩。&lt;/strong&gt;计算机已经是一个极其广阔的专业领域了。&lt;/p&gt;
&lt;p&gt;但是，如果你对图论算法感兴趣，或者觉得有用，或者正在准备像头条这样的偏重算法考察的大厂面试。&lt;/p&gt;
&lt;p&gt;或许，我在慕课网上的新课——&lt;strong&gt;《玩转图论算法》&lt;/strong&gt;，是一个好的开始。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;对了，现在还有优惠，便宜 50 块钱。&lt;/p&gt;
&lt;p&gt;新课上线，还有更新期，请大家谅解。&lt;/p&gt;
&lt;p&gt;二维码如下：&lt;/p&gt;
&lt;p&gt;&lt;img alt="ad" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-22/ad.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;课程涉及的基本内容，可以在课程宣传页，点击“章节介绍”看到。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-07-22/readme.md" rel="alternate"/></entry><entry><id>2019/2019-07-20/readme.md</id><title>吴军说的基因论到底有没有道理？</title><updated>2019-07-20T00:00:00-07:00</updated><content>&lt;h2&gt;吴军说的基因论到底有没有道理？&lt;/h2&gt;
&lt;p&gt;最近，吴军接受《头条有约》的采访，被喷了。被喷的原因有很多，毕竟，整个访谈的信息量还是很大的。其中，有一条，就是关于“企业基因论”。按照吴军的说法，腾讯的 toB 业务没有发展起来，是因为腾讯没有做 toB 业务的基因。&lt;/p&gt;
&lt;p&gt;这说法，和吴军 2012 年点评腾讯一模一样，不过彼时，吴军是向腾讯的搜索业务开炮。&lt;/p&gt;
&lt;p&gt;2010 年 4 月，吴军离开 Google，担任腾讯主管搜索业务的副总裁。结果大家也看到了，腾讯在搜索领域并没有什么成绩。吴军两年后一走了之，又回到了 Google。2012 年  8 月，重回谷歌的吴军在接受媒体采访时说：腾讯做不起来搜索，是因为腾讯没有搜索基因。&lt;/p&gt;
&lt;p&gt;这确实有点儿甩锅的嫌疑。更何况，之后，吴军无论是出书还是卖课，都不忘挂上自己在腾讯做过高管的头衔，但其实并没有大的成绩。这么说老东家，于情，我认为是不合适的。&lt;/p&gt;
&lt;p&gt;但是，于理，吴军的“企业基因论”到底有没有道理？&lt;/p&gt;
&lt;p&gt;实际上，吴军一直是“企业基因论”的推崇者。比如，对于百度在移动领域连连失利，吴军曾经在采访中一言以蔽之：百度没有移动互联网的基因。&lt;/p&gt;
&lt;p&gt;在《浪潮之巅》一书中，吴军也一直强调这一点。&lt;/p&gt;
&lt;p&gt;比如说到 IBM，吴军认为，IBM 的基因就决定了它不可能领导以个人用户为核心的 PC 产业；&lt;/p&gt;
&lt;p&gt;再比如，AMD 的市场策略从来不是创新，而是不断推出与 Intel 兼容的，但是更便宜的替代品，为什么？这是 AMD 的基因决定的；&lt;/p&gt;
&lt;p&gt;至于桌面时代的王者——微软，在互联网时代接连失利，也是因为微软的基因不适应互联网时代...&lt;/p&gt;
&lt;p&gt;不仅仅是贬公司，吴军夸一个公司的思路，基本上也是基因论。&lt;/p&gt;
&lt;p&gt;比如说思科经常收购自己的员工辞职出去创业成立的小公司，让自己基本垄断了互联网路由器和其他重要设备的技术，这种策略的实施，是思科的基因使然；&lt;/p&gt;
&lt;p&gt;比如，说苹果能够从危机时代，顺利通过 iPod, iPhone 等产品，过渡适应新时代，是因为苹果从来都有创新基因；&lt;/p&gt;
&lt;p&gt;再比如说，摩托罗拉的产品，稳定性和鲁棒性都很好，从某种程度讲，是摩托罗拉的基因...&lt;/p&gt;
&lt;p&gt;上面的例子，全部选自吴军的《浪潮之巅》，近乎是原文。《浪潮之巅》整本书，都在强调“企业基因论”。其实，吴军对此并不避讳，因为他在微博中就这么说过：&lt;/p&gt;
&lt;p&gt;&lt;img alt="weibo" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-20/weibo.jpg" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我的每一本书都提出一些口号式的观点...《浪潮之巅》提出的就是公司的基因决定论...&lt;/p&gt;
&lt;p&gt;微博：@吴军博士&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;从我的角度看，吴军的这种所谓的“企业基因论”，和我在 &lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-04-23/"&gt;《还有没有机会逆袭？谈成功者的困境。》&lt;/a&gt; 一文中的观点是一回事儿。&lt;/p&gt;
&lt;p&gt;说白了，就是一个企业因为某种模式成功了，就会守住这种模式。这种模式带给了这个企业成功，这个企业就不会轻易放弃这种模式了，甚至在很多新的业务场景下，依然坚持这种模式，哪怕有所谓的创新，也多多少少都会带有这种模式的影子。&lt;/p&gt;
&lt;p&gt;但是，没有任何一种模式是万金油，套用同样的模式必然会经历失败。&lt;/p&gt;
&lt;p&gt;结果就是：你在那件事儿上成功了，在这件事儿上失败了，就是没有做这件事儿的基因，只有做那件事儿的基因。&lt;/p&gt;
&lt;p&gt;有毛病吗？没毛病。但就是有点儿欠水平。&lt;/p&gt;
&lt;p&gt;因为，按照这个逻辑，可以无差别地解释任何企业失败的原因。这样做商业评论，也太简单了一点。毕竟，无论是对于当事人，还是旁观者，更想知道的是：自己下一次要怎样能做得更好；是否有一定的方法论，能够做到比现在更好一点，甚至取得成功。&lt;/p&gt;
&lt;p&gt;这就好比：我代码写得还行，但文章写得不好，你就说我没有写文章的基因。我肯定不服。因为我明白，我代码写得还行，是因为从小就写代码，坚持写了十多年了；你要让我也从小写文章，坚持写十多年，搞不好我文章写的比代码还好。&lt;/p&gt;
&lt;p&gt;对于我来说，我更想知道，我该怎样更加系统地训练，让我的文章能写得更好。&lt;/p&gt;
&lt;p&gt;“没有基因”，是毫无操作性的评论。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;我在 &lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-05-06/"&gt;《正式邀请你，和我一起，用技术人的眼光，探索世界》&lt;/a&gt; 一文中曾说，我在北京做的时间最长的创业项目，是和北大光华管理学院合作的。近乎整整五年的周末，我都是在光华管理学院的课堂上度过的。在这些课堂上，分析一个企业的成败是家常便饭。&lt;/p&gt;
&lt;p&gt;除了常规技术性的分析（股权分配，组织架构，商业模式，等等等等），实战派的老师通常很强调一点：&lt;strong&gt;一个商业评论是否有操作性。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;没有操作性的评论，对于企业主来说，没有意义。&lt;/strong&gt;说 Google 平庸很简单，不需要吴军出马，很多 10 岁以下的小朋友现在都这么说了。但关键是，Google 怎么平庸了？要怎么做才能摆脱平庸？这样的评论才能看出水平。&lt;/p&gt;
&lt;p&gt;对了，也不要说什么 Google 要持续创新；要抓住痛点；要引领潮流；，要关注好隐私问题；在个人用户和企业用户之间掌握平衡；在免费项目和收费项目之间掌握平衡...... 这些听上去很对的话，&lt;strong&gt;都是废话&lt;/strong&gt;，一个小学生都能说。&lt;/p&gt;
&lt;p&gt;实际上，&lt;strong&gt;商业评论是非常专业的事情。如果上升到咨询的角度，就更专业了。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;虽说评论一个冰箱的制冷效果，不需要你也能制冷；但是如果你了解制冷的原理，明白一台冰箱制冷效果不好的原因，甚至能够提出清晰地技术方案，让一台冰箱的制冷效果更好，最大化，甚至超越所有其他冰箱。显然，&lt;strong&gt;这才是你有价值的体现。&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;最后，说一个曾经给我印象最深的案例。&lt;/p&gt;
&lt;p&gt;美国作为一个“车轮上的国家”，汽车产业一直很发达。大名鼎鼎的福特汽车众所周知，加上通用和克莱斯勒，这些车企塑造了美国上世纪汽车产业的辉煌。而底特律，则是那个时代的“硅谷”。&lt;/p&gt;
&lt;p&gt;但是上世纪六七十年代，日本车企大举进入美国市场，竟然逐渐蚕食掉了美国汽车品牌的市场份额。&lt;/p&gt;
&lt;p&gt;为什么？质美价廉。&lt;/p&gt;
&lt;p&gt;但是，要知道，当时的日本，还是战败国的身份，经济体量也和美国相差甚远。日本怎么做到这一点的？&lt;/p&gt;
&lt;p&gt;这里面，原因有很多，大家如果随便在网上搜一搜，就能搜到这个案例，基本上是任何一个 MBA 学生必学的经典案例。&lt;/p&gt;
&lt;p&gt;这些原因中，有一个原因，我特别感兴趣，而且是美国人怎么都学不来的。&lt;/p&gt;
&lt;p&gt;以自由民主为傲的美国人，平时自由散漫惯了，管理成本很高，再加上很多人有吸毒的恶习，经常旷工，根本无法实施精细化管理；相较而言，日本人以集体主义精神为主，更加重视自己的工作，也更加服从上级管理，勤勉，肯吃苦，这就使得丰田等车企的效率奇高。&lt;/p&gt;
&lt;p&gt;与此同时，美国工会制度普遍完善，使得美国的汽车工人的权益被最大化。从某种程度，这伤害了美国汽车品牌的自身竞争力。&lt;/p&gt;
&lt;p&gt;据统计，美国车企用于支付员工养老金和医保的成本，平均摊到每一辆汽车上，让每辆车的成本增加了 1400 美元，而公会不发达的日本，这项支出，平均摊到每辆汽车上，仅有 215 美元。&lt;/p&gt;
&lt;p&gt;至于员工的带薪休假等成本，据计算，让美国车企的每辆车贵了 630 美元，而这些，在当时的日本公司，统统不存在。&lt;/p&gt;
&lt;p&gt;这样算下来，同等性能的汽车，日本车比美国车便宜 2000 美元，大概占当时汽车售价的 10%。&lt;/p&gt;
&lt;p&gt;如样明显的成本优势，日本汽车蚕食美国汽车市场，简直是理所当然。&lt;/p&gt;
&lt;p&gt;美国汽车改得了吗？改不了。&lt;/p&gt;
&lt;p&gt;为什么？&lt;/p&gt;
&lt;p&gt;吴军说了，基因使然。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;2019.6.20 &lt;/p&gt;
&lt;p&gt;于 Santa Clara&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-07-20/readme.md" rel="alternate"/></entry><entry><id>2019/2019-07-11/readme.md</id><title>不小心，较真儿了：高德纳和特朗普</title><updated>2019-07-11T00:00:00-07:00</updated><content>&lt;h2&gt;不小心，较真儿了：高德纳和特朗普&lt;/h2&gt;
&lt;p&gt;首先，和大家致歉。&lt;/p&gt;
&lt;p&gt;在这一周更新的文章 &lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-07-09/"&gt;《神一样的随机算法》&lt;/a&gt; 中，我介绍了大名鼎鼎的 Knuth 洗牌算法。顺便简单地介绍了一下大神 Knuth。&lt;/p&gt;
&lt;p&gt;介绍的时候，煞有介事的表示：中文名，&lt;strong&gt;高纳德&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;但这是错的，马上有同学表示，Knuth 老爷子的中文名是&lt;strong&gt;高德纳&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;我到维基百科一查，还真是。&lt;/p&gt;
&lt;p&gt;&lt;img alt="knuth" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-11/knuth.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;由于 Donald 的发音，很容易联想到：其实“高德纳”是一个错误的翻译，但将错就错，约定成俗了。&lt;/p&gt;
&lt;p&gt;所以，我大颜不惭地发表了如下言论：&lt;/p&gt;
&lt;p&gt;&lt;img alt="wechat1" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-11/wechat1.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;马上有同学指出：其实在 TAOCP 的中文版的序言中，就曾经介绍过“高德纳”这个中文名字的来源。&lt;/p&gt;
&lt;p&gt;额？&lt;/p&gt;
&lt;p&gt;如果会正儿八经地介绍了名字的来源，那这个名字肯定就不会是错误的了，一定有来头。&lt;/p&gt;
&lt;p&gt;但是我手头没有 TAOCP 的中文版，当年只是英文版翻了半本（其实不到）而已。。。&lt;/p&gt;
&lt;p&gt;赶紧去网上查，最后终于搞清楚了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;Donald Ervin Knuth 的中文名为什么是高德纳？&lt;/p&gt;
&lt;p&gt;这是&lt;strong&gt;姚期智的夫人储枫，在高德纳 70 年代访问中国的时候，给他起的中文名字。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;其中“德纳”部分是 Donald 的音译。非常符合英文发音，尾巴的 d 被轻音吞掉。&lt;/p&gt;
&lt;p&gt;第一个字“高”则是姓氏，据说也是因为 Knuth 这个姓氏起的。我怀疑是因为南方比如香港的发音，K 的发音就是 G。比如香港的“太古”，对应的英文是“TAIKOO”&lt;/p&gt;
&lt;p&gt;所以，“高德纳”是一个地道的中文名，“高”是姓，“德纳”是名。&lt;/p&gt;
&lt;p&gt;顺便一提：&lt;/p&gt;
&lt;p&gt;姚期智相信大家都了解，目前中国唯一获得过图灵奖的华人。清华大学大名鼎鼎的姚班，大家也应该是如雷贯耳。如果没听说过也没有关系，反正和我等凡人根本不在一个次元。&lt;/p&gt;
&lt;p&gt;但储枫大家可能不太了解了。也是一个很牛的理论计算机学家，香港城市大学计算机科学系的系主任。现在也是清华大学交叉信息研究院（姚期智任院长）的客座教授，讲计算几何与组合算法。&lt;/p&gt;
&lt;p&gt;网上的八卦传闻，姚期智当年是搞物理的，是在储枫美女的建议下，经过冷静思考，转向了当时方兴未艾的计算机科学领域。&lt;/p&gt;
&lt;p&gt;&lt;img alt="chufeng" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-11/chufeng.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;这么一位知识界的大牛，华人唯一图灵奖背后的女人，网上竟然找不到一张她的高清照片。但我一定要放一张！&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;说到 Donald 这个名字，马上就想到现在的美国总统 Trump，毕竟，他的全名就是 Donald John Trump。&lt;/p&gt;
&lt;p&gt;马上就有同学问，现在的美国总统 Trump，为什么有一个中文翻译是特朗普？毕竟，从音译的角度，川普更准确。&lt;/p&gt;
&lt;p&gt;对于这个问题，我的第一反应是日本。&lt;/p&gt;
&lt;p&gt;可能很多同学知道，日本人的英语发音，会把 r 的音发成 l。比如 right，日本人可能会读成 light。&lt;/p&gt;
&lt;p&gt;所以，或许是中国某些地方方言也有这样的发音规则？不过由于我从小是在北京长大，对中国各地的方言口音确实了解得不多。&lt;/p&gt;
&lt;p&gt;但是，这回我不敢马虎了，赶紧在网上查了查，别说，这一查，还真有料。&lt;/p&gt;
&lt;p&gt;简单地说，新华社官方管美国总统叫“特朗普”，而不是“川普”。也就是“特朗普”这个翻译，和方言口音没什么关系。是中国官方钦定的。&lt;/p&gt;
&lt;p&gt;在新华社的公众号下搜索“特朗普”，全是他的新闻。&lt;/p&gt;
&lt;p&gt;&lt;img alt="trump1" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-11/trump1.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;但是搜索“川普”，却啥都没有。除了！&lt;/p&gt;
&lt;p&gt;&lt;img alt="trump2" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-11/trump2.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;除了第一篇文章，原来新华社专门发文解释过这件事情：为啥 Trump 翻译成了“特朗普”而非“川普”？&lt;/p&gt;
&lt;p&gt;想阅读原文的同学直接点击这里：&lt;a href="https://mp.weixin.qq.com/s?__biz=MzA4NDI3NjcyNA==&amp;amp;mid=2649342577&amp;amp;idx=2&amp;amp;sn=38bd5de614fc04329907763c40dd1d71&amp;amp;chksm=87f4c6eab0834ffc20e170745e123bbc7e26e3ede92a20a81cc1235d7b7aacc2c06d9fa4b78c&amp;amp;mpshare=1&amp;amp;scene=1&amp;amp;srcid=0711V9OG05reUmAX98yhLtMP&amp;amp;pass_ticket=D2oQgEogpFzWURFslsWalr1CBZYs188ZC9%2BITkGjXf1N1p8EmAdPhFLb7dcrNAaG#rd"&gt;为啥 Trump 翻译成了“特朗普”而非“川普”？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;简单来说，新华社给出的解释就是，根据国家权威的《英语姓名译名手册》和《世界人名翻译大辞典》的规定，Trump 就应该翻译成“特朗普”。后面所有的文字解释，洋洋洒洒说了一堆，中心思想只有一个：这就是约定俗成的，官方认可，统一使用。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;但是&lt;strong&gt;这不叫原因，这叫事实。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们肯定还能往下追问：国家权威的《英语姓名译名手册》和《世界人名翻译大辞典》为什么规定，Trump 就应该翻译成特朗普，而不是川普？&lt;/p&gt;
&lt;p&gt;上面的新华社文章说：无从考证。&lt;/p&gt;
&lt;p&gt;&lt;img alt="xinhuashe" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-11/xinhuashe.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;但是我费了点儿功夫，考证出了一个我觉得可信的原因：&lt;/p&gt;
&lt;p&gt;原来 Trump 这个词，追根溯源，&lt;strong&gt;来自德语&lt;/strong&gt;。其实大量英语单词和德语有着千丝万缕的联系，毕竟都是欧洲语系，溯源的话，二者都来自原日耳曼语。日耳曼民族神圣罗马帝国毕竟也有近千年的辉煌。&lt;/p&gt;
&lt;p&gt;而在德语中，Trump 的读音近似“特朗普”。（我没学过德语，如果有了解德语的同学，可以证实一下。）&lt;/p&gt;
&lt;p&gt;《英语姓名译名手册》和《世界人名翻译大辞典》，对于有外来语言特征的单词，在音译成中文的时候，会首先参照原语言，在 Trump 这个词上，也就是德语发音。&lt;/p&gt;
&lt;p&gt;所以，日本人把 r 发音成 l，看来也是有原因，有历史渊源的。&lt;/p&gt;
&lt;p&gt;抱歉，较真儿了。&lt;/p&gt;
&lt;p&gt;但是，涨姿势。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;最后，以上这些讨论，发生在哪里呢？&lt;/p&gt;
&lt;p&gt;发生在我新注册的&lt;strong&gt;知识星球&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;很多同学都曾问过我有没有知识星球，但因为我以前没有玩儿过这东西，所以只是一直在观望学习而已。&lt;/p&gt;
&lt;p&gt;看了几个大佬的知识星球，大体搞懂了。个人粗浅理解：这就是另外一个朋友圈儿呗。&lt;/p&gt;
&lt;p&gt;所以，我注册了一个。&lt;strong&gt;免费的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;整体，我的知识星球的定位，是短分享。公众号的内容，比较适合做长文章的分享，我将在知识星球中，做更多短内容分享。虽然只是只言片语，也希望对大家有收获。&lt;/p&gt;
&lt;p&gt;做更多短内容分享。“更多”是什么意思呢？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;日更。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="rigeng" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-11/rigeng.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;反正我每天都会抽出一部分时间阅读大量资讯内容，看到有趣的就分享一下，应该不是什么负担。&lt;/p&gt;
&lt;p&gt;不过，由于是短内容分享，分享内容的严谨性就会打折扣，也会有一些非技术的内容。&lt;/p&gt;
&lt;p&gt;我随便截取几个过去的分享：&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分享1：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-11/1.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分享2：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-11/2.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分享3：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-11/3.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;大概是这样。&lt;/p&gt;
&lt;p&gt;如果玩儿知识星球的同学，对我的“短”内容分享感兴趣，可以加入。&lt;/p&gt;
&lt;p&gt;以下为二维码：&lt;/p&gt;
&lt;p&gt;&lt;img alt="qrcode" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-11/qrcode.JPG" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-07-11/readme.md" rel="alternate"/></entry><entry><id>2019/2019-07-09/readme.md</id><title>神一样的随机算法</title><updated>2019-07-09T00:00:00-07:00</updated><content>&lt;h2&gt;神一样的随机算法&lt;/h2&gt;
&lt;p&gt;之前，在我的文章 &lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-05-19/"&gt;《如何把技术做深？可能，这是一个错误的问题》&lt;/a&gt; 中，我谈到了对问题定义的重要性。很多时候，面对很多问题，我们思考的方向，并非是怎么解决，而是，我们要解决的问题究竟是什么。&lt;/p&gt;
&lt;p&gt;不过，在那篇文章中，我举的例子，都是很抽象的例子，比如“如何把技术做深？”，“如何学英语？”，“如何成功？”。但其实，在具体的技术领域，也是如此。&lt;/p&gt;
&lt;p&gt;这篇文章，我们从一道经典面试题开始来探讨这个问题。这个面试题有很多形式，但其实背后的算法是一致的。&lt;/p&gt;
&lt;p&gt;这个问题是：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;设计一个公平的洗牌算法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;看问题，洗牌，显然是一个随机算法了。随机算法还不简单？随机呗。把所有牌放到一个数组中，每次取两张牌交换位置，随机 k 次即可。&lt;/p&gt;
&lt;p&gt;如果你的答案是这样，通常面试官会进一步问一下，k 应该取多少？100？1000？10000？&lt;/p&gt;
&lt;p&gt;很显然，取一个固定的值不合理。如果数组中有 1000000 个元素，随机 100 次太少；如果数组中只有 10 个元素，随机 10000 次又太多。一个合理的选择是，随机次数和数组中元素大小相关。比如数组有多少个元素，我们就随机多少次。&lt;/p&gt;
&lt;p&gt;这个答案已经好很多了。但其实，连这个问题的本质都没有触及到。此时，面试官一定会狡黠地一笑：这个算法公平吗？&lt;/p&gt;
&lt;p&gt;我们再看问题：设计一个&lt;strong&gt;公平&lt;/strong&gt;的洗牌算法。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;问题来了，对于一个洗牌算法来说，什么叫“公平”？这其实是这个问题的实质，我们必须定义清楚：什么叫公平。&lt;/p&gt;
&lt;p&gt;一旦你开始思考这个问题，才触及到了这个问题的核心。&lt;strong&gt;在我看来，不管你能不能最终给出正确的算法，如果你的思路是在思考对于洗牌算法来说，什么是“公平”，我都觉得很优秀。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;因为背出一个算法是简单的，但是这种探求问题本源的思考角度，绝不是一日之功。别人告诉你再多次“要定义清楚问题的实质”都没用。这是一种不断面对问题，不断解决问题，逐渐磨炼出来的能力，短时间内无法培训。&lt;/p&gt;
&lt;p&gt;这也是我经常说的，&lt;strong&gt;面试不是标准化考试，不一定要求你给出正确答案。面试的关键，是看每个人思考问题的能力。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;说回我们的洗牌算法，什么叫公平呢？一旦你开始思考这个问题，其实答案不难想到。洗牌的结果是所有元素的一个排列。一副牌如果有 n 个元素，最终排列的可能性一共有 n! 个。公平的洗牌算法，应该能&lt;strong&gt;等概率地给出这 n! 个结果中的任意一个。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如思考虑到这一点，我们就能设计出一个简单的暴力算法了：对于 n 个元素，生成所有的 n! 个排列，然后，随机抽一个。&lt;/p&gt;
&lt;p&gt;这个算法绝对是公平的。但问题是，复杂度太高。复杂度是多少呢？O(n!)。因为，n 个元素一共有 n! 种排列，我们求出所有 n! 种排列，至少需要 n! 的时间。&lt;/p&gt;
&lt;p&gt;有一些同学可能对 O(n!) 没有概念。我本科时就闹过笑话，正儿八经地表示 O(n!) 并不是什么大不了不起的复杂度。实际上，这是一个比指数级 O(2^n) 更高的复杂度。因为 2^n 是 n 个 2 相乘；而 n! 也是 n 个数字相乘，但除了 1，其他所有数字都是大于等于 2 的。当 n&amp;gt;=4 开始，n! 以极快的的速度超越 2^n。&lt;/p&gt;
&lt;p&gt;O(2^n) 已经被称为指数爆炸了。O(n!) 不可想象。&lt;/p&gt;
&lt;p&gt;所以，这个算法确实是公平的，但是，时间不可容忍。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们再换一个角度思考“公平”这个话题。其实，我们也可以认为，公平是指，&lt;strong&gt;对于生成的排列，每一个元素都能等概率地出现在每一个位置。&lt;/strong&gt;或者反过来，&lt;strong&gt;每一个位置都能等概率地放置每个元素。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个定义和上面的&lt;strong&gt;最终洗牌结果，可以等概率地给出这 n! 个排列中的任意一个&lt;/strong&gt;，是等价的。这个等价性，可以证明出来。并不难。如果正在学习概率论的同学，还比较习惯概率论处理问题的思想，应该能很快搞定：）&lt;/p&gt;
&lt;p&gt;基于这个定义，我们就可以给出一个简单的算法了。说这个算法简单，是因为他的逻辑太容易了，就一个循环：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;for(int i = n - 1; i &amp;gt;= 0 ; i -- )
    swap(arr[i], arr[rand() % (i + 1)])&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这么简单的一个算法，可以保证上面我所说的，对于生成的排列，&lt;strong&gt;每一个元素都能等概率的出现在每一个位置。&lt;/strong&gt;或者反过来，&lt;strong&gt;每一个位置都能等概率的放置每个元素。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;大家可以先简单的理解一下这个循环在做什么。其实非常简单，i 从后向前，每次随机一个 [0...i] 之间的下标，然后将 arr[i] 和这个随机的下标元素，也就是 arr[rand() % (i + 1)] 交换位置。&lt;/p&gt;
&lt;p&gt;大家注意，由于每次是随机一个 [0...i] 之间的下标，所以，我们的计算方式是 rand() % (i + 1)，要对 i + 1 取余，保证随机的索引在 [0...i] 之间。&lt;/p&gt;
&lt;p&gt;这个算法就是大名鼎鼎的 &lt;strong&gt;Knuth-Shuffle，即 Knuth 洗牌算法。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个算法的原理，我们稍后再讲。先来看看 Knuth 何许人也？&lt;/p&gt;
&lt;p&gt;中文名：高纳德。算法理论的创始人。我们现在所使用的各种算法复杂度分析的符号，就是他发明的。上世纪 60-70 年代计算机算法的黄金时期，近乎就是他一手主导的。他的成就实在太多，有时间单独发文介绍，但是，我觉得一篇文章是不够的，一本书还差不多。&lt;/p&gt;
&lt;p&gt;大家最津津乐道的，就是他所写的《The Art of Computer Programming》，简称 TAOCP。这套书准备写七卷本，然后，到今天还没有写完，但已经被《科学美国人》评为可以媲美相对论的巨著。&lt;/p&gt;
&lt;p&gt;微软是 IT 界老大的年代，比尔盖茨直接说，如果你看完了这套书的第一卷本，请直接给我发简历。&lt;/p&gt;
&lt;p&gt;&lt;img alt="taocp" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-09/taocp.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;至于这套书为什么写的这么慢？因为老爷子写到一半，觉得当下的文字排版工具都太烂，于是&lt;strong&gt;转而发明出了现在流行的LaTex文字排版系统...&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;另外，老爷子可能觉得当下的编程语言都不能完美地表现自己的逻辑思想，还&lt;strong&gt;发明了一套抽象的逻辑语言，用于这套书中的逻辑表示...&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下面这张照片是他年轻的时候。这张照片是我在斯坦福大学计算机学院的橱窗拍的。&lt;/p&gt;
&lt;p&gt;&lt;img alt="donald" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-09/donald.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;下面的话和大家共勉：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A programmer who subconsciously views himself as an artist will enjoy what he does and will do it better.&lt;/p&gt;
&lt;p&gt;Donald E. Knuth 1978&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以，我从来都不认为自己只是一名工程师而已。&lt;strong&gt;我是艺术家：）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;是时候仔细的看一下，这个简单的算法，为什么能做到保证：&lt;strong&gt;对于生成的排列，每一个元素都能等概率的出现在每一个位置&lt;/strong&gt;了。&lt;/p&gt;
&lt;p&gt;其实，简单的吓人：）&lt;/p&gt;
&lt;p&gt;在这里，我们模拟一下算法的执行过程，同时，对于每一步，计算一下概率值。&lt;/p&gt;
&lt;p&gt;我们简单的只是用 5 个数字进行模拟。假设初始的时候，是按照 1，2，3，4，5 进行排列的。&lt;/p&gt;
&lt;p&gt;&lt;img alt="1" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-09/1.png" /&gt;&lt;/p&gt;
&lt;p&gt;那么，根据这个算法，首先会在这五个元素中选一个元素，和最后一个元素 5 交换位置。假设随机出了 2。&lt;/p&gt;
&lt;p&gt;&lt;img alt="2" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-09/2.png" /&gt;&lt;/p&gt;
&lt;p&gt;下面，我们计算 2 出现在最后一个位置的概率是多少？非常简单，因为是从 5 个元素中选的嘛，就是 1/5。实际上，根据这一步，任意一个元素出现在最后一个位置的概率，都是 1/5。&lt;/p&gt;
&lt;p&gt;&lt;img alt="3" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-09/3.png" /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;下面，根据这个算法，我们就已经不用管 2 了，而是在前面 4 个元素中，随机一个元素，放在倒数第二的位置。假设我们随机的是 3。3 和现在倒数第二个位置的元素 4 交换位置。&lt;/p&gt;
&lt;p&gt;&lt;img alt="4" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-09/4.png" /&gt;&lt;/p&gt;
&lt;p&gt;下面的计算非常重要。3 出现在这个位置的概率是多少？计算方式是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="5" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-09/5.png" /&gt;&lt;/p&gt;
&lt;p&gt;其实很简单，因为 3 逃出了第一轮的筛选，概率是 4/5，但是 3 没有逃过这一轮的选择。在这一轮，一共有4个元素，所以 3 被选中的概率是 1/4。因此，最终，3 出现在这个倒数第二的位置，概率是 4/5 * 1/4 = 1/5。&lt;/p&gt;
&lt;p&gt;还是 1/5 !&lt;/p&gt;
&lt;p&gt;实际上，用这个方法计算，任意一个元素出现在这个倒数第二位置的概率，都是 1/5。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;相信聪明的同学已经了解了。我们再进行下一步，在剩下的三个元素中随机一个元素，放在中间的位置。假设我们随机的是 1。&lt;/p&gt;
&lt;p&gt;&lt;img alt="6" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-09/6.png" /&gt;&lt;/p&gt;
&lt;p&gt;关键是：1 出现在这个位置的概率是多少？计算方式是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="7" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-09/7.png" /&gt;&lt;/p&gt;
&lt;p&gt;即 1 首先在第一轮没被选中，概率是 4/5，在第二轮又没被选中，概率是 3/4 ，但是在第三轮被选中了，概率是 1/3。乘在一起，4/5 * 3/4 * 1/3 = 1/5。&lt;/p&gt;
&lt;p&gt;用这个方法计算，任意一个元素出现在中间位置的概率，都是 1/5。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;这个过程继续，现在，我们只剩下两个元素了，在剩下的两个元素中，随机选一个，比如是4。将4放到第二个位置。&lt;/p&gt;
&lt;p&gt;&lt;img alt="8" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-09/8.png" /&gt;&lt;/p&gt;
&lt;p&gt;然后，4 出现在这个位置的概率是多少？4 首先在第一轮没被选中，概率是 4/5；在第二轮又没被选中，概率是 3/4；第三轮还没选中，概率是 2/3，但是在第四轮被选中了，概率是 1/2。乘在一起，4/5 * 3/4 * 2/3 * 1/2 = 1/5。&lt;/p&gt;
&lt;p&gt;用这个方法计算，任意一个元素出现在第二个位置的概率，都是 1/5。&lt;/p&gt;
&lt;p&gt;&lt;img alt="9" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-09/9.png" /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;最后，就剩下元素5了。它只能在第一个位置呆着了。&lt;/p&gt;
&lt;p&gt;那么 5 留在第一个位置的概率是多少？即在前 4 轮，5 都没有选中的概率是多少？&lt;/p&gt;
&lt;p&gt;在第一轮没被选中，概率是 4/5；在第二轮又没被选中，概率是 3/4；第三轮还没选中，概率是 2/3，在第四轮依然没有被选中，概率是 1/2。乘在一起，4/5 * 3/4 * 2/3 * 1/2 = 1/5。&lt;/p&gt;
&lt;p&gt;&lt;img alt="10" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-09/10.png" /&gt;&lt;/p&gt;
&lt;p&gt;算法结束。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;你看，在整个过程中，每一个元素出现在每一个位置的概率，都是 1/5 ！&lt;/p&gt;
&lt;p&gt;所以，这个算法是公平的。&lt;/p&gt;
&lt;p&gt;当然了，上面只是举例子。这个证明可以很容易地拓展到数组元素个数为 n 的任意数组。整个算法的复杂度是 O(n) 的。&lt;/p&gt;
&lt;p&gt;通过这个过程，大家也可以看到，同样的思路，我们也完全可以从前向后依次决定每个位置的数字是谁。不过从前向后，代码会复杂一些，感兴趣的同学可以想一想为什么？自己实现一下试试看？&lt;/p&gt;
&lt;p&gt;（因为生成 [0, i] 范围的随机数比生成 [i, n) 范围的随机数简单，直接对 i+1 求余就好了。）&lt;/p&gt;
&lt;p&gt;怎么样，&lt;strong&gt;是不是很酷？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="11" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-09/11.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个算法除了洗牌，还能怎么用？&lt;/p&gt;
&lt;p&gt;其实，在很多随机的地方，都能使用。比如，扫雷生成随机的盘面。我们可以把扫雷的二维盘面先逐行连接，看作是一维的。之后，把 k 颗雷依次放在开始的位置。&lt;/p&gt;
&lt;p&gt;&lt;img alt="mine1" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-09/mine1.png" /&gt;&lt;/p&gt;
&lt;p&gt;然后，我们运行一遍 Knuth 洗牌算法，就搞定啦：&lt;/p&gt;
&lt;p&gt;&lt;img alt="mine2" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-09/mine2.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;是不是很酷？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这就是我喜欢算法的原因。在我眼里，&lt;strong&gt;算法从来不是枯燥的逻辑堆砌，而是神一样的逻辑创造。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;尽管这个世界很复杂，但竟也如此的简洁，优雅。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-07-09/readme.md" rel="alternate"/></entry><entry><id>2019/2019-07-04/readme.md</id><title>随便扯：What's your problem</title><updated>2019-07-04T00:00:00-07:00</updated><content>&lt;h2&gt;随便扯：What's your problem&lt;/h2&gt;
&lt;p&gt;周末了，随便聊点儿轻松的话题。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;红颜祸水，不是，宏颜获水的事情，大家应该都知道了。&lt;/p&gt;
&lt;p&gt;首先，表明立场：坚决反对。因为，这是对公共秩序的公然藐视。&lt;/p&gt;
&lt;p&gt;如果对百度心生不满，最简单的做法，就是不用百度，并且劝身边的朋友，尽可能不用百度。这是对一个企业最有杀伤力的做法。如果认为百度的某些行为超越了法律框架，应该进行起诉，同样在法律框架下解决问题。&lt;/p&gt;
&lt;p&gt;浇一瓶水，不是英雄，什么都改变不了。&lt;/p&gt;
&lt;p&gt;其次，担心一下这种级别的大会的安保问题。幸亏这是一瓶水，如果不仅仅是水，会发生什么？不可想象。希望类似活动的举办方引以为戒。&lt;/p&gt;
&lt;p&gt;另外，李彦宏的现场即时回应真心赞。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;大家看到在AI前进的道路上，会有各种各样想不到的事情发生。但是我们前行的决心不会改变，坚信AI会改变每一个人的生活。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;这篇文章，想随便聊一聊李彦宏面对这个事情的第一反应，英语脱口而出：What's your problem?&lt;/p&gt;
&lt;p&gt;这个英语实在是太地道了。&lt;/p&gt;
&lt;p&gt;美剧看多了的同学，面对这种情况，可能都会想到 What the f**k 一类的回应。但是，这个回应在英语语境里，实在是太不雅了。&lt;/p&gt;
&lt;p&gt;What's the problem，近乎就是 What the f**k 的文明版。如果要翻译的话，就是“你有什么毛病？”这不是一个疑问句，而是反问句，表达自己的愤怒。&lt;/p&gt;
&lt;p&gt;在 Phrase Mix 上，对 What's the problem 是这么解释的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is a phrase that you can use to start an argument with someone who's acting angry or rude. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;你可以使用 What's the problem 来开始一场争执。通常是对举止粗暴无礼，令人生气厌烦的人来说。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"What's your problem?" means "Why are you acting that way?" &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What's the problem? 的意思就是在问，“你为什么要这么做？”&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;But asking someone "What's your problem?" makes it sounds like you're criticizing them.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但是，这个质问背后，有着强烈的批评色彩。&lt;/p&gt;
&lt;p&gt;大家可以通过李厂长脱口而出的英文，看出其英语功底的深厚。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;这让我想起了一个笑话。&lt;/p&gt;
&lt;p&gt;一个老外问一个中国留学生，Can I ask you a question?&lt;/p&gt;
&lt;p&gt;中国留学生开心地回答：Yeah, sure! What's your problem?&lt;/p&gt;
&lt;p&gt;老外气鼓鼓地走了，留下了一脸懵逼的留学生独自在风中凌乱...&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;所以，在英语中，problem 和 question 是不一样的，虽然中文翻译都是“问题”。&lt;/p&gt;
&lt;p&gt;但是，question 是中性的，表示一个疑问。所以“问号”，用英文说，就是 question mark。&lt;/p&gt;
&lt;p&gt;而 problem，则带有一定的贬义，表示不好的问题，需要被及时解决。现在，大家都觉得科技公司有各种各样的问题，就要用 problem。&lt;/p&gt;
&lt;p&gt;随便截一个今天的英文新闻标题：&lt;/p&gt;
&lt;p&gt;&lt;img alt="problem" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-04/problem.png" /&gt;&lt;/p&gt;
&lt;p&gt;当然了，problem 稍微有些口语化，而且感情色彩可能有点儿更浓烈。更加中性一点儿的，客观描述“问题”的方式，可以用 issue。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;其实，和中文一样，很多时候，用词不准确，表达同样的事情，给人的感觉会极度不同。&lt;/p&gt;
&lt;p&gt;比如，我刚来美国的时候，还没有车，为了出行方便，租了一辆车。&lt;/p&gt;
&lt;p&gt;结果，车爆胎了。叫道路援助，折腾了好长时间，一天的事情都没有办成。道路援助换好备胎以后，我还需要第二天额外花时间，去租车公司换辆车。&lt;/p&gt;
&lt;p&gt;换车的时候，我提出不仅这两天的租金我不应该付，还应该得到补偿。补偿的英文是 compensation，我说的就是 I think I deserve a compensation due to ... 结果，换来了服务人员的白眼。No Compensation！搞的我很莫名，不是说美国的服务都挺好吗？&lt;/p&gt;
&lt;p&gt;结果回来一研究，才搞明白，compensation 这个词，比较严重，背后的意思，偏向法律的赔偿。尤其是在发生重大的事故，比如巨大的经济损失或者伤亡事故之后，谈的才是 compensation。&lt;/p&gt;
&lt;p&gt;当然，我的情况也可以谈 compensation，但请打官司。这不是我的本意。&lt;/p&gt;
&lt;p&gt;于是，到了退车的时候，我还是想要“赔偿”，但是换了一个说法：I think I deserve a &lt;strong&gt;discount&lt;/strong&gt; due to ... 结果，轻松拿到了我本来想要的“补偿”。discount，是优惠的意思。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;你看，这就是我对“语言”渐渐开始感兴趣的原因。同样的事情，同样的意思，换一种表达，换一个词汇，结果就会如此不同。&lt;/p&gt;
&lt;p&gt;其实，这也是在短时间内，我并不认为机器翻译能取代人工翻译的原因。机器翻译诚然可以降低不同语言人群之间交流的门槛，起到传达基本信息的作用。但是专业的翻译在短时间内一定是被需要的。因为，不同语言之间并非是一一映射的对应关系，而掺杂了诸多人文社会，风俗习惯，约定俗成的内容。&lt;/p&gt;
&lt;p&gt;机器要想理解“我们不是我们，我们还是我们”，还要时间。&lt;/p&gt;
&lt;p&gt;这也是自然语言和程序员们所使用的编程语言不同的地方。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;编程语言是一种人造的，用于描述逻辑的语言。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;而自然语言，是在历史的长河中，慢慢演化出来的，沉淀了无数历史记忆和先人智慧的，更多用于表达情感，思辨，而绝不仅仅是逻辑的语言。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;最后，作为一名程序员，聊一个逻辑梗。&lt;/p&gt;
&lt;p&gt;上面讲的那个笑话，Can I ask you a question? 不能回答 What's your problem? &lt;/p&gt;
&lt;p&gt;那应该怎么回答？&lt;/p&gt;
&lt;p&gt;通常，在生活中，我们直接回答 yes，就好了。&lt;/p&gt;
&lt;p&gt;语气轻松一些，可以说，sure, go ahead.&lt;/p&gt;
&lt;p&gt;但是，我见过的神级回答是：You just have.&lt;/p&gt;
&lt;p&gt;整个对话是这样的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Can I ask you a question?&lt;/p&gt;
&lt;p&gt;You just have.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个回答是什么意思呢？就是，你已经问过了。你问的问题就是：我能问你一个问题吗？&lt;/p&gt;
&lt;p&gt;这里，产生了一个微妙的无穷递归。为了不冒昧地提问，你首先问能否问一个问题；但在问“能否问一个问题”的时候，你已经冒昧地提问了。&lt;/p&gt;
&lt;p&gt;当然，在正常的对话中，面对别人问“Can I ask you a question?”，不要回答“You just have.”。&lt;/p&gt;
&lt;p&gt;否则，可能换来别人的白眼：What's your problem?&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-07-04/readme.md" rel="alternate"/></entry><entry><id>2019/2019-07-01/readme.md</id><title>1/2 + 1/4 + 1/8 + 1/16 + ... 一个级数问题的几何求解</title><updated>2019-07-01T00:00:00-07:00</updated><content>&lt;h2&gt;1/2 + 1/4 + 1/8 + 1/16 + ... 一个级数问题的几何求解&lt;/h2&gt;
&lt;p&gt;级数是高等数学中的一个非常重要的概念。在数学中，&lt;strong&gt;一个有穷或无穷序列的和，称为级数。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;有穷级数，非常简单，因为是有穷的，用小学学习的加法运算，就可以求出。比如6, 60, 600，这个序列的级数是666。&lt;/p&gt;
&lt;p&gt;比较难的是无穷级数，最典型的级数是等差级数（又叫算术级数）和等比级数（又叫几何级数）。&lt;/p&gt;
&lt;p&gt;比如：1，2，3，4，5，... 是一个等差级数。&lt;/p&gt;
&lt;p&gt;比如：1，2，4，8，16，... 是一个等比级数。其中，公比为2。&lt;/p&gt;
&lt;p&gt;比如：1/2，1/4，1/8，1/16，1/32，... 也是一个等比级数。其中，公比为 1/2。&lt;/p&gt;
&lt;p&gt;对于无穷级数，有一个很重要的概念，就是级数的敛散性。也就是一个无穷级数是发散的，还是收敛的。&lt;/p&gt;
&lt;p&gt;所谓的收敛，就是存在一个“界”，这无穷项的和，肯定超不过这个“界”；如果不存在这个“界”，就称这个级数是发散的。&lt;/p&gt;
&lt;p&gt;比如，1，2，3，4，5，... 是一个发散级数；&lt;/p&gt;
&lt;p&gt;比如：1，2，4，8，16，... 是一个发散级数；&lt;/p&gt;
&lt;p&gt;但是，1/2，1/4，1/8，1/16，1/32，... 是一个收敛级数。这个级数的“界”是1。也就是这串数字按照这样的趋势继续下去，无穷项的和，一定是小于1的。无论如何，都超不过1这个“界”。&lt;/p&gt;
&lt;p&gt;通过定义，大家也能想到了，由于我们是在考虑无穷项的和的问题，所以严格地使用数学语言，我们要想证明这个“界”，需要使用“极限”的概念。&lt;/p&gt;
&lt;p&gt;实际上，&lt;strong&gt;极限是大家在本科学习高等数学所接触的第一个概念，是微分，积分，这一套数学工具的根基，是初等数学和高等数学的重要分水岭。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不过，在这篇文章中，我将使用几何的方式，证明1/2，1/4，1/8，1/16，1/32，... 这个序列的和，一定不会超过1这个“界”：）&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;其实非常简单。首先，我们把每一个数字想成是一个矩形的面积。那么我们可以先画一个边长为1的正方形。它的面积就是1。&lt;/p&gt;
&lt;p&gt;&lt;img alt="1" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-01/1.png" /&gt;&lt;/p&gt;
&lt;p&gt;下面，我们将看到，这个面积为1的正方形，可以盛放面积为1/2，1/4，1/8，1/16，1/32，...的矩形，无数多个！：）&lt;/p&gt;
&lt;p&gt;首先，我们放一个面积为1/2的矩形，非常简单，将这个正方形一分为2，一半的面积就是1/2。&lt;/p&gt;
&lt;p&gt;&lt;img alt="2" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-01/2.png" /&gt;&lt;/p&gt;
&lt;p&gt;然后，我们再放一个面积为1/4的矩形，将剩下的1/2再一分为2，其中一半的面积，就是1/2的1/2，即1/4。&lt;/p&gt;
&lt;p&gt;&lt;img alt="3" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-01/3.png" /&gt;&lt;/p&gt;
&lt;p&gt;相信聪明的同学们都已经会了。我们再放一个面积为1/8的矩形，只需要将剩下1/4面积再一分为2，其中的一半面积，就是1/4的1/2，即1/8。&lt;/p&gt;
&lt;p&gt;&lt;img alt="4" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-01/4.png" /&gt;&lt;/p&gt;
&lt;p&gt;这个过程可以一直下去。我们再放一个1/16的矩形：&lt;/p&gt;
&lt;p&gt;&lt;img alt="5" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-01/5.png" /&gt;&lt;/p&gt;
&lt;p&gt;再放一个1/32的矩形......&lt;/p&gt;
&lt;p&gt;&lt;img alt="6" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-01/6.png" /&gt;&lt;/p&gt;
&lt;p&gt;可以看出来，1/2，1/4，1/8，1/16，1/32，... 这个数列的每一个数所表示的矩阵，可以无穷无尽地放到这个大小为1的正方形中。&lt;/p&gt;
&lt;p&gt;所以，1/2，1/4，1/8，1/16，1/32，... 这个级数是收敛的，结果为1：）&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;对了，和&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-05-29/"&gt;《如何优雅地证明平方差公式？》&lt;/a&gt;的配图一样，这篇文章的配图也都是我在ipad上手绘出来的。虽然很简单，但允许我再次炫耀一下：）&lt;/p&gt;
&lt;p&gt;怎么样，&lt;strong&gt;是不是很酷？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-07-01/readme.md" rel="alternate"/></entry><entry><id>2019/2019-06-30/readme.md</id><title>一场关于知识产权的讨论</title><updated>2019-06-30T00:00:00-07:00</updated><content>&lt;h2&gt;一场关于知识产权的讨论&lt;/h2&gt;
&lt;p&gt;上周，一名内容创业者韦老师在他的公众号发表了一篇文章&lt;a href="https://mp.weixin.qq.com/s?__biz=MzAxNTAyOTczMw==&amp;amp;mid=2649330749&amp;amp;idx=1&amp;amp;sn=634296a973a7839dde06e8df1a92b49d&amp;amp;chksm=839770b7b4e0f9a1032b63c0109e0660513191659ff55f28d41a32a27efa40fd2ad81fc3390b&amp;amp;mpshare=1&amp;amp;scene=1&amp;amp;srcid=0626VWRTwoRK4UbjwPHs8PG9&amp;amp;pass_ticket=B6hY64shJG2GbcMIeFXlsdoTUVOiqwjP%2Fx%2BNailBtcYr2fhWhke9RmzY7Xdtmsxp#rd"&gt;《闲鱼与盗版更配，起诉到底绝不和解！》&lt;/a&gt;，怒斥了闲鱼平台对于盗版问题的“不作为”。&lt;/p&gt;
&lt;p&gt;后来，这篇文章被公众号大V &lt;strong&gt;小声比比&lt;/strong&gt; 转发，&lt;a href="https://mp.weixin.qq.com/s?__biz=MzIxMjgxMDAwOA==&amp;amp;mid=2247497524&amp;amp;idx=1&amp;amp;sn=e42168fb3ad4f22a50f50dd3cbb159a7&amp;amp;chksm=9742d743a0355e555b615fb7377a265424135915a6c485fb6e5f270d0869b2b3032d71fedc7a&amp;amp;mpshare=1&amp;amp;scene=1&amp;amp;srcid=&amp;amp;pass_ticket=B6hY64shJG2GbcMIeFXlsdoTUVOiqwjP%2Fx%2BNailBtcYr2fhWhke9RmzY7Xdtmsxp#rd"&gt;《因为闲鱼上随处可见的盗版，这家创业公司要倒闭了》&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;在这里，我不想声讨太多关于盗版的问题。中国的版权环境大家都是了解的。不过让我欣慰的是，越来越多的人有了版权意识，购买正版支持知识创作者，也正是因为如此，有越来越多的人，愿意花时间整理，贡献出自己的知识：）&lt;/p&gt;
&lt;p&gt;尽管如此，在&lt;a href="https://mp.weixin.qq.com/s?__biz=MzIxMjgxMDAwOA==&amp;amp;mid=2247497524&amp;amp;idx=1&amp;amp;sn=e42168fb3ad4f22a50f50dd3cbb159a7&amp;amp;chksm=9742d743a0355e555b615fb7377a265424135915a6c485fb6e5f270d0869b2b3032d71fedc7a&amp;amp;mpshare=1&amp;amp;scene=1&amp;amp;srcid=&amp;amp;pass_ticket=B6hY64shJG2GbcMIeFXlsdoTUVOiqwjP%2Fx%2BNailBtcYr2fhWhke9RmzY7Xdtmsxp#rd"&gt;《因为闲鱼上随处可见的盗版，这家创业公司要倒闭了》&lt;/a&gt;这篇文章中，第二名的留言依然很具有代表性。&lt;/p&gt;
&lt;p&gt;&lt;img alt="pirate" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-06-30/pirate.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;在我看来，这就好比在说，小偷偷了东西便宜卖给别人，造福大众，有何不好？&lt;/p&gt;
&lt;p&gt;讽刺地是，这名用户的头像使用的是中华人民共和国五星红旗。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;不过，我确实承认，知识产权本身是一个有争议的话题。社会上围绕知识产权的讨论，从来没有停止过。&lt;/p&gt;
&lt;p&gt;上周，我在朋友圈转发了小声比比的这篇文章，引来了一个朋友跟我的讨论。我觉得这个讨论挺有意思，在这里分享给大家。&lt;/p&gt;
&lt;p&gt;所以，&lt;strong&gt;这篇文章，我有点儿偷懒，基本就是我们在朋友圈的留言整理：）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当然，我们的讨论不够充分，我们也都不是知识产权问题的专业人士，所以难免有不严谨的地方。&lt;/p&gt;
&lt;p&gt;但是，我的核心观点是：&lt;strong&gt;知识产权必须存在，但是以何种形式存在，可以讨论。知识产权存在的原因在于，要保证原创作者有回报，只有这样，才有人愿意产生知识，社会才能更好地发展&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;实际上，如果深入交流，就会发现，大多数所谓的“反知识产权”人士，对此也是赞同的。只不过认为现行的知识产权制度提高了公众获取知识的门槛。对此，我也赞同，现行的知识产权制度，有这样或者那样的问题。但关键是，更好的制度在哪里？因为，可见的，如果废除现行的知识产权制度，原创作者将没有动力做任何原创，结果是&lt;strong&gt;公众获取知识的门槛更高&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;这就是经济学，政治学，社会学等领域有意思的地方。社会是一个整体，牵一发动全身。很多事情不是简单的 1 + 1 = 2。这就像曾经很多人讨论过的，从法律量刑的角度，拐卖儿童不能轻易判死罪；这也是曾经美国的“禁酒令”全面失败，最终不得不废止的原因。看起来拐卖儿童十恶不舍，我们把这些坏蛋杀掉就好；看起来酒是一个坏东西，我们把它禁掉就好了。但事情没有这么简单。如果世界这么简单，乌托邦就不是乌托邦了。&lt;/p&gt;
&lt;p&gt;至今为止，在我们的社会上，没有一种制度或者法规，是完美无缺的。批评一种制度是不好的，这是很简单的事情。但关键是，现行制度是不是已有方案中的最好方案？&lt;strong&gt;如果是，我们也只能暂时接受他的缺点。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当然，还有很多“反知识产权”人士提出了这样或者那样的可能措施，在下面的讨论中会提到一二。我认为都是有问题的。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;下面是我和我的朋友的讨论：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;朋友：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;或许本就不该有知识产权这种概念？或许确实无法保护所谓的知识产权？比如专利保护是公开换保护，但可口可乐就是不去申请专利，是否才是正确的方式？知识产权是否反而阻碍了创新？有关这个东西我还没有想明白……&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;bobo：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我以为知识产权在鼓励创新。因为知识产权保证了创新者有收益。如果没有知识产权，大家就没有创新的动力，窃以为这是中国少有技术主导的企业的核心原因。技术太容易被偷走，没有良好的版权保护环境，就没有人做。但知识产权应该是有期效的，当然期效是多少可以讨论，包括具体怎么叫侵权，细节上也有很多可以讨论的地方。但是没有知识产权，我认为是不可行的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;朋友：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;拿写文章举例，知识产权说我的文章你不能直接拿走说是自己写的，我是靠写文章赚钱的，靠阅读收费；而反对知识产权的学者似乎认为你拿走无所谓，首先很难管，其次我不应该靠阅读收费，盈利模式可以是我通过写文章积累人气，然后去开讲座赚钱。你即使转发文章抹去作者，也会因为种种原因导致我被周知而抄袭者给我做嫁衣。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;bobo：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为什么我不应该靠阅读收费？如果文章的作用只是积累人气的话，结果就是所有的文章都是为积累人气设计的。咪蒙的文章是例子；《厉害了我的国》似的文章也是例子。另外，开讲座赚钱也是知识售卖。那别人把你的讲座录下来倒卖可不可以？&lt;/p&gt;
&lt;p&gt;具体怎么执行，确实是另一回事儿。但以这篇文章中的现象为例，闲鱼中明明包含大量明显盗版资源，版权人已经甄别出来并进行了举报，但是平台方不作为，这是有问题的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;朋友：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;你说的这篇文章中的闲鱼，你认为闲鱼不作为，是基于现有知识产权保护体系前提下的，我同意。现在的情况下就是知识产权很难得到有效的保护。&lt;/p&gt;
&lt;p&gt;不是说不应该靠阅读收费，而是在没有知识产权的保护下，你无法靠阅读收费，而不得不转向其他的盈利模式，这也迫使你创新，创新其他的盈利模式而不是简单的躺赚。别人确实可以把你讲座偷录卖钱，这就是我刚才说的，最终偷录者给讲座者做了嫁衣，因为帮助讲座人扩大了观众，让更多人了解讲座人的观点，从而提高了讲座人的价值。仅从这一点看，偷录人帮讲座人创造了价值，奖赏就是卖盗版的钱。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;bobo：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不对。照这个逻辑偷窃不是罪。只要我把偷窃的东西以更低廉的价格卖给别人或者免费分一部分给别人，我都是在提升被偷用品的品牌价值。讲赏就是我在赃物中获得的那一份。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;朋友：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;错。偷窃的结果是我有了你没有。这应该叫做剽窃，我多了你没有少。至于剽窃是不是罪，是可以讨论一下的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;bobo：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果按照“有无”定义，相当于是说只有实体才物品才受到保护，但知识由于无“形”，所以不受到保护。我不同意。&lt;strong&gt;我认为集结劳动者的时间的产品就应该被保护。&lt;/strong&gt;否则，就不会有人付出这个时间。知识就无法发展起来。中国就是这样。似乎绕回去了。。。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;朋友：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;是的，所以似乎讨论的根本就变成了：如果没有知识产权保护，就没人创新。于是反方首先就会首先想到最著名的可口可乐的例子来反驳。。。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;bobo：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我不认为可口可乐的例子可以反驳应该没有知识产权。专利，版权，包括商业机密等，本身就是平等的，各有优劣的保护知识的方式，每一个人，每一个企业都可以自由选择。可口可乐使用商业机密的方式成功地保护了自己的知识，不代表知识产权没有用。逻辑上不成立。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;朋友：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;另外一个不保护也创新的例子是，以前保护更差，仍然有那么多单机游戏。不过结果是大家都死了。再后来是被迫创新出网络收费模式。似乎看起来是因为保护不到位而导致再也没有单机游戏玩，实际可能是单机游戏被市场淘汰。只不过不是用户淘汰他们。&lt;/p&gt;
&lt;p&gt;我在想，如果现有的体系无法有效保护，是不是这种方式压根就是不科学的。正好现在有学者提出了反对知识产权的观点，我觉得或许他们是对的。但是看他们的观点，也没有完全说服我，所以在这个问题上我目前无法回答“如果没有保护，创新者怎么活”的问题，但至少我能说“有保护也活不下去”。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;bobo：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;有保护当然能活下去。&lt;strong&gt;我认为美国梦的本质就是因为有强大的知识产权保护。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我认为知识产权保护是必须有的。因为要保证知识产生者有足够的动力去产生知识。但是，这个产权是什么样子，可以讨论。可以不是现在的样子。可能存在一种保护形势，消费者不买单，但是基于这样或那样的机制，知识生产者还能有足够的好处。那没问题。&lt;/p&gt;
&lt;p&gt;但是你说“逼着创新”，这个逼，不应该是逼知识的生产者。因为这个创新属于社会制度的创新或者商业模式的创新，不能让每个知识产生者都是社会制度或者商业模式专家。比如大学的科研制度，其实就是另外一种模式，相当于由全体纳税人买单，经由政府分配，再到大学，再到每个科研工作者，然后科研工作者发表公开的论文。至于效果如何，每个人见解不同。&lt;/p&gt;
&lt;p&gt;实际上现在的知识界也有这种“创新”，就是免费写文章靠广告收钱。但是问题就在于，由于要靠广告收钱，所以文章要顾及传播度，由于要顾及传播度，所以高深的内容就没人写。因为内容越高深，受众就越少。&lt;strong&gt;所以在这种模式眼里，高深的，小众的内容，没有价值。对于整个社会，我认为这个结果是有害的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;朋友：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;反对派的观点是保护是先进国家对落后国家的一种流氓手段。最近还有谣传说美国要否认华为在美专利？对于是否应该有知识产权，我也没有被反对派说服，但我能get到支持派的观点。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;bobo：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;国家间是另一个话题。我以为我们讨论的问题首先假想这个世界没有国界，是否应该有知识产权。然后才应该细分国家间情况不同，知识产权应该怎么处理的问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;朋友：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;有道理，应首先假设无国界。中国不提了，了解一下美国的情况。盗版问题严重吗？可能不像闲鱼这么明目张胆，那是否可以方便的接触到盗版资源？比如win10？比如单机游戏盗版电影。使用的人多吗？微软在打击本土盗版的力度比中国强吗？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;bobo：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;盗版问题显然也有。但是没有闲鱼这么明目张胆。&lt;strong&gt;盗版者知道自己在盗版，知道自己是违法的。这是很重要的分水岭。&lt;/strong&gt;就像抢劫的人知道自己做的是坏事儿。但是抢劫没法杜绝。这就是法律，警察，法院，监狱这套机制存在的意义。也正因为如此，显然美国的创新能力比中国强，创新意愿也更强。但是在国内，很多盗版者理直气壮，甚至引以为荣，结果就是深深地打击了知识的生产。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;朋友：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我觉得因为美国知识产权法律健全，所以创新能力强或意愿强，这个推论过程可能存在问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;bobo：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;有可能不是因果关系，是相关关系。&lt;/strong&gt;但是主观上看，原创人员在美国写书，做电影，写代码，等等等等，都更加没有顾虑。美国对知识产权的保护，公认是世界最严的，至少到现在，通过美国的发展，我们肯定得不出这样的知识产权保护在阻碍创新的结论。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;朋友：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;美国可以吸引全球顶尖人才无可非议，顶尖人才创新能力和意愿强似乎也可以这么假设，因此美国创新能力强。几乎可以假设不是因为美国的知识产权保护吸引高端人才，至少应该不是主要原因。因此能否推出无论是否有知识产权保护，美国创新能力永远第一的结论？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;bobo：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不能。&lt;strong&gt;无数例子在告诉我们制度的重要性。&lt;/strong&gt;中国人到了国外都是高素质好公民；外国人到了中国也开始加塞乱丢垃圾。人的素质固然重要，&lt;strong&gt;但我认为制度是让人的素质持续发挥效能的核心原因。&lt;/strong&gt;我坚信高端人才在一个版权保护薄弱的社会，只有可能在非版权的领域发挥自己的能力。比如中国，无数别出心裁的侵权方式。&lt;/p&gt;
&lt;p&gt;而且你说的“可以假设不是因为美国的知识产权保护吸引高端人才”。这个假设我也存疑。那是什么在吸引高端人才？&lt;/p&gt;
&lt;p&gt;我认为是经济实力。这个经济实力是怎样累积的？我认为对知识的保护有巨大的贡献。因为有对知识的合理保护，所以创新者能做大做强，进而吸引更多人才。形成正向循环。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;朋友：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;嗯，我同意你的这些观点。我回头还得持续关注反对者的观点，看看他们对此有何高见。今天的讨论我很有收获！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;bobo：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我也很有收获！：）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;新的一周，大家加油！&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-06-30/readme.md" rel="alternate"/></entry><entry><id>2019/2019-06-23/readme.md</id><title>TIOBE 编程语言排行榜到底靠不靠谱？我想大家推荐另一个榜单。</title><updated>2019-06-23T00:00:00-07:00</updated><content>&lt;h2&gt;TIOBE 编程语言排行榜到底靠不靠谱？我想大家推荐另一个榜单。&lt;/h2&gt;
&lt;p&gt;不知道从什么时候开始，很多公号喜欢拿 TIOBE 编程语言排行榜说事儿。这个榜上某个语言上升一个名词下降一个名次的都要被大书特书。&lt;/p&gt;
&lt;p&gt;最典型的例子是对 Python 语言的吹捧，Python语言在最近几年的火热是众所周知的事情，不需要什么排行榜，大家都看在眼里。现在 Python 在这个排行榜是什么趋势呢？2019年6月最新的 TIOBE 编程语言排行榜是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="board" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-06-23/board.png" /&gt;&lt;/p&gt;
&lt;p&gt;Python 名列第三名。&lt;/p&gt;
&lt;p&gt;所以，Python 连小学生都要学习了，大家快来学习啊。&lt;/p&gt;
&lt;p&gt;在这里，我没有黑 Python 的意思，大家都学习 Python，掌握这么一个脚本语言，如果运用得到，在很多场景，都能大大提高工作效率，是个挺好的事情。我本人也很喜欢 Python 语言。（但绝不是铁粉）&lt;/p&gt;
&lt;p&gt;但关键在于这个逻辑。如果在 TIOBE 排行榜上排名靠前，就意味着大家都要重视，意味着是趋势的话。那么显然，小学生都应该学习 Java，因为 Java 是第一名。&lt;/p&gt;
&lt;p&gt;除了 Java，其次应该学习的，就是 C 语言了，因为 C 语言是第二名。不仅如此，从 Ratings 上看（大家可以理解成是投票数），这两个语言都和 Python 不在一个量级上。&lt;/p&gt;
&lt;p&gt;仔细观察，这个排行榜还有很多“奇怪”的地方，比如大火的 JS 语言，竟然输给 C++, C# 和 Visual Basic.NET。大家可以随便在一个群里做个小调研，看看是 JS 应用广泛，掌握的同学多，还是 C++, C# 和 Visual Basic.NET 更流行。这显然是违背现实的。&lt;/p&gt;
&lt;p&gt;所以，TIOBE 编程语言排行榜到底靠不靠谱？&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;一个排行榜靠不靠谱，这是一个伪命题。像我在&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-05-19/"&gt;《如何把技术做深？可能，这是一个错误的问题》&lt;/a&gt;中所说的，很多问题的核心，是对问题的定义。换句话说，什么是“靠谱”，不同的人，理解不同。&lt;/p&gt;
&lt;p&gt;看待一个排行榜，关键就是这个排行榜的依据是什么。如果这个排行榜的依据契合你的需求，他就靠谱，否则，就不靠谱。&lt;/p&gt;
&lt;p&gt;那么 TIOBE 编程语言排行榜的依据是什么？按照 TIOBE 官方的说法：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Popular search engines such as Google, Bing, Yahoo!, Wikipedia, Amazon, YouTube and Baidu are used to calculate the ratings&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;翻译：使用主流的搜索引擎，比如谷歌，必应，雅虎，维基百科，亚马逊，YouTube，百度等，来计算排行权重。&lt;/p&gt;
&lt;p&gt;换句话说，TIOBE 使用搜索引擎上的数据作为排名的依据。&lt;strong&gt;一个语言在TIOBE上排名越高，代表着你能在搜索引擎上寻找到更多关于这个语言的文字或者讨论。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这样一来，是不是觉得 C 语言名列第二就合理了？毕竟，C 语言有着那么久的历史，曾在整整一个时代，是所有程序员的入门语言。即使今天，在我国，大多数院校计算机专业的学习，第一门语言也是 C 语言。&lt;/p&gt;
&lt;p&gt;根据这个排名依据，TIOBE 确实能一定程度反应一个语言的流行度。但其实不能反映一个语言“当下”的流行度。因为历史在互联网世界里留下的印记，在 TIOBE 的这个指标计算方式中，会冲击真正的流行和趋势。所以，&lt;strong&gt;在 TIOBE 排行榜中，经常会看到一些老古董名列前茅，但一些明明是趋势，具有相当的发展前景的语言，却名落孙山。&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;如果不去看 TIOBE 编程语言排行榜，要如何选择学习的语言？&lt;/p&gt;
&lt;p&gt;对此，我的建议永远是：&lt;strong&gt;不要选择语言，而去选择领域。&lt;/strong&gt;换句话说，大家完全没必要去比较不同的语言的好坏，至少在新手阶段是这样的。大家应该去思考，自己想解决什么样的问题。&lt;/p&gt;
&lt;p&gt;比如你觉得移动开发很酷，能做出有意思的App，那么进而去权衡想做 Android 开发还是 iOS 开发，当你做好这个决定好以后，你主力要学习的语言基本上就已经选择好了。&lt;strong&gt;语言只是工具，服务于你想要达到的目的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通常情况下，我们很难看到一个人的头衔是某个语言专家，比如 Python 语言专家，或者 Swift 语言专家。我们只能看见机器学习专家，或者 iOS 专家，就是这个原因。领域比语言重要太多，甚至可以说，在领域面前，语言不值一提。&lt;/p&gt;
&lt;p&gt;更何况，通常，成为某个领域专家，解决这个领域越来越多的问题的过程中，都是要使用多种语言的。这里的本质，也是因为&lt;strong&gt;不同的语言适合的场景不同。&lt;/strong&gt;遇到某个场景的问题，就去用最适合的语言去解决相应的问题。再次强调，&lt;strong&gt;语言只是工具而已，但一名技术人员真正的价值，在于解决了什么问题，而不是掌握了什么语言。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当然，有一些领域，包含多种语言解决方案，比如都是做后端，Java 可以，C# 可以，C++ 可以，PHP 可以，Python 可以，JS 也可以。此时，是不是应该选择语言了呢？&lt;/p&gt;
&lt;p&gt;我的答案也不是。&lt;strong&gt;此时，应该去选择框架，语言依然是第二位。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这里，最典型的其实就是 Python 语言。Python语言可以用来做后端，但 Python 语言的火热，更多的是在大数据，人工智能领域的应用。如果仅仅是因为 Python 火，而选择使用 Python 做后端，这个决策很有可能是不明智的。&lt;/p&gt;
&lt;p&gt;依然是，我没有说不应该选择 Python 做后端，我想强调的是，&lt;strong&gt;不应该因为 Python 语言火，而选择使用 Python 做后端。&lt;/strong&gt;这个因果关系是错误的，因此可能导致以后看来，你的决策是错误的。Python 语言火的背后，有很多和后端这个领域完全没有关系的因素。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;所以，编程语言排行榜这个事儿，看看就好了。是个消遣，跟富豪排行榜似的。但真要做决定，语言不是第一要务。&lt;/p&gt;
&lt;p&gt;最后，对于排行榜，我从来不推荐 TOIBE 的编程语言排行榜。我向大家推荐 &lt;strong&gt;Stackoverflow 每年基于全球开发者统计得到的报告。&lt;/strong&gt;Stackoverflow 2019年的报告，可以&lt;a href="https://insights.stackoverflow.com/survey/2019"&gt;&lt;strong&gt;点击这里&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;为什么推荐 Stackoverflow 的报告？首先是因为这份报告每年是重新统计的，所以不会出现之前我说的互联网上的历史数据淹没趋势的现象。&lt;/p&gt;
&lt;p&gt;其次，这份调查统计是 Stackoverflow 这个近乎是全球最大的开发者问答社群，基于其真实开发者用户获得的数据。更能体现开发者的“意志”，而不会被非专业开发人员的想法所“绑架”。显然，对于具体技术的感觉，开发者自身更靠谱。&lt;/p&gt;
&lt;p&gt;比如，对于编程语言，Stackoverflow 2019 年的报告，评选出的最普遍使用的语言是这样的。是不是觉得合理很多？&lt;/p&gt;
&lt;p&gt;&lt;img alt="stack1" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-06-23/stack1.png" /&gt;&lt;/p&gt;
&lt;p&gt;另外，还记得我上面说的，&lt;strong&gt;首选框架，而非语言&lt;/strong&gt;吗？Stackoverflow 的调查也对框架进行了排名。&lt;/p&gt;
&lt;p&gt;比如，对于 Web 端的框架，排名是这样的（从2019年开始，这个调查对 Web 框架单独列榜）：&lt;/p&gt;
&lt;p&gt;&lt;img alt="stack2" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-06-23/stack2.png" /&gt;&lt;/p&gt;
&lt;p&gt;其他框架的排名是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="stack3" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-06-23/stack3.png" /&gt;&lt;/p&gt;
&lt;p&gt;对于 Stackoverflow 的调查，我最喜欢的一点，是包含一个，大家今年最喜欢的语言（或者框架）是什么？最想学习的语言（或者框架）是什么？认为正在死亡的语言（或者框架）是什么？&lt;strong&gt;在我看来，这个榜单，才更能说明趋势。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;比如，今年，大家认为&lt;strong&gt;正在死亡的语言&lt;/strong&gt;是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="stack4" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-06-23/stack4.png" /&gt;&lt;/p&gt;
&lt;p&gt;大家可以看到，在 TOIBE 编程语言排行榜上很多名列前茅的语言，在这份“正在死亡的语言”榜单上也名列前茅，是不是很有意思？&lt;/p&gt;
&lt;p&gt;那么大家此时都喜欢的，看好的语言，是什么样子的呢？是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="stack5" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-06-23/stack5.png" /&gt;&lt;/p&gt;
&lt;p&gt;嗯。。。不同背景的同学们应该能从中看出不同的东西：）&lt;/p&gt;
&lt;p&gt;框架方面也是如此。比如，大家认为&lt;strong&gt;正在死亡的 Web 框架&lt;/strong&gt;是怎样的呢？是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="stack6" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-06-23/stack6.png" /&gt;&lt;/p&gt;
&lt;p&gt;大家注意，在上面 Web 框架排名中，jQuery名列第一，但它同时在“正在死亡”的排行榜，名列第二。再次告诉了我们，&lt;strong&gt;流行的，不代表趋势。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Web 框架方面，最受大家喜欢的框架是什么样子的呢？是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="stack7" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-06-23/stack7.png" /&gt;&lt;/p&gt;
&lt;p&gt;当然了，所有的排行榜，都只是某一个角度的参考。面对这些参考，大家要怎么行动，是另外的事情了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;新的一周，大家加油！&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-06-23/readme.md" rel="alternate"/></entry><entry><id>2019/2019-06-19/readme.md</id><title>浅谈Facebook发布数字币Libra</title><updated>2019-06-19T00:00:00-07:00</updated><content>&lt;h2&gt;浅谈Facebook发布数字币Libra&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;6月18日，Facebook 公布了其筹备了近一年的加密币 Libra 的白皮书。现在这个白皮书还没有中文版，不过按照如今中文开发者社区的活跃程度，应该很快就有中文版了。想先睹为快的同学，可以访问以下英文版的链接。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://libra.org/en-US/white-paper/"&gt;https://libra.org/en-US/white-paper/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;由于微信不允许在推文中添加外链，所以需要大家手动复制地址到浏览器。不排除需要科学上网。&lt;/p&gt;
&lt;p&gt;不过，白皮书这种东西，大部分和产品宣传书差不太多。什么在全球范围可以像短信或者分享照片一样简单，安全，可靠，便捷的交易。而且更加便宜，手续费近乎为零。&lt;/p&gt;
&lt;p&gt;如果你曾经读过一两篇曾经一度很热门的诸如《五分钟带你了解区块链》，《从没有一篇文章能把区块链讲的这么明白》一类的十万加文章，应该会认同 Libra 具有这样的优势。虽然我看过的大多数这类文章，根本没有把区块链的实质给点出来。&lt;/p&gt;
&lt;p&gt;与此同时，所有基于区块链技术的加密货币都具有这样的优势。所以这些也都是废话。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;将 Libra 和大多数其他加密货币，比如比特币，区分开来的，是其背后有作为支持的实际资产抵押。Facebook 官方说法是，这个实际资产，是一系列低波动性资产，比如稳定且信誉良好的中央银行提供的现金或者政府债券。这使得 Libra 的价格近乎不可能像以比特币为首的电子币一样，有那么大的价格波动。所以，Libra 的价格不完全由，或者是完全不由用户的“共识”而决定，而由其背后作为实际支撑的资产所决定。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;李笑来的名言，傻逼的共识也是共识，一定程度对Libra失效了。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所以，Libra 是一种稳定币（stablecoin）。这是一个专有名词，有兴趣的同学可以查一查。Libra 的问世，也应该会让 stablecoin 的概念一定程度火起来，被更多的人所了解。&lt;/p&gt;
&lt;p&gt;不过，Libra 并不是世界上的第一个稳定币。以下加密币都是稳定币：DGX，TUSD，USDT，PAX...... 有兴趣的同学可以自己查一下。&lt;/p&gt;
&lt;p&gt;但要注意，稳定币不代表没有风险。只是风险更少。历史上有稳定币彻底失败的案例，比如 NuBits；&lt;/p&gt;
&lt;p&gt;而稳定币领域的绝对老大 USDT，直接使用美元做支撑，也曾在2017年曝出丑闻，疑似过量发行了超出其美元支撑金额的电子币。这里说是疑似，只是法律上的严谨而已，毕竟没证据。但我个人倾向于近乎肯定。因为USDT拒绝向公众或者权威第三方对其进行任何形式的审计或者提供证据。有一派观点认为，2017年比特币连带各种加密货币疯狂暴涨，幕后的黑手就是USDT。不过这扯远了...&lt;/p&gt;
&lt;p&gt;说回稳定币，即使是法币，也有不稳定的因素。无论是津巴布韦，还是土耳其，都在近些年由于经济危机，出现了其国家法币价值迅速下滑的情况。所以，稳定币的稳定也是相对的。但不管怎样，&lt;strong&gt;我坚信 Libra 的稳定性，比现在市面上主流的加密币，应该是稳定了不止一两个量级。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;由于 Libra 是一种稳定币，其价格是由其背后支撑它的资产背书的。所以，获得 Libra 的手段不是“挖矿”，而是使用法币兑换。也就是。。。充值。。。&lt;/p&gt;
&lt;p&gt;这使得区块链技术界的很多人，并不很认同 Libra。因为如果没有可以让普通人参与的“挖矿”机制，就意味着 Libra 不是“去中心化”的。而“去中心化”，近乎是区块链技术的核心。&lt;/p&gt;
&lt;p&gt;或许也正是这个原因，使得 Libra 和比特币有着本质的区别。Libra 白皮书的发布，也并没有导致比特币大涨。&lt;/p&gt;
&lt;p&gt;但我个人认为，至少在现阶段，这并无妨。对于其他加密货币，虽然本质确实是去中心化的，但是，一旦被实际作为货币使用，无论是支付，还是交易，都要经过第三方，此时，这些货币都一定程度中心化了。&lt;/p&gt;
&lt;p&gt;交易所是最好的例子。当我们在一个交易所交易电子币的时候，交易所就成为了电子币的中心。交易所可以看到每个人名下的资产信息；交易所可以更改，没收你名下的资产；当然，国家或者其他权力机构也可以勒令交易所没收你名下的资产；如果交易所的安全防线被突破，你的资产也将遭受威胁。&lt;/p&gt;
&lt;p&gt;这就是为什么出现过那么多起交易所跑路或者被黑的事件后，投资者的财产都遭受了严重的损失，而并没有像加密币所宣称的那样“安全”。&lt;/p&gt;
&lt;p&gt;另一方面，在现阶段，我认为完全去中心化的货币，时机还并没有成熟，或者还远远没有成熟。这就像我们的社会，离共产主义还很远很远，是一样的。&lt;/p&gt;
&lt;p&gt;完全的去中心，完全的匿名，将给洗钱，贿赂，勒索，等各种犯罪活动提供温床。基于比特币，已经有无数事件向我们证明了这一点。&lt;/p&gt;
&lt;p&gt;这就好像绝对的言论自由，近乎一定将会产生无端的谩骂，诽谤和人身攻击；绝对的身体自由，我都不敢想象会发生什么。&lt;/p&gt;
&lt;p&gt;所以，自由是相对的，至少在短期内，人类社会会是如此。关键是，如何界定有限自由（法律）；谁有权利剥夺他人自由（法院）；剥夺他人权力的自由如何被监督（三权分立）；以及如何执行这份权力（国家机器），等等等等。&lt;/p&gt;
&lt;p&gt;因此，&lt;strong&gt;我认为 Libra 其实走在了一条正确的，符合历史发展，社会发展的道路上。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;其实，&lt;strong&gt;Libra真正要做的，是支付网络。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当然了，本质上，&lt;strong&gt;区块链本身就是支付网络。这是所有加密币价值的核心来源。&lt;/strong&gt;理解这一点并不容易。&lt;/p&gt;
&lt;p&gt;这有点儿像，爱因斯坦像我们揭示了：空间不仅仅是“空间”，空间其实是一个“场”，&lt;strong&gt;我们所处的整个宇宙空间，是一个巨大的“引力场”。&lt;/strong&gt;理解到这一点，是理解爱因斯坦的相对论，尤其是广义相对论到底在说什么的金钥匙。也是现代物理学和古典物理学的巨大分水岭。&lt;/p&gt;
&lt;p&gt;同理，比特币（以比特币为例）不仅仅是一个“币”，比特币是一个支付网络（区块链）。没有这个网络，就没有比特币；没有比特币，也就没有这个网络。&lt;strong&gt;比特币价值的核心，是其背后的这个网络的价值。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在我看来，是否将比特币和其背后的网络分割来看，甚至根本意识不到比特币背后所存在的网络，是“币圈”和“链圈”的核心分水岭。&lt;/p&gt;
&lt;p&gt;但是，在这里，我不想对这个问题解释的过多，因为在我尝试向一些人解释这个问题之后，我意识到了很多人并不想这么看问题，所以很容易陷入鸡同鸭讲的境地。&lt;/p&gt;
&lt;p&gt;我并不是说我比别人多高级，毕竟无论是鸡还是鸭，都是一个级别的家禽类动物。烧着吃都不错。我只是说，对这个问题，大家背景不同，接收的信息源不同，认识也就不同，所以得到不同的结论，完全是正常的。&lt;/p&gt;
&lt;p&gt;如果你认为比特币（包括所有的加密币）都是骗人的，我无法反驳你，也不想反驳你。更何况咱们伟大祖国都这么定性了。所以，这么想挺好的。少了很多风险和麻烦。&lt;/p&gt;
&lt;p&gt;说回 Libra，&lt;strong&gt;如果我理解的没有错，Libra 其实就是想认认真真的做回区块链技术的本源：在符合当下人类社会经济发展的规则和制度下，利用区块链技术，做一个有影响力的支付网络。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;从现在Libra背后的支撑企业来看，实力都是极其雄厚的。甚至，有很多本身做支付网络的大佬，在支持这个新兴的支付网络，比 VISA 和 mastercard。&lt;/p&gt;
&lt;p&gt;&lt;img alt="libra" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-06-19/libra.png" /&gt;&lt;/p&gt;
&lt;p&gt;但是，整体情况，还是并不乐观。&lt;/p&gt;
&lt;p&gt;欧洲现阶段整体对 Libra 并不欢迎。&lt;/p&gt;
&lt;p&gt;&lt;img alt="europe" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-06-19/europe.png" /&gt;&lt;/p&gt;
&lt;p&gt;这其实不赖欧洲，赖美国。因为，Libra 是一家由美国企业发布的电子货币。纵使是私人企业，也很容易被认为其背后代表的是“美元体系”，而非一个“更方便安全快捷”的支付网络这么简单。&lt;/p&gt;
&lt;p&gt;要知道，当年金融危机，美国人疯狂地做空欧元，就是为了保住美元在世界经济体系中的霸主地位。再加上早些年以 Facebook 为首的科技企业在隐私方面的问题，引发了欧洲最严隐私法 GDPR 的产生。欧洲整体对这家美国企业发布的电子币有一定的戒心，是无可厚非的。&lt;/p&gt;
&lt;p&gt;但其实，即使在美国，Libra 可能也会比想象中的艰难。最新的新闻，美国的监管机构已经开始向 Facebook 的 Libra 喊停。&lt;/p&gt;
&lt;p&gt;&lt;img alt="us" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-06-19/us.png" /&gt;&lt;/p&gt;
&lt;p&gt;所以，&lt;strong&gt;现在 Libra 面对的问题，其实根本不是技术问题，而是制度问题。&lt;/strong&gt;毕竟，区块链技术本质是要颠覆现行的货币制度，这不是一个小事情。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不过，如我上文曾经说的，&lt;strong&gt;我认为 Libra 走在了一条正确的，符合历史发展，社会发展的道路上。&lt;/strong&gt;很多细节问题的梳理，可能还需要时间。&lt;/p&gt;
&lt;p&gt;在我这个《是不是很酷》公众号刚申请后不久，我就曾发表过一篇文章&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2018/2018-01-30/"&gt;《随便聊聊比特币和区块链》&lt;/a&gt;。整体，我还是十分看好区块链技术的未来的。&lt;/p&gt;
&lt;p&gt;对了，顺便一提，虽然我国将 ICO 定为非法，但我国在区块链技术上可并不弱。以美国为首的很多国家，都在盯着我国，看我国要基于区块链技术有什么大动作。&lt;/p&gt;
&lt;p&gt;不信？随便在 Google 上搜索 &lt;strong&gt;China blockchain&lt;/strong&gt; 的关键词，得到的结果是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="google1" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-06-19/google1.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="google2" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-06-19/google2.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="china" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-06-19/china.png" /&gt;&lt;/p&gt;
&lt;p&gt;我就不翻译了。&lt;/p&gt;
&lt;p&gt;在我上面的文章&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2018/2018-01-30/"&gt;《随便聊聊比特币和区块链》&lt;/a&gt;里，我就说过：&lt;strong&gt;对ICO定性为非法融资，可以理解成是国家对电子货币发行的一种规范。至于这个规范的意义，我想不是“电子货币要玩儿完”，而更多的是“这个事儿大家不要自己搞了，国家队接手了”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;以上。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;P.S. &lt;/p&gt;
&lt;p&gt;补充一句：我认为国家定性ico非法是没有毛病的，直接堵住了很多骗子依托ico进行金融诈骗的门路；而且现在基于ico也确实没什么能给社会带来价值的应用，不算打击创新。但是区块链是一项重要的，有应用前景的技术，国家为了保持竞争力，也要发展挖掘利用这种技术。这两者不矛盾。&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-06-19/readme.md" rel="alternate"/></entry><entry><id>2019/2019-06-16/readme.md</id><title>嘿，瞎说什么大实话。</title><updated>2019-06-16T00:00:00-07:00</updated><content>&lt;h2&gt;嘿，瞎说什么大实话。&lt;/h2&gt;
&lt;p&gt;这是一篇相对比较个人的文章，没有技术干货，只对技术干货感兴趣的同学，在这里就可以关闭了：）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;之前，我写了一篇文章，&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-06-03/"&gt;《答读者问 | 这个年代，还有必要学英语吗？非说没必要，也没毛病》&lt;/a&gt;。一个很久没联系的老朋友，突然给我发来一个微信。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“看你玩儿公众号玩儿的很high？竟说大实话，有流量吗？”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我一看就乐了。和他聊了起来。&lt;/p&gt;
&lt;p&gt;我和他自小学就认识。我自认为身边有很多大神朋友，但是如果说“聪明”，我觉得大多数人都和我一样，并非聪明之辈。所以，我写了文章&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2018-07-18/"&gt;《天生不聪明》&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;但是，他是少有的，让我不得不承认，这个世界上真的有“聪明人”的人。&lt;/p&gt;
&lt;p&gt;本科的时候，大家都玩儿《魔兽争霸》，他竟然垄断了某个服务器上的资源，然后风生水起的做起了“虚拟”生意，大赚特赚。此后他折腾的各种玩意儿，大多让我瞠目结舌，极大地拓宽了我对这个世界的认识。在赚钱这件事儿上，我向他学到了很多。&lt;/p&gt;
&lt;p&gt;他和我一样，是个创业者。大多数创业者，都多多少少是“功利主义者”，我也一样。这里说的“功利”，就是钱。因为创业的职责，首先就是保证存活，自己也好，团队也罢。如何保证存活？就是要赚到钱。你可以谈理想，但是要先让大家吃饱肚子。不然，你再有理想，在别人眼里，也是个骗子。这是个很残酷的事实。&lt;/p&gt;
&lt;p&gt;当然，赚钱分“站着赚”和“跪着赚”。但什么是“站”？什么是“跪”？这是一个没有客观标准，非常主观的问题。同样的姿势，有的人觉得是“站”，有的人觉得是“跪”。&lt;/p&gt;
&lt;p&gt;我向来喜欢听每个人对这类主观问题的见解，但对这类问题，我从来不站队。&lt;/p&gt;
&lt;p&gt;小时候，有人说我没有个人见解。&lt;/p&gt;
&lt;p&gt;长大了，我才想明白，&lt;strong&gt;其实，“没有对错”，就是我的见解。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于写公众号这件事儿，粉丝数量，转发数量，阅读量，等等等等，都是硬性指标。发文章，讲的是流量。&lt;/p&gt;
&lt;p&gt;所以，我的这位朋友对我发出了来自灵魂深处的疑问。&lt;strong&gt;你这么写，都是大实话，有流量吗？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;拿&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-06-03/"&gt;《答读者问 | 这个年代，还有必要学英语吗？非说没必要，也没毛病》》&lt;/a&gt;这篇文章来说，核心观点就是：如果觉得英语学习没有用，不学也没事儿。关键是把自己觉得有用的学好。&lt;/p&gt;
&lt;p&gt;这个观点太不讨好观众了。喜欢学英语的不喜欢，正在努力学英语的不喜欢，想努力把英语学好的，也不喜欢。&lt;/p&gt;
&lt;p&gt;你说不好好学英语的人会喜欢？呵呵，不好好学习的人怎么会关注我的公众号？&lt;/p&gt;
&lt;p&gt;“但你说，我的观点有毛病吗？”，我问。&lt;/p&gt;
&lt;p&gt;“一点毛病都没有，就是完全没有传播度。”&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;他又拿出一篇我的文章，&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-05-20/"&gt;《浅谈Google限制华为》&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;“这篇文章是什么鬼？”他再次发出来自灵魂深处的疑问。&lt;/p&gt;
&lt;p&gt;还用红字标出，&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“我只能简单地说：对于这场贸易战，从道德的角度，我不站队。” &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="question" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-06-16/question.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“谁的理更多一些？谁的错更少一些？我相信，这是说不清楚的。” &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="question" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-06-16/question.png" /&gt;&lt;/p&gt;
&lt;p&gt;“你是认真的吗？你写公众号的，难道不看别的公众号吗？”&lt;/p&gt;
&lt;p&gt;“还，...真没怎么看”，我老实巴交地回答。&lt;/p&gt;
&lt;p&gt;”来来来，学习一下最近的10万+。“&lt;/p&gt;
&lt;p&gt;他一甩手，丢给我一沓链接。标题基本都是一个套路。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;什么什么怎么就沸腾了，美国人怎么怎么就懵逼了。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;也不算骗人，美国人要是能看懂，一定真的很懵逼。&lt;/p&gt;
&lt;p&gt;“你写的挺不错，也挺有深度，但真的不利于传播。”他开始总结性发言了。我还是很相信他的判断的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“嘿，瞎说什么大实话。”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当然，我们都知道：&lt;strong&gt;实话不止如此，没有说的话太多太多。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们就又在微信里聊了起来。&lt;/p&gt;
&lt;p&gt;在国内的时候，我和他曾经保持着每周一次夜谈的不成文的默契，很多时候，一下子聊到天亮。直到我因为家庭原因，跑到了国外。&lt;/p&gt;
&lt;p&gt;面对面的交流，没什么顾及，想说什么说什么，想骂什么骂什么。每次和他的交流，都是一次酣畅淋漓的旅行。从商业，到技术；从文学，到艺术；从经济，到历史。&lt;/p&gt;
&lt;p&gt;如果没有曾经的自由，我不会意识到，在微信里交流，会这么拘束。&lt;/p&gt;
&lt;p&gt;很快，我们在微信的交流，成为了猜谜游戏。每句话都充斥着各种暗语和字母，刚开始，我还觉得拆解这些“暗语”是很有意思很酷的事情，但很快，一股悲凉从心而生。&lt;/p&gt;
&lt;p&gt;虽然我们都不是什么“核心价值观好青年”，但我们也是衷心希望祖国繁荣昌盛的好少年（中年？）啊！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;为什么会被逼得如此说话？这真的正常吗？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我不知道。但我知道，这真的一点儿都不酷。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最近的时事热闻，一个发生在香港。&lt;/p&gt;
&lt;p&gt;香港是中华人民共和国的特别行政区，但大多数人对发生在香港的事情一无所知。更不要说充分地讨论了。&lt;/p&gt;
&lt;p&gt;我的投资老板，是在香港挖的第一桶金，现在移居在澳洲。香港对于他，有着不同寻常的意义。&lt;/p&gt;
&lt;p&gt;他在朋友圈转发了一篇文章，叫&lt;a href="https://mp.weixin.qq.com/s?__biz=Mzg2MDE1ODM2OA==&amp;amp;mid=2247483806&amp;amp;idx=1&amp;amp;sn=c2e8ce14e564536d63ac04be409977b8&amp;amp;chksm=ce2be151f95c6847b554ffad8e2c2e4a6b9d204a6acaf52fdb0b6454a6b8030592e6ae26992d&amp;amp;scene=21#wechat_redirect"&gt;《香港，香港》&lt;/a&gt;。我看了一下，是一篇十万加，就是一篇像香港旅游宣传片一样的文字。没有任何敏感内容。但作者关闭了评论通道。&lt;/p&gt;
&lt;p&gt;我总在想，不同的人，不同的经历，和这片弹丸之地有着不同的纠葛，看到这篇文章，会想到什么，念起什么。&lt;/p&gt;
&lt;p&gt;我不知道。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;另一个事情，是电影《八佰》，因“技术原因”被取消放映。这道取消令来得如此突然，观虎导演在前一天，还在为电影做宣传。&lt;/p&gt;
&lt;p&gt;贾樟柯在微博上说“电影事业，不能这么搞”，并且配了一张乌云蔽日的照片。&lt;/p&gt;
&lt;p&gt;&lt;img alt="weibo" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-06-16/weibo.png" /&gt;&lt;/p&gt;
&lt;p&gt;朋友跟我说，你口口声声做技术原创，这个“技术原因”，是不是要好好分析一下？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我说，我的技术能力还没有那么强。&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;说到《八佰》描述的这个主题，就要提到台湾。&lt;/p&gt;
&lt;p&gt;我曾和朋友一起在台湾旅游，自驾环岛一圈。我个人极其喜欢台湾的风土人情。&lt;/p&gt;
&lt;p&gt;在新加坡的时候，有一次，几个（新加坡）同事想一起去台湾开个会，顺便再玩儿一圈。结果，我和老婆悲哀的发现，由于我们是中国护照，所以需要办很多额外的手续，才能入境台湾。最后，因为时间太紧，我和老婆只得放弃了这个本来应该是“说走就走”的旅行。&lt;/p&gt;
&lt;p&gt;新加坡的同事惊讶地表示，以为台湾是中国领土不可分割的一部分，为什么中国公民出入台湾，竟然比我们还严格？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我无言以对。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1986年，崔健在北京工人体育馆举行的百名歌星演唱会上演唱了《一无所有》，宣告了中国摇滚乐的诞生。那时，我半岁。&lt;/p&gt;
&lt;p&gt;1989年，崔健创作并完成专辑《新长征路上的摇滚》；1991年，某个著名的历史事件两年后，崔健发行了《解决》。其中，收录了这篇文章开头我放的音乐：《一块红布》。那一年，我6岁，懵懂地步入了小学课堂。&lt;/p&gt;
&lt;p&gt;严格来说，崔健并不是我这个年代的音乐人，而属于比我更早的年代。直到又过了6年，我上初中，才开始接触崔健的音乐。那时候的男孩子，包括我，听崔健，更多的是在耍酷。虽然已隔十几年，但其实完全听不懂。只是，似乎，除了崔健，中国就没有真正的摇滚乐了。&lt;/p&gt;
&lt;p&gt;那时候，听《一块红布》，最喜欢里面的一句歌词，&lt;strong&gt;“可你的嘴将我的嘴堵住”。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这喜欢，完全来自青春期的躁动。&lt;/p&gt;
&lt;p&gt;但将近二十年后，再听《一块红布》，竟然还最喜欢这句歌词，&lt;strong&gt;“可你的嘴将我的嘴堵住”。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;但这回，我仿佛听见，崔健跟所有人说，&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“嘿，瞎说什么大实话”。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;2019.06.16 于美国 Santa Clara&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;img alt="red" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-06-16/red.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《一块红布》部分歌词摘抄：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;那天是你用一块红布&lt;/p&gt;
&lt;p&gt;蒙住我双眼也蒙住了天&lt;/p&gt;
&lt;p&gt;......&lt;/p&gt;
&lt;p&gt;你问我还要去何方&lt;/p&gt;
&lt;p&gt;我说要上你的路&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;看不见你也看不见路&lt;/p&gt;
&lt;p&gt;我的手也被你攥住&lt;/p&gt;
&lt;p&gt;你问我还在想什么&lt;/p&gt;
&lt;p&gt;我说我要让你做主&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我感觉你不是铁&lt;/p&gt;
&lt;p&gt;却象铁一样强和烈&lt;/p&gt;
&lt;p&gt;我感觉你身上有血&lt;/p&gt;
&lt;p&gt;因为你的手是热呼呼&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我感觉这不是荒野&lt;/p&gt;
&lt;p&gt;却看不见这地已经干裂&lt;/p&gt;
&lt;p&gt;我感觉我要喝点水&lt;/p&gt;
&lt;p&gt;可你的嘴将我的嘴堵住&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我不能走我也不能哭&lt;/p&gt;
&lt;p&gt;因为我的身体已经干枯&lt;/p&gt;
&lt;p&gt;我要永远这样陪伴着你&lt;/p&gt;
&lt;p&gt;因为我最知道你的痛苦&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;那天是你用一块红布&lt;/p&gt;
&lt;p&gt;蒙住我双眼也蒙住了天&lt;/p&gt;
&lt;p&gt;你问我看见了什么&lt;/p&gt;
&lt;p&gt;我说我看见了幸福&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;新的一周，大家加油！：）&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-06-16/readme.md" rel="alternate"/></entry><entry><id>2019/2019-06-10/readme.md</id><title>稀奇古怪面试题三则</title><updated>2019-06-10T00:00:00-07:00</updated><content>&lt;h2&gt;稀奇古怪面试题三则&lt;/h2&gt;
&lt;p&gt;在这一周，我的专栏更新的文章《从费米估算，到黑暗森林》中，我仔细向大家介绍了一类特殊的面试问题 —— 估算问题的思考思路。如果对我在慕课网上的专栏不了解的同学，可以参考这里：&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-05-06/"&gt;《正式邀请你，和我一起，用技术人的眼光，探索世界》&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;那么在这一周的公众号推文中，我就再给大家分享3道“非典型”的面试问题：）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;先来一个不是太怪的问题，相信很多人都听过。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在一天的时间里，钟表的时针和分针会重合多少次？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;解析：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;答案是22次&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;这个问题可以使用编程的方式，具体地求出这22个时针和分针重合的时间都在几点几分。不过，其实只需要稍微想一想，就能想出这个答案：）&lt;/p&gt;
&lt;p&gt;大家可以思考一下，在午夜零点的时候，是一天里第一次时针和分针发生重合的时候。下一次在什么时候呢？因为第一分钟，分针就会直接越过时针，所以，&lt;strong&gt;在0:00-1:00之间，不可能再发生时针和分针重合的时候了。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下一次时针和分针发生重合的时候，一定是在1点多。具体多少我们可以不求了，但我们知道，1点多一定有一次时针和分针重合的时候。&lt;/p&gt;
&lt;p&gt;那么再下一次呢？相信聪明的同学们很快就能想明白，在两点多的位置。&lt;/p&gt;
&lt;p&gt;再下一次呢？是三点多。&lt;/p&gt;
&lt;p&gt;依此类推。&lt;/p&gt;
&lt;p&gt;大家可以思考一下，在时针走回12点之前，最后一次时针和分针重合的时候是什么时候？答案是在十点多，而不是11点多。&lt;strong&gt;11:00-11:59这段时间里，时针和分针不会再重合了。&lt;/strong&gt;分针走过11:00-11:59这一圈的过程中，时针总会比分针更接近12点的位置，直到最后一分钟，时针和分针再次同时指向12点。&lt;/p&gt;
&lt;p&gt;因此，在0:00-11:59这12个小时里，时针和分针一共重合了11次。这11次分别是零点；1点多；2点多；3点多；4点多；5点多；6点多；7点多；8点多；9点多；10点多。&lt;/p&gt;
&lt;p&gt;那么在一天的时间里，一共24个小时，也就是时针要绕表盘转两圈，所以，一共重合了22次：）&lt;/p&gt;
&lt;p&gt;有兴趣的同学可以尝试一下，具体用编程的方式（甚至用数学的方式？）求解一下这22次分别是什么时间：）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;你想要检验你的好朋友，同时也是计算机大牛的bobo老师是否知道你的正确的手机号码。&lt;/p&gt;
&lt;p&gt;但是，小慕同学不让你接近bobo老师，只给你一张卡片，让你写一个问题给bobo老师。小慕会将这张卡片传给bobo老师，然后再将bobo老师的回答用这个卡片传回来。这一问一答的过程，你就需要判断出：bobo老师是否知道你的正确的电话号码。&lt;/p&gt;
&lt;p&gt;但是，你并不希望小慕同学知道你的电话号码。可是，小慕同学一定会偷看你和bobo老师写在卡片上的内容的。&lt;/p&gt;
&lt;p&gt;请问，你要怎么写这张卡片？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;解析：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最中规中矩的方法，是使用校验算法（或者摘要算法，哈希算法，不可逆的加密算法，但不管怎样，核心是做校验。）你可以在卡片上写上任意校验算法名称，根据正确的手机号码得到的校验码，以及其他必须的校验信息（如果有的话）。由于bobo老师是计算机大牛，所以可以假设bobo老师可以看懂你写的任何校验算法，然后将他知道的手机号码相应地转换成校验码，和你提供的校验码作比较，之后回答校验成功或者失败就好了。&lt;/p&gt;
&lt;p&gt;整个过程，小慕只能看到校验算法相关的信息和校验码，是不能反推出原始信息的。&lt;/p&gt;
&lt;p&gt;但是，对于这个问题，其实可以直接在卡片上&lt;strong&gt;要求bobo老师根据他所知道的号码给你打一个电话&lt;/strong&gt;，就能知道bobo老师手上的电话号码是否正确啦！&lt;/p&gt;
&lt;p&gt;是不是发现，&lt;strong&gt;有些时候，跳出程序员思维，事情会更简单：）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;设计一个疏散旧金山市市民的方案&lt;/p&gt;
&lt;p&gt;（如果对旧金山不熟悉，可以把问题改变成：设计一个疏散北京城市民的方案，或者疏散你所在的城市市民的方案。）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;解析：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;面对这个问题，面试官希望听到你反问：具体是因为什么灾难，要疏散城市的市民？因为具体原因不同，灾难的情况不同，就可能对疏散计划有细节上，甚至是整体上的影响。在问清楚具体情况之前，任何设计方案都一定是不对的。&lt;/p&gt;
&lt;p&gt;实际上，这种把问题搞清楚的能力，是职场的基本素质。很多时候，人和人的差距并不在具体的技术水平上，而是在这类“软”技能上。沟通是否有效？任务是否明确？目标是否清晰？很多时候，都将直接直接影响你的工作效率。之前，我写过一篇文章，&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-05-19/"&gt;《如何把技术做深？可能，这是一个错误的问题》&lt;/a&gt;，说的也是这个问题：）&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;最后，我必须要说：这些面试问题都是“非典型的”，这意味着其实你去外面找工作，遇到这样的问题，概率是很低的。在这里和大家分享，好玩为主。&lt;strong&gt;对于面试，关键还是要基础扎实。&lt;/strong&gt;所以，大家在准备面试的时候，切不要把精力放在这些偏题怪题上，&lt;strong&gt;踏踏实实学好基础，真的是最快的捷径。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不信的话，我的公众号之前发送过一批“福利”，是一个HR小姐姐的团队整理的2019年今日头条Java后端的面试真题。在我的公众号后台输入“&lt;strong&gt;头条面试&lt;/strong&gt;”即可领取。大家可以看一看，今日头条的面试真题，是不是没有偏题怪题？全都是稳扎稳打的“基础题”？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-06-10/readme.md" rel="alternate"/></entry><entry><id>2019/2019-06-03/readme.md</id><title>答读者问 | 这个年代，还有必要学英语吗？要说没必要，也没毛病</title><updated>2019-06-03T00:00:00-07:00</updated><content>&lt;h2&gt;答读者问 | 这个年代，还有必要学英语吗？要说没必要，也没毛病&lt;/h2&gt;
&lt;p&gt;上一周，我的专栏更新《学英语的最佳年龄到底是什么时候？》，谈了谈英语学习的相关话题。为了配合专栏的更新，我上一周的推文《看美剧学英语靠不靠谱？我说靠谱，方法都在这里了》也是聊英语学习方法的。&lt;/p&gt;
&lt;p&gt;于是，有一个同学给我发来了这样一个问题：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;现在翻译工具这么多，翻译工具翻译的越来越准确，程序猿还有必要学习英语吗？比如我学react，也经常上官网看一些api，大部分情况下都是用谷歌翻译，基本上都能知道大体意思；再比如react发布了新特性，上面有一段视频是介绍react hooks的特性，虽然95%以上我不知道那小哥在讲什么，但是我能看懂他写的代码。所以，在当下，学习英语真的很有必要吗？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;估计很多同学看到这个问题，会猜这篇推文我要侃侃而谈英语学习的必要性了。不过，我想我的回答会让很多同学大跌眼镜。&lt;/p&gt;
&lt;p&gt;虽然我认为英语确实很重要；从我尚不长的人生经验看，我坚信我还不算太差的英语，能够让我相对无碍地直接查看英文资料，也帮助了我很多很多，甚至在几个我经历的关键节点，说改变了我的人生都不为过。&lt;/p&gt;
&lt;p&gt;但是，面对这个问题，我的回答却是：&lt;strong&gt;如果你真心认为没必要学，那么就没必要学。&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;bobo老师的回答：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;大家年龄进入了成年，脱离了基础教育体系之后，进行自学，我比较尊崇这样一个观点：&lt;strong&gt;如果你觉得没必要学习，同时自己也没有兴趣，那就不需要去学。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;换句话说，我认为如果你选择学习一个技能，应该是因为：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 或者你觉得这个技能有用。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;比如有一些同学学习编程，可能只是觉得编程有用而已。其实他们可能并不是那么喜欢编程，但编程能找到一份工资还不错的工作，那就学呗。毕竟，干什么都要学，为什么不学一个热门的，获得高工资的概率更大的技能呢？这个想法一点儿毛病都没有。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 或者你对这个技能感兴趣。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;据我所知，很多同学学习英语，并不是因为英语对他的工作多有用，而是因为感兴趣，觉得能看懂《冰与火之歌》的原版，或者没有字幕看美剧，或者到国外和老外侃侃而谈，是件很酷的事情，所以开始学英语。至于英语进步以后，意外获得了一些更好的工作机会，完全是计划之外的，自己都没有想到的事情。&lt;/p&gt;
&lt;p&gt;很多同学学习绘画，学习吉他，也是因为兴趣，绝不是要从事艺术行业的工作。&lt;/p&gt;
&lt;p&gt;甚至我知道一些同学学习算法，都是因为兴趣。并不是自己的工作对算法的要求有多高，也不是自己想怎么靠着算法水平去升职加薪。有些同学只是想了解，那些烧脑的算法问题，背后的解决逻辑是怎样的，而已。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;如果，对于一个技能，你认为既没有用，又没有兴趣，那我个人就建议，没必要学习。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不用纠结一个技能有没有用。这个问题没有意义。因为所有的技能，出现在了这个世界上，就一定是有用的。&lt;strong&gt;问题的关键是，这个技能对你有没有用。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果你的问题是不知道它有什么用，别人还可以告诉你，这个技能能做这个，能干那个；&lt;/p&gt;
&lt;p&gt;但是如果像这个提问的同学一样，已经很明确的感知到英语这个技能，毫无作用，那么事实很可能就是这样的：现阶段而言，英语对你就是没有用。如果已经有了这么清晰的判断，我个人的建议就是：不要学。&lt;/p&gt;
&lt;p&gt;原因很简单，在这种情况下，学习效率实在太低了。大家都是成年人，已经有了充足的自我选择的空间和自由，完全没有必要再像基础教育的时候一样，被别人逼着去学习了。别人逼着学，谁都不开心，好不容易长大了，为什么不开开心心做自己喜欢的事儿？&lt;/p&gt;
&lt;p&gt;比如数学，很多同学就觉得没用，工作的时候也用不到。那在我看来，就没必要去学。什么时候突然发现：有些机会，自己抓不到，但是别人能抓到，是因为那些人的数学比自己好的时候，再去学。学起来自然有目标，有动力，效果会很显著。&lt;/p&gt;
&lt;p&gt;再比如算法，很多同学也觉得没用。所以我干脆写了一篇文章，叫&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-03-18/"&gt;《学算法有什么用，可能真没用》&lt;/a&gt;。也是这个意思。作为一个教算法的老师，天天喊大家可能不用学算法，也是没谁了。慕课网都拿我很无奈。&lt;/p&gt;
&lt;p&gt;你说算法决定了一个计算机工作者的基础素养和技术上限，我同意。但我确实看到了很多大牛，也在互联网行业摸爬滚打，混得风生水起，可是算法真的不怎么样。我说的是大实话。感兴趣的同学可以再看看那篇文章。&lt;/p&gt;
&lt;p&gt;对于很多同学而言，算法的核心作用可能就是应付面试。那就学到能应付面试为止就好了。面试算法真的不难。目标明确的话，学起来也很有动力，效率也很高。等什么时候，你发现限制自己技术的天花板是算法的时候，再去好好学算法。学起来自然有目标，有动力，效果会很显著。&lt;/p&gt;
&lt;p&gt;又比如英语，在我看来也是这样的。这名同学的提问有问题吗？我觉得没有任何问题的。虽然我认为英语很重要，而且我看到的事实是，在统计意义上，英语越好的同学，机会越多，但是这不代表要想走向成功，英语必须好。讲真，英语不怎么样，做得很成功的人，一抓一大把。&lt;/p&gt;
&lt;p&gt;我印象最深的，就是2016年的苹果发布会，请到了超级玛丽的设计者宫本茂。宫本茂说的那两句英文，显然是事先准备好的。但就是准备好的这两句，他说的那个蹩脚程度，看他的表情，我自己都替他觉得尴尬。&lt;/p&gt;
&lt;p&gt;&lt;img alt="mario" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-06-03/mario.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;但那又怎样呢？人家是享誉全球的大IP超级玛丽之父啊！当他用蹩脚的英语宣布超级玛丽将会上架 App Store 的时候，会场上爆发出了在我看来是那场发布会最热烈的欢呼。任天堂的股价当天直飙18.79%。&lt;/p&gt;
&lt;p&gt;我在互联网上没有看到任何一个人讨论宫本茂大神的英语问题。&lt;/p&gt;
&lt;p&gt;那么，学英语是必须吗？必须不是啊！&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;所以，问题又回到了我在&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-03-08/"&gt;《学算法有什么用，可能真没用》&lt;/a&gt;一文中最后的观点：一个东西是不是没有用，这不是一个核心的问题。核心的问题是：对于每个人来说，我们能不能理清对自己来说，有用的是什么？当下自己学习什么，受益最大，效益最高？或者自己最感兴趣，所以学习速度可能最快，获得的成就可能最卓越？这才是最最最重要的问题。&lt;/p&gt;
&lt;p&gt;一旦想明白了对于自己来说，什么东西最有必要学，就一股脑地去学好了。学的过程中，大家可能会发现需要其他领域的知识支撑，再去补就好了。效果最好，效率最高。甚至不去补，想办法绕过它，就像这名同学说的，谷歌翻译挺好的啊，对于我的需求，足够了啊。那就ok。继续向着自己的目标去。&lt;/p&gt;
&lt;p&gt;其实，真的没有那么多人去关注你不会什么，没学什么；&lt;strong&gt;在社会上，大家普遍更关注的是：你会什么，学了什么，做了什么。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不要在意别人的目光。&lt;/p&gt;
&lt;p&gt;不要认为所有人都觉得该会的东西你一定要会，比如英语和数学；&lt;/p&gt;
&lt;p&gt;也不要认为所有人都觉得该有的东西你一定要有，比如房子和车子。&lt;/p&gt;
&lt;p&gt;关键是想清楚自己想要什么。如果能想清楚这个问题，即使最后得出的结论和大多数人是一样的，在我看来，也是酷酷的。因为，你有属于你自己的思考。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在我看来，“酷”从不代表着和别人不一样。因为“酷”本身，和别人一点儿关系都没有。“酷”的来源，是对自己的深刻了解。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当然了，我也必须要说，对于很多同学，可能还想不清楚自己要什么，可能还在探索自己的方向，这也很正常。在这种情况下，如果问我，从事计算机行业，建议学什么？&lt;strong&gt;我给的建议是：学好计算机的基础知识（算法，数据结构，操作系统，等等等等）和英语。&lt;/strong&gt;因为以我的认知，这二者是最通用的，能最大概率让大家脱颖而出，或者带给大家新机会的技术。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-06-03/readme.md" rel="alternate"/></entry><entry><id>2019/2019-05-30/readme.md</id><title>看美剧学英语考不考谱？我说靠谱，但别较劲</title><updated>2019-05-30T00:00:00-07:00</updated><content>&lt;h2&gt;看美剧学英语考不考谱？我说靠谱，但别较劲&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;上周，我的推文&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-05-19/"&gt;《如何把技术做深？可能，这是一个错误的问题》&lt;/a&gt;一文中，我曾经谈到过英语学习，特别是英语阅读的问题。&lt;/p&gt;
&lt;p&gt;在这一周，我在慕课网的专栏更新的&lt;a href="https://m.imooc.com/collector/27?distId=1a99b&amp;amp;utm_source=fenxiao"&gt;《学英语的最佳年龄到底是什么时候》&lt;/a&gt;一文中，带领大家看了一篇比较新的研究英语学习的论文，又谈到了这个问题。&lt;/p&gt;
&lt;p&gt;其实，两篇文章都指向一个方向：&lt;strong&gt;想提高英语水平，最简单的方法，也或许是唯一的方法，就是不停地接触英语。&lt;/strong&gt;用英语去看书，看剧，看新闻，看动漫，打游戏，学习，交流。时间长了，自然而然，就会提高，想拦都拦不住。&lt;/p&gt;
&lt;p&gt;很多同学总把注意力放在非常细节的学习方法上，比如遇到不会的词要不要查？每张纸查几个词？不会的词要不要记录？要不要复习？怎么复习？什么频率？。。。&lt;/p&gt;
&lt;p&gt;对这些具体问题，我确实有一些建议，有机会可以再细说。但是整体上，&lt;strong&gt;在“长期大量接触英语”这个方法面前，所有的这些细节问题都是雕虫小技。&lt;/strong&gt;在具体使用英文的过程中，不认识的词已经影响你获取信息了，你自然会去查。至于要不要复习，肯定能适当复习是好的，&lt;strong&gt;但是，我敢向你保证：只要你愿意长期大量的接触英文，不复习一点儿影响都没有，肯定会进步的。因为长期大量接触英文本身，就是复习！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在这篇文章中，我想聊聊看美剧学英语。&lt;/p&gt;
&lt;p&gt;其实，这是我在知乎的一个回答，之前也曾经向大家推荐过。但是鉴于很多同学肯定没有看到。我稍加修改，在公众号里再推送一遍。&lt;/p&gt;
&lt;p&gt;看美剧学英语有多靠谱？我的结论是：非常非常非常靠谱。这个道理很简单，不断地进行英文输入绝对是没错的。但是，必须强调：&lt;strong&gt;千万不要有中文字幕！&lt;/strong&gt;千万不要有中文字幕！千万不要有中文字幕！重要的事情说三遍！&lt;/p&gt;
&lt;p&gt;如果挂中文字幕能学好英语的话，那每所大学里都有无数的英语达人了！毕竟，据我所知，追美剧的人不在少数，很多人对热播美剧如数家珍。甚至很多同学自大学以来的休闲时间，都是在美剧中度过的。但是！！大多数同学的英语水平没有显著提高，就是中文字幕惹的祸。&lt;/p&gt;
&lt;p&gt;一旦有中文字幕，基本上大家都不会去思考语言的问题了。但没有中文字幕，为了理解剧情，我们就会去思考，这个人说的这句话是什么意思？我们才会去体会，原来表达这个意思，可以用这个词，可以这么说，可以这么搭配，可以这么组织语言，我们的英语水平才可能提高。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于看美剧学英语，很多人都会建议，完全扔掉字幕去看剧，直接啃生肉。当然，如果你的水平能直接啃生肉，固然是好的。但是，对于大部分同学来说，可能一上来就啃生肉，学习曲线过于陡峭了。&lt;/p&gt;
&lt;p&gt;在大家已经有一定的英语基础（大概四级水平）和能啃生肉美剧之间，我认为有一个很重要的过渡。&lt;strong&gt;这个过渡期，我建议大家看美剧挂英文字幕。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;有一派观点认为看美剧挂英文字幕，训练的是阅读而非听力。我的亲身经历表明，这是不对的，或者说是不完全对的。我认为：&lt;strong&gt;看剧使用英文字幕，是从阅读为主的学习向听力为主的学习的一个重要过渡。&lt;/strong&gt;虽然，必须承认：有了英文字幕，很多人会依靠字幕而非听力获得美剧里的信息，但这不是坏事。&lt;/p&gt;
&lt;p&gt;因为，这是一个非常重要的，纠正发音的过程。相信很多同学都有感受：整篇英语文章能“看”懂意思，但要是朗读出来，简直是一塌糊涂。这是因为我们“哑巴”英语的教学环境，使得很多同学是“看”懂词的意思，但是对单词发音并不明确，甚至错的很离谱。对单词发音错误的认识，将直接妨碍听力。你都不知道单词的正确读法，怎么可能听懂？&lt;/p&gt;
&lt;p&gt;那怎么办？难道只能对着字典把所有单词的正确发音听一遍来纠正自己？虽然市面上有这样的产品，我也知道有人这样做，但这实在是太枯燥了！所以，对着英文字幕把美剧看一遍，我认为是非常自然地纠正发音的方式。&lt;/p&gt;
&lt;p&gt;不要以为这个过程会那么的愉快。不信试试看。如果不曾只使用英文字幕看美剧，不管是多么喜欢的美剧，半个小时一定会看累的。就是因为不适应，我们需要额外的集中注意力才能反映出人物对白的意思，从而理解剧情的走向。这个过程大脑是以学习为主，休息为辅的，所以会疲劳。因为这是一个学习的过程。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;另外，我提倡看剧挂英文字幕，还有一个很普遍的原因：词汇量。&lt;/p&gt;
&lt;p&gt;在这一点上，实际看美剧是有优势的。因为美剧中的词汇主要出现在对话中，所以不会像英文原著那样包含很多的复杂的文学性修辞词汇。但即使这样，不要小瞧美剧中的词汇量。《friends》之所以被奉为美语学习的经典，一个很大的原因是其词汇量低，用词简单（这里暂不探讨俚语和文化的问题）。&lt;/p&gt;
&lt;p&gt;那么《friends》的词汇量是多少呢？整部美剧共十季237集，我粗略统计，不重复的单词个数是10697个。当然，这里会包括很多单词的不同形态，所以实际数字比这个数字要少。但大概是这个量级：一万词。&lt;/p&gt;
&lt;p&gt;我不确定大家对词汇量有没有概念。随便在网上查一查，有很多词汇量测试的工具，国内外都有。我建议同学们有时间做一做，对自己的词汇量有一个大概的认识。整体上，如果大家只是在国内的环境下接触英语教育，即使过了六级，应该词汇量都达不到1万的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;词汇量一万是什么水平呢？在英语为母语的国家，这是一个八岁孩子的词汇量的水平。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这也告诉我们，虽然现在很多声音鼓吹什么核心词汇只要2000词；3000词；6000词的（虽然他们也有他们的道理），但是一部简单的friends，需要我们认识上万词。单词都不认识，怎么谈听懂？更不要说一个单词的不同用法和搭配了。所以对着英文字幕看美剧也是一个积累词汇量；更重要的是，学习词汇如何实际使用的过程。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;什么时候可以脱离英文字幕直接看美剧了？我的经验是，当不需要暂停，也能完整理解美剧的意思的时候，就可以尝试不要英文字幕了。注意，是“完整理解”，不是“猜懂”，这个度每个人要自己把握。是的，至少我在刚开始用英文字幕看美剧的时候，需要不时地暂停、甚至要回退重新看几遍，才能真的理解人物到底说了什么，是什么意思......&lt;/p&gt;
&lt;p&gt;真到了那个阶段，如果想要看剧提高自己的英语水平，要聊的可能是另外一些问题了。这篇文章暂时聚焦在“需要使用英语字幕看剧”的阶段。&lt;/p&gt;
&lt;p&gt;在这里，我还想说另外一个话题。就是有很多英语学习方法，建议一个剧来回刷，刷他个五遍十遍甚至二十遍。&lt;/p&gt;
&lt;p&gt;这样做有没有效果呢？有。但是，我不是特别赞同。至少，这种方法不适合我，因为太枯燥了。讲真，在我眼里，很少有美剧值得让我在短时间内重复看十遍二十遍的。连第二遍我都懒得看，包括《friends》。&lt;/p&gt;
&lt;p&gt;这又回到了文章开头的问题了。想提高英语水平，最简单的方法，也或许是唯一的方法，就是长期大量地接触英语。&lt;/p&gt;
&lt;p&gt;我说是“接触英语”，而不是“学英语”。&lt;/p&gt;
&lt;p&gt;什么区别？接触英语，本质是在应用英语，目的在于获取其他信息，而不是学习语言的使用方法（发音，语法，搭配，组织，等等等等）。获取信息是首要的，学英语是次要的。是“顺便”的。&lt;/p&gt;
&lt;p&gt;而把一个美剧翻来覆去的刷，显然首要任务是“学英语”，而不是“获取信息”。因为顶多刷两遍，这个美剧讲的是什么，你肯定已经知道了。&lt;/p&gt;
&lt;p&gt;翻来覆去地刷美剧，在我看来，只会让我“恶心”，时间长了，都不爱看美剧了。那就得不偿失了。&lt;/p&gt;
&lt;p&gt;我觉得只要坚持，但凡看美剧或者英文电影，就只挂英文字幕看，时间长了，就会有效果。既然一遍看懂了，干嘛把美剧当课文，非要烂熟于心呢？那么多美剧，都能看懂也了不得。&lt;/p&gt;
&lt;p&gt;翻来覆去地看，相当于是“精”学习了。&lt;strong&gt;如果大家有时间精力去“精”学习，我建议把这个时间精力放到更专业的英语学习材料上。&lt;/strong&gt;比如《新概念》就很好。用看美剧的方式“学英语”，关键就是“顺便”二字，休息娱乐的时候，顺便学学英语。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果你不是要顺便学英语，有很明确的目标，要专门学英语，请千万不要看美剧学英语&lt;/strong&gt;，耽误事儿。根据你的需求，市面上不同的严肃且有效的英语教材非常多。&lt;/p&gt;
&lt;p&gt;所以，大家想看剧顺便学英语，千万“别较劲”。看个美剧，别想着每个词每句话都搞得一清二楚的。看懂了就好了。真想较劲，跟严肃的英文教材多较劲。请大家再回顾我的文章：&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2018/2018-04-18/"&gt;《如果高效学习有什么秘诀的话，那就都在这里了：）》&lt;/a&gt;。&lt;strong&gt;不要完美主义。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当然了，人和人不同，比如有些人就是觉得《friends》超级好看，看二十遍都不腻，那么翻来覆去刷当然可以。&lt;/p&gt;
&lt;p&gt;这里，还请大家体会我的核心思想：&lt;strong&gt;怎么看，看什么，这些统统不重要。重要的是长期大量坚持接触英语。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最后，有些同学问我怎么找到只有英文字幕的资源。&lt;/p&gt;
&lt;p&gt;国内大多数片源，都是中英文字幕的。其实，使用“物理法”就很好。我学生时代就干过这事儿。拿个纸条一贴就可以。我网上一搜，果然也有人这么干。如下图所示。图片来自知乎。&lt;/p&gt;
&lt;p&gt;&lt;img alt="zhihu" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-05-30/zhihu.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;另外，有一些播放器支持马赛克功能，可以给中文字幕的位置打上马赛克。比如QQ影音。不影响观看的。以下图片来自网络搜索。&lt;/p&gt;
&lt;p&gt;&lt;img alt="subtitle1" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-05-30/subtitle1.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="subtitle2" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-05-30/subtitle2.png" /&gt;&lt;/p&gt;
&lt;p&gt;最后，如果想找到英文字幕的源文件，&lt;strong&gt;可以尝试科学上网后搜索“english subtitles”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;英文原文接触多了，很多时候，对原文所表达的意思，也会有自己的理解，自己的思考。在我看来，这才是学习英语最大的魅力啊。我们因此可以接受第一手的材料，直接和作者“对话”。&lt;/p&gt;
&lt;p&gt;比如，在我的文章&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-04-18/"&gt;《从巴黎圣母院的大火，到消逝的IT巨头》&lt;/a&gt;中，我就对大多数字幕组在《before sunset》中关于巴黎圣母院的那句翻译产生了质疑。&lt;/p&gt;
&lt;p&gt;&lt;img alt="dame" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-05-30/dame.png" /&gt;&lt;/p&gt;
&lt;p&gt;虽然其实无关紧要，但是不是很酷？：）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-05-30/readme.md" rel="alternate"/></entry><entry><id>2019/2019-05-29/readme.md</id><title>如何优雅地证明平方差公式？</title><updated>2019-05-29T00:00:00-07:00</updated><content>&lt;h2&gt;如何优雅地证明平方差公式？&lt;/h2&gt;
&lt;p&gt;聊点儿轻松的：）&lt;/p&gt;
&lt;p&gt;出一个初中数学题：&lt;strong&gt;平方差公式怎么证明？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;即，&lt;strong&gt;如何证明：a² - b² = (a + b)(a - b)&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;这个问题，在我们初中学习的过程中，证明思路大概是这样的：&lt;/p&gt;
&lt;p&gt;首先，我们知道了多项式和的乘法公式，即：&lt;/p&gt;
&lt;p&gt;(a + b)(c + d) = ac + ad + bc + bd&lt;/p&gt;
&lt;p&gt;然后，我们就可以把c = a，d = -b带进这个公式：&lt;/p&gt;
&lt;p&gt;(a + b)(a + (-b)) = a*a + a*(-b) + b*a + b*(-b)&lt;/p&gt;
&lt;p&gt;注意，中间的两项，a*(-b) 和 b*a 是相反的，所以可以消掉，就剩下了两项。a*a 和 b*(-b)，即 a² - b²&lt;/p&gt;
&lt;p&gt;所以我们证明出了：(a + b)(a - b) = a² - b²&lt;/p&gt;
&lt;p&gt;当然，我们整个推导过程，每一步都是”等价于“，所以从左推到右和从右推到左都是可以的。我们就有了：&lt;/p&gt;
&lt;p&gt;a² - b² = (a + b)(a - b)&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;上面的证明，是一个典型的代数证明。但是，&lt;strong&gt;代数证明的缺点是：太过抽象。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;实际上，平方差公式有一个优雅的几何证明方式：）&lt;/p&gt;
&lt;p&gt;因为一个数字的平方，就对应于以这个数字为边长的正方形的面积。&lt;/p&gt;
&lt;p&gt;所以，我们可以想象：a² 是一个大正方形的面积；b² 是一个小正方形的面积。我们将两个正方形这么摆：&lt;/p&gt;
&lt;p&gt;&lt;img alt="img1" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-05-29/img1.png" /&gt;&lt;/p&gt;
&lt;p&gt;很显然，我们要求的 a² - b²，就是蓝色部分面积。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;我们添加一条辅助线：&lt;/p&gt;
&lt;p&gt;&lt;img alt="img2" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-05-29/img2.png" /&gt;&lt;/p&gt;
&lt;p&gt;很显然，下面绿色部分的矩阵，面积是(a - b) * b；上面蓝色部分的矩形，面积是(a - b) * a。&lt;/p&gt;
&lt;p&gt;我们要求的 a² - b²，就是把橙色部分的 b*b 的正方形扔掉，蓝色和绿色两部分面积之和。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;由于这两个矩形，都有一个边是 a - b 这么长，我们可以把它们合起来。就是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="img3" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-05-29/img3.png" /&gt;&lt;/p&gt;
&lt;p&gt;这个矩形整体的面积是什么？就是 (a + b)(a - b) 啊！&lt;/p&gt;
&lt;p&gt;得证：a² - b² = (a + b)(a - b)&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;对了，这篇文章的配图都是我在ipad上手绘出来的，允许我炫耀一下 &lt;/p&gt;
&lt;p&gt;很多代数表达，都有很优雅的几何证明方式。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;通常，几何证明的缺点是，有局限性。&lt;/strong&gt;比如，在上面的证明中，其实隐含了很多假设：我们的a和b都必须是正数，同时，a还要比b大。但我们知道，平方差公式，是对任意数，甚至是复数，都成立的。&lt;/p&gt;
&lt;p&gt;但是，&lt;strong&gt;几何证明最大的优点，是直观。&lt;/strong&gt;它能帮助我们迅速将抽象的代数表达和具体的图形之间建立联系，&lt;strong&gt;帮助我们”看到“代数式到底在表达什么意思。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于很多数学问题，直观的几何表达都能轻易帮助我们更快速的理解，之后，我们也能轻松将代数表达推广到更抽象的范围，比如数字是负数或者复数的情况：）&lt;/p&gt;
&lt;p&gt;是不是很酷？&lt;/p&gt;
&lt;p&gt;有机会，再向大家介绍更多代数问题的几何证明：）&lt;/p&gt;
&lt;p&gt;大家加油！：）&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-05-29/readme.md" rel="alternate"/></entry><entry><id>2019/2019-05-28/readme.md</id><title>到底有没有必要学AI?</title><updated>2019-05-28T00:00:00-07:00</updated><content>&lt;h2&gt;到底有没有必要学AI?&lt;/h2&gt;
&lt;p&gt;昨天的推文&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-05-27/"&gt;《美国人眼里的前沿趋势技术是什么？》&lt;/a&gt;，我向大家整理了现在美国确认的高新前沿技术名单。大家很容易看出来：AI是很重要的一部分。就算不把AI单独拿出来，其实在不同的专业领域，AI都将要，或者说正在发挥着重大的作用。&lt;/p&gt;
&lt;p&gt;但是，普通人需不需要学习AI呢？&lt;/p&gt;
&lt;p&gt;如果你还是学生，或者将来有读研或者读博的想法，对于大部分理工科领域（不仅仅是计算机），近乎一定都会用到AI。我建议学习，绝对有用。&lt;/p&gt;
&lt;p&gt;如果你在工作，但不是AI岗算法岗，我的看法是，学AI不是必须。不过如果你有充电的时间和意愿，对于技术工作者来说，多少触一下AI的基础知识，有百利而无一害。&lt;/p&gt;
&lt;p&gt;为什么这么说？现在主流的AI技术——机器学习，解决问题的方式，和传统的计算机解决问题的方式是完全不同的。机器学习解决问题的方式是”基于数据“，而传统的计算机算法解决问题的方式是”基于逻辑“。这两种思想之间有巨大的差异和鸿沟。&lt;/p&gt;
&lt;p&gt;在这里，我们不讨论那种思维方式好。实际上各有千秋，适用的场景不同。但接触机器学习，在我看来并不是一定为了找一个AI相关的工作，而是多一个思考问题的角度。同时，对很项目，事情，新闻或者人，都能多一分属于自己的判断力，而不是人云亦云。这也一定程度减少了盲目跟风（对某些项目或者投资）所带来的风险。&lt;/p&gt;
&lt;p&gt;也正是因为这个原因，我认为从教育的角度，小学中学的教育不说，但是本科教育，尤其是计算机教育，AI一定会慢慢成为一种”必修课“。因为它不仅仅是一个技能，更是一种思维方式。AI如何解决问题；能解决什么问题；有什么坑；怎么看待AI给出的结果，这些思考将慢慢成为一个技术人的基本素质，这些都和找到一份具体的工作没有关系。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;该文是一个广告推广的引导语，现将这部分引导语保存在这里：）&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-05-28/readme.md" rel="alternate"/></entry><entry><id>2019/2019-05-27/readme.md</id><title>美国人眼里的前沿趋势技术是什么？</title><updated>2019-05-27T00:00:00-07:00</updated><content>&lt;h2&gt;美国人眼里的前沿趋势技术是什么？&lt;/h2&gt;
&lt;p&gt;这个月，美国共和党抛出了一个新的议案。整体，这个议案是希望能够减少甚至是杜绝中国的组织，企业或者是个人接触到更多美国的敏感高新技术信息。&lt;/p&gt;
&lt;p&gt;据我了解，这里所说的接触，是指：&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1）阻止美国企业将敏感高新技术信息卖给中国。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这一点可能有些同学不很了解。其实，在过去的二三十年，很多美国企业将他们的高新技术，以这样或者那样的形式，卖给了中国的政府或者企业。当然，这个买卖是合法的。在大多数时候，都是美国企业为了进入中国市场，而进行的“交换”。&lt;/p&gt;
&lt;p&gt;至于这个交易是不是“你情我愿”，这事儿我觉得没法说。比如你为了高考考出好成绩，花钱去了一个补习班。你不去这个补习班，高考就可能拿不到好成绩；但你说你是自愿去这个补习班，感觉似乎也不太对。毕竟你可能也不想高考。但高考这个制度让你为了上大学，不得不高考。&lt;/p&gt;
&lt;p&gt;当然，中美关系比这个复杂，我这个例子过于简单，比喻也不够贴切。只是为了说明，可能很多时候，“你情我愿”和“合法合理”是两个维度。二者之间有冲突的可能性。依然是，这事儿没法深说，至今为止我见到说深了的公号文章都被禁了。所以，我们不聊政治。&lt;/p&gt;
&lt;p&gt;现在，共和党就是在思考用立法的方式直接杜绝这一点。换句话说，美国的企业只要卖高新技术，那就是违法行为。美国政府不管企业出于什么目的，能为此得到多大市场，换来美国多少就业，都不行。搞得高新技术跟毒品似的。
这其实也是Google第一时间“响应号召”限制华为使用Android的原因。因为必须要守法。当然，Google遵守的法律并不是这个新法案。这个新法案还没有通过。Google遵守的是川普的行政令。&lt;/p&gt;
&lt;p&gt;是的，川普为此特意宣布&lt;strong&gt;美国进入了国家紧急状态&lt;/strong&gt;，签署了一道行政令。。。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2）另外一点，就是禁止任何中国军方资助的学生，来美国高校接受这些高新技术领域的学习。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在这里，大家要仔细分辨。因为有很多公号夸大其词，制造焦虑，吸引眼球，表示美国是禁止所有中国学生来美国学习这些项目。&lt;strong&gt;不是这样的。这个法案限定在由中国军方资助的学生身上。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所以，整体而言，据我现在了解的情况，&lt;strong&gt;如果是自费读书；或者是自己申请到美国大学的奖学金来读书，肯定不受影响。&lt;/strong&gt;因为是个人行为。&lt;/p&gt;
&lt;p&gt;如果是博士后，或者是教授（不管是正教授还是AP），但是&lt;strong&gt;是美国的学校给工资，或者研究基金来自美国，也不会受到影响。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不过，如果是因为国家的各种项目来美国做访问交流（访问学者或者交流学生），可能会受到影响。因为你的资金来源是中国，美国可能分不清楚这个资金是不是中国军方的资金。因此，我估计，现在中国的学府里，中美之间的这种学术访问交流应该也少了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;现在问题来了，美国藏着掖着的这些高新敏感技术是什么呢？&lt;/p&gt;
&lt;p&gt;事实上，美国一直有一个高新敏感技术名单。但是这个名单已经有好长时间不更新了。比如“核物理”就是典型的，毫无争议的，敏感技术；再比如计算机领域，信息加密，网络安全等技术，也属于敏感技术。&lt;/p&gt;
&lt;p&gt;但是去年11月份，美国大幅度更新了这个名单。一下子为这个名单添加了14个大的学科领域，每个领域下还有若干细分专业。这些专业被美国称为新兴技术（emerging technologies）。在新的时代下，美国暂时认为他们也是敏感的，不能随便“外传”。&lt;/p&gt;
&lt;p&gt;但是，这个名单的涵盖范围实在是太广了。有多广呢？周末我和朋友出去玩儿，还聊到了这件事儿。我们都戏称，&lt;strong&gt;现在，如果你学的专业不在这个名单里，都不好意思和别人打招呼了。&lt;/strong&gt;大家稍后看一下这个名单，就知道什么意思了。&lt;/p&gt;
&lt;p&gt;从另外一方面，我个人认为，&lt;strong&gt;这些专业方向可以一定程度象征着未来的趋势。&lt;/strong&gt;毕竟是美国认为敏感的，值得“保密”的技术。这些技术如果真的有很大的作用，道理上，中方也会花费大力气投入研究。相较而言，就会给这些领域带来一定的“红利”。&lt;/p&gt;
&lt;p&gt;有人说看中国的趋势，要好好看中央台每天晚上七点的新闻联播。我觉得，看美国的新闻联播，也挺有信息量的：）&lt;/p&gt;
&lt;p&gt;至于知道了这些趋势，要具体怎么行动，那就是见仁见智的事情了。不同的人，不同的年龄，不同的专业，不同的背景，不同的经验，面对每一个领域的每一条消息，反应都是不尽相同的。反正我说，按照这个专业列表买股票，&lt;strong&gt;投资失败，后果自负。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我在这里列出来，主要是为了让大家学英语。每一个专业，都标注有原版文件上的英文名称。中文是我翻译的。由于我不了解所有的领域，所以不保证翻译准确。大家可以点击这里，直接看美国原版官网上的文件：&lt;a href="https://www.federalregister.gov/documents/2018/11/19/2018-25221/review-of-controls-for-certain-emerging-technologies"&gt;https://www.federalregister.gov/documents/2018/11/19/2018-25221/review-of-controls-for-certain-emerging-technologies&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;以下是专业列表：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(1) Biotechnology, such as:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;生物技术，例如&lt;/p&gt;
&lt;p&gt;(i) Nanobiology;&lt;/p&gt;
&lt;p&gt;纳米生物学&lt;/p&gt;
&lt;p&gt;(ii) Synthetic biology;&lt;/p&gt;
&lt;p&gt;合成生物学&lt;/p&gt;
&lt;p&gt;(iv) Genomic and genetic engineering; or&lt;/p&gt;
&lt;p&gt;基因组学和基因工程&lt;/p&gt;
&lt;p&gt;(v) Neurotech.&lt;/p&gt;
&lt;p&gt;神经技术&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(2) Artificial intelligence (AI) and machine learning technology, such as:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;人工智能和机器学习，比如：&lt;/p&gt;
&lt;p&gt;(i) Neural networks and deep learning (e.g., brain modelling, time series prediction, classification);&lt;/p&gt;
&lt;p&gt;神经网络和深度学习（例如：脑建模，时间序列的预测和分类）&lt;/p&gt;
&lt;p&gt;注：在这里，我还挺惊讶这份文件单独将时序数据问题单独拿出来举例的。不过仔细思考，时序数据问题确实蛮重要。有机会单独发文聊一聊。&lt;/p&gt;
&lt;p&gt;(ii) Evolution and genetic computation (e.g., genetic algorithms, genetic programming);&lt;/p&gt;
&lt;p&gt;进化和遗传计算（例如：遗传算法，遗传编程）&lt;/p&gt;
&lt;p&gt;(iii) Reinforcement learning;&lt;/p&gt;
&lt;p&gt;强化学习&lt;/p&gt;
&lt;p&gt;(iv) Computer vision (e.g., object recognition, image understanding);&lt;/p&gt;
&lt;p&gt;计算机视觉（例如：目标检测，图像理解）&lt;/p&gt;
&lt;p&gt;(v) Expert systems (e.g., decision support systems, teaching systems);&lt;/p&gt;
&lt;p&gt;专家系统（例如：决策支持系统，教学系统）&lt;/p&gt;
&lt;p&gt;(vi) Speech and audio processing (e.g., speech recognition and production);&lt;/p&gt;
&lt;p&gt;语言及音频处理（例如：语言识别和语言产生）&lt;/p&gt;
&lt;p&gt;(vii) Natural language processing (e.g., machine translation);&lt;/p&gt;
&lt;p&gt;自然语言处理（例如：机器翻译）&lt;/p&gt;
&lt;p&gt;(viii) Planning (e.g., scheduling, game playing);&lt;/p&gt;
&lt;p&gt;规划（例如：调度，博弈）&lt;/p&gt;
&lt;p&gt;(ix) Audio and video manipulation technologies (e.g., voice cloning, deepfakes);&lt;/p&gt;
&lt;p&gt;音频视频操纵（例如：声音克隆技术，deepfake）&lt;/p&gt;
&lt;p&gt;注：deepfake现在已经是一个专有的技术术语了，在2017年才出现。如果不了解的同学可以在网上搜索deepfake。应该有不少奇怪的新闻。。。&lt;/p&gt;
&lt;p&gt;(x) AI cloud technologies; or&lt;/p&gt;
&lt;p&gt;AI云技术&lt;/p&gt;
&lt;p&gt;(xi) AI chipsets.&lt;/p&gt;
&lt;p&gt;AI芯片组&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(3) Position, Navigation, and Timing (PNT) technology.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;定位、导航和定时技术&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(4) Microprocessor technology, such as:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;微处理器技术，比如：&lt;/p&gt;
&lt;p&gt;(i) Systems-on-Chip (SoC); or&lt;/p&gt;
&lt;p&gt;片上系统（SoC）&lt;/p&gt;
&lt;p&gt;(ii) Stacked Memory on Chip.&lt;/p&gt;
&lt;p&gt;片上堆叠式内存&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(5) Advanced computing technology, such as:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;高级计算技术，比如：&lt;/p&gt;
&lt;p&gt;(i) Memory-centric logic.&lt;/p&gt;
&lt;p&gt;内存中心逻辑&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(6) Data analytics technology, such as:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;数据分析技术，比如：&lt;/p&gt;
&lt;p&gt;(i) Visualization;&lt;/p&gt;
&lt;p&gt;可视化&lt;/p&gt;
&lt;p&gt;注：其实我不太理解可视化技术为什么敏感，可能我对可视化的理解过于狭隘了。。。&lt;/p&gt;
&lt;p&gt;(ii) Automated analysis algorithms; or&lt;/p&gt;
&lt;p&gt;自动分析算法&lt;/p&gt;
&lt;p&gt;(iii) Context-aware computing.&lt;/p&gt;
&lt;p&gt;上下文感知计算&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(7) Quantum information and sensing technology, such as&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;量子信息和传感技术，比如：&lt;/p&gt;
&lt;p&gt;(i) Quantum computing;&lt;/p&gt;
&lt;p&gt;量子计算&lt;/p&gt;
&lt;p&gt;(ii) Quantum encryption; or&lt;/p&gt;
&lt;p&gt;量子加密&lt;/p&gt;
&lt;p&gt;(iii) Quantum sensing.&lt;/p&gt;
&lt;p&gt;量子传感&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(8) Logistics technology, such as:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;物流技术，比如：&lt;/p&gt;
&lt;p&gt;(i) Mobile electric power;&lt;/p&gt;
&lt;p&gt;移动电力&lt;/p&gt;
&lt;p&gt;(ii) Modeling and simulation;&lt;/p&gt;
&lt;p&gt;建模与仿真&lt;/p&gt;
&lt;p&gt;(iii) Total asset visibility; or&lt;/p&gt;
&lt;p&gt;全资产可见性&lt;/p&gt;
&lt;p&gt;(iv) Distribution-based Logistics Systems (DBLS).&lt;/p&gt;
&lt;p&gt;分布式物流系统&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(9) Additive manufacturing (e.g., 3D printing);&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;增材制造（例如3D打印）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(10) Robotics such as:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;机器人，比如：&lt;/p&gt;
&lt;p&gt;(i) Micro-drone and micro-robotic systems;&lt;/p&gt;
&lt;p&gt;微型无人机和微型机器人系统；&lt;/p&gt;
&lt;p&gt;(ii) Swarming technology;&lt;/p&gt;
&lt;p&gt;集群技术&lt;/p&gt;
&lt;p&gt;(iii) Self-assembling robots;&lt;/p&gt;
&lt;p&gt;自动装配机器人&lt;/p&gt;
&lt;p&gt;(iv) Molecular robotics;&lt;/p&gt;
&lt;p&gt;分子机器人&lt;/p&gt;
&lt;p&gt;(v) Robot compliers; or&lt;/p&gt;
&lt;p&gt;机器人编译器&lt;/p&gt;
&lt;p&gt;(vi) Smart Dust.&lt;/p&gt;
&lt;p&gt;智能微尘&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(11) Brain-computer interfaces, such as&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;脑机接口，比如：&lt;/p&gt;
&lt;p&gt;(i) Neural-controlled interfaces;&lt;/p&gt;
&lt;p&gt;神经控制接口&lt;/p&gt;
&lt;p&gt;(ii) Mind-machine interfaces;&lt;/p&gt;
&lt;p&gt;意识-机器接口&lt;/p&gt;
&lt;p&gt;(iii) Direct neural interfaces; or&lt;/p&gt;
&lt;p&gt;直接神经接口&lt;/p&gt;
&lt;p&gt;(iv) Brain-machine interfaces.&lt;/p&gt;
&lt;p&gt;脑-机接口&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(12) Hypersonics, such as:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;高超音速空气动力学，比如：&lt;/p&gt;
&lt;p&gt;(i) Flight control algorithms;&lt;/p&gt;
&lt;p&gt;飞行控制算法&lt;/p&gt;
&lt;p&gt;(ii) Propulsion technologies;&lt;/p&gt;
&lt;p&gt;推进技术&lt;/p&gt;
&lt;p&gt;(iii) Thermal protection systems; or&lt;/p&gt;
&lt;p&gt;热防护系统&lt;/p&gt;
&lt;p&gt;(iv) Specialized materials (for structures, sensors, etc.).&lt;/p&gt;
&lt;p&gt;特殊材料（用于结构、传感器等）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(13) Advanced Materials, such as:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;高级材料，比如：&lt;/p&gt;
&lt;p&gt;(i) Adaptive camouflage;&lt;/p&gt;
&lt;p&gt;自适应伪装&lt;/p&gt;
&lt;p&gt;(ii) Functional textiles (e.g., advanced fiber and fabric technology); or&lt;/p&gt;
&lt;p&gt;功能性纺织品（例如：先进纤维和面料技术）&lt;/p&gt;
&lt;p&gt;(iii) Biomaterials.&lt;/p&gt;
&lt;p&gt;生物材料&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(14) Advanced surveillance technologies, such as:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;高级监控技术，例如：&lt;/p&gt;
&lt;p&gt;Faceprint and voiceprint technologies.&lt;/p&gt;
&lt;p&gt;面纹和声纹技术&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;对于这个列表，好多技术名词，我也在网上查了半天，收获还不小呢：）&lt;/p&gt;
&lt;p&gt;另外，一些“新兴技术”，其实不在这个列表里。比如区块链技术。另外，以人工智能为例，一些细分的领域方向也并不在其中，比如推荐系统；比如知识表示，知识图谱等等。或许，是因为这些技术本身，对美国的国家安全，没有那么重要：）&lt;/p&gt;
&lt;p&gt;不管怎样，感谢美国政府的整理。希望大家都有所收获：）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-05-27/readme.md" rel="alternate"/></entry><entry><id>2019/2019-05-20/readme.md</id><title>浅谈Google限制华为</title><updated>2019-05-20T00:00:00-07:00</updated><content>&lt;h2&gt;浅谈Google限制华为&lt;/h2&gt;
&lt;p&gt;这篇文章我在昨天得知Google停止与华为的所有业务合作的时候，就在第一时间写出来了。结果因为昨天一早推送了一篇准备好的文章&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-05-19/"&gt;《如何把技术做深？可能，这是一个错误的问题》&lt;/a&gt;，就不能推送第二篇文章了。&lt;/p&gt;
&lt;p&gt;今天一天在准备专栏的更新，所以没有特别关注事情的进一步发展。文章进行了一些简单修改，但并不保证消息的实时性。毕竟，&lt;strong&gt;我的公号不是以报道科技新闻为主，而是分享技术观点为主&lt;/strong&gt;，所以，影响应该不大。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我的观点保持不变。愿世界没有战争。愿中国更加强大。&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;由于美国总统特朗普早前签署的禁令，Google已停止与华为的所有业务合作。&lt;/p&gt;
&lt;p&gt;虽然从法律角度，Google无法阻止华为访问安卓已经开放的原始代码（AOSP）。但是，Google可以禁止华为获得Google自家打造的Google框架服务（GMS）以及后续更新。这将限制华为手机使用诸多Google的服务，包括Gmail，Youtube，Google Play，Google搜索，Google日历，等等等等。&lt;/p&gt;
&lt;p&gt;从长期角度，华为无法获取最新版本的GMS及后续更新，会带来怎样的影响，现在还看不出来。也并不排除，在几个月后，中美局势有所缓解，使得这一限制取消。毕竟，这一限制，对Google也是极其不利的。&lt;/p&gt;
&lt;p&gt;但目前来讲，&lt;strong&gt;这些限制虽然对中国用户的影响近乎为零；对华为海外用户的影响，将是致命的。&lt;/strong&gt;因为，绝大多数海外用户，近乎一定使用Google Play作为安卓App的应用市场；近乎一定会看Youtube；近乎一定有一个Gmail邮箱；最常用的地图服务就是Google Map ...... 更不用提，有大量其他App，在制作的时候，会或多或少的使用GMS框架。最典型的例子，就是使用Google账户登录，在国外，就像使用qq或者微信账户登录一样常见。&lt;/p&gt;
&lt;p&gt;目前，安卓的官推已经宣布，现在华为海外手机，不会出现任何安全问题。因为对于Google Play以及背后的安全保护相关功能，还可以正常使用。&lt;/p&gt;
&lt;p&gt;&lt;img alt="android_twitter.png" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-05-20/android_twitter.png" /&gt;&lt;/p&gt;
&lt;p&gt;从我得知的消息，海外华为手机用户，也还可以正常使用诸如Gmail，Youtube等服务。所以这个限制具体将怎样落实，还是说对于已经发布的手机不进行限制，只针对未来华为的新手机做限制，Google还没有进一步的说明。不过，有一些海外用户已经开始表示极度的担心：&lt;/p&gt;
&lt;p&gt;&lt;img alt="twitter1" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-05-20/twitter1.png" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我一个月前买了P30 Pro，现在我不知道我的手机还能不能正常获得更新了。我身边的很多朋友也在担心这个问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2018年，华为的网络设备所占的市场份额，已经是全球第一；而华为手机的市场份额，则是全球第二（第一三星，第三苹果）。其中，华为手机的海外市场占比多少呢？大概占华为手机总市场的一半。2018年的数据，华为手机全球出货量2.06亿台，其中1.01亿台来自海外。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于这个事情，我的第一反应，是觉得有些吃惊。不是因为美国限制华为吃惊，而是这件事儿竟然被一贯以“不作恶”著称的Google打头阵而吃惊。我们曾经熟悉的那个Google，遇见这种事情，一定会一拖再拖，在最不得已的情况下，才会勉强为之。尤其这个事件本身，对Google的影响应该也是巨大的，并且是恶劣的。&lt;/p&gt;
&lt;p&gt;不过在过去的一年，Google在硅谷的口碑非常差（有时间发文单聊吧），现在看来，Google是要一路走到黑了。&lt;/p&gt;
&lt;p&gt;虽然我对安卓手机的生态不太熟悉，但可以预见的，还会有更多公司在Google的“榜样”作用下跟进，以各种方式限制华为。据我所知，现在，Intel，Qualxomn，Xilinx，Broadcom 四家企业也已经中断了和华为的业务往来。&lt;/p&gt;
&lt;p&gt;对于这个禁令发展到现在的状况，整体是非常复杂的。已经很难讲清谁对谁错了。由于国内信息高度不对称，这个禁令酝酿了一年多的时间，其间发生的很多事情，也没法在国内媒体聊。&lt;/p&gt;
&lt;p&gt;我只能简单地说：&lt;strong&gt;对于这场贸易战，从道德的角度，我不站队。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我坚持一个很朴实的观点：&lt;strong&gt;像这个世界上的大多数争执一样，这场贸易战是一个双方都占理，同时双方也都有错误的纠纷。&lt;/strong&gt;如果像某些媒体宣称的那样，这场战争谁对谁错一清二楚的话，这个事情也早就消停了。&lt;/p&gt;
&lt;p&gt;但是谁的理更多一些？谁的错更少一些？我相信，这是说不清楚的。&lt;/p&gt;
&lt;p&gt;不过，因为我的国籍归属，&lt;strong&gt;我希望中国挺住。中国必胜。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;现在，这个禁令所折射出的另一个更严重的问题是，&lt;strong&gt;美国能不能因为自己国家的利益，而损害全球消费者的利益？&lt;/strong&gt;毕竟，全球的其他消费者，是无辜的。&lt;/p&gt;
&lt;p&gt;这是全球经济一体化带来的重大问题，同时也是当下互联网时代，越来越多的商品拥有互联网特性所决定的。如今，我们购买的大量商品，都严重依赖线上服务。我们之所以付费，是因为我们相信，这些线上服务，能持续为我们提供价值。&lt;/p&gt;
&lt;p&gt;在没有互联网的时代，我买一个苹果，交完钱，这个苹果就在我的口袋里了。我想什么时候吃就什么时候吃；我想怎么吃就怎么吃，商家是完全无法限制我的。&lt;/p&gt;
&lt;p&gt;但是在互联网时代，对于一台苹果手机，苹果公司有能力远远地让它变成一个“砖头”，即使你已经付完了全款。这确实是科技的发展为世界带来的一个全新的挑战。&lt;/p&gt;
&lt;p&gt;现在看来，大多数消费者根本不关心贸易战的输赢问题，而是关注这个禁令可能带来的更深远的影响。在安卓的官推上，这样的言论随处可见。&lt;/p&gt;
&lt;p&gt;&lt;img alt="twitter2" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-05-20/twitter2.png" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果川普决定明天把三星或者小米加入黑名单怎么办？作为用户，作为消费者，我们需要知道你们（安卓）在维护我们（消费者）的权益，而不是在维护那个疯狂的老头儿（川普）的权益！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="twitter3" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-05-20/twitter3.png" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我必须说，美国和Google都疯了。这意味着，他们可以任意惩罚世界上的所有公司。那么全世界都会开始做自己的独立产品。安卓终将被打败。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="twitter4" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-05-20/twitter4.png" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;所以，仅仅是因为美国的法律，你们（安卓）就惩罚全世界成千上万的用户？如果这样做，美国以外的用户如何再信任Google？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;可以想见，如果这个禁令持续下去，不管华为愿不愿意，不管华为有没有能力，&lt;strong&gt;想要要生存下去，华为都必须自主研发属于自己的操作系统。站在国家的角度，我们国家也必须自主研制操作系统。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这已经不是一个可能不可能，生态不生态，成熟不成熟的问题了；而是这么做是唯一的出路的问题。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;同时，我们也将看到，在过去二三十年，全世界大多数软件开发者一起致力于建立的开源社区，也将一定程度萎缩。通过这一事件，不仅仅是中国，不仅仅是华为，对各个国家，各个企业，各个团队，都是生动形象的一课：&lt;strong&gt;核心技术必须攥在自己手里。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我认为计算机领域越来越多的非公开项目将开始实施；计算机世界的一些底层技术或者高端技术的交流，将被阻碍；，就像我们现在国家和国家之间交流核技术一样困难。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当然，自主研发操作系统是一个艰巨的任务。对于到底什么叫“自主研发的操作系统”，也有很多争论的空间，这篇文章暂不涉及。但是，&lt;strong&gt;大多数程序员都坚信的“技术没有国界”，被现实啪啪打脸了。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;实际上，&lt;strong&gt;技术一直有国界。&lt;/strong&gt;因为技术一直是和商业利益捆绑在一起的。而一个国家商业利益的总和，就是这个国家的经济。小到一个个人，一个家庭，大到一个国家，经济都是有边界的。你我再熟悉，也不能我的钱你随便花，你的钱我随便花。所谓亲兄弟还要明算账，更不用提国家之间。&lt;strong&gt;而技术上的优势，确实是美国的王牌。&lt;/strong&gt;从芯片，到操作系统。不管我们再怎么热血，也必须承认：&lt;strong&gt;在技术上，我们确实和美国有很大的差距。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最新消息，为了反击美国，中国将对美国的多种进口药品以及进口医疗器械加征关税。而医疗医药又是一个被高科技引领的领域，又近乎是美国的主场。对美国的药品加征关税会不会让美国损失。当然会，美国的股市已经在说明一切。但是，受到影响最大的是谁？&lt;/p&gt;
&lt;p&gt;我们不得不承认：是那些在中国的病患。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;说回Google和华为。&lt;/p&gt;
&lt;p&gt;一切挑战都是机遇。我希望借助这个契机，中国能够再用几年，哪怕是几十年的时间，在诸多高科技领域，真正达到世界领先水平。&lt;/p&gt;
&lt;p&gt;对于今天的局面，有很多海外友人是极度支持华为，支持中国的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="twitter5" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-05-20/twitter5.png" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果华为发布新的操作系统，我会马上开始使用。并且寻找其他服务，来代替Google的所有相关服务。&lt;/p&gt;
&lt;p&gt;我已经使用华为自己的日历，浏览器，以及邮件服务了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="twitter6" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-05-20/twitter6.png" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这一切都太荒唐了。P30 Pro比我曾经使用过的任何一台iPhone都好。我支持华为，并且希望华为能够找到更好的解决方案。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="twitter7" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-05-20/twitter7.png" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我敢打赌，这个禁令之后，中国将做出一个更好的操作系统。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;当然，我很理解，很多同学会觉得，这些外国友人根本不了解国内的实际情况，他们可能并不知道我们到底还差多远。一个完备的操作系统，不是靠喊口号就能做出来的。&lt;/p&gt;
&lt;p&gt;这个逻辑当然对。可是就像前文所说，&lt;strong&gt;事情发展到这里，逐渐拥有独立自主的研发能力和产品，将近乎是我们的唯一出路。&lt;/strong&gt;我也不喜欢空喊口号的人，可是，仅仅一味谴责喊口号，似乎也并不能解决问题。&lt;strong&gt;所有问题的解决，都需要一步一个脚印的做出来。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我想说，大家也不用对我们的国家这么没信心。我可以给大家分享一个去年（2018年），中美贸易战初露端倪时的一个小故事。&lt;/p&gt;
&lt;p&gt;那天，我和一个美国朋友在车上闲聊，不经意之间谈起了中美之间的贸易战。你猜美国人是怎么反应的？&lt;/p&gt;
&lt;p&gt;他大说特说了一顿特朗普政府的“错误”政策和夸张言行以后，一本正经地对我说：我觉得中美贸易战，中国会赢的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;当然，历史可能会告诉我们，贸易战没有赢家。但我衷心希望：中国更加强大。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;大家加油：）&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-05-20/readme.md" rel="alternate"/></entry><entry><id>2019/2019-05-19/readme.md</id><title>如何把技术做深？可能，这是一个错误的问题</title><updated>2019-05-19T00:00:00-07:00</updated><content>&lt;h2&gt;如何把技术做深？可能，这是一个错误的问题&lt;/h2&gt;
&lt;p&gt;前一阵子，有一个同学问了我这样一个问题：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;工作五六年了，开发一直是又前又后，也可以说不前不后，做的项目比较杂，感觉自己技术没法做深，公司都是哪有坑就安排去哪，我一直希望能在某一方面做好做深，该如何是好？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我的回答可能要让这名同学失望了。因为，我想借这个问题，谈另一个话题。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;先讲故事：&lt;/p&gt;
&lt;p&gt;经济学家陈志武，在《中国人为什么勤劳而不富有》一书中，讲过这么一件事。在中国加入世贸组织的时候，提出了很多条款。比如就有这样一个条款：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;美国应该为中国培养更多的管理人才。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;就这么一句话，16个字，美国人看了一脸懵逼。为什么呢？美国人的问题是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;什么是“应该”？就是不做也可以？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;怎么就叫“培养”？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;多少算是“更多”？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;什么叫“管理人才”？&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;合着这么简单的一句话，在美国人看来，除了“中国”，“美国”这两个词没争议，到处都是争议。&lt;/p&gt;
&lt;p&gt;当然了，使用笼统而模糊的方式去表述，可能是中国政治家的有意为之，是一种“智慧”。我们依然是，不谈政治。（请勿随便和当下时事做任何联想，后果自负）&lt;/p&gt;
&lt;p&gt;放到实际的学习生活中，这样的内容，其实是毫无意义的。因为&lt;strong&gt;对内容中的关键词没有明确的定义，我们就无法去执行它。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;曾经有一个同学问我，&lt;strong&gt;如何学好英语。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我问他，你学英语是想做什么？他告诉我，想更流畅的读原版技术书籍。&lt;/p&gt;
&lt;p&gt;我说，那很简单啊。从今天开始，就去读原版技术书籍。我的建议是，找一个对你现在工作或者学习不重要，但是你感兴趣的领域，随便选择一本名声别太差的原版书籍，每天花半个小时到一个小时，坚持去读就好了。&lt;/p&gt;
&lt;p&gt;比如，你现在可能是做web开发的，那就找本Python原版书；比如你是做移动开发的，那就找本游戏制作的原版书。我只是举例子。关键在于：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;对你现在工作或者学习不重要。因为一开始读原版书，阅读进度肯定会很慢，如果是你工作学习就需要的内容，就会耽误正常的进度，不可取；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;要是你感兴趣的领域。这个不用多说了。只有你感兴趣，才有毅力读下去，如果是连中文你都不想读的内容，为什么要虐待自己读原版？&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在此基础上，我认为没什么特殊的方法。遇到不认识的词，觉得影响自己理解了，就去查。就这么简单。据传闻，《冰与火之歌》的翻译者，连英语六级都没过。当然，这是传闻，我没验证过真假。但是，一个没过英语六级的同学，能啃下冰火原著，我是完全相信的。我在初中的时候，学英语的全部动力，就是打游戏。并且事实证明，啃下来了游戏中的很多英文表述以后，我的英语考试成绩并不低。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;结果，这个同学听了我的建议之后，又说，其实，他还想能看懂没字幕的美剧。&lt;/p&gt;
&lt;p&gt;我说，那也容易啊，从今天开始，坚持看美剧。从有字幕的开始看，&lt;strong&gt;但一定不能有中文字幕&lt;/strong&gt;，只要有英文字幕就好了。天天看一集，看一年我估多少就有一些感觉了。别问我看什么，你喜欢看什么都可以。&lt;/p&gt;
&lt;p&gt;（关于看剧学英语的更多内容，我在知乎回答过一个这样的问题，有兴趣的同学可以去查看：&lt;a href="https://www.zhihu.com/question/21430286/answer/98312360"&gt;https://www.zhihu.com/question/21430286/answer/98312360&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;结果，这个同学听了我的建议之后，又说，其实，他还想考个雅思或者托福琢磨着出国读研。&lt;/p&gt;
&lt;p&gt;我说，那更简单啊，雅思托福都是标准化的考试，市面上帮你应考的教材培训班多如牛毛...&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我不知道大家有没有听懂这个故事。这个同学的问题是，“如何学好英语？”。&lt;strong&gt;但是，他自己却没有定义清楚，什么叫学“好”。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;诚然，能顺畅阅读原版书叫学好英语；能无字幕看懂美剧叫学好英语；能托福雅思考高分也叫学好英语。但是，在我们基础还比较薄弱的时候，我们必须选择一个方向前进，所以，我们必须定义清楚我们的需求，当下，我们觉得怎样是“好”。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;很多时候，一旦想清楚对问题的实际定义是怎样的，具体该怎么做，其实是简单的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;有很多同学问我，&lt;strong&gt;如何学好算法？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;相信大家现在已经理解我的思路了。我会反问回去，你是怎么定义“学好算法”的？&lt;/p&gt;
&lt;p&gt;对于有一些同学来说，学好算法，就是能应付面试中的算法问题；&lt;/p&gt;
&lt;p&gt;对于另一些同学来说，学好算法，是能在算法竞赛中拿大奖；&lt;/p&gt;
&lt;p&gt;还有一些同学想要学好算法，是因为自己当下在学习人工智能；或者编译原理；或者操作系统；或者数据库；或者图形学；或者图像学，等等等等的时候，遇到了阻碍，发现算法是自己的薄弱环节；&lt;/p&gt;
&lt;p&gt;看到了吗？同样是学好算法，其实大家的定义完全不同。而且，一旦我们明确了自己的定义，自己的目标，其实，向着这个目标该如何去行动，并没有大家想象的那么复杂。很多时候，我们不知道如何去行动，关键是，不知道自己的目标是什么。&lt;/p&gt;
&lt;p&gt;当然，关于该怎么学习，我不赘述了，有兴趣的同学，可以参考我的&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2018/2018-04-18/"&gt;《高效学习的秘密》&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;还有的同学的问题，升华到了人生的高度。比如，&lt;strong&gt;我要怎么做，才能成功？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我的问题就是，你到底怎么定义“成功”的？&lt;/p&gt;
&lt;p&gt;有的同学会回答我，我定义的成功，就是“当上CEO，赢取白富美”。怎么样，够清晰了吧？&lt;/p&gt;
&lt;p&gt;我们不去评价这个定义怎么样，单说对问题定义的清晰程度。很抱歉，非常非常的不清晰。我还能问出一大堆问题，才能回答你具体要怎么做。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我们先来看”赢取白富美“这部分。具体，你心目中，是不是已经有了这个“白富美”的人选了？&lt;/p&gt;
&lt;p&gt;如果你还没有一个具体的人选，那么问题就来了，你是怎么定义“白富美”的？是学历达到什么标准？经济能力达到什么标准？家庭背景达到什么标准？还是怎样？&lt;/p&gt;
&lt;p&gt;一旦你开始思考这些问题，你就会去想，这样的人，会去哪里？我要到哪里，才能大概率的碰上我心目中的白富美？我要满足哪些条件才能出现在这些地方？我要具备哪些能力才能吸引她？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;同理，我们来看“当上CEO”的部分。你想当一个什么企业的CEO？&lt;/p&gt;
&lt;p&gt;是一个科技企业？还是一个媒体企业？还是传统行业？一旦你思考这个问题，你就会仔细思考：自己的优势在哪里，做什么更有希望成功，或者自己离创办一个企业还缺少什么？缺少的这些东西自己如何一点一点去弥补？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;看到了吗？一旦将抽象问题具体化，大家其实会不自觉地开始思考如何行动。而一旦我们对问题有了更加明确的定义，&lt;strong&gt;更关键的是去行动，而根本不是寻找“该如何行动”。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;说回标题的问题，平时工作，即做前端，又做后端，如何把技术做深？&lt;/p&gt;
&lt;p&gt;我想反问的是，究竟想深入做什么技术？自己又是如何定义这个“深”的。&lt;/p&gt;
&lt;p&gt;这些其实都是更关键的问题，并且，只有你自己有答案。你必须先明确这些定义，才能具体行动。而且，一但你明确了这些内容，就会发现，具体行动并不难。&lt;strong&gt;想清楚目标，是最难的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可能有的同学会觉得，自己天天996，就算有目标，但是根本没有时间去行动啊。&lt;/p&gt;
&lt;p&gt;首先，这依然是我坚决反对996的原因。可以参考&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-04-14/"&gt;《大佬们都是这么不讲道理》&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;其次，就算你觉得自己“没有时间”，但是先想清楚目标，也是异常重要的。因为，真的，时间就像海绵里的水。仔细去思考，你就会发现，&lt;strong&gt;在大多数时候，阻止我们前进的，不是没有时间，而是没有目标。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;挤时间，要比想清楚自己的目标，容易太多。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;新的一周，大家加油！：）&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-05-19/readme.md" rel="alternate"/></entry><entry><id>2019/2019-05-13/readme.md</id><title>游戏的云端化，随便聊聊Stadia</title><updated>2019-05-13T00:00:00-07:00</updated><content>&lt;h2&gt;游戏的云端化，随便聊聊Stadia&lt;/h2&gt;
&lt;p&gt;谷歌在GDC2019大会上正式宣布了云游戏平台Google Stadia。&lt;/p&gt;
&lt;p&gt;在笔记本界，除了Windows和macbook，其实一直有第三个竞争者。那就是Google一直提倡的Chrome Book。简单来说，就是整个笔记本就运行一个浏览器，就够了。（当然实际上没有这么简单，所以有Chrome OS的概念。）&lt;/p&gt;
&lt;p&gt;&lt;img alt="chrome" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-05-13/chrome.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Chrome Book是Google在2011年就提出的一个概念，到现在已经8年多了。直到如今，这个概念依然不够深入人心，因为技术上还不够成熟。但是，我从来不怀疑，这是趋势。如果大家思考一下，就会明白，已经有越来越多的任务，我们都可以直接在线上完成。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;今年，Google在GDC2019上，公布了其云游戏平台Stadia，可谓是游戏界的一个重磅炸弹。&lt;/p&gt;
&lt;p&gt;其实，这个平台做的事情，描述起来很简单，在云端运行游戏，客户端只需要浏览器显示游戏画面就好了。这样一来，我们根本不需要关注游戏对电脑的硬件的需求。因为真正的游戏相关运算，是在云端完成的。客户端，只是一个画面展示。&lt;/p&gt;
&lt;p&gt;相信大家可以很容易地理解这样做的优点。理论上，我们再也不用担心自己的电脑配置无法运行新游戏了。因为，我们自己的电脑，本质就是一台显示器而已。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;而其实，这样做的优势，还远远不止如此。从玩家的角度，我们可以想象这样的场景：在家里的客厅打了一半的游戏，要上班了，暂停。然后在通勤的路上，用手机或者平板电脑登录云服务，继续游戏。当然了，到了班上，如果你的老板允许，可以在单位的机子上继续...&lt;/p&gt;
&lt;p&gt;也就是所谓的&lt;strong&gt;终端无缝切换&lt;/strong&gt;。这里的关键还是在于，终端只是一个显示器而已，真正有价值的文件，在云端。&lt;/p&gt;
&lt;p&gt;&lt;img alt="stadia" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-05-13/stadia.png" /&gt;&lt;/p&gt;
&lt;p&gt;这还只是从客户端的角度。从服务端的角度，这样做，很有可能将重塑整个游戏行业。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;首先，这样做，将&lt;strong&gt;极大的杜绝外挂。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;了解外挂的同学都知道，一大部分外挂发挥作用的原理，都在于游戏本身需要在客户端进行计算，再将计算结果和服务器端做通信。&lt;/p&gt;
&lt;p&gt;那么一方面，这个通信过程，我们可以做手脚；&lt;/p&gt;
&lt;p&gt;另一方面，这个计算过程，由于也发生在客户端，我们也能做手脚；&lt;/p&gt;
&lt;p&gt;还有一方面，一些计算结果，是依赖本地操作系统的。最典型的，就是时间。所以，我们还可以使用诸如变速齿轮一类的东东，根本不对游戏客户端做手脚，只是修改本地系统的运转速度，就能达到作弊的目的。&lt;/p&gt;
&lt;p&gt;但现在，所有的这一切都发生在云端，而不在客户端。客户端就是一个显示器。可以预见的，外挂问题将得到极大地改善。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;另外，这样的做法，还可能开创全新的游戏体验。由于所有的运算都发生在云端，那么，游戏厂商就能汇集更多的计算资源，提供以前无法想象的游戏模式。&lt;/p&gt;
&lt;p&gt;比如，现在的吃鸡游戏，一局的参与者是100人，但是完全的云端游戏体验，一局10000人不是什么问题；&lt;/p&gt;
&lt;p&gt;再比如，以前魔兽世界副本任务，最多40人参与，以后，全北京市的玩家一起打一个侵略北京城的大boss...？ &lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;当然了，这样做有一定的“副作用”，最大的副作用，在于简化了审核。某个游戏犯错误了，一秒钟就被拿下，所有的人都再也玩儿不了了。这个游戏，就像根本没有存在过一样。。。因为所有的游戏信息，都在云端。。。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;anyway，云服务一定是趋势。理论上，所有的服务都能够云端化，同时，也都需要云端化。&lt;/p&gt;
&lt;p&gt;这也是Oracle为什么要疯狂向云服务转型的核心原因。&lt;/p&gt;
&lt;p&gt;很有可能，未来，我们的笔记本，其最大的功能，只是显示而已。到时候，我们争论的，应该是去使用微软的云服务，还是苹果的云服务：）&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-05-13/readme.md" rel="alternate"/></entry><entry><id>2019/2019-05-12/readme.md</id><title>答读者问 | 工作一两年后去读研，值吗？</title><updated>2019-05-12T00:00:00-07:00</updated><content>&lt;h2&gt;答读者问 | 工作一两年后去读研，值吗？&lt;/h2&gt;
&lt;p&gt;最近，有个同学问我：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;工作了快一年，再去考研值得吗？考完研后出来找工作会不会有年龄限制？毕竟做开发的，年龄大是不是一个问题？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;无独有偶，最近看一个大V的公众号，遇到了一个读者类似的困惑，问了一个大概同样的问题。大V的态度坚决：考什么研啊，在想什么。&lt;/p&gt;
&lt;p&gt;我瞬间就明白为什么人家是大V，我不是大V了。&lt;strong&gt;我的观点总是那么不鲜明。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;比如对于这个问题，我的答案就是：不同的人，不一样，你还是要根据你的实际情况去考虑，balabalabala。&lt;/p&gt;
&lt;p&gt;你看，这么说，不是和废话一样嘛。根本没有回答人家的问题。而且，对于想考研的人和不想考研的人，两边都不讨好。&lt;/p&gt;
&lt;p&gt;再去看大V文章下面的留言，一堆人分享自己没有读研，但是在工作上多么的不输研究生，甚至工资各种花样超过研究生......&lt;/p&gt;
&lt;p&gt;哎，对于这个“现象”，以后有时间，我再深入分析吧，在这里，我先把我最“废话”的答案分享给大家吧。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;bobo老师的回答：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先，你应该明白，这个问题是没有标准答案的。每个人的具体情况不同，家庭背景不同，对这个问题思考的角度不同，得到的答案就不同。而且，对于这个问题，如果你去咨询不同的人，由于回答者的背景不同，经历不同，思考不同，给你的答案也会完全不一样。&lt;/p&gt;
&lt;p&gt;所以，我不能给出一个“值”或者“不值”的答案。但是，对于你的问题中的几个细节，我觉得我可以随便说一说：&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;其实你刚毕业一年。所以，如果你明年读研，你也比起本科毕业再去读研，推迟了一两年的时间而已。实在不算什么。我只能告诉你，如果你真的去读研，就会看到大量工作以后选择去读研甚至读博的人。这实在不是什么新鲜事儿。而且越好的学校，这样的人越多。如果你有机会去国外的学府看一看，三，四十岁，甚至六十岁去读研读博，都不是什么新鲜事儿。&lt;/p&gt;
&lt;p&gt;其实，我个人认为工作后读研是一件很好的事情，因为你有了一定的工作基础，了解了你在本科时候所学习的那些知识是怎么被用在工作中的，就会更充分的思考：你缺少什么，如果继续深入学习，要学什么，自己适合学什么，学习也就更具有目的性。在我看来，这比本科毕业，没有工作经验，直接去读研，有效的多。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我也不认为年龄是什么问题。因为，如果你真的想读研的话，假设你现在不行动，到了30岁，年龄对你的掣肘更深；到了35岁，更更深；到了40岁，更更更深。如果你担心年龄问题，这更是一个拖不得的问题。因为这个问题无解，你的年龄就是在逐渐增大。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果你真的担心年龄问题，那么最好的解决方案，就是现在去做。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;曾经看过一个对老年人的访谈，问他们最后悔的事情是什么？其中有一个活了100岁的老人说，&lt;strong&gt;她后悔自己没有在60岁的时候学习小提琴。因为如果自己在60岁去学习小提琴，到现在，自己已经是一名有着40年经验的小提琴手了。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所以，最重要的是：你到底为什么想读研。你说工作以后再去考研，值吗？你说的“值”，到底是什么意思。你自己是怎么定义“值”的？&lt;/p&gt;
&lt;p&gt;这个问题别人无法给你答案，只有你自己才能给你自己答案。像我说的，每个人的思考不同，经历不同，得到的答案就是不一样。&lt;/p&gt;
&lt;p&gt;但是在这里，我首先旗帜鲜明地认为：&lt;strong&gt;如果你有经济顾虑，就不要读研。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;什么意思？就是，如果你读研要花费一大笔钱，但是自己的存款或者家庭支付这笔费用有困难；或者自己已经有房贷有小孩，生活压力比较大，读研会可预计地大幅度降低自己包括自己家庭的生活质量，那就不要纠结了，不读。&lt;/p&gt;
&lt;p&gt;为什么？因为在我看来，&lt;strong&gt;我们必须承认：接受教育本身是一件奢侈的事情。&lt;/strong&gt;但是，在我们的文化里，却总认为，穷人就要好好读书，好好读书，将来才能赚大钱。这个逻辑整体没毛病，尤其在初等教育阶段。但是进入高等教育阶段，稍微有点儿问题。&lt;/p&gt;
&lt;p&gt;讲个故事：&lt;/p&gt;
&lt;p&gt;曾经，有个美国教授，问她的中国博士生，为什么要读博。&lt;/p&gt;
&lt;p&gt;那个博士生回答：因为家里穷。&lt;/p&gt;
&lt;p&gt;美国教授听完以后，瞪大眼睛反问：&lt;strong&gt;家里穷还来读博？为什么不工作？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不知道你能不能理解这之中思维的不同。&lt;/p&gt;
&lt;p&gt;当然，可能有些同学认为教育是一种投资，而不是奢侈。但是仔细想一想，&lt;strong&gt;投资不也是一件很奢侈的事情吗？&lt;/strong&gt;你必须首先有足够的财富，才能去投资啊。而到社会上去积累财富，会比在学校里容易得多。&lt;/p&gt;
&lt;p&gt;这也就是为什么，之前我说的：在国外的学府看一看，三，四十岁，甚至六十岁去读研读博，真的不是什么新鲜事儿。因为到了那个年龄，大家才能开始能奢侈起来，才开始能认真思考：自己到底想学什么，想成为怎样的人。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;很多同学要读研，只是想提高自己的专业水平。在这里，我想告诉那些“不打算读研的同学”一个好消息；“打算读研的同学”一个坏消息。&lt;/p&gt;
&lt;p&gt;2019年，美国某权威研究机构（具体是什么研究机构，我忘了，抱歉）公布了一项统计结果。这家机构跟踪了若干不同领域，不同学历，不同学校的学生，看他们毕业后两年左右的职业经历和薪资水平，大致得出了这样的结论：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;对于工程专业的学生（计算机包含在内），他们的学校背景，学历背景，和他们工作后的薪资水平没什么关系。&lt;/strong&gt;换句话说，你是麻省毕业的，还是某野鸡大学毕业的，都出来当程序员，薪资差别不大；甚至你是研究生毕业的，或者你本科都没上，就出来当程序员，薪资差别也不大。&lt;/p&gt;
&lt;p&gt;但是，&lt;strong&gt;对于商科，艺术类学科，学校背景、学历背景，影响巨大。&lt;/strong&gt;这背后的原因，应该很好想明白，我不仔细分析了。&lt;/p&gt;
&lt;p&gt;当然，虽然中国整体情况和美国有很大的不同，但是程序员入行薪资这方面，我观察也是差不多的。不管你是211，985的学生，还是二本学生，都是有机会进BAT的，关键是你的实力，而不是学历。进去以后，只要评级相同，工资差别不大。&lt;/p&gt;
&lt;p&gt;固然要承认，你的学历背景会让你的简历留存概率更高，但这背后的原因依然是：统计意义上，名校学生基础就是好，整体素质就是高。如果你是二本学生，有拿得出手的东西，可以轻易证明自己不输985，211的学生的话，BAT不太会鄙视你。这就是搞技术公平的地方。这样的例子我看到了太多太多。即使在今年这样一个行情不景气的时候，依然在上演着。我在&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-03-18/"&gt;《算法有什么用，没用》&lt;/a&gt;一文中，曾说过，关键不是你没有什么，而是你到底有什么。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所以，不要指望靠读完研究生，你的技术能力就有巨大的提升。&lt;strong&gt;技术能力的巨大的提升，肯定来自你的努力。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果你够努力，不读研究生，工作的过程中，技术能力也能有巨大的提升。&lt;strong&gt;尤其是现在，知识传播这样简单，在网上可以轻松找到一流学府的学习材料。&lt;/strong&gt;区别是，读研，会有大量的时间专门用来学习，所以时间会宽裕一些。这也是前面所说的，受教育是“奢侈品”的原因。&lt;/p&gt;
&lt;p&gt;那么到底为什么要读研呢？&lt;/p&gt;
&lt;p&gt;除了换取了大块儿的，专门的时间用于精进学习以外，以下，是我思考的一些优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;学历在一些场景下，或者是很多场景下，还是一个硬通货。这个大家都懂的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;你还可以再一次以应届生的身份找工作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;你可以认识一群同样拥有研究生学历的朋友。你在扩展自己的社交圈。而且，在学校这个环境，认识的朋友，和在社会环境下，认识的朋友，不太一样。当然，这一点，每个人体会不同。但整体，我认为，在学校认识的朋友，利益纠纷更少，所以会更真诚一些。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;研究生生活帮助你了解学术界在做什么，在怎么思考问题。这在我看来，还是挺有意义的。&lt;/p&gt;
&lt;p&gt;当然，可能很多人读完研以后，得到的结论是：学术界就是一坨屎。我觉得这无妨。这就是我经常说的：&lt;strong&gt;明白一些东西没有用，在很多时候，和明白一些东西很有用，是同样重要的；明白自己不适合什么，在很多时候，和明白自己适合什么，是同样重要的；知道什么时候说NO，在很多时候，和知道什么时候说YES，是同样重要的。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;研究生自己做毕业论文，在我看来，更像是在经历一次“创业”。什么意思呢？就是你将近乎从零开始，对一个属于自己的小项目全权负责。从寻找选题（idea），到开题（商业计划书），到具体实施过程中遇到的各种琐碎的困难，到最后的答辩（接受投资人的检阅）。其中的酸甜苦辣，只有经历的人才了解。&lt;/p&gt;
&lt;p&gt;对一些同学来说，这是一个难得的机会。当然，对于另一些同学来说，他们本身就维护自己的一个小产品，或者开源项目，对这套并不陌生，但我相信对于更多同学来说，体验一下这个从0到1的感觉，是一次不可多得的经历。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;我不确定现在是不是这样了，至少通过我的个人经验，研究生学习的过程极大的帮助我提高了我的英语水平，因为看英文文献是必须的。也是在这个阶段，我才开始认真思考总结适合自己的英语学习方法是怎样的，并且有了质的飞跃。&lt;/p&gt;
&lt;p&gt;其实，看的那些文献具体内容是怎样的，肯定早就忘了，但是英语水平的提高，是非常非常有用的。这就是我在&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-04-11/"&gt;《知识掌握的七个境界》&lt;/a&gt;里说的：&lt;strong&gt;所谓的教育，就是忘记了在学校所学的一切之后，剩下的东西。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果你有机会在读研期间出国的话，就更不用说了。以学生身份出国，比以工作身份出国，容易太多了。尤其是现在的中美局势。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上仅供参考。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;好了，我的废话说完了。&lt;/p&gt;
&lt;p&gt;最后，依然是，只有你自己能给出答案。&lt;/p&gt;
&lt;p&gt;但不管怎样，我一直认为，&lt;strong&gt;选择没有对错。任何选择，你总能在很多人身上，找到证据，这样选择是正确的；而在另外一些人身上，找到证据，这样选择是错误的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所以，还差一句废话：&lt;strong&gt;遵循你的内心，然后努力，就好了：）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;大家加油！：）&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-05-12/readme.md" rel="alternate"/></entry><entry><id>2019/2019-05-09/readme.md</id><title>分享：国外大神制作的游戏开发学习线路</title><updated>2019-05-09T00:00:00-07:00</updated><content>&lt;h2&gt;分享：国外大神制作的游戏开发学习线路&lt;/h2&gt;
&lt;p&gt;很多同学曾经问我游戏开发相关的问题。&lt;/p&gt;
&lt;p&gt;嗯，怎么说呢。&lt;/p&gt;
&lt;p&gt;我的建议是，选择一个你想做游戏的平台：iOS？Android？桌面？然后，直接上手游戏引擎，直接开发属于你的游戏。比较主流的，适合独立游戏开发者的引擎，是Unity。&lt;/p&gt;
&lt;p&gt;当然，学习游戏引擎有一定的技术门槛，但是，现如今，游戏真的不完全是拼技术的行业。尤其是独立游戏越来越蓬勃发展的今天。近乎，每一个技术人，都有足够的基础，花不了那么多的时间，就能开始属于自己的独立游戏开发。在我看来，游戏行业更多的是一个创意行业。还有足够多的耐心和时间打磨自己的作品。&lt;/p&gt;
&lt;p&gt;当然了，如果你想进入游戏相关大厂，参与AAA级别的游戏制作，那完全是另外一回事儿。你需要精进自己的技术，达到大厂要求。游戏行业涉及的具体技术非常非常多（其实前端，后端，移动开发，系统运维，大数据，人工智能...都很多啦）。在下面，我会给大家分享一个国外大神做的游戏行业学习路线图。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;首先，这个路线图在我看来不能完全叫路线，不能顺着这个路径去学习的，会学死的。千万不要路径依赖。可以参考我的文章：&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2018/2018-04-18/"&gt;《高效学习的秘密》&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;但是，里面所涉及的知识点。是非常有参考价值的。能让大家对游戏开发领域有一个全局性的认识。&lt;/p&gt;
&lt;p&gt;另外，图中都是英文，我就不翻译了。都是一个一个的技术名词而已，如果有不了解的，大家可以自行Google，也可以当一个计算机专业英语词汇手册来学习。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;首先，不管是什么领域，只要在计算机行业，请学好至少一门基础语言，加上算法和数据结构。对于游戏开发来说，使用C++居多。由于Unity引擎的极度流行，C#也应用广泛。当然，根据你的游戏部署平台的不同，包括后端架构的不同，主流语言都在游戏行业有一席之地的。&lt;/p&gt;
&lt;p&gt;&lt;img alt="basic" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-05-09/basic.png" /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;在这个基础上，整体这个“路线图”分&lt;strong&gt;服务端和客户端&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;服务端的知识点，其实和网页或者app的服务端，区别是不大的。所以，即使你的专业不是游戏相关的专业，对游戏行业感兴趣，进游戏厂做服务端是完全没有问题的：）&lt;/p&gt;
&lt;p&gt;&lt;img alt="server" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-05-09/server.png" /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;然后是客户端。&lt;/p&gt;
&lt;p&gt;游戏开发的客户端，有一些其他领域开发不涉及的内容，其实主要集中在图形学，物理引擎，还有智能方面（是基于agent的AI，不是机器学习）。&lt;/p&gt;
&lt;p&gt;而且，其实，做一名游戏开发工程师，也并不需要全部精通。比如，通常来讲，做渲染（图形学相关），做引擎，做智能，不是同一拨人。&lt;/p&gt;
&lt;p&gt;&lt;img alt="client" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-05-09/client.png" /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;最后，这个路线图，在我看来，也有不完善的地方。比如，游戏测试，其实是很重要的一块儿。据我所知，很多游戏为了测试方便，甚至会研发专门的内部使用的测试工具乃至专门的测试语言。我曾经翻看过一本不错的从底层搭建一个解析语言的书，竟然是一名游戏开发者写的：）&lt;/p&gt;
&lt;p&gt;原文在这里：&lt;a href="https://codeburst.io/the-2018-game-developer-roadmap-e07e45b3c423"&gt;https://codeburst.io/the-2018-game-developer-roadmap-e07e45b3c423&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;大家加油！：）&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-05-09/readme.md" rel="alternate"/></entry><entry><id>2019/2019-05-08/readme.md</id><title>从Oracle的裁员，到“技术专家陷阱”</title><updated>2019-05-08T00:00:00-07:00</updated><content>&lt;h2&gt;从Oracle的裁员，到“技术专家陷阱”&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Oracle裁员了。而且幅度还挺大。&lt;/p&gt;
&lt;p&gt;整体事情很简单。Oracle的中国区研发中心（CDC）确定裁员900余人。而整个CDC的人员只有1600余人，并且肯定还有第二批裁员。根据外媒的估计，如果不出意外，Oracle的中国区研发中心将完全撤离。&lt;/p&gt;
&lt;p&gt;对于这次裁员，虽然很多媒体给出了“良心裁员”的评价，但还是有很多Oracle员工进行抗议，并且打出了“坚决反对政治性裁员”，“让政治远离科技”的标语。&lt;/p&gt;
&lt;p&gt;&lt;img alt="protest" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-05-08/protest.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;这些标语怎么来的，这事儿目测在公众号不能深说。说深了，绝对被禁。前几天，很多文章第一时间发文，发表了关于中美贸易战的新闻，都被封了。所以，对于中美贸易战，我们就和新华社保持一致就好了。在这里直接引用新华社的新闻：&lt;a href="https://mp.weixin.qq.com/s?__biz=MzA4NDI3NjcyNA==&amp;amp;mid=2649449918&amp;amp;idx=1&amp;amp;sn=4b079415402b49e9c83579767cc1eece&amp;amp;chksm=87f66125b081e8331a235ad59da04fa8795ae6dd8077cae0f76cab595609d7527814ed5c3b75&amp;amp;scene=21#wechat_redirect"&gt;《中方关于美方拟升级关税措施的声明》&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;中美贸易战绝对将是影响整个世界格局发展的一个重大事件。当下我们看到的一切，比如这条新华社新闻，只是整个巨大棋局中太小的冰山一角。但是独立媒体不能太深入分析。反正我说中国必胜，求腾讯不要封我。&lt;/p&gt;
&lt;p&gt;作为一个技术向的公众号，也不应该深入探讨政治话题，说多了招人讨厌。所以我们不说政治。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在具体说回技术之前，我们先扯一扯这个所谓的“良心裁员”。&lt;/p&gt;
&lt;p&gt;为什么很多媒体说这是一个“良心裁员”呢？因为，Oracle高调公布了补偿标准：N + 6。其中N所对应的基数，是三倍于社会平均工资。大家估算，大概是25k；而6所对应的基数，是你在Oracle的工资水平（这是我现在得到的消息）。&lt;/p&gt;
&lt;p&gt;所以，按照这样计算，假设你在Oracle干了10年，月薪5万元的话，你拿到的赔偿金就是 10 * 25k + 6 * 50k = 55万人民币。&lt;/p&gt;
&lt;p&gt;猛地看，这绝对是一笔巨款。与此同时，在国内的环境，大家都懂的，很少会有企业完全遵守劳动法进行这样的全额赔偿。其实，说实话，外企也不想这么“合规办事”。但是在特殊时期，加上在别人家的地盘，只能100%的依法办事。100%的依法办事，就是“良心”了，想来，也有一丝不是滋味。&lt;/p&gt;
&lt;p&gt;但是，为什么还会有Oracle员工抗议呢？&lt;/p&gt;
&lt;p&gt;据称，&lt;strong&gt;裁员的这批人，平均年龄是37岁，平均月薪是5万元。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;换句话说，即使你是一个10年的老员工，上面计算的那笔赔偿金，不到一年就赚回来了。而且，Oracle即使在硅谷，也素以硅谷养老院闻名。近乎没有加班哦。965是必须的。但这么好的工作，没有了。&lt;/p&gt;
&lt;p&gt;肯定有很多同学说，这批工程师应该不愁再找到工作吧。其实我也觉得这批工程师是不愁再找到工作的。但可能很难像现在这么“理想”了。&lt;/p&gt;
&lt;p&gt;毕竟今年的市场行情，大家都是有目共睹的。这还仅仅是从工作时间，工作强度和工资这些角度去分析，如果再思考一些其他因素，比如很多人可能基于当前的职业选择买了房，但是新工作的地点难免尴尬，就还会多一些通勤上的困难。再加上这个年龄段，可能还要考虑接送小孩儿上下学等问题。不管怎样，在短期内，生活质量肯定会有所下降的；长期看，则肯定充满了不确定性。虽然不确定性意味着机会。但不是所有人都想要机会的。其实大多数人都更喜欢平平稳稳。&lt;/p&gt;
&lt;p&gt;而且，貌似员工手上的股权等问题也有纠纷，具体我就不了解了。这么看来，这个裁员，就不能叫“良心”了。这只是一个“特别合法的裁员”而已。&lt;/p&gt;
&lt;p&gt;这也是之前，我在&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-04-14/"&gt;《大佬们都是这么不讲道理》&lt;/a&gt;一文中，坚决反对996的另一个原因。大家再怎么违法给企业加班加点的干活，最终，如果企业“不行了”，撑死了，换回一个“合法裁员”。所以，大家合法上班就够了，别违法加班。&lt;/p&gt;
&lt;p&gt;不是让大家不努力。下了班，努力的方向多了去了。而且，很多努力，对你的企业也是有潜在好处的。这篇文章最后，我也会给你一些建议的。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;正儿八经说技术了。&lt;/p&gt;
&lt;p&gt;Oracle的这批员工能不能找到工作？肯定能。不用想。30-40岁是人的黄金年龄。所谓的“壮”年。对于工程师来说，既有之前的技术，职场和经验的积累，同时，学习能力，专注能力，认知能力，也都基本是在顶峰的。&lt;/p&gt;
&lt;p&gt;别和我说什么三四十岁的人学习能力不如年轻人。绝对是扯淡。&lt;strong&gt;学习意愿没有年轻人高是真的。但真要学习起来，甩年轻人10条街。&lt;/strong&gt;反正现在的我，比起十年前的我，学习效率高100倍。&lt;/p&gt;
&lt;p&gt;但是！所有的事情似乎都有但是。为什么我说，近乎一定的，这批Oracle的老员工，哪怕有着十年的经验，名片上的title是技术专家，但是可能很难找到像现在一样的“理想工作”？&lt;/p&gt;
&lt;p&gt;我们来看一个故事：&lt;/p&gt;
&lt;p&gt;去年，一位ID是oraguy的程序员，在网上吐槽为Oracle的数据库做维护开发有多困难。据悉，现在的Oracle数据库，是一个有近2500万行C代码的复杂项目。不断的更新迭代，让内部的逻辑，是被数千个flag连接起来的。Oracle数据库的开发人员日常，是这样的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;开始处理一个新的 bug 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;花两周的时间试图理解 20 个不同的 flag ，这些 flag 以神秘的方式相互交互，导致这个困境。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;再添加一个 flag 来处理新的特殊场景。添加几行代码来检查此 flag ，并解决有问题的情况，规避该 bug 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将更改提交到包含大约100-200台服务器的测试服务器集群，这些服务器将编译代码，构建新的 Oracle 数据库，并以分布式方式运行数百万个测试。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;回家。第二天来上班，继续处理别的 bug 。测试可能需要20-30个小时才能完成。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;再回家。再来上班，检查你的集群测试结果。顺利的话，会有大约100个失败的测试。倒霉的话，将有大约1000个失败的测试。随机选择一些测试并试图搞清楚你的假设出了什么问题。或许还需要考虑10多个 flag 才能真正理解 bug 的本质。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;再添加一些 flag 以尝试解决问题。再次提交更改以进行测试。再等20-30个小时。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;来来回回重复两周，直到你得到了将这些 flag 组合起来的“神秘咒语”。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;终有一天，你会成功，不再出现测试失败。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;为你的新更改添加100多个测试，以确保下一个不幸接触这段新代码的开发人员永远不会破坏你的修复。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;提交最后一轮测试的成果。然后提交以供审核。审查本身可能还需要2周到2个月。所以接下来继续去处理下一个 bug 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在2周到2个月之后，一切已就绪，代码将最终合并到主分支中。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这段描述，如果你没有较大的项目经验，可能不太能理解。但如果你稍微有一点点项目经验，应该都会心有戚戚。据说，为Oracle添加一个小功能，可能要6-12个月，但是大一点的功能，比如添加一种新的身份验证，预估时间是两年。&lt;/p&gt;
&lt;p&gt;其实，这赤裸裸地反映了当下软件工程行业的局限性，以及IT人员的工资为什么高。（如果有同学没看懂这个局限性在哪里，有时间我单写。）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;好了，现在问题来了，&lt;strong&gt;一个Oracle的技术专家，回到就业市场，受不受欢迎呢？我的结论是：不好说。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为什么不好说？上面的Oracle工作日常已经揭示了答案。&lt;/p&gt;
&lt;p&gt;你在Oracle内部，可能是一个技术专家。&lt;/p&gt;
&lt;p&gt;为什么你是技术专家，别人不是？因为你能比别人更快地修改bug，或者添加新的功能，完成需求。&lt;/p&gt;
&lt;p&gt;为什么你能比别人更快地修改bug，或者添加新功能？因为你对Oracle数据库的内部代码非常熟悉，对几千个flag如数家珍。&lt;/p&gt;
&lt;p&gt;可问题是，熟悉这几千个flag，对Google, Facebook, Apple, BAT, 没什么卵用。因为，&lt;strong&gt;别人家的产品，是另外几千个，和你熟悉的，完全不同的flag。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;你理解了吗？&lt;strong&gt;这样的技术专家的称号，是无法100%的平移到其他企业的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当然，你可以说，长期和这几千个flag作斗争，让你有了balabalabalabala的经验。我也同意。但是，在别的企业眼里，他还是不值你原来的薪水所代表的那个价值。&lt;/p&gt;
&lt;p&gt;这个现状，就是大家经常说的，被大企业磨成了“螺丝钉”，也是这篇文章标题所说的“技术专家陷阱”。你确实是一个技术专家，但是，这个专家的头衔极其受限，脱离了Oracle这个平台，你的价值大大降低。&lt;/p&gt;
&lt;p&gt;对于Oracle来说，你可能确实是其某一台“机器”不可或缺的“零件”。但关键是，&lt;strong&gt;如果Oracle决定放弃这台机器了呢？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这里，我只是用Oracle举例。所有的大企业员工，近乎都有这个困境。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;曾经有人分享过这么一个“现状”：&lt;/p&gt;
&lt;p&gt;某企业招聘一个系统技术人员，来面试的人，都有着极好的学历背景，公司背景，以及工作经验。甚至十年之久的技术专家。但是当面试官让面试者写一段代码，描述一下LRU的原理的时候，大部分人却表现得一团糟糕。&lt;/p&gt;
&lt;p&gt;很多同学都说，工作的时候从来不需要接触到那么底层的代码。但那是因为，你所在的公司，前人已经铺好路了。你只需要基于前人的工作，进行小修小补就好。在这个过程中，你对自己公司的代码越来越熟悉，看似能解决越来越多的问题，但与此同时，&lt;strong&gt;你很有可能离真正的核心技术问题越来越远。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;你甚至可能一直在维护你们公司中的一个缓存系统，天天在和LRU打交道，却无法清晰地阐述LRU的原理。&lt;/p&gt;
&lt;p&gt;那么换一个企业，即使还让你维护新的企业的缓存系统，你连LRU的基本原理都说不清楚，怎么能让人信服你能迅速理清楚上千个和LRU过程交互的flag，快速为企业提供价值？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;怎么避免这种情况？&lt;/p&gt;
&lt;p&gt;首先，你为一个企业效力，尤其是大企业，势必会被打磨成螺丝钉。因为只有把你打磨成螺丝钉，你才对这个企业更有价值。&lt;/p&gt;
&lt;p&gt;但是，我们要做的，是尽量成为一个形状不太奇怪的螺丝钉；尽量让自己能在别的机器上，也可以发挥相当的作用。&lt;/p&gt;
&lt;p&gt;我的建议如下：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1）拥有自己的开源项目。&lt;/strong&gt;拥有自己的开源项目，意味着自己要从底层实现一些东西，而不仅仅是依靠你的企业平台上成熟的技术栈。这个过程会让你对技术理解的更深刻。你的项目可能不会成为一个主流的产品，改变世界，但是，它绝对能改变你。更何况，万一改变世界了呢：）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2) 看成熟开源项目或者框架的源码，而不仅仅停留在应用的层面。&lt;/strong&gt;如果只是自己做开源项目，难免受制于自己的能力。但是成熟的开源项目，已经集结了很多程序员智慧的结晶和实践的成果，看别人的设计，学习别人的实现，也可以让你走进技术的核心。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3）适当轮岗。&lt;/strong&gt;接触更广阔的工作任务，而不仅仅把自己局限在一个部门的一个职位中。拓宽自己的眼界和经验的多样性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4）闲得没事儿的时候，多关注一些技术比赛信息。&lt;/strong&gt;这里，我说的不是ACM那样的算法比赛，因为算法比赛的形式太固定了。这个世界还有很多其他形式的计算机竞赛，这些竞赛，即使你不参加，关注一下，也能拓宽你的视野。&lt;/p&gt;
&lt;p&gt;比如现在很多人工智能的竞赛，通过他们，你就会慢慢明白：人工智能能如何具体的应用在某一个领域，具体能解决什么问题。数据具体是什么样子。甚至别人是怎么分析这些数据的。这和看新闻，完全不一样。&lt;/p&gt;
&lt;p&gt;再比如很多hackathon的比赛，通常都是在很短的时间（12-48个小时），完成一个小项目，从游戏开发，到物联网，到区块链应用，我还见过为太阳能板编程的hackathon。这些都会让你了解，原来，这个世界上有那么多奇怪的API；用编程的方式可以做那么广泛的事情；面对同样的主题，大家的想法那么不一样。这些，大会让你一定程度地逃离“技术专家”陷阱。&lt;/p&gt;
&lt;p&gt;&lt;img alt="hackathon" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-05-08/hackathon.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5）不要局限在一般科技媒体中谁家裁员了，谁家盈利又多了一点，谁家又出了一个折叠屏一类的小事情。&lt;/strong&gt;多关注一些“大事情”。比如科技的昨天，今天，和未来。&lt;/p&gt;
&lt;p&gt;关注我的公众号《是不是很酷》，就是一个很好的开始：）我绝对不会因为这样的小事情发文的。即使发文（比如这篇），也一定会有独立的观点，而不是制造焦虑感。&lt;/p&gt;
&lt;p&gt;我在慕课网上的专栏[《用技术人的眼光看世界，程序员技术指北》(https://www.imooc.com/read/27)，可能是另一个很好的开始。&lt;strong&gt;付费专栏，文章角度会不同，但我会尽最大努力，保证深度。&lt;/strong&gt;这个公众号上一篇推文，就是开篇词：&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-05-06/"&gt;《正式邀请你，和我一起，用技术人的眼光，探索世界》&lt;/a&gt;。推荐你读一下，开篇词下面有订阅海报。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;希望Oracle的被裁员工都能拿到令自己满意的补偿，同时有更广阔的前途。&lt;/p&gt;
&lt;p&gt;也祝所有人都成为技术专家，同时不会掉入“技术专家的陷阱”。&lt;/p&gt;
&lt;p&gt;大家加油！：） &lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-05-08/readme.md" rel="alternate"/></entry><entry><id>2019/2019-05-06/readme.md</id><title>正式邀请你，和我一起，用技术人的眼光，探索世界</title><updated>2019-05-06T00:00:00-07:00</updated><content>&lt;h2&gt;正式邀请你，和我一起，用技术人的眼光，探索世界&lt;/h2&gt;
&lt;p&gt;今天，我的新产品，在慕课网上线了：）&lt;/p&gt;
&lt;p&gt;这个新产品是一个文字专栏，叫《用技术人的眼光看世界 · 程序员技术指北》。在这个专栏里，我没有聚焦在某一个具体技术上，而是打算使用一年的时间，每周更新一篇文章，一点一点陪你，一起，用技术人的眼光，看这个世界。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;以下，将是这个专栏的《开篇词》，我会描述我的创业经历：）&lt;/strong&gt;同时，这个专栏文字的试读，我挑选了6篇文章。这6篇文章，都选自我的公众号。老用户应该已经很熟悉这些文字了。但如果你不了解我的文字风格，可以通过这些试读文章，更多地了解这个专栏。&lt;/p&gt;
&lt;p&gt;这个专栏的定价，现在购买，是69.9元，6月7日恢复原价后，是99元。所以，现在购买，平均下来，每篇文章，你将花费1.3元左右。&lt;strong&gt;我有这个自信，让你为每篇文章付费的这1.3元，都物有所值。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可能有些同学会问，有了这个专栏，这个公众号的文章怎么办？请大家放心。这个公众号还将继续运营。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;专栏的文字内容，由于是付费阅读，整体会更硬核一些；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;而公众号的文字，探讨的话题，会更随意一些。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;但我向大家保证，从我手里发表出去的文字，一定都经过了我的仔细思考。硬核也好，随意也罢，只是话题角度的不同。但我会努力顾及每一篇文章的深度，让我的用户，能够通过我的每一篇文字，都有所收获。&lt;/p&gt;
&lt;p&gt;希望大家能继续支持我：）&lt;/p&gt;
&lt;p&gt;对了，专栏支持推荐分享赚佣金活动。每分享推荐成功一个用户，赚13.98元，可以直接体现。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;《用技术人的眼光看世界 · 程序员技术指北》开篇词&lt;/h3&gt;
&lt;p&gt;大家好，我是liuyubobobo。是一名创业者，现旅居美国。研究生未毕业就开始创业，直到今天，已经将近15载了。同时，我也是资深的慕课网讲师。在慕课网的实战栏目中，已经有6门课程了，主要负责算法和数学方向。&lt;/p&gt;
&lt;p&gt;2019年初，慕课网联系我，希望我能写一个专栏，用文字的方式，和大家分享更多技术知识。我毫不犹豫地答应了。但是，具体分享什么内容，我有一些不一样的想法。很多熟悉我的同学，可能会以为我一定会做一个算法技术相关的专栏，毕竟，讲解这些领域对我来说很是得心应手的。但是，思考再三，我决定不这样做。而是推出现在这个《用技术人的眼光看世界 · 程序员技术指北》。&lt;/p&gt;
&lt;p&gt;可能，很多同学不明白，这是一个怎样的专栏。不要着急，这篇文章的最后，我会给大家解释清楚的。在这里，我想先给大家讲一讲，我创业时期的故事。&lt;/p&gt;
&lt;p&gt;我前后有两次创业。第一次创业以失败告终；第二次创业，进展还不错，拿到了投资，到现在，也有稳定的现金流。我们的创业产品不是面向大众的产品，而是和北京大学光华管理学院合做，基于管理学教育的一个专属平台。是一个在极其垂直细分的领域内部的创业项目。所以，大家通过市面的途径，无法使用我们的产品，要更加详细理解我们的产品，其实是一个很专业的话题了，这和我们的这个专栏没有关系。不过，这次创业，让我深刻感受到了技术，和这个世界之间的复杂关系。&lt;/p&gt;
&lt;p&gt;我创业初期，四处找投资。那时候，我参与了一次很奇特的饭局。饭局的主宾是一名投资人。那次饭局，投资人别出心裁，或许是想考考大家，又或者只是在饭桌上，不想聊那么严肃的问题，于是，让大家依次说一说，未来五年或者十年，世界会变成什么样子。这个饭局打开了我认知世界的另一扇门，因为，我突然发现，在座的各位创业者，即使80%都不是技术出身，对技术的理解，却比我这个科班专业的计算机学生更深刻。而且，他们普遍年龄，比我还小。&lt;/p&gt;
&lt;p&gt;当然，他们不会Java和C++；不知道什么是复杂度分析；不懂逻辑回归和SVM；搞不好有的人都没接触过微积分。但是，他们知道某个行业发展的历史和现状；知道这个行业的局限性在哪里，也就知道发展的可能性在哪里，机会在哪里；他们知道技术有可能从哪个侧面，能改变这一切。因此，他们的创业项目大多有着明确的方向。虽然，他们的方向有可能是错误的，毕竟，谁也不能预测未来。但是，因为他们是有目的的行动，即使失败，他们也能更有针对性地从中吸取教训，或者及时调头，向着更好的方向前进。&lt;/p&gt;
&lt;p&gt;相较而言，我虽然懂具体的技术知识，却只见树木，不见森林。别人告诉我，要实现这样一个功能，我能实现出来，却不明白，这个功能到底有没有意义，别人为什么需要这个功能，这一切背后是否有更深层次的原因。简单来说，我一直自以为是地在技术的小世界里畅游，却忽视了外面更大的世界。&lt;/p&gt;
&lt;p&gt;好在，我研究生时的专业——虚拟现实，让我对VR，AR领域的前沿现状有一些了解，也能随便说上两句，不至于太尴尬。但是，那个饭局后，我就告诉自己，仅仅是技术好，是不够的。必须有更大的视野，必须看更大的世界。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;由于我的第二次创业项目是和北京大学光华管理学院合做，所以，近乎整整五年，每个周末，我都是坐在北大的MBA或者EMBA课堂上度过的。在这个过程中，我也接触了很多来自各行各业的大佬朋友。他们有职业经理人，企业的中层管理者；也有创业者，企业的高管，甚至不乏身价上亿的老板。因为这个创业项目，我还有幸和万科集团合作；和王石先生一起吃饭，亲自来到云南哀牢山，采访了褚时健老先生。&lt;/p&gt;
&lt;p&gt;这段时间，中国互联网飞速发展，新生事物层出不穷，新的企业也不断携着新的商业模式登台上场，为中国乃至是世界的技术史添加注脚。我们看到了越来越多的企业，正在使用技术，改造我们生活的方方面面。而与此同时，在北大的光华管理学院里，各行各业的大佬们探讨最多的话题，就是技术的发展趋势。大佬们最关心的，是技术如何和某一个具体行业融合。&lt;/p&gt;
&lt;p&gt;此时的我，距离那次饭局，已经有两三年的光景了。这两三年的时间，我都在尝试，对我接触的每一个技术，不仅仅学习它的原理方法，还从一个更高的视角，去思考：这个技术为什么出现；它出现前，世界是怎样的；它解决了什么样的问题；现在，在这个技术的推动下，现状如何；局限性在哪里；改进的方向在哪里；未来又在哪里。&lt;/p&gt;
&lt;p&gt;这样不停地思考，广泛地涉猎，是有回报的。在北大光华管理学院，逐渐和各个行业的大佬们交流的过程中，我发现自己对很多问题，有了属于自己的见解。这些见解不一定对，但是，在交流碰撞的过程中，大家互相取长补短，让我有了更大的收获。&lt;/p&gt;
&lt;p&gt;有的大佬只是想通过互联网的方式销售自己的产品或者服务，但是，他们不明白，为什么淘宝这样一个看起来简单的网站，需要那么多人，用那么长时间维护；他们不知道怎么估计自己项目的预算和工期，也不知道怎么从零开始，创建一个网站；创建好一个网站，对企业的管理体系，又有着怎样的影响；&lt;/p&gt;
&lt;p&gt;有的大佬希望自己的项目有新的增长点，想将诸如人工智能这样的技术运用到自己的行业中，但是，他们不知道怎么运用是合理的，可行的；可能的挑战又在哪里；他们不知道人工智能的商业化运用，前人已经有了怎样的尝试，又获得了怎样的经验教训；&lt;/p&gt;
&lt;p&gt;有的大佬希望构建企业内部的知识管理系统，将企业的知识沉淀下来，而不仅仅是掌握在核心人物的手里。但是，他们不了解，知识管理有哪些工具，这些工具的优缺点是怎样的，哪一个适合自己的企业；&lt;/p&gt;
&lt;p&gt;有的大佬想使用大数据，优化自己的企业发展，兴奋地跟我探讨每一个数据源可能的作用。这些数据源，甚至包括办公楼里抽水马桶抽水的频率和数量；&lt;/p&gt;
&lt;p&gt;有的大佬，跟我探讨使用计算机技术分析海量法律文件资料的可行性；&lt;/p&gt;
&lt;p&gt;还有的大佬，直接跟我探讨，有没有可能使用人工智能的方式，预测股票，或者金融市场的走势。&lt;/p&gt;
&lt;p&gt;面对所有的这些问题，我都惊讶于，技术竟然已经如此无孔不入，深入地遍布在我们生活的方方面面。作为一个新时代的技术工作者，掌握具体的技术知识，固然是安身立命之本。但是，对技术发展有着全局性的认识和见解，将让你对整个世界拥有全新的认知。&lt;/p&gt;
&lt;p&gt;在和行业大佬们的交流过程中，我又见识到了更大的世界，听到了很多人对同一个问题，不同角度的思考。这些思考汇集起来，进一步充实了我的认识，形成了一个正向循环。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;后来，由于家庭原因，我先后旅居新加坡，美国两地。在海外，我不认识那么多商业大佬，平时对技术于商业发展上的探讨少了很多。但是，我却惊讶的发现，海外人才们普遍对世界发展趋势的关注。&lt;/p&gt;
&lt;p&gt;即使不是技术工作者，不是创业者，大多数受过高等教育的民众，也会关注科技的发展可能给社会带来的问题。在如今的时代，隐私到底还是否存在，隐私的边界是否要被重新定义；区块链技术到底是不是下一代货币的革命性技术；人工智能的发展到底又意味着什么，能带给人类更多的便利，还是终将成为毁灭人类的技术；美国已经针对人工智能技术的具体应用，建立了新的法律，那么这一切，又将怎样改变技术的发展...&lt;/p&gt;
&lt;p&gt;这些东西听起来好像很虚，离我们平时的工作生活很远，但你又不得不承认，这些东西和我们息息相关。他们反映了当今世界的走势。作为一名技术工作者，更多地把握世界的走势，就意味着更清醒的认识，更主动的选择权，以及更多的机会。程序员虽然自嘲自己是“码农”，但绝不能仅仅面朝黄土背朝天，每天只低头看着屏幕上的代码。我们必须能够不时地抬头，看一看这个世界。&lt;/p&gt;
&lt;p&gt;于是，我决定推出这个专栏。&lt;strong&gt;在这个专栏中，我们不讨论具体的技术知识，而是探讨：技术和这个世界的关系。技术，正在如何一点一点的，和我们所生活的世界交错，互相影响，互相改变。&lt;/strong&gt;这些改变的源头到底在哪里；现在正在怎样发展；未来将可能是怎样的。&lt;/p&gt;
&lt;p&gt;所以，我管这个专栏叫《用技术人的眼光看世界》，我坚信，每一名技术人，由于有着扎实的技术功底，在面对如今这个技术无孔不入的世界时，能够多一分优势，能够更早地看懂世界的变化。&lt;/p&gt;
&lt;p&gt;与此同时，我又加上了一个副标题——《程序员技术指北》。大家在攀登技术高峰时，都要在某一个技术栈上不断地学习精进，这个过程，叫做“指南”。然而，我的这个专栏，不是“指南”，而是指着相反的方向，在“指北”。我希望同学们平时钻研具体的技术，累了的时候，或者上下班通勤的途中，闲了的时候，翻开这个专栏的文章，是朝着相反的方向看了看。这就好像登山途中，大多数时候，我们都关注着脚下的山路，不断前行。但不时地，我们也要回头，向反方向望一望，看看高处的风景。我希望这个专栏的文章，能提供给你一些“反方向的风景”。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;为了让大家更详细的了解这个专栏的风格，我为大家准备了六篇试读。这些试读文章，都是我的公众号《是不是很酷》中的文章。每一篇试读文章，都将从一个侧面，反映了这个专栏可能涉猎的内容。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 各类技术的发展趋势&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先，在专栏中，会有很多文章，分析某一个特定技术领域，甚至只是一个针尖大的技术点，相应的曾经和未来。比如这篇试读文章，探讨了编程语言的发展趋势和未来：&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-03-25/"&gt;&lt;strong&gt;《编程语言的发展趋势：从没有分号，到DSL》&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;甚至，在这个专栏中，你将会看到非计算机科学技术方面的文章。比如，生物医学和计算机科学的结合，在硅谷也是重要的趋势。所以，你也会在专栏中，看到类似这样的文章，探讨人类为了追求更长的寿命，所做出的各式各样的技术努力，以及未来。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-04-05/"&gt;&lt;strong&gt;《科技，死亡，和永生》&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 时事热点新闻的深度分析&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;每天，这个世界都产生着剧烈的变化。这些变化，很多都和计算机科学有着密切的关系。针对重大的实时热点新闻，我也会在这个专栏，发表一些深度解读。在这里，同学们大可放心，我的文章，绝不会仅仅是叙述一遍事实而已，肯定会向大家尽可能地奉献“干货”，提供有深度的视角和思考。比如这篇试读，我试着解读，新西兰恐袭事件背后，科技在扮演着怎样的角色：&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-03-21/"&gt;&lt;strong&gt;《新西兰恐袭，疯狂删帖的小编，背锅的算法工程师，以及“技术优越主义”》&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我公众号中的另一篇文章，则从巴黎圣母院的大火，谈到IT世界的兴衰。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-04-18/"&gt;&lt;strong&gt;从巴黎圣母院的大火，到消逝的IT巨头&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. 让普通人也能看懂学术文章&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;学术界也是推动当今社会发展的一股重要力量。很多新兴的技术，都是先从学术界诞生，之后慢慢走向业界，最终商用化的。在这个专栏中，我也会不时选取我认为有意义的论文，或者论文系列，以科普的方式，向大家介绍，让不在学术界的你，用一种更加浅显的方式，了解学术界的前沿思考。比如在下面这篇试读中，我将以美国著名教育学家Dweck对聪明的研究为主线，向大家介绍她的一系列论文观点，同时，希望大家也能从中，找到更多努力的动力。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2018/2018-07-18/"&gt;&lt;strong&gt;《天生不聪明》&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. 高效学习的秘密&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在如今这个知识爆炸的时代，每一个同学，都面临着持续学习，终身学习的问题。到底怎样学习才是高效的？在这个专栏中，你也将会不时地看到一些学习方法论的文章，探讨学习的秘密。比如以下两篇试读：&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2018/2018-04-18/"&gt;&lt;strong&gt;《高效学习的秘密》&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-04-11/"&gt;&lt;strong&gt;《知识掌握的七个境界》&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5. 不时加餐，向你推荐更多内容，打开新的世界&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当然了，在这个专栏中，我还将会不时地给你加餐，可能会向你推荐一些好的书籍；可能会邀请你看一部好的电影。不要误会，我不是一个文艺青年，顶多是一个伪文艺青年。我的推荐一定都和技术有关。但在这个时代，技术本身，也已经深度和艺术结合在了一起。我相信，我推荐的作品，一定能够拓宽你的技术视野，更好地，从一个技术人的角度，看待这个世界的。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;那么，还等什么？现在，就让我们一起，花一年时间，一点一点，用技术人的视角，看这个世界。&lt;/p&gt;
&lt;p&gt;欢迎加入《用技术人的眼光看世界 · 程序员技术指北》。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我是liuyubobobo：）&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;对了，现在推荐你的朋友加入这个专栏，还能赚佣金。每一份成功推荐，赚13.98元。直接提现。&lt;/p&gt;
&lt;p&gt;&lt;img alt="earn" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-05-06/earn.png" /&gt;&lt;/p&gt;
&lt;p&gt;怎么加入？以下这个二维码，就是我的分享赚佣金的海报。&lt;/p&gt;
&lt;p&gt;&lt;img alt="poster" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-05-06/poster.png" /&gt;&lt;/p&gt;
&lt;p&gt;当然，你可以不使用，而是直接去慕课网的官网或者app中，直接购买。在首页，只要点击专栏，第一个映入眼帘的，就是我的新产品：）&lt;/p&gt;
&lt;p&gt;&lt;img alt="app" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-05-06/app.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;谢谢大家支持：）&lt;/p&gt;
&lt;p&gt;新的一天，大家加油！&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-05-06/readme.md" rel="alternate"/></entry><entry><id>2019/2019-05-03/readme.md</id><title>关于公众号的二三事 + 致歉</title><updated>2019-05-03T00:00:00-07:00</updated><content>&lt;h2&gt;关于公众号的二三事 + 致歉&lt;/h2&gt;
&lt;p&gt;今天是五四青年节。先祝各位朋友们青年节快乐。不管你是10后，00后，90后，80后，70后，60后，甚至是50后，只要保持酷酷的心态，就永远是青年：）&lt;/p&gt;
&lt;p&gt;今天的推文没有干货，所以只对干货感兴趣的同学可以直接关闭了。哦，对了，文末还有抽奖！&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先，我把这个公众号的文章，在github上做了一下备份。地址是：&lt;a href="https://github.com/liuyubobobo/my-blog"&gt;&lt;strong&gt;https://github.com/liuyubobobo/my-blog&lt;/strong&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;为什么要做这个备份？因为有一天，一个公众号大佬慌里慌张地告诉我：把你写的两篇和996相关的文章删掉吧。一篇是&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-03-28/"&gt;《我们每个人都是囚徒。996.ICU与囚徒困境。》&lt;/a&gt;，另一篇是&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-04-14/"&gt;《大佬们都是这么不讲道理》&lt;/a&gt;。不然的话，腾讯会给你删掉，与此同时，还会在你的公号上记一条违规。甚至，可能被封号。&lt;/p&gt;
&lt;p&gt;作为一个公众号新手，我当时也吓了一跳。但思考了一下，马上就镇定了。&lt;/p&gt;
&lt;p&gt;因为我写的文章完全没有违背社会主义核心价值观啊！甚至在&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-04-14/"&gt;《大佬们都是这么不讲道理》&lt;/a&gt;一文中疯狂引用官媒党媒的观点，为人民网，人民日报打电话。&lt;/p&gt;
&lt;p&gt;但是，我创业的时候也做过社交网络，了解很多时候，互联网上的审查会来得很突然。所以，我第一时间对我的两篇文章进行了备份。备份好以后，我就想，何不把我公众号的所有文章都备份一下？毕竟，我的每篇文章，不管好坏如何，都是我认真原创的结果。多少年后回头看，想必是很有意思的事情。但是，根据我在&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-04-18/"&gt;《从巴黎圣母院的大火，到消逝的IT巨头》&lt;/a&gt;一文中的观点，微信公众号这个平台早晚要倒。&lt;/p&gt;
&lt;p&gt;所以，就有了这个代码仓：&lt;a href="https://github.com/liuyubobobo/my-blog"&gt;&lt;strong&gt;https://github.com/liuyubobobo/my-blog&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;当然，github也早晚要倒。但是，github本质是文件版本控制结果的一个展现，这些文件都保留好，就ok了。&lt;/p&gt;
&lt;p&gt;再有时间，我琢磨琢磨，把我的文章放上区块链。年近35岁的技术大叔，就是这么矫情，还不要脸地问别人：是不是很酷？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;由于我创业的时候接触过社交网络的运营，所以对中国的互联网审核机制略知一二。&lt;/p&gt;
&lt;p&gt;首先，对于互联网内容审核，我持中立态度。这个世界有很多国家，同样有严格的互联网审核制度，甚至比中国更加严格，想法更加大胆。比如俄罗斯。有时间我会好好写一下这个事情，挺有意思。&lt;/p&gt;
&lt;p&gt;与此同时，即使以自由民主著称的西方国家，也不是零审核。关键在于，审核的边界在哪里，大家对违规内容的定义，背后依据的法理，参与决策的势力，以及如何执行，怎么执行，是不一样的。没有规矩肯定不行。关于互联网内容审核的问题，西方世界，尤其是最近，也一直在争论。有机会，关于这个话题，我也会好好写一下。&lt;/p&gt;
&lt;p&gt;对于中国，其实，很多“审核”，并非政府所为，而是平台所为。这是因为，政府并没有统一的敏感词列表，或者敏感话题列表。但是，如果你的平台出现“不当”言论，会有严重的法律后果。所以，各家平台，会不自主的加强自我审查。因此，很多“删帖”行为，其实是平台怕不小心触及了红线，而自我严格审查的结果。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;尽管如此，在中文媒体环境里，写东西确实要小心，不能太偏激。但我也不是很偏激的人。如果我有“偏激”的观点，一定是因为法理不容。比如在&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-04-14/"&gt;《大佬们都是这么不讲道理》&lt;/a&gt;一文中，我坚定不移地反对996，就是因为强制所有员工996，是100%的违法行为。这是全文的核心观点。这里的核心问题是“强制”。什么该不该奋斗，要不要努力，在法理面前，都要先放到一边。这叫依法治国。&lt;/p&gt;
&lt;p&gt;当然，如果有人一定要争论法律是否合理，那是另一回事儿。法律有可能不合理，但解决这个问题的途径，是想办法推动法律的修订和完善。&lt;/p&gt;
&lt;p&gt;前一阵子，B站源代码泄露，后来听说很多相关的文章被封了。我不确定这些文章持什么观点，但不管怎样，程序员泄露公司的源码，肯定也是违法的。包括删库跑路。大家平时开玩笑可以，但是真要付诸行动，请一定想清楚后果。&lt;/p&gt;
&lt;p&gt;还有刘强东事件，听说很多维护女事主的文章被删，甚至有一个公众号，被永久封禁了。我依然不了解这些文章持怎样的观点，触犯了怎样的红线。但是刘强东事件确实已经陷入了罗生门。&lt;/p&gt;
&lt;p&gt;当然，他出轨了，这事儿应该是坐实了，这就是我在&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-04-18/"&gt;《从巴黎圣母院的大火，到消逝的IT巨头》&lt;/a&gt;一文中说的，刘强东是洗不白的。&lt;/p&gt;
&lt;p&gt;但他到底是不是违法了，还真不好说。我们只能等待法律的裁决。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最近，我还收到了一份提醒。有人举报了某个IT大佬公号的文章，理由是这篇文章疑似抄袭我的原创文章&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-03-28/"&gt;《我们每个人都是囚徒。996.ICU与囚徒困境。》&lt;/a&gt;。微信官方询问我是否确认发起投诉。&lt;/p&gt;
&lt;p&gt;&lt;img alt="complaint" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-05-03/complaint.png" /&gt;&lt;/p&gt;
&lt;p&gt;对于举报的这篇文章，我仔细读了一遍。在我的概念里，不能叫抄袭。毕竟，&lt;strong&gt;不能因为我写了一篇“996和囚徒困境”，别人就不能写“996和囚徒困境”了。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;知识产权保护是一个异常复杂的问题。即使在知识产权保护极其健全的西方世界，也是如此。因为&lt;strong&gt;知识产权保护是一把双刃剑，如何在保护原创者利益的同时，能够让知识自由的传播，而不遭到垄断，是一个两难的困境。&lt;/strong&gt;这还只是从法理上看这个问题，在具体执行上，其实也面临着更多的挑战。有时间，我也会好好写一下这个问题。&lt;/p&gt;
&lt;p&gt;但不管怎样，在这里，我要感谢我的读者朋友，不管是谁举报的，我真的很感激。与此同时，也让我很有信心，继续在原创这条路上坚持下去。&lt;/p&gt;
&lt;p&gt;因为，我观察到的，经历到的，都在告诉我，越来越多的人拥有了版权意识，越来越多的人，能够理解原创者的辛劳，并且愿意为他们的付出给予回报。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;谢谢你们：）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这一个多月运营公众号，我还犯了两个错误。&lt;/p&gt;
&lt;p&gt;第一个错误，是之前接了一个广告。我在这个广告前面，写了一段原创文字，所以，对于这个广告推文，就申请了“原创保护”，结果导致广告商无法把这段广告文案使用在别的文章中......&lt;/p&gt;
&lt;p&gt;这是多么愚蠢的错误啊......&lt;/p&gt;
&lt;p&gt;现在，这篇广告被我删掉了。但是，前面的这一小段文字，我觉得可能会对有一些同学有用，所以今天接着这个机会，我再推送一次，放在次条的位置。&lt;/p&gt;
&lt;p&gt;&lt;img alt="delete" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-05-03/delete.png" /&gt;&lt;/p&gt;
&lt;p&gt;公众号新手，如有打扰，还望大家见谅。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;另外一个错误，就有点儿严重了。&lt;/p&gt;
&lt;p&gt;可能大家都知道，为了维护公众号的热度，我在我的每篇原创文章的后面，都添加了一个抽奖活动。这一招是跟别人学的，连抽奖活动的文案，我都是照抄的。以前一直写的是：大家如果转发我的文章，或者点击“在看”，可以增加中奖概率。&lt;/p&gt;
&lt;p&gt;在&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-04-23/"&gt;《还有没有机会逆袭？谈成功者的困境。》&lt;/a&gt;一文中，有人发出了来自灵魂深处的质疑：&lt;/p&gt;
&lt;p&gt;&lt;img alt="ask" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-05-03/ask.png" /&gt;&lt;/p&gt;
&lt;p&gt;虽然我的回答是“请咨询点赞抽奖小程序官方团队”，但毕竟是我发起的抽奖，于是，我联系了“点赞抽奖小程序”的客服。得到的答复是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="answer" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-05-03/answer.png" /&gt;&lt;/p&gt;
&lt;p&gt;简单的说，&lt;strong&gt;中奖概率和大家点击“在看”和转发文章没有关系。&lt;/strong&gt;和大家是否邀请朋友参加抽奖活动，大家在抽奖活动中的留言是否被点赞，有关。至于这个答复中的3)，4)，貌似暂时和我的公众号无关。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;所以，在这里向大家致歉。我不小心欺骗了大家。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不过，在这个公众号，&lt;strong&gt;我还会继续保持每篇原创文章都有抽奖活动的。&lt;/strong&gt;因为，&lt;strong&gt;如果这个公众号能够做起来，不仅是我一个人的功劳，也是所有阅读者的功劳。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这其实是一个非常简单的道理。国外已经有一些社区，从社区底层功能的搭建上，考虑到这一点了。有时间，我也会写一写，和大家分享一下国外“创新”的模式。但是，微信公众号这个平台本身没有考虑这个因素，我决定先自掏腰包，做这件事情。&lt;/p&gt;
&lt;p&gt;我的目的只有一个，希望有更多人能读到我的文章。毕竟，篇篇原创并不容易。能够被更多的人看到，不管你是赞同还是反对，我都是开心的。&lt;strong&gt;如果你赞同我的观点，我收获了你的认可；如果你反对我的观点，我收获了你的认知。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当然了，我还是希望大家如果觉得我的文章对你有启发，能够帮我转发，或者点一下“在看”的。&lt;/p&gt;
&lt;p&gt;美国是一个小费制国家。出门吃饭，通常都是要给一笔小费的。我经常去的一家印度餐馆，却不强制要求顾客给小费，而是写了一句话：a tip brings good karma.（小费带来好运）。每次看到，我都会会心一笑，给的小费更多点儿。&lt;/p&gt;
&lt;p&gt;在我的公众号里，我决定效仿。所以，从上一篇文章&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-04-29/"&gt;《不能白板编程红黑树就是基础差？别扯了。》&lt;/a&gt;开始，我写的是：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果你喜欢我的文章，希望能多多转发，或者点击”在看“。相信会给你带来好运哦：）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;7.&lt;/p&gt;
&lt;p&gt;絮絮叨叨说了一堆，又打扰大家了。&lt;/p&gt;
&lt;p&gt;今天是每个人的节日，大家快乐。&lt;/p&gt;
&lt;p&gt;明天是新的工作日。大家加油！&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-05-03/readme.md" rel="alternate"/></entry><entry><id>2019/2019-04-29/readme.md</id><title>不能白板编程红黑树就是基础差？别扯了。</title><updated>2019-04-29T00:00:00-07:00</updated><content>&lt;h2&gt;不能白板编程红黑树就是基础差？别扯了。&lt;/h2&gt;
&lt;p&gt;前一阵子，有同学在一个群里发了这样一个帖子：&lt;/p&gt;
&lt;p&gt;&lt;img alt="comment" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-04-29/comment.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;看完以后，我一口老血就吐在了手机屏幕上。&lt;/p&gt;
&lt;p&gt;虽然白板编程是计算机行业的一个通用的面试手段，但是，什么样的问题适合在面试中进行白板编程，还是有讲究的。&lt;strong&gt;红黑树近乎是各大名企公认的，不适合白板编程的面试问题。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在这篇文章中，我会仔细和大家分析一下：&lt;/p&gt;
&lt;p&gt;1）为什么红黑树不适合做面试中的白板编程？&lt;/p&gt;
&lt;p&gt;2）为什么同样属于经典算法实现的归并排序和快速排序，适合做面试中的白板编程？&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;在我的课程&lt;a href="https://coding.imooc.com/class/207.html"&gt;《玩转数据结构》&lt;/a&gt;中，我带领大家详细实现了红黑树中的添加操作。但为了讲清楚这一个操作背后的原理，我们都做了什么铺垫呢？&lt;/p&gt;
&lt;p&gt;首先，我们仔细学习了二分搜索树。二分搜索树是所有平衡二叉树的基础，这一点不用多说。我们的红黑树的代码（包括AVL树代码），是在二分搜索树的基础上，添加自平衡操作，修改出来的。&lt;/p&gt;
&lt;p&gt;其次，我们仔细学习了AVL树。为什么要学习AVL树？&lt;/p&gt;
&lt;p&gt;其一，&lt;strong&gt;AVL树是历史上被发明出的第一个可以维护自平衡的树结构&lt;/strong&gt;，从历史意义的角度，值得学习；&lt;/p&gt;
&lt;p&gt;其二，AVL树维护自平衡的主要手段——旋转操作，也是近乎所有树结构维护自平衡的通用操作。学习AVL树的重点，其实是学习旋转操作。这样一来，我在后续讲解红黑树的时候，就不需要讲旋转操作了，直接讲红黑树独特的“红黑节点系统”和相应的平衡维护就好了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;你看，为了讲清楚红黑树，我们花了这么大的精力，铺垫了这么多东西，大家才能比较好地理解红黑树。但即使如此，真正学习红黑树的时候，我们还是需要处理很多红黑树特有的问题，它依然并不容易。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这就是红黑树最大的问题——背景知识过多，细节过多，整体操作过于复杂&lt;/strong&gt;，对于一个面试问题来说，它过于繁杂，答清楚一个红黑树操作背后的细节，需要的时间太多了。&lt;/p&gt;
&lt;p&gt;更重要的是，对于红黑树来说，它背后有这么多细节，&lt;strong&gt;却不具有延展性&lt;/strong&gt;。红黑树的“红黑节点”的定义，在我看来属于天才一般的独特思想。但是&lt;strong&gt;这个解决问题的方式，近乎根本无法应用于其它问题。&lt;/strong&gt;而且，具体实现上，其实是一种case by case的分析方式，对多种不同的情况进行分类讨论（AVL树也是如此）。&lt;strong&gt;这个实现背后，并无法提炼出一种通用的算法思想。&lt;/strong&gt;（所以，面试也很少考察AVL树的具体实现。）&lt;/p&gt;
&lt;p&gt;即使是左旋转右旋转这种操作，虽然是树结构维护自平衡的通用操作，但也只在维护树的自平衡的过程中才有意义。这些操作也属于非常专门的算法，不具备延展性。&lt;/p&gt;
&lt;p&gt;大家可以看到，&lt;strong&gt;考察红黑树的底层实现，是考察不出面试者的能力的。近乎等于是在考察，面试者有没有在面试前准备红黑树的知识而已。&lt;/strong&gt;一个能力高的面试者，如果没有提前准备红黑树，也近乎不可能现场推导出红黑树怎么维护自平衡；而一个能力低的人，可能因为在面试前准备了红黑树，“背出”红黑树的具体实现的代码——但这和基础好毫无关系。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;注意，我只是说考察红黑树的具体实现没有意义，&lt;strong&gt;但是对于红黑树的基本原理和基本性质，大家还是需要掌握的。&lt;/strong&gt;也就是对于红黑树，计算机专业的同学，至少要达到我在&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019/2019-04-11/"&gt;《什么叫学会了？自己到底有没有学会？知识掌握的七个境界》&lt;/a&gt;中所描写的原理境界。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;可能有些同学要问了，面试也会问很多其他经典算法问题的白板编程啊，他们为什么有意义？&lt;/p&gt;
&lt;p&gt;我们举最简单的例子——&lt;strong&gt;归并排序和快速排序，看他们的意义在哪里。&lt;/strong&gt;这两种排序算法，应该是会在面试中经常问到的经典算法的具体实现了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;首先，考察这两种算法，本质就是在考察递归。这两个算法都是标准的递归算法。所以，白板编程的过程，一眼就能看出来你理不理解递归。&lt;/p&gt;
&lt;p&gt;同时，这两种算法也是标准的分治算法，而不是简单的“尾递归”。在递归函数中，至少要进行两次递归调用（而不是一次）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;更重要的是，这两种排序算法，代表了分治算法的两种典型的“范式”。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于归并排序，简单来说，是先分别递归调用，最后将结果合并起来。可以看到，合并（merge）在递归调用的后面。如果从树的视角看（递归树），&lt;strong&gt;这是一个后序遍历的过程。&lt;/strong&gt;只不过，我们的那个“遍历当前节点”的操作，不是打印输出，而是合并操作。&lt;/p&gt;
&lt;p&gt;对于快速排序，简单来说，是先进行大名鼎鼎的partition，然后，根据partition的结果，对两部分分别进行递归调用。可以看到，partition在递归调用的前面。如果从树的视角看（递归树），&lt;strong&gt;这是一个前序遍历的过程&lt;/strong&gt;，只不过，我们的那个“遍历当前节点”的操作，不是打印输出，而是partition操作。&lt;/p&gt;
&lt;p&gt;如果深刻的理解了这两种范式，近乎就掌握了分治算法书写的精髓。（当然，书写是一回事儿，根据具体的问题做算法设计，其实是另外一回事儿。）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我们再来仔细看归并排序和快速排序中的这两个子过程：merge和partition。他们同时也都是非常好的线性算法的面试问题。&lt;/p&gt;
&lt;p&gt;merge是：给定两个有序数组，如何合并成一个有序数组？&lt;/p&gt;
&lt;p&gt;partition是：给定一个数组，选定其中一个值。如何把这个数组分成两部分，一部分小于这个值，一部分大于这个值？&lt;/p&gt;
&lt;p&gt;大家可以看到，对于这两个问题来说，都：表述足够简单；同时，其实就是在数组中做事情，所以逻辑不会太复杂。即使你没有特别准备，对于合格的计算机专业的同学来讲，也都应该能够在现场写出正确的算法。因为这两个算法问题，其实毫无设计可言。需求很明确，实现这个功能就好了。最终的实现结果，应该在10行代码以内。&lt;/p&gt;
&lt;p&gt;对了，根据需求对数组中的元素进行操作，绝对是算法面试的高频问题。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;最后，就是这两个算法有足够多的扩展性。&lt;/p&gt;
&lt;p&gt;对于归并排序，除了递归实现以外，我们还可以自底向上的非递归实现；归并排序可以引出稳定排序这个概念；归并排序的思路还可以用于完成诸如“快速计算数组中逆序对的数量“这样的问题；归并排序中的merge子过程，还用到了”双指针“的思想；&lt;/p&gt;
&lt;p&gt;再看快速排序。快速排序的partition操作就有很多实现方式，单路，双路，再到三路快排。如果能一路优化下来，并且明确每次优化的目的是什么，就已经很可以看出面试者的水平了；快排的思路还可以解决“快速查找第k大的数字”这个经典问题；同时，快速排序本质是一个随机算法，因为在partition的过程中，pivot选择需要随机。这样也可以引出一些和随机算法相关的问题。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;你看，归并排序和快速排序可以引出来这么多东西，但是，这两个算法，都是20行以内可以搞定的算法。一块儿白板，绰绰有余。&lt;strong&gt;这才是白板编程的好问题，代码量足够小，却能不断地深挖，最大限度的测试面试者的功力。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;而白板编程红黑树，则完全没有这些附加价值。这就是为什么，&lt;strong&gt;大厂近乎都不会考察红黑树的白板编程。&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;那么，什么是和红黑树相关的好的面试题呢？我在网上简单搜了搜，这些问题都不错：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;STL中的set底层用的什么数据结构？（或者STL中的map底层用的什么数据结构？或者Java标准库中的TreeSet, TreeMap，底层用什么数据结构？）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;红黑树的数据结构是怎么定义的？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;红黑树有哪些性质？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;红黑树的各种操作的时间复杂度是多少？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;红黑树相比于BST和AVL树有什么优点？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;什么场景应该使用红黑树？什么场景应该使用哈希表？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如何扩展红黑树，来获得比某个结点小的元素个数？（这个问题本质不是红黑树的问题，而是BST的问题。）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;同学们在面试前，应该多准备这类和红黑树的性质相关的问题。完全不需要特别准备红黑树添加删除节点的具体逻辑。如果面试的时候，面试官真的让你白板编程红黑树，我的建议是：&lt;/p&gt;
&lt;p&gt;1）承认自己很倒霉；&lt;/p&gt;
&lt;p&gt;2）安慰自己，这家公司不想真的招人，或者面试官太...，不值得去；&lt;/p&gt;
&lt;p&gt;3）直接起身走人。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;所以，比起文初那位面试官的吐槽，这位面试官的吐槽更合理 &lt;/p&gt;
&lt;p&gt;&lt;img alt="comment2" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-04-29/comment2.png" /&gt;&lt;/p&gt;
&lt;p&gt;大家加油！：）&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-04-29/readme.md" rel="alternate"/></entry><entry><id>2019/2019-04-23/readme.md</id><title>还有没有机会逆袭？谈成功者的困境。</title><updated>2019-04-23T00:00:00-07:00</updated><content>&lt;h2&gt;还有没有机会逆袭？谈成功者的困境。&lt;/h2&gt;
&lt;p&gt;&lt;img alt="painting" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-04-23/painting.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;题图：油画《自由领导人民》&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;草根逆袭，是这个时代的热词。所有人都想逆袭。但很多时候，看着那些“成功者”，大家心里又不免犯嘀咕：人家那么强大，怎么可能被我逆袭呢？&lt;/p&gt;
&lt;p&gt;实际上，仔细想想，在我们这个时代，从来不缺逆袭者的故事。虽然“阶级固化”被越来越多的人提起，但其实，当下，是一个最容易逆袭的时代。&lt;/p&gt;
&lt;p&gt;这一点，我们从这个世界企业的变迁就已经可以看出来。在我的上一篇推文&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-04-18/"&gt;《从巴黎圣母院的大火，到消逝的IT巨头》&lt;/a&gt;中，我提及了一个统计数据：如今，美国标普500强的企业，平均寿命只有15岁。换句话说，每隔15年，近乎就有一半企业会死掉，另一半企业光荣上榜。这另一半企业，都是逆袭者。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;就算从中国看，也是如此。BAT早早地打下了互联网的江山，别的公司还有机会吗？&lt;/p&gt;
&lt;p&gt;当然有。&lt;/p&gt;
&lt;p&gt;美团，2010年上线；&lt;/p&gt;
&lt;p&gt;快手，2011年上线；&lt;/p&gt;
&lt;p&gt;滴滴，2012年上线；&lt;/p&gt;
&lt;p&gt;今日头条，2012年上线；&lt;/p&gt;
&lt;p&gt;拼多多，2015年上线......&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;这样的例子太多太多。他们都是顶着BAT的光环发展起来的成功企业，他们都是逆袭者。&lt;/p&gt;
&lt;p&gt;如果把眼光放到国外，那就更多了。多到数不过来。&lt;/p&gt;
&lt;p&gt;站在创业的视角看，正是因为逆袭的机会一大把，才有动力选择创业的。否则，还创什么业？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为什么会出现逆袭？逆袭者有本事，肯定是毋庸置疑的。可是，如果从静止的角度看，逆袭者本事再大，当前的成功者掌握着那么多优势资源，怎么会输掉？或者将自己的利益拱手相让？&lt;/p&gt;
&lt;p&gt;另外一个很重要的原因，是大多数成功者，都有着共同的局限性。这就是这篇推文的重点。&lt;/p&gt;
&lt;p&gt;这个困境是什么？我来讲一讲上世纪70年代到90年代，硬盘，这个计算机重要部件的一小段发展史。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;在20世纪70年代中期，主流的硬盘规格，都是14寸的。这是什么概念？现在大家的笔记本电脑，可能都是13寸或者15寸的。那个时候，一个硬盘就像现在的笔记本电脑那么大。但是笔记本电脑毕竟薄啊。那个时候的硬盘，还厚，所以，一块硬盘，基本上就是像现在的微波炉一样的家伙。&lt;/p&gt;
&lt;p&gt;到了20世纪70年代末，一种体积更小的硬盘出现了——8寸硬盘。8寸硬盘虽然体积小，但是也有缺点，就是容量也小一些，速度也慢一些。&lt;/p&gt;
&lt;p&gt;现在，我们站在21世纪回头望，都知道，计算机势必向着“微”机的方向发展。什么是微机？就是要小。但那时的厂商不知道。14寸硬盘厂商问他们的客户，你们需要8寸硬盘吗？他们都说不需要。因为他们的客户，需要更大的容量和更快的速度。所以，14寸硬盘厂商大多不会投入研制8寸的硬盘技术。&lt;/p&gt;
&lt;p&gt;至于研制8寸硬盘的厂商，都是那时的小厂。他们在14寸硬盘领域无法和大厂抗衡，只能另辟蹊径，尝试这种新的，谁也不知道结果的技术。而他们的用户群，也就是那些使用更小型计算机的中小企业，也在当时少得可怜。可以想见，8寸硬盘厂商赚的钱，比起14寸硬盘大厂，要少太多。&lt;/p&gt;
&lt;p&gt;但是，你猜怎样？随着时代的发展，8寸硬盘的容量和速度都在提升，同时，计算机小型化的潮流也愈演愈烈。终于有一天，那些曾经的14寸硬盘厂的客户，都渐渐顺应时代的发展，换上了小型机，开始需要8寸硬盘了。但此时，8寸硬盘的市场份额，已经完全是一片新天地，和之前的14寸硬盘厂商没有半毛钱关系了。&lt;/p&gt;
&lt;p&gt;就这样，一大批14寸硬盘厂退出了历史舞台，新的一批8寸硬盘商完成了逆袭。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这段历史有意思的地方还在后面。&lt;/p&gt;
&lt;p&gt;这批8寸硬盘商虽然赶走了14寸硬盘商，却自己走入了同样的历史循环，重蹈覆辙，被一批5.25寸硬盘商干倒了；&lt;/p&gt;
&lt;p&gt;而这批5.25寸硬盘商，虽然赶走了8寸硬盘商，完成了逆袭，随后，又被一批3.5寸硬盘商干倒了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;1985年，希捷公司率先研制出了3.5寸硬盘。当时的微机大厂是IBM。于是，希捷的市场营销人员拿着3.5寸的硬盘，去问IBM的意见。IBM没有表示出任何兴趣。因为IBM的机器已经为5.25寸硬盘留好了接口。为了这个更小的硬盘，改变整机设计，在当时看是不划算的。而整个PC市场，如果IBM不感兴趣的话，剩下的厂商，市场份额就太小了。所以，希捷公司只好将3.5寸硬盘技术束之高阁，继续投入到5.25寸硬盘的研发升级上。&lt;/p&gt;
&lt;p&gt;不久，市场上出现了另一家公司——康诺公司。这家公司专门提供3.5寸的硬盘。而这家公司的主要客户，也是一颗冉冉新星——康柏公司。康柏公司在当时，主要产品锁定为同样是新生事物的笔记本电脑。正因为如此，康柏公司需要更小的硬盘，康诺公司则可以提供这种产品。现在我们都知道了，笔记本电脑也是一个巨大的趋势。康诺公司借着这个契机，大赚特赚，甚至一度威胁到了希捷公司在硬盘领域的地位。当然，在这场战斗中，希捷公司没有倒下，但康诺公司在希捷公司手中，抢下了一片市场，完成了属于自己的逆袭。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;不知道大家看懂没有，在这段硬盘发展史中，是什么让新的硬盘企业不断逆袭？其实，恰恰是当时已经占据硬盘市场的大企业自身的局限性。那些大厂，已经拥有了稳定的客户和现金流，面对新事物的出现，他们的第一反应绝不会是丢弃现有的业务。毕竟，新事物有风险，结果未知。这就给新企业以机会，完成逆袭。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可能很多同学会有疑问，难道那些硬盘大厂，不能既占据着大尺寸硬盘市场，同时顾及小尺寸硬盘市场吗？&lt;/p&gt;
&lt;p&gt;能。但很难。企业和人一样，需要方向。全面发展不是不可能，但是太难，甚至可能最终导致全面不发展。亚马逊已经稳稳坐上了世界头号电商的交椅，坐拥那么多资源，人力，和经验，还是不能在发展欧美市场的同时，顾及好中国市场，就是这个原因。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;把这个道理，放到个人身上，大家会看的更清楚。&lt;/p&gt;
&lt;p&gt;我在北航读研的时候，实验室里有一个已经读了5年的博士师兄。他和我讲了他在5年前，也就是大概2003年，他本科毕业时候的故事。&lt;/p&gt;
&lt;p&gt;在我的这名博士师兄本科毕业的时候，他的选择是找工作，或者继续深造，读博读研。他虽然选择了读博，但是他看到了他的其他本科同学，毕业时找工作的情景。&lt;/p&gt;
&lt;p&gt;什么情景呢？基本上能找到工作的人，都是去微软，雅虎等大企业。那个时代，互联网企业还不多。少有的几个互联网企业，都是这样的巨头。&lt;/p&gt;
&lt;p&gt;那会儿BAT呢？&lt;/p&gt;
&lt;p&gt;阿里和腾讯，师兄都不了解。我估计是因为地理原因，阿里在杭州，腾讯在深圳。但是，百度就在北京，那时刚刚成立三年，距离上市，还有两年的时间。此时，正是百度的扩张期。但那时的百度，还毫无名气，不要说一流的学生，二流的学生都不愿意去。因为压根儿都没听说过。&lt;/p&gt;
&lt;p&gt;所以，百度扩张需要人才，怎么玩儿呢？据我的师兄说，像北航这种学校的学生，要是没有找到工作，百度统统接盘。&lt;/p&gt;
&lt;p&gt;5年后，大概是2008年，我的这名博士师兄，再回首看他的那群本科同学，结果是怎样的呢？百度已经上市。当年那群找不到工作的末流学生，各个身价不菲，远超当年那群一二流，进了微软雅虎的同学，成功完成了人生的逆袭。&lt;/p&gt;
&lt;p&gt;这段故事让我唏嘘。请大家设身处地的想一想，如果你是一个一流的学生，Google和众里科技两个企业的Offer摆在你面前，你会怎么选？不要问我众里科技是什么企业。你没听说过就对了，我瞎编的，对标当时的百度用。众里寻她千百度嘛。&lt;/p&gt;
&lt;p&gt;这两个选择，就像在当时，一流学子们面对微软和百度两个选择一样。一个是没人听说过的“民营小企业”；另一个——微软，则是世界首富比尔盖茨所率领的软件帝国，你怎么选？&lt;/p&gt;
&lt;p&gt;我估计除了极少数人，大多数一流的学生，还是会选微软。毕竟，百度发达是万一的事儿。万分之九九九九，百度会倒闭，那我这个一流人才，就被埋没了。&lt;/p&gt;
&lt;p&gt;这其实和当下，一流名校的顶尖学生，都去大厂，完全一样。我没有说这些顶尖学生的选择不对。一点儿毛病都没有，要是我，十有八九也会这么选。但我只是说，10年后回头看，那些顶尖学生可能会发现，自己没有做出最优的选择。但这不能怪他们，因为谁都不能预测未来。&lt;/p&gt;
&lt;p&gt;这其实和我之前讲的硬盘的故事一模一样。14寸硬盘商，面对新的8寸硬盘技术，不会把8寸硬盘技术作为专攻方向。因为彼时，14寸硬盘可以带给他们巨大的收益和现金流，放弃才是傻子。谁当CEO都不会放弃，放弃分分钟被董事会炒掉。至于8寸硬盘，万一它不是趋势呢？为什么要为了一个万一，损失当下有稳定收益的生意？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这就是我所说的成功者的困境。他们虽是当下的成功者，但是，很少有成功者，敢于舍弃当下的成功所带来的稳定收益，而去在尚不稳定的领域发展。因为当下的成功，是一块太难割舍的肉。反倒是那些在当下不成功的人，他们没有什么可顾虑的，放手一搏，去那些还没有稳定下来的领域闯一闯，搞不好就成了风口上的猪，赢得了未来。&lt;/p&gt;
&lt;p&gt;于是，这样的逆袭不断上演。于公司，于个人，都是如此。&lt;/p&gt;
&lt;p&gt;所以，要问我，到底能不能逆袭？太能了。每个细分领域，都充斥着这样的机会。&lt;/p&gt;
&lt;p&gt;我有一个习惯，面对一个所谓的成功人士，我都会问一下自己：这个人十年前在哪里？二十年前在哪里？三十年前又在哪里？这个人是曾经一众竞争者中，最优秀的那个人吗？&lt;/p&gt;
&lt;p&gt;看多了，我就明白了，大部分成功者，其实都是逆袭者。从歌坛王子周杰伦，到学界神话爱因斯坦。&lt;/p&gt;
&lt;p&gt;没有一个领域的成功者是永久的。成功的机会也多的是。&lt;/p&gt;
&lt;p&gt;我们可以毫不费力地想见，100年后，没有人还会提起王思聪。这就像我们现在，也根本不记得，100年前，200年前，300年前，世界首富是谁，他的儿子又是谁。一样的道理。&lt;/p&gt;
&lt;p&gt;剩下的，就看你&lt;strong&gt;想不想&lt;/strong&gt;当一个逆袭者；&lt;strong&gt;敢不敢&lt;/strong&gt;当一个逆袭者；&lt;strong&gt;愿不愿意&lt;/strong&gt;努力去当一个逆袭者了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;逆袭从来不是什么神话，而是一种常态。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;大家加油！：）&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-04-23/readme.md" rel="alternate"/></entry><entry><id>2019/2019-04-18/readme.md</id><title>从巴黎圣母院的大火，到消逝的IT巨头</title><updated>2019-04-18T00:00:00-07:00</updated><content>&lt;h2&gt;从巴黎圣母院的大火，到消逝的IT巨头&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;巴黎圣母院着火了。拥有着850余年历史的哥特式教堂的主尖顶，在一瞬间轰然倒塌。&lt;/p&gt;
&lt;p&gt;&lt;img alt="dame" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-04-18/dame.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;很多人拿出了《爱在日落黄昏时》（Before Sunset）这部影片中的一个截图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="movie1" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-04-18/movie1.png" /&gt;&lt;/p&gt;
&lt;p&gt;在我看来，这句台词其实翻译的不是很准确。这个翻译，把这句台词变成了一个问句。可能译者也对巴黎圣母院有一天会消失抱有疑问吧。但其实，这句台词，是女主在听完男主所讲的关于巴黎圣母院的故事以后，很肯定地表示：巴黎圣母院总有一天会消失的。&lt;/p&gt;
&lt;p&gt;所以，我的翻译是：但是，你不得不承认，巴黎圣母院总有一天会消失的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;But you have to think that Notre Dame will be gone one day.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;巴黎圣母院着火以后，媒体采访一个法国人，一名普通的巴黎民众说的话，让我动容：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我出生的时候，巴黎圣母院就在那里；&lt;/p&gt;
&lt;p&gt;我一直以为，我去世的时候，巴黎圣母院还会在那里；&lt;/p&gt;
&lt;p&gt;但是，现在，我不知道在我有生之年，还能不能再走进巴黎圣母院去看一看了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;很多时候，我们都觉得我们身边习以为常的事情是那么平凡，甚至坚信它肯定可以永远下去，但事情的真相，往往会很残酷。&lt;/p&gt;
&lt;p&gt;比如中国自改革开发以来，就没有经历任何真正意义上的经济危机。经济一直蓬勃向上发展。这是不是意味着中国不可能爆发经济危机？很多人都这么认为。&lt;/p&gt;
&lt;p&gt;若果真如此，我一定要大声疾呼，让所有国家都来学习中国的经济模式。但其实，如果真是如此，根本不需要我呼吁什么，其他国家早就主动跑来学习我们的经济模式了。我是一个悲观主义者，我不认为中国不会爆发经济危机，问题只是什么时候，以何种形式到来而已。&lt;/p&gt;
&lt;p&gt;不要误会，我衷心希望新中国是世界上第一个，甚至是唯一一个不会爆发经济危机的国家。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我们还是说技术世界的事情吧。&lt;/p&gt;
&lt;p&gt;互联网刚刚在中国兴起的时候，我开开心心地注册了我的第一个电子邮箱：雅虎中国邮箱。那时的雅虎，绝对是互联网界的霸主。现在互联网，还有三分天下的局面，国内有BAT（百度，阿里，腾讯），国外有FAAMG（Facebook, Apple, Amazon, Microsoft, Google），不输一线大厂的各种准一线大厂更是不胜枚举。但在那时，国内国外，都是雅虎一家独大。我一直觉得，我可能会一直使用这个雅虎邮箱。&lt;/p&gt;
&lt;p&gt;结果呢？2013年，雅虎中国邮箱停止服务。随之而来的，是雅虎背后更大的变动：整个雅虎中国关闭，雅虎从中国市场上消失了。之后，雅虎经历了一系列的转让，解体。2019年4月3日，以前雅虎公司为主要资产的Altaba公司，正式宣布清算和解散。一个时代彻底落幕。&lt;/p&gt;
&lt;p&gt;雅虎中国邮箱的关闭，曾带给我巨大的麻烦，因为有一系列互联网服务，我都是使用雅虎邮箱注册的。但是，很快我就发现，事情好像也没有那么糟糕，因为大多数曾经注册的互联网服务，那些曾经我觉得好有用，我会一直用下去的互联网服务，似乎，也不是那么好用了。比如印象笔记。&lt;/p&gt;
&lt;p&gt;至于邮箱，我早就使用Google旗下的Gmail邮箱作为主力邮箱了，直至今日也是如此。但是，我仍然会不停地，像《Before Sunset》中的那个女主一样想到：&lt;strong&gt;我们不得不承认，Google总有一天，也会消失的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;说到消逝的巨头，雅虎是一个绕不过的典型案例。有太多媒体，书籍，作者，写过雅虎的故事。但是，每次我看到雅虎的故事，依然心潮澎湃。是的，一点都没有夸张，心潮澎湃。&lt;/p&gt;
&lt;p&gt;我太喜欢雅虎的故事了。有时间，我一定从我的角度，再好好写一写雅虎的故事。&lt;/p&gt;
&lt;p&gt;嗯，我就是这么奇怪，不喜欢成功者的故事，偏偏喜欢失败者的故事。在大多数文学作品，影视作品中，我都无法体会成功者的喜悦，但是我却能深刻地体会失败者的苦楚。可能因为我并不是一个成功者。同时，在我的眼里，成功的故事通常不能让我学到什么东西，但是，失败的故事往往可以让我学到很多。&lt;/p&gt;
&lt;p&gt;唐骏有一本书，叫《我的成功可以复制》。我不知道谁看了唐骏的书，复制了他的成功；&lt;/p&gt;
&lt;p&gt;李笑来在得到有一个专栏，叫《通往财富的自由之路》。我也不知道有多少人通过这个专栏，实现了财富自由。&lt;/p&gt;
&lt;p&gt;就是这个道理。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;雅虎是IT界唯一消逝的巨头吗？当然不是。&lt;/p&gt;
&lt;p&gt;大家可能都知道，IBM是推出第一台个人计算机的公司。但在此之前，计算机产品一直是被一家叫做DEC的公司主导的。这是1970-1980年的事情。如果你问那个年代的人们，90%的人会认为计算机只有在机构才有用武之地，大众是不会使用它的；他们也不会相信DEC会倒下，因为DEC在当时已经彻底控制了计算机市场。但是，现如今，这个品牌在我们这代人的眼里，连一丁点记忆的留存都没有。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;那么问题来了，IBM能永远存活吗？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;另外一个例子是美国半导体设计公司——仙童（Fair Child）。这家半导体公司，曾开发出了世界第一款商用集成电路，在硅谷的发展史上，占有举足轻重的地位。但如今，在这个行业，INTEL 和 AMD 楚汉争霸，仙童早就已经是纪录片中才能出现的企业了，而且是黑白纪录片。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;那么问题来了，INTEL 和 AMD，能永远存活吗？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;另一个例子是Sun，大家可能熟知它是因为Sun是Java的亲爸爸。我在本科参加ACM比赛的时候，比赛完全不支持Java语言。有一场比赛，我印象深刻，就是Sun公司赞助的，每个选手都能收到Sun公司发的一本比《算法导论》还厚的Java手册。那时，Sun公司还在推广Java语言。&lt;/p&gt;
&lt;p&gt;那时候的Java语言，在我看来像弱智一样，连泛型都不支持（大概Java 5）。Java语言在之后的很长一段时间，也并没有特别大的发展。但后来，我才知道，虽然曾经Java那么弱智，但Sun公司来头不小，这是一家1992年上市，1993年挤入美国财富500强的企业。&lt;/p&gt;
&lt;p&gt;讽刺的是，现如今，Java语言确实大红大紫了，但Sun公司早已人去楼空，卖给了甲骨文（Oracle），这也为后来甲骨文和Google之间的大战揭开了序幕。这段故事暂且不表。&lt;strong&gt;问题来了：甲骨文能永远存活吗？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这些都是美国的例子。那我们把视线移出美国，可能最著名的例子，就是大名鼎鼎的诺基亚了。这家来自芬兰的科技公司，一直到2012年，都在蝉联世界第一大手机厂商的宝座，毫不夸张的说，在那个时代，10台手机，8台诺基亚。但是随着苹果的出现，诺基亚溃不成军。现如今，10台手机，有几台诺基亚呢？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;但是，问题来了：苹果能永远存活吗？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这些还都是国外的例子，看看国内。虽然我们的互联网历史还比较短，但我也能随口说几个名词：开心农场，饭否，ChinaRen，快书包，超级课程表，飞信....&lt;/p&gt;
&lt;p&gt;这个列表可以无穷无尽。&lt;/p&gt;
&lt;p&gt;在这里，我还特别想提一个品牌——凡客。为什么？因为当时，凡客太火了。凡客的广告，近乎遍布北京地铁的每一站。凡客体也是各大媒体竞相学习的榜样。韩寒——这个曾经说不会做广告的男人，都给凡客做起了广告。&lt;/p&gt;
&lt;p&gt;但现在呢？&lt;/p&gt;
&lt;p&gt;&lt;img alt="vancl" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-04-18/vancl.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;BBC曾在2012年，发表过一篇振聋发聩的文章，叫《Can a company live forever?》（一家公司可能永远活着吗？）其中列举了一个统计数字。据统计，随着时代的变迁，美国标普500指数里的公司，平均寿命大幅度下降。在1920年左右，美国标普500指数的公司，平均寿命是67年；而现如今，美国标普500指数的公司，平均寿命竟然只有15年。换句话说，15年后，大部分现在耳熟能详的大企业，都会被新的公司替换掉。&lt;/p&gt;
&lt;p&gt;我觉得，这个统计数字可以很好的解释代沟。毕竟，如今是商业社会，我们的生活，是被无数的商品服务所包围的。但是，每隔15年，人们所接受的商品服务，就完全不同了。&lt;/p&gt;
&lt;p&gt;至于中国，这个数字更加夸张。但是鉴于我国自改革开放到现如今，只有短短的40余年，商业环境还没有完全稳定下来，所以，这个数字可能也不能太说明问题。但是，一个很显然的事实是：企业的寿命，是抵不上一个自然人的寿命的。远远抵不上。&lt;/p&gt;
&lt;p&gt;所以，如果不出意外，我们这帮“幸运儿”，将不仅仅见证百度，腾讯，阿里巴巴，苹果，google，微软，Facebook，Amazon的崛起，我们还终将见证他们的消亡。不管我们愿不愿意。&lt;/p&gt;
&lt;p&gt;别觉得不可思议，Facebook，Google，Amazon和Apple的日子，现在都不好过。尤其是Facebook。有时间我要专门写一写。&lt;/p&gt;
&lt;p&gt;很多同学都给我留言，让我谈谈大龄程序员的困境，找到合适的机会，我也一定要写一写这个话题。但是，在我看来，&lt;strong&gt;大家需要担心的，不仅仅是我们的年龄大了的问题；还有我们所在的企业年龄大了，突然就倒塌了。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;昨天，互联网上刷屏的新闻，是早前指控刘强东性侵的明尼苏达州立大学女大学生，正式向刘强东和京东提起民事诉讼。我刚刚在&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-04-14/"&gt;《大佬们都是这么不讲道理》&lt;/a&gt;中号召刘强东聊聊美国的故事，结果就出了这么个新闻，事主正儿八经地要聊聊和刘强东的美国故事。&lt;/p&gt;
&lt;p&gt;这件事之后会怎么发展，不好说，还有待观望。但这个事情的关键根本不是刘强东，人家愿意喝什么味道的奶茶跟我们没关系。问题的关键是京东这个企业。因为这个企业，承载了18万名员工，这就近乎意味着18万个家庭。&lt;/p&gt;
&lt;p&gt;我更关注的，其实是刘强东4月15日凌晨发布的一封所谓的“内部邮件”，这封邮件在解释，为什么京东物流取消了员工的底薪？因为不这么做，京东物流就完蛋了。京东物流已经连续12年亏损，2018年全年亏损23个亿。这样下去，京东物流只够撑两年。&lt;/p&gt;
&lt;p&gt;所以，不是刘强东不认兄弟，是刘强东不能认这个兄弟。真认这个兄弟，大家就都死了。我没有为刘强东洗白，刘强东是洗不白的。我只是说：市场就是这么残酷。&lt;/p&gt;
&lt;p&gt;与此同时，新的新闻又来了，亚马逊也将关闭中国的电商业务。&lt;/p&gt;
&lt;p&gt;这事儿有解吗？其实，人类发展至今，无数先哲大家，一直在致力于解决这个问题，但很可惜，一直没有解决。&lt;/p&gt;
&lt;p&gt;所以，才有乌托邦这么一个词儿。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;7.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;《Before Sunset》是一个豆瓣评分8.8分的高分文艺片。在我看来，就这一句台词，就值这个分数了。我这么长一篇文章，絮絮叨叨，说了一堆，想说的道理，回头一看，其实就包含在女主那一句台词里了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;But you have to think that Notre Dame will be gone one day.&lt;/p&gt;
&lt;p&gt;但是，你不得不承认，巴黎圣母院总有一天，也会消失的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="movie2" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-04-18/movie2.png" /&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-04-18/readme.md" rel="alternate"/></entry><entry><id>2019/2019-04-14/readme.md</id><title>大佬们都是这么不讲道理</title><updated>2019-04-14T00:00:00-07:00</updated><content>&lt;h2&gt;大佬们都是这么不讲道理&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;马云谈996，说996是福报，被刷屏了。&lt;/p&gt;
&lt;p&gt;然后马云可能觉得不合适，也可能是觉得不过瘾，不管怎么样，再谈了一次996。题目我看不太懂，叫《理性讨论比结论重要》。&lt;/p&gt;
&lt;p&gt;理性讨论重要我明白；结论不重要，我不明白。&lt;/p&gt;
&lt;p&gt;讲真，这次关于996的讨论，是我见过的网上对中国社会问题讨论中，最理性的一次。可能是因为参与讨论的人都是高学历群体吧，加上码农群体本来就是靠逻辑吃饭的，讲起道理都是逻辑严谨，一丝不苟，条理清晰，有始有终的。对于这个问题的讨论，我没有看到任何无端谩骂。结合最近的《西安奔驰维权事件，读书人总以为是能讲道理的... 》，唉，一声叹息。&lt;/p&gt;
&lt;p&gt;马云在谈996的文章中，有这么一段话：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;关于“996对不对”，法律自有规定摆在那里，这个问题并不是关键，...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我就不懂了，996对不对不关键？&lt;/p&gt;
&lt;p&gt;至于刘强东强势发声，讲了一个根本没有起因经过结果的故事，叫《地板闹钟的故事》。虽然刘强东讲故事的水平不太高，但我还是希望他能强势发声，谈谈去年在美国的故事。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;无论是马云，还是刘强东，谈到996，都在偷换概念，将996和奋斗划等号。&lt;/p&gt;
&lt;p&gt;你说奋斗就得996，甚至007，要忘我地付出，这个我没意见；&lt;/p&gt;
&lt;p&gt;但是996就等于奋斗？&lt;/p&gt;
&lt;p&gt;这篇推文，我本来想科普一下逻辑学的基础知识。毕竟这个公众号的文章，我都想和一些知识性的内容扯点儿关系，争取让大家在阅读的时候，也能学到些东西。但越写越不是滋味，越写越生气。写了几千字，硬是被我给删掉了。所以请原谅我，这篇文章更偏情绪化一些。因为大佬们的逻辑漏洞也太明显了。&lt;/p&gt;
&lt;p&gt;奋斗确实需要996；但是996不等于奋斗！&lt;/p&gt;
&lt;p&gt;这很难理解吗？小学生应该就能理解：狗有四条腿，但四条腿的不一定是狗。&lt;/p&gt;
&lt;p&gt;按照大佬们的逻辑，19世纪末，无论是美国，还是英国，流水线上每天干12小时的工人，都是了不起的“奋斗者”。历史上根本就不存在“被剥削者”。&lt;/p&gt;
&lt;p&gt;这样看来，福特真是个大坏蛋。他竟然带领福特汽车厂，实现了一周5天，每天8个小时的工作制。这才是赤裸裸的剥削啊！他剥削了工人们的奋斗权！凭什么工人不能奋斗！？凭什么工人不能享受996的福报！？&lt;/p&gt;
&lt;p&gt;至于之后，各个发达国家，包括我们伟大的祖国，不停地完善劳动法，保障劳工权益，那简直是倒行逆施啊。制定最低工时？每周超出最低工时还要增加工资？员工还可以提出劳动仲裁？这分明是不想让普通人通过奋斗，成为大佬嘛！&lt;/p&gt;
&lt;p&gt;所以，为什么会有阶级固化？原来在大佬们的眼里，劳动法就是阶级固化的根源啊！如果没有劳动法，不对劳工权益进行保障，过劳才不仅仅只是落个“过劳死”，阶级才能流动起来啊！&lt;/p&gt;
&lt;p&gt;如此这般看来，奴隶制度真是好啊。奴隶制度才是阶级最不固化的制度哦。所有的奴隶们都疯了，竟然起来推翻奴隶制？&lt;/p&gt;
&lt;p&gt;哦，对了，我们伟大的中华人民共和国国歌，第一句话，竟然就是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;起来，不愿做奴隶的人们&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果在维基搜索“马云”，你会看到他毕业后的就业经历大概是这样的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1988年毕业于杭州师范学院（现杭州师范大学）外语系英语专业，获英语学士学位，8月分配到之后于杭州电子工业学院（现杭州电子科技大学）基础部从事英语教学工作，1994年10月调任党政办公室所属外事办公室主任，1995年6月1日辞职。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;简单来说，就是1988年8月在杭州电子工业学院任教职，1995年6月辞职。&lt;/p&gt;
&lt;p&gt;但是，创业经历却是这样的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1991年，马云初次接触商业活动，集资3,000人民币创办海博翻译社。头一个月，收入人民币700元，但房租高达人民币1,500元。他于是利用转手小商品交易的方式，从广州、义乌等地进货，成功养活了翻译社，还组织了杭州第一个英语角。1995年，马云在出访美国时首次接触到因特网，回国后和他的妻子，还有同为老师的何一兵于1995年4月创办网站“中国黄页”，专为中国公司制作网页...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;哦？好奇怪，怎么1991年不好好工作，开始接触商业活动了呢？不仅如此，入不敷出以后，还不甘心，玩儿起了小商品贸易？1995年四月，也就是辞职前，就搞起了互联网？你的教育事业呢？你的学生们呢？说好的996呢？&lt;/p&gt;
&lt;p&gt;这份经历看来看去，合着马云老师提倡的奋斗，就是拿着别人家的工资，干自己的事儿啊？！&lt;/p&gt;
&lt;p&gt;这段经历我就不深入分析了，大家都不傻，一看就能懂，马云到底是怎么奋斗，逃避996，才走向成功的。996不等于奋斗这样一个简单的逻辑命题，在这段经历中，也一清二楚。&lt;/p&gt;
&lt;p&gt;只是，我真的很想知道，马云如果能够知行合一，当年像现在坚信的那样，在自己的杭州电子工业学院996的坚守本职工作，坚信自己可以在学校当一名光荣的人民教师，已经是上苍对自己最好的福报，那么现在会是怎样。&lt;/p&gt;
&lt;p&gt;至于刘强东说的8116 + 8，我坚信他把自己写《地板闹钟的故事》的时间，算成自己的工作时间了。这是多么重要的工作啊！管理啊！至于员工到网上发表自己对996看法的时间，我不知道东哥会不会觉得他的员工在偷懒，这样的员工，东哥会不会嫌弃，不是兄弟。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这帮大佬真的傻吗？当然不是。这么简单的逻辑关系能想不清楚？这就是典型的屁股决定脑袋。&lt;/p&gt;
&lt;p&gt;不仅如此，他们还站上了道德制高点，对员工实施道德绑架。996不重要，重要的是你是不是奋斗者。&lt;/p&gt;
&lt;p&gt;咦？&lt;/p&gt;
&lt;p&gt;一个乞丐在街上乞讨，别人不给他钱，还质疑他明明有工作能力，竟然还要乞讨。你猜乞丐怎么说：你给不给我钱不重要。重要的是，你有没有同情心，是不是一个善良的人。给我钱，那是缘分，那是你行善的机会，那是福报啊。&lt;/p&gt;
&lt;p&gt;不对不对。大佬们怎么能是乞丐呢？&lt;/p&gt;
&lt;p&gt;换个故事。&lt;/p&gt;
&lt;p&gt;一个房屋的主人，请了个小时工打扫卫生。一个小时打扫不完。小时工表示，还需要多一个小时的工作量，所以还需要加一个小时的钱。你猜主人怎么说？咱们不提钱的事儿，咱们说说奋斗。你是不是奋斗者啊？你有没有进取心啊？你这样以后谁还会请你打扫卫生啊？能在我这里打扫卫生赚钱，已经是你的福报了啊。&lt;/p&gt;
&lt;p&gt;这不是耍流氓吗？&lt;/p&gt;
&lt;p&gt;哎呀，抱歉，一不小心，又提起了东哥在美国的故事。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所以，对于996这个问题，我觉得理性的讨论太多了。多得大佬们已经失去理性了。咱们干脆别讨论虚的了，就提法律好了。&lt;/p&gt;
&lt;p&gt;996是不是违法？马云原文说：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;没有人喜欢在一个强制996的企业里工作，既不人道，也不健康，更难以持久，而且员工、家人、法律都不允许...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;你看，马云把法律摆在了最后的位置。但不管怎么说，也算是承认996违法了。那么咱能不能就别那么多“但是”了，能不能谈谈，既然它是违法的，咱们怎么改善，怎么行动，别再干违法的事儿了。&lt;/p&gt;
&lt;p&gt;讲真，你们这帮大佬，老是这样为违法行为做辩护，官媒都看不下去了。人民网，人民日报，官微都回应好几篇文章了。毕竟我们生活在社会主义新时代啊。&lt;/p&gt;
&lt;p&gt;&lt;img alt="news1" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-04-14/news1.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="news2" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-04-14/news2.png" /&gt;&lt;/p&gt;
&lt;p&gt;给各位大佬普及一段小学生都会背的政治学内容：全面依法治国是我党治理国家的基本方略；是发展社会主义市场经济的客观需要；是社会文明进步的显著标志；还是国家长治久安的必要保障！&lt;/p&gt;
&lt;p&gt;呀，忘记了，其实大佬们的政治学修养应该都不错。&lt;/p&gt;
&lt;p&gt;马云曾经是浙江省政协委员；&lt;/p&gt;
&lt;p&gt;刘强东曾担任上海市政协委员和第十三届的全国政协委员。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这篇文章写完，回顾了一下。我觉得这可能是我近十年写的最情绪化的文章了。如果有同学对此不适，我深表歉意。文末红包抽奖，算是我对大家的补偿。我在最近，也会再写至少一篇，从知识的角度，谈论996的文章的。&lt;/p&gt;
&lt;p&gt;可是，我就是气不过。天底下怎么会有这么滑稽的事呢？明明不合法，还振振有词？&lt;/p&gt;
&lt;p&gt;最后，补充几点：&lt;/p&gt;
&lt;p&gt;1）自愿996，甚至007，是你的个人自由，别人无权干涉。但是，&lt;strong&gt;企业强制所有员工996，是违法的&lt;/strong&gt;；&lt;/p&gt;
&lt;p&gt;2）我没有不鼓励坚守岗位。在正常工作时间，坚守岗位是必须；在需要的时候，额外奉献是美德；如果你是一个无比高尚的人，无时不刻都自愿奉献，我敬重你，向你学习。但是，这不代表所有人都必须这样做。&lt;strong&gt;企业强制所有员工996，是违法的&lt;/strong&gt;；&lt;/p&gt;
&lt;p&gt;3）重要的事情说三遍：&lt;strong&gt;企业强制所有员工996，是违法的&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;所以，这篇文章的题图，是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="labour-law" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-04-14/labour-law.png" /&gt;&lt;/p&gt;
&lt;p&gt;哎。这么简单的事情，搞得我这么义愤填膺。&lt;/p&gt;
&lt;p&gt;这次，我觉得自己一点儿也不酷。&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-04-14/readme.md" rel="alternate"/></entry><entry><id>2019/2019-04-12/readme.md</id><title>答读者问 | 作为一个前端，花时间精力去学习webGL，靠谱吗？</title><updated>2019-04-12T00:00:00-07:00</updated><content>&lt;h2&gt;答读者问 | 作为一个前端，花时间精力去学习webGL，靠谱吗？&lt;/h2&gt;
&lt;p&gt;近乎每天，在我的课程上，或者是这个公众号的后台，我都能收到大量同学的提问。很多同学的提问很有意思，也有很多同学的提问，非常有共性；还有一些同学的提问，挠到了我的痒处，是我很想聊一聊的话题。所以，我决定在我的公众号上，开辟一个专门的栏目，叫“答读者问”，把我觉得有意思的问题，分享出来。本栏目不定期出现，敬请大家留意：）&lt;/p&gt;
&lt;p&gt;非常可惜的是，过去，这个公众号的后台，有很多有价值的提问，但是由于微信只保留20天的聊天记录，很多历史记录丢失了。从今天开始，我会有意识地保存这些资料的：）&lt;/p&gt;
&lt;p&gt;从什么时候开始都不晚：）&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;今天的“答读者问”，来自我在慕课网上&lt;a href="https://coding.imooc.com/class/260.html"&gt;《专给程序员设计的线性代数》&lt;/a&gt;课程的问答区。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;波波老师：&lt;/p&gt;
&lt;p&gt;有没有计划出一门webgl的课程？&lt;/p&gt;
&lt;p&gt;另外想讨教下，作为一个前端，接近阿里p6水平，打算花主要的精力去学习webGL，这样靠谱吗？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;bobo老师的回答：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;短期内，抱歉，没有这个打算。&lt;/p&gt;
&lt;p&gt;长期看：有。毕竟图形学是我的老本行。&lt;/p&gt;
&lt;p&gt;但具体时间几何，怎么切入，都没有定。短期，我的课程还是会以 通用算法+数学 为主，暂时不切入某个特定领域。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我不确定你说的靠谱是什么意思。从我的角度，大概分析是这样的：&lt;/p&gt;
&lt;p&gt;如果你有浓厚的兴趣，那就去学，这个没什么可说的。&lt;strong&gt;有兴趣本身是一件很难得，甚至是可遇不可求的事情。别想别的。&lt;/strong&gt;下面的内容不要读了，快去学习！&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;以下都是建立在你的兴趣一般，所以很“功利”的分析上：&lt;/p&gt;
&lt;p&gt;如果你问webGL以后会不会很主流，成为市场上招聘前端的必备技能？我暂时觉得不会。因为webGL太底层了。对于大多数人来说，学习webGL的教育意义大于实践意义。&lt;/p&gt;
&lt;p&gt;webGL能让你更深刻的理解Graphics领域底层的一些理念，但真要做东西，直接上three.js，这还是在有交互逻辑的基础上。如果是纯粹的模型或者动画，有太多工具可以更加直观的创造出来，然后直接导出代码。如果3D交互真的这么繁荣，势必会产生更多更加简单方便的工具直接满足业务需求。&lt;/p&gt;
&lt;p&gt;当然，创造这些工具的职位需要你有深厚的底层基础，但是，这些职位太少了。&lt;/p&gt;
&lt;p&gt;可以参考我的文章：&lt;a href="../2019-03-18/"&gt;《学算法有什么用，对你来说可能真没用》&lt;/a&gt;和&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-03-25/"&gt;《编程语言发展趋势》&lt;/a&gt;，其实都是这个意思。&lt;/p&gt;
&lt;p&gt;当然，这不代表它没用，它太有用了，但关键是你在哪个位置。&lt;/p&gt;
&lt;p&gt;另一方面，在交互的世界中，我也暂时不认为会全面3D化，甚至能否成为主流我都不敢肯定。&lt;strong&gt;3D不是2D的进化，而是和2D平行的，适用于不同场景的一种表现方式而已。&lt;/strong&gt;更何况，&lt;strong&gt;普通人的空间能力其实是极其有限的&lt;/strong&gt;，至少从现在的角度看，很多时候引入3D是糟糕的。不时地正确出现是锦上添花，到处都是，绝对是灾难。所以，我很怀疑它会是必备的技能。&lt;/p&gt;
&lt;p&gt;整体来讲，如果是我：&lt;/p&gt;
&lt;p&gt;因为我有兴趣，我会去学习。并且坚信没坏处，会有用，搞不好有大用。&lt;strong&gt;所谓行行出状元，这和主流不主流没关系。&lt;/strong&gt;有人自己在家剪纸能剪成世界大艺术家。&lt;/p&gt;
&lt;p&gt;但如果我有一个小孩儿，他对此没兴趣，我不会逼他学；&lt;strong&gt;但我会逼他学数学和英语。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;希望对你有启发。加油！：)&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;好啦，本期答读者问结束！&lt;/p&gt;
&lt;p&gt;大家加油！&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-04-12/readme.md" rel="alternate"/></entry><entry><id>2019/2019-04-11/readme.md</id><title>什么叫学会了？自己到底有没有学会？知识掌握的七个境界</title><updated>2019-04-11T00:00:00-07:00</updated><content>&lt;h2&gt;什么叫学会了？自己到底有没有学会？知识掌握的七个境界&lt;/h2&gt;
&lt;p&gt;最近，遇到了两个来自同学的提问，我觉得都挺典型的。&lt;/p&gt;
&lt;p&gt;一个同学问我，&lt;strong&gt;“学习的过程中，到底怎么样才叫学会了？掌握了？”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;还有两个同学，不约而同的问我，&lt;strong&gt;“学习算法，是不是掌握了基本原理，面试的时候，能说出个大概就好了？”&lt;/strong&gt;——对于这个问题，其实不止这两个同学，在过去的两年时间里，我也已经遇到很多次了。&lt;/p&gt;
&lt;p&gt;今天这篇推文，就借这些问题，聊一聊我眼里的，知识掌握的七个境界。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;第一重境界：撸串境界&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;知识掌握的第一重境界，我管它叫“撸串境界”。什么意思？就是，对于这个知识，你只有在撸串的时候，才能“无障碍”地提起。比如：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A：你知道吗？昨天人类首张黑洞照片公布了！&lt;/p&gt;
&lt;p&gt;B：是啊是啊，人类离宇宙的真相又近了一步。听说黑洞和时间的奥秘也有深刻的联系，可能我们离时空旅行又近了一步呢。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;撸串的时候，我们可能会不自觉地聊起这种话题。但是，八成，A和B对黑洞的了解，都是在“撸串境界”，真的正儿八经地说说：黑洞到底是怎么回事儿，黑洞照片的历史意义是怎样的，对未来有可能有什么影响，黑洞和时间又有什么联系，可能都不太清楚。对于黑洞，也就是在撸串的时候随便聊聊。&lt;/p&gt;
&lt;p&gt;&lt;img alt="chuan" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-04-11/chuan.png" /&gt;&lt;/p&gt;
&lt;p&gt;大家都放黑洞照片，我偏放羊肉串儿照片！是不是很酷？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;再比如：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A：听说XXX自己做人工智能，预测股票走势，赚了一大笔钱！&lt;/p&gt;
&lt;p&gt;B：我也听说了，就是用现在最火的深度学习。Alpha Go已经战胜人类最强的围棋选手了，Alpha Go用的就是深度学习算法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在这段对话里，A和B对人工智能和深度学习的理解，八成也是“撸串境界”。&lt;/p&gt;
&lt;p&gt;通常，看新闻就能帮助你进入撸串境界。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;第二重境界：关键词境界&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;知识掌握的第二重境界，我管他叫做“关键词境界”。就是，对于这个知识，你掌握了非常重要的几个关键词。比如：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A：听说XXX自己做人工智能，预测股票走势，赚了一大笔钱！&lt;/p&gt;
&lt;p&gt;B：我也听说了，就是用现在最火的深度学习。好像是建立了一个叫LSTM的模型就好了。我也想找时间学习学习呢，搞不好就能赚1个亿呢。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在这段对话里，B对深度学习的理解，进入了“关键词境界”。当然，在这里我只是举例子，毕竟LSTM只是深度学习的一种方式，深度学习领域也有很多其他重要关键词。在这里，我想强调的是：关键词境界和撸串境界，是截然不同的。&lt;/p&gt;
&lt;p&gt;为什么？因为如果你处于关键词境界，这个知识对你来说，就不仅仅是只有在撸串的时候可以提及的一个缥缈的概念了。你可以利用这个关键词，在网上查询，进而深入学习。换句话说，这个关键词已经可以指导你行动了——你已经可以开始具体的学习了。&lt;/p&gt;
&lt;p&gt;很多时候，我们解决问题，就是缺少一两个关键词而已。比如，我本科的时候，做一个项目，其中一个子功能，要对用户输入的邮箱字符串是否合法做验证。当时我花了很长时间自己设计“所谓的算法”去处理，其实就是一堆if-else。到后来，我明白了，这事儿其实用正则表达式，一句话就搞定了。真要说其中的算法，也是一个专门的领域，叫模式匹配。“正则表达式”，“模式匹配”，就是正确的关键词。如果我早一些知道这些关键词，我就可以直接去学习正则表达式的使用，或者直接去学习“模式匹配”算法，就会少走很多弯路。&lt;/p&gt;
&lt;p&gt;在这里，我要强调，从学习的角度，我觉得这个弯路，也是值得的。因为通过我的思考和尝试，再去看成熟的解决方案，我就能看到差距，总结自己思维上的缺陷，对知识的理解也会更深刻。我经常说，&lt;strong&gt;在大多数情况下，走一些弯路绝不是坏事，走弯路是进步的源泉，所谓失败是成功之母。&lt;/strong&gt;只不过，对于很多时间紧任务急的业务场景，可能现实不允许你走弯路。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;第三重境界：原理境界&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;第三重境界，就是你不但知道了这个关键词，你还知道了原理。&lt;/p&gt;
&lt;p&gt;归并排序对你来说不仅仅是一个名词，你知道归并排序是每次将整个数组分成两部分，将这两部分排好序以后，再合并起来；&lt;/p&gt;
&lt;p&gt;快速排序对你来说不仅仅是一个名词，你知道快速排序是每次以一个元素为标定点，把数组分成小于这个元素和大于这个元素两部分，对这两部分再去递归地进行排序；&lt;/p&gt;
&lt;p&gt;二分搜索对你来说也不是一个名词，你知道，二分搜索就是对一个有序数组，先检查中间的元素，如果正好是你要查找的内容，就ok了；如果不是，你要查找的内容比它小，继续到左边找；你要查找的内容比它大，继续到右边找。&lt;/p&gt;
&lt;p&gt;大部分同学通过在学校的专业学习，应该是至少能达到原理境界的。也就是，你知道这个名词，了解这个名词在解决什么问题，同时，也能用自然语言表述他的原理。&lt;/p&gt;
&lt;p&gt;但是，在这里，我必须提醒大家，&lt;strong&gt;对于计算机专业的学习，必须要把基础知识的掌握上升到第四重境界。&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;第四重境界：实践境界&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所谓的“实践境界”，在计算机领域，其实就是，你不仅仅能说出原理，还能用代码将他们正确实现出来。换句话说，你不仅仅知道“归并排序”，“快速排序”，“二分搜索”，你还能写出正确的代码。&lt;/p&gt;
&lt;p&gt;我在这篇推文开篇，两个同学，不约而同的问我，“学习算法，是不是掌握了基本原理，面试的时候，能说出个大概就好了？”他们的问题，本质就是：对于算法知识的掌握，有没有必要进入实践境界？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我的答案是：太有必要了。因为，这是计算机专业跟非计算机专业的本质区别。也是你能吃这碗饭，别人不能吃这碗饭的关键。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;计算机专业要做的，就是把抽象的逻辑转换成可以正确实现这个逻辑的代码。如果能顾及代码的效率，可维护性，甚至是简洁优雅，那就更好了。但如果你只是懂原理，能扯淡的话，恕我直言，别说数学系物理性能碾压你，连文学系历史系，甚至是一个素质高点儿的高中生乃至初中生，随便看两眼，可能都能碾压你。但是让他们转行程序员，还是会费一番功夫的，为什么？&lt;strong&gt;正确，优雅，高效的代码实现能力，不是一日之功。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果到达原理境界就ok的话，我的所有算法课程，长度都可以直接缩减到1/5。但是，能用代码正确的实现出来，完全是另一回事儿。很多同学说得清楚原理，但是实现不出正确的代码。这就是编程基础不够。由于你实现不出正确的代码，我也不敢保证你的理解是完全正确的。&lt;/p&gt;
&lt;p&gt;你跟我扯再多永动机的原理，要想让我不质疑你，请实现出一个永动机证明给我看。你跟我扯再多炼金术的原理，要让不怀疑你，请把这个易拉罐变成金子给我看（广告插入，推荐阅读我的文章：清明时节雨纷纷。科技，死亡，和永生。）。&lt;/p&gt;
&lt;p&gt;同理，你说你懂快速排序，不要废话，实现一个快速排序给我看。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Linus Torvalds说：talk is cheap, show me the code.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="linus" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-04-11/linus.png" /&gt;&lt;/p&gt;
&lt;p&gt;大家一定要明白，计算机是工科，工科是靠东西说话的。我相信这也是很多同学选择计算机专业的一个原因——它没那么多虚的。你专业水平高，你就能用实现出来，时间短，效率高，代码整洁优雅，让所有人都闭嘴。从某一个维度看，这确实是更公平的，不像在有一些行业或者领域，单靠嘴皮子，人和人能拉开很大的差距。（当然，一切都是相对的，公平这个话题太大了，有时间单聊。）&lt;/p&gt;
&lt;p&gt;所以，大家在具体学习的时候，一定要明白：&lt;strong&gt;我是计算机专业的，能实现出来，才是我的立身之本。&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;第五重境界：灵活应用境界&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;第五重境界，就是灵活运用。知识是死的，能灵活地运用这些知识解决实际问题，甚至是解释生活中的现象，对这个知识点，就达到了这重境界。&lt;/p&gt;
&lt;p&gt;随便举几个例子。&lt;/p&gt;
&lt;p&gt;Leetcode上1011号问题，大家可以看一看。在这里，我把中文版本的问题也截了一个图（没时间看具体问题直接跳过去，在这里只是举个例子）：&lt;/p&gt;
&lt;p&gt;&lt;img alt="1011" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-04-11/1011.png" /&gt;&lt;/p&gt;
&lt;p&gt;对于这个问题，如果你能很快地反应出，应该使用二分查找法来解决的话，你对二分查找的理解，就已经进入了灵活运用的境界。相较而言，写出正确的二分搜索代码，是简单的，但是，能快速反映出这类问题可以使用二分查找的思路去解决，还需要一定的专业训练才能达到。实际上，类似这样的使用二分查找法解决的问题，是算法竞赛里常见的问题套路。二分查找本身，也绝不仅仅局限在在一个有序数组中找一个数而已。对这个问题的深入解析，我在文章中不具体分析了，有兴趣的同学，可以自行搜索学习。&lt;/p&gt;
&lt;p&gt;再比如，经典的“智力”题，过河问题：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;农夫需要把狼、羊、菜和自己运到河对岸去，只有农夫能够划船，而且船比较小，除农夫之外每次只能运一种东西，还有一个棘手问题，就是如果没有农夫看着，羊会偷吃菜，狼会吃羊。请考虑一种方法，让农夫能够安全地安排这些东西和他自己过河。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以及经典的“装水问题”，版本众多，我随便取一个：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;有两个水桶一个装5升一个装3升怎么利用水桶得到4升水？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果你看见这类问题，能很快地想到，他们的本质，是图论中的一个路径搜索问题，那么你对路径搜索算法的掌握，就进入了灵活应用境界。给你一个图，让你找到从s到t的一个路径，是简单的；但是对于这类问题，可以使用图论去建模，将其转化成一个图中的路径搜索问题，是需要一定的专业训练的。&lt;/p&gt;
&lt;p&gt;再举一个Google的面试问题：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一个硬币，抛了1000次，结果有560次是正面，请问，你觉得这枚硬币是不是“公平”的？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果学过概率论的同学，可能都能说出什么是中心极限定理，都知道假设检验。但是，遇到这样一个问题，能不能联系已经掌握的知识，有理有据的说明白你得出结论的依据？需要你对相应的知识，达到灵活运用的境界。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;第六重境界：发明创造境界&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;上面的几重境界，都是对已有知识的掌握逐渐深入。但是，这个世界上尚未解决的问题还很多，能不能根据已有的知识，发明创造出新知识，进而解决新的问题？这就是发明创造的境界。所有的诺贝尔奖，图灵奖的获奖者，对相关领域的知识掌握，都在发明创造的境界。&lt;/p&gt;
&lt;p&gt;首先，必须承认，对于任何知识，我都达不到发明创造的境界。&lt;/p&gt;
&lt;p&gt;事实上，对于大多数人来说，对某个领域的知识，能整体进入灵活应用的境界，就已经足够了。因为能够灵活运用，已经意味着你可以使用这些知识，解决大量实际问题了。这已经对整个社会有相当大的价值了。能否进入发明创造的境界，一方面看你是否有这方面的追求；另一方面，也看机缘和天赋，很多时候，是可遇不可求的。&lt;/p&gt;
&lt;p&gt;不过，在这里，我想强调，所有的新知识，近乎都不是凭空出现的。都是靠大量的对前人知识的积累，理解，甚至是灵活运用之后，才出现的。所以，不断学习前人的知识和思想，是根本。没有积累，突然发明了新知识，尤其是在当下这个知识爆炸的时代，近乎是不可能的。&lt;/p&gt;
&lt;p&gt;所以，不要妄想把自己关起来，就能解决黎曼猜想。不要觉得自己是张无忌，找几本世界经典教材，在“洞里”与世隔绝，苦读三年五载，就能一鸣惊人。金庸的小说是成年人的童话。所谓的童话，就是骗人的。相较而言，不断地去积累，甚至是跨领域的积累知识，从其他领域的知识中汲取灵感，才有可能更大概率地发明出新的知识，解决更难的问题。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;第七重境界：遗忘境界&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;第七重境界，我称之为遗忘境界。在这里，首先要说明，前六重境界，是层层递进的关系。但是，在这里，我说的第七重境界，不是第六重境界的一个递进，而只是一种状态——遗忘，而已。&lt;/p&gt;
&lt;p&gt;相信很多同学都有这样的苦恼：学了很多知识，很快就忘掉了。即使曾经达到灵活运用的境界，但是可能各种原因，几年甚至十几年没有碰，最后也会遗忘。&lt;/p&gt;
&lt;p&gt;在这里，我想强调的是：这是极其正常的。如果你不会遗忘的话，你就是一个超人了。或者你拥有机器猫中的记忆面包，你应该已经是全球首富了。&lt;/p&gt;
&lt;p&gt;&lt;img alt="bread" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-04-11/bread.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;关键在于，如何抵抗遗忘？首先，对一个知识的掌握，你的境界越高，越不容易遗忘。相较于已经达到灵活运用境界里的知识，只在原理境界的知识，更容易被遗忘。&lt;/p&gt;
&lt;p&gt;另外，使用的次数越多的知识，越不容易遗忘。其实在我国，大多数初等教育，都是在采用“重复使用”这种方法，来帮助你记忆知识的。你根本没有具体应用过这些知识，但就是忘不了how are you后面，接的是fine, thank you. and you? 对于这种机械式地使用，我的评价是中性的。有好有坏，有机会可以单独写文。&lt;/p&gt;
&lt;p&gt;其实，遗忘并不可怕。遗忘境界是一种境界，如果你的遗忘境界中存在着某种知识，基本就意味着你能迅速地把它捡起来，重新回到原来的境界。这是很重要的。所谓的经验，不过是遗忘境界的存储。比如，红黑树的内部原理，很容易遗忘。但是，如果你跟着我的课程，认认真真学习了红黑树的原理，实现了红黑树的代码，那么，即使你遗忘了，我相信，对于正常智力水平的同学，在需要的时候，比如面试前，一两个小时的时间，足以让你回到原有的水平。&lt;/p&gt;
&lt;p&gt;最后，我想说的，虽然学习的目的不是遗忘，但&lt;strong&gt;学习的目的也绝不仅仅是记住。&lt;/strong&gt;其实，“记住”，是学习的一个太低层级的收获。关键是，在学习的过程中，你的大脑在消化、吸收知识的过程中，会连带有很多附加的收获。这些附加的收获，在很多时候，都是更加重要的。&lt;/p&gt;
&lt;p&gt;比如，对数学的学习，会逐渐让你对数字更敏感，同时，形成如何用数学模型解决问题的思维方式（所谓的数学思维和数学素养）；&lt;/p&gt;
&lt;p&gt;对算法的学习，会逐渐培养你理清逻辑的习惯，对每一个变量作用的深刻理解，也能让你写出越来越优雅的代码；&lt;/p&gt;
&lt;p&gt;更不用提，在学习的过程中，你会逐渐总结出适合自己的学习方法，把他们应用在更多领域的学习上；&lt;/p&gt;
&lt;p&gt;你会慢慢体会到如何能够更加高效的查找资料，如何归纳，总结知识体系，帮助你更好的理解；&lt;/p&gt;
&lt;p&gt;你会去提问，在提问的过程中，你会越来越多地理解：怎样提问更加有效？什么是一个好的问题？；&lt;/p&gt;
&lt;p&gt;你会给别人讲解，在给别人讲解的过程中，你也能锻炼自己的表达能力；&lt;/p&gt;
&lt;p&gt;你甚至能在学习过程中，逐渐找到自己的兴趣，自己的天赋，自己的理想；&lt;/p&gt;
&lt;p&gt;通过学习越来越多的东西，你也会越来越有自信，你能感受到天地之大，也能感知到自己之小；&lt;/p&gt;
&lt;p&gt;所有的这些，都比学习某一个具体的知识点，重要太多了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;爱因斯坦说：所谓的教育，就是忘记了在学校所学的一切之后，剩下的东西。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;大家加油！：）&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-04-11/readme.md" rel="alternate"/></entry><entry><id>2019/2019-04-05/readme.md</id><title>清明时节雨纷纷。科技，死亡，和永生。</title><updated>2019-04-05T00:00:00-07:00</updated><content>&lt;h2&gt;清明时节雨纷纷。科技，死亡，和永生。&lt;/h2&gt;
&lt;p&gt;&lt;img alt="painting" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-04-05/painting.png" /&gt;&lt;/p&gt;
&lt;p&gt;题图：宗教油画《诸神的聚集》&lt;/p&gt;
&lt;p&gt;（the assembly of gods）&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;人类对于战胜死亡的尝试，从没有停止过。至今为止，也尚没有成功过。&lt;/p&gt;
&lt;p&gt;秦始皇一统六国之后，便开始了追求长生不老之路。这位中国历史上第一位称为“皇帝”的人，也揭开了华夏大地炼丹术的篇章。从此，历代帝王将相，达官显贵，少不了对“成仙”和“不死”的热衷。就连曾经嘲笑始皇帝的唐太宗，也在晚年开始修炼“不死之药”，最终死在了自己的“仙丹”手上。&lt;/p&gt;
&lt;p&gt;大名鼎鼎的雍正皇帝，仅在位十三年。如果你去查维基百科，上面写的是：1735年，雍正因工作过度劳累，在批阅奏章时去世。但是，200年后，历史学家在圆明园中发现了大量雍正在位时期炼丹的证据。开始有人怀疑，雍正的真实死因，是药物中毒。&lt;/p&gt;
&lt;p&gt;这样的故事，在中国历史上，数也数不完。得到的越多，欲望就越大；得到了天下，就想永远。但是，永远和死亡，就是硬币的两面，追求永远的过程，一直和追求死亡联系在一起。&lt;/p&gt;
&lt;p&gt;至少，至今为止，是这样的。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;面对死亡，西方的世界也并不淡然。人性本是如此。&lt;/p&gt;
&lt;p&gt;从希腊神话，到圣经故事，充满着不死，或者复生的故事。和中国的炼丹术接近，在西方，炼金术则一度盛行。听名字，炼金术似乎和长生不老无关，但这只是一个中文翻译而已。如果你在维基百科中去查询alchemy（炼金术的英文），就会知道，炼金术从来都是和长生不老联系在一起的。炼金术的一大目的，就是制作长生不老药（the creation of an elixir of immortality）。日本著名动漫《钢之炼金术师》，就是以那个时代人类真实的社会观为背景虚构出来的故事。借炼金术，来探讨诸如：什么是生，什么是死，什么是人，什么是灵魂；能否长生，可否不死；我为什么是我，你为什么是你，你我有何不同，又何去何从，等等一系列的哲学问题。&lt;/p&gt;
&lt;p&gt;&lt;img alt="fullmetal" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-04-05/fullmetal.png" /&gt;&lt;/p&gt;
&lt;p&gt;即使到了航海技术极度发展的15-16世纪，哥伦布发现了新大陆，人类开始跃跃欲试，企图了解整个世界的全貌，绘制出世界地图。可此时，仍有一批野心勃勃的航海家，他们远渡重洋，征服大海的真实目的，是寻找传说中的“不老泉”。《加勒比海盗4》，便是以此为背景，虚构出的故事。&lt;/p&gt;
&lt;p&gt;&lt;img alt="caribbean" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-04-05/caribbean.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;到了17，18世纪，科学已经逐渐深入人心，但是，不老却仍然是神话。大名鼎鼎的牛顿公爵——举世公认的人类历史上最伟大的科学家之一，却在晚年，一直苦苦追寻长生不老的方法。&lt;/p&gt;
&lt;p&gt;大多数人认为，这是牛顿一生的污点。有些人评论说，牛顿的这段历史告诉了我们：伟大的人物，也是凡人，也有荒诞的一面。牛顿晚年的研究，就证明了这一点。&lt;/p&gt;
&lt;p&gt;&lt;img alt="newton" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-04-05/newton.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;但其实，我却不这么认为。科学终归是要发现未知的。牛顿的研究，之所以被人们看做荒诞，只是因为人们还没有做到而已。&lt;/p&gt;
&lt;p&gt;曾经有一名中国人，自制了两个大风筝，拴在椅子两旁，同时用47支巨大的炮竹绑在椅子背后。他要飞行。当他命令仆人点燃炮竹的瞬间，他消失在了火海之中。这件事发生在15世纪，他没有飞起来。在之后的很长一段时间，他的举动在世人看来，都是极度荒唐的。是啊，人又没有翅膀，怎么能飞呢？直到今天，我们已经可以一边喝着可乐，看着电影，一边坐在一种叫做“飞机”的“怪物”中，翱翔在近乎世界的任何一个角落上空。我们可以“飞”起来了。此时，再回头看这名中国人的行为，真的那么荒诞吗？&lt;/p&gt;
&lt;p&gt;1945年，美国火箭学家Herber S. Zin，将这名中国人，定义为世界上第一个尝试飞行的人。据他记载，这个人叫Wan Hoo。&lt;/p&gt;
&lt;p&gt;牛顿的研究亦是如此。如果说他的研究荒诞，那么就意味着，硅谷里有一票公司都是荒诞的，一票投资人都是荒诞的，一票科学家都是荒诞的。因为，直至今日，我们还在追逐着长生不死。&lt;/p&gt;
&lt;p&gt;当然，我们可能本来，就是荒诞的。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;科学的发展进入了近代。很多人觉得，人类已经清醒了，不再追求长生不老了。我不这么认为。只是，人类对长生不老的追求更理性了，更严谨了，更加小心翼翼了。并且，人类为其扣上了一个更加不玄幻的，科学的，严谨的，大气的名字——医学。&lt;/p&gt;
&lt;p&gt;现代医学的起源，是从文艺复兴时期开始的。随着人体解剖学的建立，人类对自己的身体有了更加深刻的理解。尤其是到了20世纪，医学技术突飞猛进。保守估计，得益于医学的发展，人类的平均寿命，至少在一百年的时间里，延长了30岁。据英国人的统计，1841年，英国女性的平均年龄是42岁，男性的平均年龄是40岁；2016年，英国女性的平均年龄是83岁，男性则是79岁。不仅如此，可以预见的，在未来，人类的平均寿命还会继续延长。&lt;/p&gt;
&lt;p&gt;虽还不是“不死”，但我们已然正在“长生”。而这长生的势头，在如今科技疯狂发展的势头下，也被诸多科技巨头们推向了巅峰。&lt;/p&gt;
&lt;p&gt;2017年3月，一个阳光明媚的午后，数百名当代精英，聚集在洛杉矶的一间小房子里，其中包括诺贝尔奖得主，好莱坞明星，一掷千金的著名投资人，和不断创造神话，改变世界的硅谷CEO们。他们正在参加一个小型的研讨会，课题就是：长生不死。研讨会的主持在一开场，就面对诸多大咖，提出了一个问题：有谁，希望自己能够活200年？请举手。在场的世界顶级名人，突然都好像成为了小学生。所有的人，都举起了自己的手。&lt;/p&gt;
&lt;p&gt;形形色色的生物科技公司犹如雨后春笋般出现。连大名鼎鼎的Google，都进行了大刀阔斧的企业改革，成立Alphabet，作为现在Google的母公司，和一系列其他子公司成平行关系。如果仔细看Alphabet的组成，就会赫然看到Calico的名字，这家和Google平行的公司，使命就是研究如何抵抗衰老，攻克和衰老相关的所有疾病。而在业界最为神秘的Google X，其项目全部保密，但很多人都认为，其中有大量生物医学相关项目。至于Google Ventures，Alphabet旗下的风投，也将大把资金投入了生物医学相关的项目中。&lt;/p&gt;
&lt;p&gt;&lt;img alt="alphabet" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-04-05/alphabet.png" /&gt;&lt;/p&gt;
&lt;p&gt;能不能做到长生不死，还不知道。但是，资源要到位。万一做到了呢，那绝对是花多少钱都值得的事情。乔布斯再伟大，说死也就死了。纵有再多人怀念，对于仍然在世的人而言，只有活着，才是最重要的。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于长生不死，科学界主流探讨的方法，大抵有两种。&lt;/p&gt;
&lt;p&gt;第一种，非常科幻，即所谓的“意识电子化”。这是我的翻译，如果用英文硬翻，就是意识上传（mind uploading）。&lt;/p&gt;
&lt;p&gt;所谓的意识电子化，是指，我们的大脑活动，本质是脑细胞中一系列生物电信号的结果。只不过，这些电信号，是产生自大脑这样一个有机体中的。那么，我们有没有可能在无机体上，比如硅片中（当下芯片的主要原材料），来模拟出这一系列电信号呢？要知道，“活着”这样的一个意识，只是一种大脑活动而已。&lt;/p&gt;
&lt;p&gt;对于大多数人来说，大脑其实是被身体的其他脏器所拖累的。很多人在死亡时，大脑是完全没有问题的，只不过由于其他重要脏器出了问题，导致全身系统也被波及，进而走向了死亡。如果科技能够模拟出每一个人的大脑，那么，我们就真正脱离了肉身的束缚。这是至今公认的，最靠谱的永生形式。虽然离真正实现它，还有很长的距离。但是，大多数科学家已经承认，要想靠维持肉身的方式实现永生，似乎并不现实。在有形的世界中，一切终将消亡。但是，笛卡尔说：我思故我在。即使脱离了肉身，只要我的意识还在那里，那么，我就可以说，我是活着的。&lt;/p&gt;
&lt;p&gt;&lt;img alt="descartes" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-04-05/descartes.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;但是，这个方案，至今，还完全没有靠谱的实施路径。甚至，可能永远无法实现。这个方案最大的问题在于，要想使用电子的方式复制人类的大脑，我们就必须首先对大脑有极其完整，清晰的认识。虽然现代医学已经对人的很多脏器有了非常清晰的认识，甚至都能做出人造心脏。但是，对于大脑，我们还知之甚少。甚至连皮毛都不到。有一派哲学观点甚至认为：人类自身，是不可能理解大脑的。有机会，我们可以再详细讨论这派观点。不管怎样，我们离“意识电子化”这项技术，还很遥远。&lt;/p&gt;
&lt;p&gt;即使，假想，我们真的可以将一个人的意识电子化。一个巨大的问题又会摆上来。一个可以电子化的意识，意味着可以被无限制的复制。毕竟，将意识电子化的目的，就是永生。如果把你放在了一块硬盘上，这块硬盘却坏掉了，于是你消失了，那就太得不偿失了。和当下我们对所有重要资料所进行的措施一样，备份是必须的。但这样的话，哪个备份又是真实的你呢？&lt;/p&gt;
&lt;p&gt;你当然也可以说，每个备份都是真实的你。但是，这些备份慢慢可能因为各种原因，产生思维的不同。那么，有无数个真实的你，和没有你，又有什么区别呢。毕竟，至今为止，让“你”是“你”的关键，就在于，这个世界上，“你”是独一无二的。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们可以先将这些哲学思辨放到一边，毕竟，这个技术本身，还不见踪影呢。但是对于长生不死，第二种方法则现实的多。甚至，已经有人开始行动了。&lt;/p&gt;
&lt;p&gt;第二种方法，说白了：就是换血。用更年轻的血液，去替换成年人或者老年人身体里正在衰老的血液。当然，“换血”只是一种不专业的，大众化的表述，专业一些的表述，就是在细胞层面抵抗衰老。对于细胞层面抵抗衰老，还有很多方法，但是换血是当下，实施起来最简单的方法。&lt;/p&gt;
&lt;p&gt;换血到底有没有用。科学界还在争论。但越来越多的研究成果表明，是有用的。2015年，斯坦福大学的研究表示：有证据表明，在小白鼠身上实行换血实验，将年轻小白鼠的血液输给老年小白鼠后，老年的小白鼠，明显在认知，行动等各方面，都有所增强。老年的小白鼠不会说话，研究者替它们说：这就是返老还童。&lt;/p&gt;
&lt;p&gt;这项研究的结论太过惊人，对其背后确切的科学依据，科学家们慎之又慎，不敢断下结论。如果这一切有了更加明显的生物学证据的话，势必将极大地影响我们的社会。可能带来的改变，我觉得轮不到科幻小说家，每个人都能想象得到。为此，我将这篇推文的“阅读原文”链接，送给了nature网站上和这个“换血”研究相关的一篇报道。&lt;/p&gt;
&lt;p&gt;尽管科学的证据还并不充分，但是，已经有人等不及了。硅谷著名风投人Peter Thiel，已经开始往自己的身体里，注入年轻人的血液。Peter Thiel的行为，是其所投资的一家硅谷著名创业公司Ambrosia的一项实验。这项实验，为600名年纪大于35岁的，诸如Peter Thiel这样有钱有势的“志愿者”，进行换血服务，并且长期跟踪，观察“换血”在人体上的效果如何。这些血液，都来自于25岁以下的健康年轻人，标价是每1.5L 8000美金。而这家公司的名字：Ambrosia，就是“神仙的食物”的意思。这个词源于希腊神话，希腊神话中，诸神都是不死的。其根源，就在于他们的食物：Ambrosia。&lt;/p&gt;
&lt;p&gt;美剧《硅谷》第四季中的角色 Gravin Belson，就与另外一位金发小哥，实践着这种“换血”，技术术语被称为“异种共生”（parabiosis）。在剧中，这位科技界大佬解释道：定期将较为年轻健壮的捐献人的血液输入体内，可以显著地延缓衰老。&lt;/p&gt;
&lt;p&gt;&lt;img alt="blood" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-04-05/blood.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;7.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;很多科学家都非常自信地表示：在2030年左右，人类就有可能实现永生了。这是因为，到2030年左右，科学技术的发展，将可以做到：每过一年，就让人的平均寿命延长一岁。所以，到了这个时间点，大家只需要稳稳地跟着最新医学技术前进就好了。&lt;/p&gt;
&lt;p&gt;能够让科学家有如此信心的技术，是纳米机器人。还记得我之前说的，在细胞层面抵抗衰老，还有很多其他方法吗？换血太过简单粗暴，纳米机器人相对就有针对性的多。科学家正在探索使用纳米级别的机器人，将他们注入血液，这些机器人可以摧毁病原体，清除杂物，血栓，以及肿瘤，纠正DNA的错误，从而达到延缓衰老的目的。最终，他们也会被排出体外，不会成为你身体的负担。&lt;/p&gt;
&lt;p&gt;当然了，一直使用最新的技术，将会是非常昂贵的。只有世界上的顶级富人和政要，才能负担得起。但是，所有的技术，都会逐渐平民化。互联网，无线通讯，飞机旅行，医疗，无一例外。我们每个人现在手握的金钱和权力，比古时任何一个帝王将相都要小，但是，我们可以支付得起的生活，却远超任何一个帝王将相。从道理上，抵抗衰老的技术也将如此。&lt;/p&gt;
&lt;p&gt;经济学家认为，如果2030年，科技真的可以达到每过一年，就让人的平均寿命延长一岁；那么大概在2050年，正常工作的中产阶级，就完全可以有条件支付得起永生的开销。&lt;/p&gt;
&lt;p&gt;可是，如果“永生”真的成真，这个世界的运行方式是否还和现在一样？这，才是一个更大的问题。&lt;/p&gt;
&lt;p&gt;技术终将以他特有的方式，改变整个人类社会。过去，技术一直在这样做。一整部人类文明的变迁史，就是一整部技术发展史。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;8.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;圣经旧约中，有一段话：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;神造万物，各按其时成为美好。&lt;/p&gt;
&lt;p&gt;又将永生安置在世人心里。&lt;/p&gt;
&lt;p&gt;然而神从始至终的作为，人不能参透。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;或许，因为我们一直摆脱不了对永生的执念，所以，我们才是人，不是神。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;liuyubobobo&lt;/p&gt;
&lt;p&gt;2019.4.5 凌晨，于Mountain View&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-04-05/readme.md" rel="alternate"/></entry><entry><id>2019/2019-04-03/readme.md</id><title>如何胜任真实的机器学习任务</title><updated>2019-04-03T00:00:00-07:00</updated><content>&lt;h2&gt;如何胜任真实的机器学习任务&lt;/h2&gt;
&lt;p&gt;我在慕课网上有一个机器学习算法课程&lt;a href="https://coding.imooc.com/class/169.html"&gt;《Python3入门机器学习 经典算法与应用》&lt;/a&gt;，广受好评。甚至有人表示，比吴恩达的机器学习课程还要好。。。&lt;/p&gt;
&lt;p&gt;&lt;img alt="comment" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-04-03/comment.png" /&gt;&lt;/p&gt;
&lt;p&gt;这个。。。好意我心领了，但实在愧不敢当。我还要继续努力：）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;但是，对于这个课程的售前，我见到的最多的问题，大概是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="ask" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-04-03/ask.png" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“弱弱问一下，学了这门课能找到ai相关的工作吗？”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;咳咳。&lt;/p&gt;
&lt;p&gt;&lt;img alt="keke" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-04-03/keke.png" /&gt;&lt;/p&gt;
&lt;p&gt;虽然有一些同学在学完我的课程后，确实成功地转入了人工智能领域，但我知道，这背后，绝不仅仅是我的课程的功劳。&lt;/p&gt;
&lt;p&gt;他们有的是由于企业内部转岗，所以有不可多得的机会；&lt;/p&gt;
&lt;p&gt;有的本身是数学或者物理专业，有极好的数学背景，用人单位更看重的是其自身的数学素养，而不仅仅是掌握的那些机器学习知识；&lt;/p&gt;
&lt;p&gt;有的除了上我的课程，更是花了成百上千个小时，在其他教程，书籍上，并且辅以了大量的实践。&lt;/p&gt;
&lt;p&gt;如果只是学习我的课程，我的回复基本都是这样的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这门课程是机器学习的入门课程，以机器学习监督学习算法为主线，辅以介绍一些诸如算法的评价，方法的选择，模型的优化，参数的调整，等等内容。学习本门课程是您进入机器学习世界的第一步。但是离真正从事机器学习相关的工作还有距离。不过相信这门课程可以为您后续更为深入的学习研究工作打下基础！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;嗯，看上去是不是特别彬彬有礼，特别职业？请叫我金牌客服bobobo！哈哈哈。&lt;/p&gt;
&lt;p&gt;但是，我的内心其实是这样的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;亲，这门课程只有25个小时，500块钱。如果上完这节课，就能找到机器学习工作了，我觉得这门课至少值10万。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;哈哈哈，只是开玩笑。我只是想说明，机器学习真的是一个很大的专有领域。要是想找到人工智能相关的工作，只上我的这个课程，是远远不够的。&lt;/p&gt;
&lt;p&gt;在我的课程最后，我向大家具体介绍了，要想胜任真实的机器学习任务，还需要怎样继续深入学习。整体来讲，有两大部分内容：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;深度学习。这个不用说了，大红大紫。我的课程并不涉及神经网络和深度学习算法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;特征工程。这一点，我在课程中多次强调了。当机器学习的方法大家大致理解以后，在一个具体的任务中，很多时候，都在拼特征工程。&lt;/p&gt;
&lt;p&gt;从某种程度讲，各个专业领域研究的一个很重要的方向，都可以理解成在做特征工程。&lt;/p&gt;
&lt;p&gt;比如医学：研究到底哪些基因和哪些疾病相关；&lt;/p&gt;
&lt;p&gt;心理学，研究哪些大脑活动和哪些情绪相关；&lt;/p&gt;
&lt;p&gt;经济学，研究哪些社会现象，和哪些经济表现结果相关；&lt;/p&gt;
&lt;p&gt;等等等等。&lt;/p&gt;
&lt;p&gt;很早之前，我看过一期Kaggle的冠军采访，印象深刻。问他获得冠军的秘诀，他的秘诀就是，把精力放在了查找那个领域的文献上，从而使用了更靠谱的特征。（印象里那一期是和医学相关的数据）&lt;/p&gt;
&lt;p&gt;对于特征工程，当下，我没有见过特别好的教程。这也是非常合理的，因为特征工程整体是领域相关的。&lt;/p&gt;
&lt;p&gt;如果你拿起一本自然语言处理的书，你会发现这本书其实就是在讲执行自然语言处理任务时，可以使用或者生成哪些特征；&lt;/p&gt;
&lt;p&gt;拿起一本图像处理的书，你会发现这本书其实就是在讲执行图像任务时，可以使用或者生成哪些特征，&lt;/p&gt;
&lt;p&gt;等等等等。&lt;/p&gt;
&lt;p&gt;当然，特征工程有一些通用方法，但并不多。而且通用方法效果有限，有时间我可以再写文简单总结一下。最直接的方式，还是根据具体的应用场景（图像？自然语言处理？医学？认知神经科学？），去学习具体的领域知识。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;(本文最初是一篇推广文，下有广告商的广告，在这里省略广告)&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-04-03/readme.md" rel="alternate"/></entry><entry><id>2019/2019-04-01/readme.md</id><title>1 + 2 + 3 + ⋯ + ∞ = -1/12？这不是一个愚人节玩笑。</title><updated>2019-04-01T00:00:00-07:00</updated><content>&lt;h2&gt;1 + 2 + 3 + ⋯ + ∞ = -1/12？这不是一个愚人节玩笑。&lt;/h2&gt;
&lt;p&gt;1 + 2 + 3 + ⋯ + ∞，结果是多少？当然是正无穷了！嗯。这个答案显然没毛病。不过，在这篇文章中，我将严谨的证明出：1 + 2 + 3 + ⋯ + ∞也可以等于-1/12。你没有看错，无穷多的连续自然数的“和”，也可以是一个负数；不仅如此，还是一个负分数。这并不是一愚人节的玩笑：）&lt;/p&gt;
&lt;p&gt;和所有的数学证明一样，如果对于一个命题，通过不同的计算或者思路，我们可以求解出两个不同的答案，或者相互矛盾的结论的话，通常，我们对此一定能找到一个合理的解释。或者是其中的一个证明是错的，或者是讨论问题的角度是完全不同的。&lt;/p&gt;
&lt;p&gt;最简单的例子：初中认真学习数学的同学一定知道：初中数学的一大重点是一元二次方程，对应在解析几何中，就是大名鼎鼎的二次函数：抛物线。在初中，我们经常会说，一个一元二次方程没有解。但是，当我们将数字范围扩充到复数域的时候，我们就会明白，任何一个一元二次方程，一定是有解的。只不过，一个一元二次方程在实数范围内，可能是无解的；但在复数范围内，一定有解。你看，当我们讨论问题的范围改变了，定义改变了，就会得到截然不同，甚至是完全相反的结论。&lt;/p&gt;
&lt;p&gt;要看懂这篇文章，你只需要有初中水平的数学知识就够了；在文章最后，我会简单阐述为什么会有这样反直觉的结论，这部分内容，需要你有本科高等数学的基础知识，大一上的高等数学就够了。但是，如果有些同学在本科或者研究生学习过复变函数的话，就会明白，这个问题背后，隐藏着更加深刻的内容，结论和应用。对于这些内容，由于篇幅原因和定位原因，这篇文章不会涉及。所以，如果你系统学习过复变函数，这篇文章毫无价值，至此结束：）&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;下面，为了证明出 1 + 2 + 3 + ⋯ + ∞ = -1/12，我们先来证明另外两个结论。&lt;/p&gt;
&lt;p&gt;第一个结论：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1 - 1 + 1 - 1 + ⋯ = 1/2&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;即1，-1这两个数字交替出现的无穷序列，其和为1/2。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我们假设这个和存在，记为A，则：&lt;/p&gt;
&lt;p&gt;A = 1 – 1 + 1 – 1 + 1 – 1 + ...&lt;/p&gt;
&lt;p&gt;所以，1 - A = 1 - (1 - 1 + 1 - 1 + 1  ...)&lt;/p&gt;
&lt;p&gt;如果我们把小括号去掉：&lt;/p&gt;
&lt;p&gt;1 - A = 1 - 1 + 1 - 1 + 1 - 1 + ...&lt;/p&gt;
&lt;p&gt;前两项 1 - 1 的结果显然为0，我们的式子就变成了：&lt;/p&gt;
&lt;p&gt;1 - A = 0 + 1 - 1 + 1 - 1 + ...&lt;/p&gt;
&lt;p&gt;等等，0后面那一串是什么？1，-1这两个数字交替出现，就是 A 啊！所以，我们得到了：&lt;/p&gt;
&lt;p&gt;1 - A = 0 + A&lt;/p&gt;
&lt;p&gt;所以：2A = 1，A = 1/2。得证：）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;看，根据我们的推导，一连串整数的和（1和-1），结果竟然是一个分数。&lt;/p&gt;
&lt;p&gt;下面，我们来证明出另外一个结论：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1 - 2 + 3 - 4 + 5 - 6 + ⋯ = 1/4&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;即，自然数序列，但是符号是正负交替的，这一系列整数的和为 1/4。&lt;/p&gt;
&lt;p&gt;我们假设这个和存在，记为B，则：&lt;/p&gt;
&lt;p&gt;B = 1 – 2 + 3 – 4 + 5 – 6 + ...&lt;/p&gt;
&lt;p&gt;下面，我们要使用一下上面我们证明的A序列。我们用A减去B，则有：&lt;/p&gt;
&lt;p&gt;A - B = (1 - 1 + 1 - 1 + 1 - 1 + ...) - (1 - 2 + 3 - 4 + 5 - 6 + ...)&lt;/p&gt;
&lt;p&gt;如果将小括号去掉，并且让A的每一项都和B的对应项配对，就有：&lt;/p&gt;
&lt;p&gt;A - B = (1 - 1) + (-1 + 2) + (1 - 3) + (-1 + 4) + (1 - 5) + (-1 + 6) + ...&lt;/p&gt;
&lt;p&gt;我们计算出每个小括号的结果，他们是有规律的：&lt;/p&gt;
&lt;p&gt;A - B = 0 + 1 - 2 + 3 - 4 + 5 + ...&lt;/p&gt;
&lt;p&gt;发现了什么？A - B 的结果，就是 0 再加上B这个序列和！&lt;/p&gt;
&lt;p&gt;A - B = 0 + B&lt;/p&gt;
&lt;p&gt;所以： 2B = A&lt;/p&gt;
&lt;p&gt;又因为，我们上面已经证明出了，A = 1/2，所以：&lt;/p&gt;
&lt;p&gt;B = 1/4&lt;/p&gt;
&lt;p&gt;WOW！我们离我们的目标已经很接近了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;下面，我们就来证明：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1 + 2 + 3 + 4 + 5 + 6 + ... = -1/12&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们假设这个和存在，记为C，则：&lt;/p&gt;
&lt;p&gt;C = 1 + 2 + 3 + 4 + 5 + 6 + ...&lt;/p&gt;
&lt;p&gt;下面，我们要使用一下上面我们证明的B序列的和。我们用B减去C，则有：&lt;/p&gt;
&lt;p&gt;B - C = (1 - 2 + 3 - 4 + 5 - 6 + ...) - (1 + 2 + 3 + 4 + 5 + 6 + ...)&lt;/p&gt;
&lt;p&gt;依然是，我们将小括号去掉，并且让B的每一项都和C的对应项配对，就有：&lt;/p&gt;
&lt;p&gt;B - C = (1 - 1) + (-2 - 2) + (3 - 3) + (-4 - 4) + (5 - 5) + (-6 - 6) + ...&lt;/p&gt;
&lt;p&gt;发现规律了吗？B-C 的所有奇数项都为0，偶数项则是: -2-2=-4, -4-4=-8, -6-6=-12, ...&lt;/p&gt;
&lt;p&gt;所以，我们有：&lt;/p&gt;
&lt;p&gt;B - C = 0 - 4 + 0 - 8 + 0 - 12 + ...&lt;/p&gt;
&lt;p&gt;B - C = - 4 - 8 - 12 - 16 - 20 - ...&lt;/p&gt;
&lt;p&gt;B - C = -4(1 + 2 + 3 + 4 + 5 + 6 + ...)&lt;/p&gt;
&lt;p&gt;看看小括号里是谁？就是C啊！所以：&lt;/p&gt;
&lt;p&gt;B - C = -4C&lt;/p&gt;
&lt;p&gt;我们得到：-3C = B&lt;/p&gt;
&lt;p&gt;再将之前证明得到的B = 1/4 带进去。得到：&lt;/p&gt;
&lt;p&gt;C = -1/12。得证：）&lt;/p&gt;
&lt;p&gt;其实，为了证明出这个结果，还有其他的方法。但我觉得这个方法最简单，小学生都能看懂：）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“问题”出在哪里？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;好了，我们已经非常“严谨地”证明出了：1 + 2 + 3 + ⋯ + ∞ = -1/12。但这显然和常识不符合。无穷的正整数的和，怎么可能是个负数？还是个分数？问题出在哪里？&lt;/p&gt;
&lt;p&gt;如果同学们仔细看我上面求解A, B, C三个无穷序列的和的过程，就会发现，我一直再说这样一句话：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我们假设这个和存在，记为A(或B, 或C)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;问题的关键就在于。这个和真的存在吗？&lt;/p&gt;
&lt;p&gt;答案是，在我们通常的研究范畴中，这个和是不存在的。熟悉高等数学的同学会知道，我一直在做的事情，其实就是在计算一个无穷数列的和，即在高等数学中的无穷级数求和问题。一个无穷数列的和可以被计算出来，其前提条件是，这个无穷序列是收敛的。但是，上面A, B, C这三个序列都是发散的（具体证明在这里省略，有兴趣的同学可以复习/学习一下，如何判断无穷级数的敛散性）。所以，&lt;strong&gt;“假设这个和存在”中的假设根本不成立，把他们记为A, B, C也就没有意义，后面的推导都没有意义。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;但是！所有的事情，似乎都有“但是”：）&lt;/p&gt;
&lt;p&gt;和前面举的一元二次方程的例子一样。x^2 + 1 = 0，这个方程有解吗？如果我们站在实数的视角看。本质就是在问我们：根号-1的解是多少？答案是，这个数字没有意义，所以这个方程式无解的。&lt;/p&gt;
&lt;p&gt;但是，如果一旦我们定义：根号-1是i，砰！这个方程有解了！不仅这个方程有解了，我们还发明出了数学领域的一个重要的工具——复数。这个工具，可以帮助我们解决大量的其他数学问题。&lt;/p&gt;
&lt;p&gt;对于这个问题，是同样的。虽然通常来看，1 + 2 + 3 + ⋯ + ∞ 结果肯定不是一个值，而是无穷大。但是一旦我们将其想成一个值，却能推导出这个值是-1/12。自然数还是那些自然数，于是，数学家们说，其实，在这个式子中，我们用的加法，不是通常意义的加法，而是一种特殊的加法（具体这种加法为什么不能看做通常意义的加法？因为他不满足很多通常意义的加法性质。具体不满足哪些性质？要都写出来太繁琐了。如果大家有兴趣，有时间可以单独成文。），叫做拉马努金加法；这个和，也可以称为拉马努金和（Ramanujan Summation）。顾名思义，这一切是一个叫做拉马努金的数学家提出来的。&lt;/p&gt;
&lt;p&gt;所以，严格意义上讲，我们应该这样表示上面的结果。&lt;/p&gt;
&lt;p&gt;&lt;img alt="equation" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-04-01/equation.png" /&gt;&lt;/p&gt;
&lt;p&gt;看到后面的花体大R了吗？他就表示，我们的这个结果，是拉马努金加法的结果。英文是Ramanujan Summation，取首字母R表示。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;拉马努金是何许人？两个字：天才；四个字：空前绝后。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;拉马努金是一名来自印度的数学家，没有任何家庭背景，也没有受过专业的数学训练，一路自学成才，依靠其对数学强大的直觉，不仅解决了很多数学难题，更提出了很多前无古人的大胆数学结论。他一生提出了3900多条新的数学公式和命题，这之中的很多成果，后来被证实，可以被完美地应用在量子物理学中，解决量子力学，量子场论等领域中遇到的无穷大问题。近年来，一些宇宙学家在研究黑洞的时候，也用到了拉马努金的一些研究成果。直至今日，人们还能从其研究中挖掘出宝藏。甚至，有人称拉马努金是从未来穿越回来的数学家。以后有时间，我们可以更多地介绍这个人：）&lt;/p&gt;
&lt;p&gt;&lt;img alt="r" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-04-01/r.png" /&gt;&lt;/p&gt;
&lt;p&gt;比起计算机科学家，其实我是更向往数学家的。因为数学家更纯粹。在他们解决一个个问题的时候，并不知道这些问题有什么用，或者有什么意义。&lt;strong&gt;大多数数学成果，都要经过几十年后，才会在实际的科学技术中扮演应有的重要角色。预测正在进行的某些数学成果在未来会有什么重要意义或者应用，几乎是不可能的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所以，数学家们或许只是觉得：&lt;strong&gt;这一切很美，很好玩。&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-04-01/readme.md" rel="alternate"/></entry><entry><id>2019/2019-03-31/readme.md</id><title>一个坏消息，但也有可能是一个好消息</title><updated>2019-03-31T00:00:00-07:00</updated><content>&lt;h2&gt;一个坏消息，但也有可能是一个好消息&lt;/h2&gt;
&lt;p&gt;在三月的一个阳光明媚的清晨，我突然决定，好好做公众号，保持周更。这个决定背后，有我的很多思考，有时间我会专门写文总结一下。但整体而言，我希望分享更多的内容给大家：）&lt;/p&gt;
&lt;p&gt;我的公众号之前聚集的关注者虽然并不多，但这些”种子用户“，给与了我很大的支持。在我决定周更以后发布的第一篇文章，&lt;a href="../2019-03-18/"&gt;《学算法有什么用？唉，对你来说，可能真没用》&lt;/a&gt;，看到大家热情的留言，真的让我很感动：）我知道我的文字水平还有太多需要提高的地方，还要经过很多努力，才能带给大家更好的内容。但我这样的一个”二流写手“，能得到这么多的认可，心里真的暖暖的。请大家相信我，我虽不聪明（可以参考我的文章&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2018/2018-07-18/"&gt;《天生不聪明》&lt;/a&gt;，但最懂得”坚持“的意义，也最擅长坚持。我会努力下去，持续为大家提供有质量的原创内容：）&lt;/p&gt;
&lt;p&gt;更让我惊讶的是，这么小流量的一个公众号，已经有广告主跟我谈广告合作了。我把我的流量摆给他们，且给出了一个超出平均水平的报价，他们竟然毫不嫌弃。因为，他们觉得这个公众号很有潜力，就当做另一种形式的投资了，也是对我的支持。对此，我也很感动。如果你曾经创过业，拉过投资，就会明白，如果有人愿意在你什么都没有的时候，拿真金白银支持你，意味着什么。&lt;/p&gt;
&lt;p&gt;对于广告，我的心情是很复杂的，我完全理解，一定会有很多同学是厌恶广告的。所以我纠结了很久要不要接下来。说实话，以我的公众号现在的流量，就算超出平均水平，广告也没多少收入，金钱完全不是我考虑的因素。&lt;/p&gt;
&lt;p&gt;但是经过慎重考虑，&lt;strong&gt;我还是决定接下来。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为什么？&lt;strong&gt;因为我是一个好奇宝宝：）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;除了在这里发表原创文章，给大家带来更多分享之外，我想知道，尝试一定程度商业化运营这个公众号，会发生什么？我想感受这一切会带给我，带给这个公众号什么变化。我也想知道我能不能应付他们。我希望积累更多的经验，拥有更多的经历。将来聊起公众号这样一个东西，我的体会不仅仅是”换了一个平台，写了一些东西“，还有更多别的感悟，关于这个世界，这个社会，是如何运转的。&lt;/p&gt;
&lt;p&gt;这是我的一己之私。就像我在&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2018/2018-07-18/"&gt;《天生不聪明》&lt;/a&gt;中写的，”所有的科学家都是好奇宝宝，像小孩子一样，...，一定要用手捅捅自己的研究对象。“我也想捅一捅我的这个公众号。&lt;/p&gt;
&lt;p&gt;如果真谈金钱，我完全可以做更多风险更低，收益却更高的推广活动。比如无论是慕课网，还是极客时间，都有分享赚钱的活动，模式成熟，方法简单，产品有保障，还直接可以提现。慕课网的运营部门也多次跟我说，让我宣传一下自己的课程，还能顺便赚推广佣金。但我从来不想这么做。&lt;strong&gt;因为，我觉得，这个推广佣金是给同学们的福利。&lt;/strong&gt;我已经从课程中拿到了制作课程内容应有的分成，就不应该来抢本来是属于同学们的福利。更重要的是，这个过程，在我看来，就是吆喝而已，或许能赚点儿钱，但于我而言没什么收获。但在公众号投放广告稍有不同，我要去和广告主沟通，要去思考怎么投放合适，要去平衡关注者和广告主之间的利益。这对我来说都是全新的挑战，更是全新的体验。希望大家能够理解我。&lt;/p&gt;
&lt;p&gt;当然，我明白，我这样做，一定会带给一些同学困扰，毕竟，没有人是为了看广告来关注公众号的。为此，我将采取以下的”措施“，来弥补大家。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在我的公众号上，所有的广告推文，文章标题一定是《推广 | XXXXXX》的形式。文章标题首的”推广“二字，直接告诉你，这是一个广告。我不想骗点击。所以，对广告极度不适的同学，请不要点击这样的标题的文章。放心，短期内也不会太多的。一年搞不好也就这一单：）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从本周开始，我的所有原创推文，都将发出去一个红包。红包金额会随着公众号的关注者逐渐增多，而逐渐变大的。公众号上能有广告，和读者是分不开的。这不仅仅是号主的功劳，更是读者的功劳。我希望用这种方式，回馈我的读者。经过我的简单估算，在这个活动中我花出去的钱，会多于我通过广告赚到的钱：）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对于我接受的广告，我会尽最大努力体验他们的产品，为大家排雷的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;了解我的同学可能会知道，我从研究生没毕业，就开始注册了第一家公司，尝试创业。至今，已经13个年头了。这个过程，我不敢说自己对商业的理解有多深，但我确实深刻地理解了商业对当今世界的意义。如果熟悉苹果公司的同学，可能知道，乔布斯有一个重要的原则：不做慈善。这个原则一直贯彻至今，在”后乔布斯“时代，苹果也并没有重启任何慈善活动。&lt;/p&gt;
&lt;p&gt;为什么？因为，乔布斯认为：公司的意义不是做慈善。公司的意义，是做好自己的产品，为员工，为股东，为自己的客户负责。如果一个公司，能够做好自己的产品，就能带动员工致富；给股东更多回报；让投资者对投资抱有希望，进而去投资更多有前景的项目；带动就业；促进创新；引领行业成长；让整个世界更好。这，就是最大的慈善。&lt;/p&gt;
&lt;p&gt;我深以为然。&lt;/p&gt;
&lt;p&gt;所以，我的公众号中将出现广告，这或许是个坏消息。但也许，这也是一个好消息。谁也不知道这一切将引领这个公众号走向哪里。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;而这大大的”不知道“，才是最让人兴奋，最酷的地方。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;难道不是吗？&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-03-31/readme.md" rel="alternate"/></entry><entry><id>2019/2019-03-28/readme.md</id><title>我们每个人都是囚徒。996.ICU与囚徒困境。</title><updated>2019-03-28T00:00:00-07:00</updated><content>&lt;h2&gt;我们每个人都是囚徒。996.ICU与囚徒困境。&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;996.ICU这个项目彻底火了。在我写这篇文章的时候，这个项目已经获得了6.8万多的star。&lt;/p&gt;
&lt;p&gt;我估计看到这篇推文的时候，应该已经不会有互联网人不了解这个项目了。简单说，就是有位大佬，注册了一个域名 &lt;a href="https://996.icu"&gt;https://996.icu&lt;/a&gt;，控诉国内互联网企业蔚然成风的996工作制，同时，将这个项目放到了程序员专属社区——github上。&lt;/p&gt;
&lt;p&gt;如果打开996.icu的网站，你会看到，这份控诉包括：&lt;/p&gt;
&lt;p&gt;1）对996工作制的解读；&lt;/p&gt;
&lt;p&gt;2）对996工作制所违反的中华人民共和国《劳动法》的列举；&lt;/p&gt;
&lt;p&gt;3）以及最后，对三个典型企业实施996工作制的描述。&lt;/p&gt;
&lt;p&gt;这个网站最后，还为大家算了一笔经济账：按照劳动法规定，996 工作制下，只有拿到当前工资的 2.275 倍，才是正常的。&lt;/p&gt;
&lt;p&gt;最后，是一个响亮的口号：什么是 996.ICU？工作 996，生病 ICU。&lt;/p&gt;
&lt;p&gt;如果你还没有访问过这个网站，可以直接点击&lt;a href="https://996.icu"&gt;这里：https://996.icu&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先，我是非常赞赏这位大佬的做法的。同时，也是非常支持大家为这个项目点赞的。我个人也在第一时间，为这个项目点了赞。为自己遭遇的不公发声，或者为周围人遭遇的不公发声，这本身在中国，就是一个很稀缺的品质。我们在文化上，就有一股“多一事不如少一事”，“能忍则忍，小不忍则乱大谋”的基因。即使吃了亏，也会安慰自己“吃亏是福”，“塞翁失马”。社会上，我们更不在一个有不断发声传统的政治氛围里。现在，突然有人站出来，发起这样的一个项目，大家一起用点赞的形式表达一下心声，没有一点毛病。&lt;/p&gt;
&lt;p&gt;但是，对于这个项目，在我点赞以后，却又有些失落。点了赞，又怎样呢？我不知道我还能做什么，可以改变现状。我完全可以想象，很多义愤填膺的程序员朋友们，点赞，在issue中留言，表达自己的观点，阐述自己的境遇，之后，可能就在同一天，依旧晚上九点，拖着疲惫的身躯回家，没有X生活。而自己的直接领导，搞不好，他们也偷偷在996.ICU项目上点了赞。只是面对自己的下属不声张。但同样在晚上九点，甚至更晚，和你一样，拖着疲惫的身躯回家，没有X生活。大家都没有财富自由，大家都是打工讨生活，大家都是一样的。&lt;/p&gt;
&lt;p&gt;点赞无法让企业有任何改变，因为企业吃不到点赞的苦头。这就是为什么，国外的各个行业，一旦遇到看似无法调和的问题，都会组织罢工。因为，罢工，将导致企业利益的损失，才能让企业真正的重视起大家的诉求。&lt;/p&gt;
&lt;p&gt;当然，我并不是特别赞同罢工，&lt;strong&gt;更好的方式还是拿起法律的武器&lt;/strong&gt;。毕竟，工作时长和超出工作时长如何做出经济补偿，是被《劳动法》明确规定的。如果确定自己所在的企业违反了《劳动法》，为什么不能拿起法律的武器？中国法律真的只是txt，不是exe？&lt;strong&gt;我们不是一直在强调：要依法治国？！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;但是，无论是组织一场罢工，还是拿起法律的武器，都是有难度的。我很理解。因为其实，大家都陷入在一个囚徒困境的局面中。&lt;/p&gt;
&lt;p&gt;为了更清晰的解释：为什么大家在这个事件中，都陷入了囚徒困境，我先简单的解释一下，什么是囚徒困境（虽然我相信，很多同学都了解囚徒困境）。&lt;/p&gt;
&lt;p&gt;囚徒困境是一个经典的博弈论模型。&lt;/p&gt;
&lt;p&gt;假想有两个罪犯合作犯罪，被警察逮捕了。但是警察证据不足，无法直接给他们定罪。因此，警察将这两个罪犯分隔开，分别劝说他们指认对方。&lt;/p&gt;
&lt;p&gt;警察制定了这样一个规则：&lt;/p&gt;
&lt;p&gt;对于每一个罪犯，如果和警察合作，指认对方，但是对方却拒不合作，保持沉默的话，那么和警察合作的罪犯将无罪释放，但是，另一个罪犯，要被判10年；&lt;/p&gt;
&lt;p&gt;如果两个罪犯都指认了对方，对不起，你们犯罪事实确定，鉴于和警察合作，少判一点儿，两个人各判8年；&lt;/p&gt;
&lt;p&gt;但如果两个人都不合作，互相不指认对方，警察没办法给他们定重罪，但可以让两个人各被判1年。&lt;/p&gt;
&lt;p&gt;这个规则说出来好像很复杂，但用一个表格表示，非常简单清晰：&lt;/p&gt;
&lt;p&gt;&lt;img alt="table1" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-03-28/table1.png" /&gt;&lt;/p&gt;
&lt;p&gt;现在，假设你是某一名囚犯A，你会选择指认，还是沉默？&lt;/p&gt;
&lt;p&gt;由于，你不知道另一名囚犯B的决策，所以，你会分情况讨论。&lt;/p&gt;
&lt;p&gt;假设囚犯B会指认你的话。那么此时，如果你选择指认，你将被判8年。但是，如果你选择沉默的话，你将被判10年。显然，选择指认，对你更好。&lt;/p&gt;
&lt;p&gt;&lt;img alt="table2" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-03-28/table2.png" /&gt;&lt;/p&gt;
&lt;p&gt;假设囚犯B会选择沉默的话。那么此时，如果你选择指认，你将无罪释放。但是，如果你选择沉默的话，你将被判1年。显然，依然是，选择指认，对你更好。&lt;/p&gt;
&lt;p&gt;&lt;img alt="table3" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-03-28/table3.png" /&gt;&lt;/p&gt;
&lt;p&gt;因此，不管B怎么选，对于你来说，都是选择指认更好。&lt;/p&gt;
&lt;p&gt;由于这个表格是完全对称的，所以，对于B来说，也将得到完全一样的结论。不管你怎么选，B都是选择指认最好。&lt;/p&gt;
&lt;p&gt;这样一来，一个奇怪的事情发生了。对每一个人而言，都是选择指认最好，最终的结果，将必然导致两个人各判8年。这比两个人都选择沉默，付出的代价要高得多。可是，每个人都是从个体利益最大化的角度做出的选择，怎么分析，怎么没毛病，但最终的结果，却陷入了于整体而言，最差的结果。&lt;/p&gt;
&lt;p&gt;这就是囚徒困境——这个经典数学模型，向我们展示的一个非常重要的社会学，经济学上的现象：&lt;strong&gt;局部的最优化决策，不一定指向整体最优化，相反的，甚至可能指向对整体而言，最差的结果。&lt;/strong&gt;（专业术语是，达到了纳什均衡，或者是达到了非合作博弈均衡。这个均衡点的位置，和结果的”好坏“，没有必然联系。）&lt;/p&gt;
&lt;p&gt;当然，囚徒困境本身，还可以有更多可以更深入讨论的地方。条件的改变，假设的改变，都会影响最终结论。同时，这个模型也有更多的应用，帮助我们揭示很多社会上，生活中的现象。在这里，我们就不过多地去讨论了。如果理解了上面这个最基础的模型，就已经足够来看下面的问题了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;现在，我们来看一看，为什么在企业用工996这件事情上，大家陷入了同样的囚徒困境。&lt;/p&gt;
&lt;p&gt;此时，每一个人都被996的工作制度压迫着。每一个人都有选择：或者拿起法律的武器维护权利；或者沉默，等待其他人拿起法律的武器维护权利。此时，上文中的A和B，变成了”自己“和”其他人“；“指认”和“沉默”两个动作，我给修改为“维权”和“沉默”两个动作。那么，我就可以得到下面的表格：&lt;/p&gt;
&lt;p&gt;&lt;img alt="table4" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-03-28/table4.png" /&gt;&lt;/p&gt;
&lt;p&gt;简单解释一下，从左到右，从上到下，介绍这四个格子的数值：&lt;/p&gt;
&lt;p&gt;如果你选择维权，其他人也选择维权，那么所有人都联合起来，维权就会成功，那么大家都有收益。我将这个收益记做5。所以，左上角的格子是5 / 5；&lt;/p&gt;
&lt;p&gt;如果你选择维权，但其他所有人都沉默。那么你将承受巨大的成本和压力，而且由于一个人力量太渺小，维权近乎一定不会成功，你可能产生巨大的损失，我记为-10。同时，由于你的维权不会成功，其他人的境遇也不会发生改变，我记为0。所以，右上角的格子是-10 / 0；&lt;/p&gt;
&lt;p&gt;如果你选择沉默，其他人一起维权，那么这个维权活动，不会因为少你一个人有什么改变，也是会成功的。所以，大家都有收益，我记为5。但是要注意，于你而言，由于你没有参与，所以你没有付出时间成本，也没有承担风险，但维权成功后，你的工作状况也变好了。换句话说，你没有参加维权，却能享受到维权成功后的好处。因此，你的收益是更高的（因为没有支出）。我记为10（比5高）。所以，左下角的格子是10 / 5；&lt;/p&gt;
&lt;p&gt;最后，如果你和其他所有人都沉默，那么什么都不会改变。大家都是0。右下角的格子是0 / 0。&lt;/p&gt;
&lt;p&gt;现在，我们就分情况来分析，对于你来说，到底要不要站出来维权？&lt;/p&gt;
&lt;p&gt;如果其他人决定维权。那么对于你来说，加入维权，收益为5，选择沉默，收益却是10。你会选择沉默。&lt;/p&gt;
&lt;p&gt;&lt;img alt="table5" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-03-28/table5.png" /&gt;&lt;/p&gt;
&lt;p&gt;如果其他人都沉默。那么对于你来说，加入维权，收益为-10，选择沉默，收益是0。你还是会选择沉默。&lt;/p&gt;
&lt;p&gt;&lt;img alt="table6" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-03-28/table6.png" /&gt;&lt;/p&gt;
&lt;p&gt;这个模型，对所有人都是成立的。所有人在思考自己和其他人的行为关系的时候，都会不自觉地倾向于沉默——不作为。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我们每个人都是囚徒。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当然了，对于这样一个复杂的社会问题，使用这样一个简单的博弈论模型，去下定论，是片面的。但是，使用这样一个简单的模型，确实也能展现出问题的一个侧面：为什么很少有人会激进地拿起法律武器，或者鼓动大家一起罢工。因为大家都是理性的。自觉不自觉地，大家都意识到了，沉默，是更好的选择。毕竟，程序员朋友们有吃有穿，工资不低。和大多数行业比起来，虽然辛苦点儿，但整体生活还是不差的。揭竿起义值不值？每个人心里都有自己的结论。&lt;/p&gt;
&lt;p&gt;其实，曾有过很多朋友，跟我吃饭闲聊，抱怨公司的996制度。面对这个话题，通常我都是很有人情味儿地先同情一番，之后又很不近人情地指出：为什么不去使用法律的武器保护自己。嗯。这样做一阵子以后，我的朋友们都再也不跟我探讨996的问题了。&lt;/p&gt;
&lt;p&gt;在这里，我完全没有指责我的这些朋友的意思。我真的非常非常理解他们。囚徒困境向我们展现了，人性就是如此。如果是我，恐怕也不会那么轻易，就拿起法律的武器和企业死磕。&lt;strong&gt;我想，我会从告诉领导，”对不起，家里有事儿，我不能加班“开始。其实，如果所有人都能这么做，事情也会得到很大的改善。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;但是显然，事情不是这样的，要明白，对于很多人来说，996其实是一个机会。&lt;strong&gt;相比起用业绩来说话，用加班来展现出自己对公司的贡献，实在是太简单的一种方式。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果所有人都不加班，就你加班，你肯定有好处；&lt;/p&gt;
&lt;p&gt;如果所有人都加班，你也只能继续加班，否则，你很可能有坏果子吃。&lt;/p&gt;
&lt;p&gt;里外里，选择加班都是对自己更好的决策。所有人都这么想。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;瞧，我们又陷入了囚徒困境。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;P.S.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这篇文章最后的&lt;a href="https://996.icu"&gt;阅读原文&lt;/a&gt;链接，我送给996.ICU这个项目的官方网站，表达我的支持。&lt;/p&gt;
&lt;p&gt;虽然我们都是囚徒，但我依然相信，一切都在向着更好的方向前进。这个项目的出现，就是证明。&lt;/p&gt;
&lt;p&gt;大家加油！：）&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-03-28/readme.md" rel="alternate"/></entry><entry><id>2019/2019-03-27/readme.md</id><title>哈哈哈！晦涩难懂的码农段子，和。。。拥抱未来：）</title><updated>2019-03-27T00:00:00-07:00</updated><content>&lt;h2&gt;哈哈哈！晦涩难懂的码农段子，和。。。拥抱未来：）&lt;/h2&gt;
&lt;p&gt;今日最佳码农段子。来自Twitter @Delton Ding&lt;/p&gt;
&lt;p&gt;&lt;img alt="tweet1" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-03-27/tweet1.png" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;小王是某 C++ 大型项目工程师，今天他上班触发了全量编译便回家了，明天再来。 &lt;/p&gt;
&lt;p&gt;小张是深度神经网络 Python 工程师，今天他上班改了一个参数开始训练便回家了，三天后再来。 &lt;/p&gt;
&lt;p&gt;小李是资深 Rust 工程师，今天他上班只花一小时就完成了需求。  &lt;/p&gt;
&lt;p&gt;然后加班了三个晚上才使得编译通过。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;哈哈哈哈哈，玩儿推的同学，快去关注他！&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;虽然这个段子主要是黑rust的。但是，仔细体会，其实也顺便把C++和深度学习黑了一下。&lt;/p&gt;
&lt;p&gt;黑rust的这个点，我有时间想单独写篇文章，今天轻松一些，就不谈这么深入了。其实，不仅仅是rust，很多语言都有着令人发指的语言特性。本周我的文章&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-03-25/"&gt;《编程语言的发展趋势：从没有分号，到DSL》&lt;/a&gt;里，我一直在说：&lt;strong&gt;编程语言的一大发展趋势，就是越来越是给人看的，而不是给机器看的。&lt;/strong&gt;但现代编程语言中，依然有很多语法特性，是在惨绝人寰地违背这个原则。不仅仅是rust，从我的角度看，就算大红大紫的Python, JS, Swift，也有很多类似这样的语言特性。这是一个很有意思的话题，我慢慢写，或许能写成一系列文章：）&lt;/p&gt;
&lt;p&gt;另一方面，这个段子本身，蛮有时代的印记的。如果放在十年前，不要说看懂这个段子了，其实，这个段子里小张和小李上班用的技术（深度学习和rust），还没出现呢（更准确的说，还不可能是普通上班的码农掌握的技术呢）。但是，十年后，这些技术已经可以成为段子，在码农圈儿被津津乐道了。可以想象，十年后的笑话，我们今天还看不懂呢。但是，我却已经迫不及待地想看十年后的笑话了。&lt;/p&gt;
&lt;p&gt;今天，我又看了一篇关于医学的技术报道。在最近几年里，关注技术越多，我越倾向于相信：&lt;strong&gt;21世纪是生物医学的世纪。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先，人类有足够大的动力去研究生物医学——延长生命，对抗疾病。不仅仅每一个个体有这样的需求，人类整体作为一个生物物种，也有着这样的目标。我们不难想象，一个个大富豪们，会在晚年（或者中年），将大量的钱财，都投入到生物医学领域。实际上，现在，已经有很多人这么做了。&lt;/p&gt;
&lt;p&gt;其次，计算机的发展，已经为生物医学的发展奠定了相当的基础。由于人类基因组测序工作已经基本完成，海量的数据就静静地躺在那里，等待人类挖掘。同时，摩尔定律已然见顶，量子计算呼之欲出。算力本身越来越不是问题。&lt;strong&gt;很多生物医学问题，本质已经被转换成了一个个计算问题。国外一些算法课程的课后大作业，已经是设计一个算法，解决一个生物学或者医学的问题了。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当然，还有更多生物医学技术的问题，还远远不是计算问题，需要生物医学的专业知识，才能创新性地解决。这些问题的答案还躺在黑暗中，等待人类去发现。所以，生物医学技术工程师会被越来越多的需要。至于计算机专业？嗯，生物医学技术工程师们也需要各种软件工具，来完成他们的研究；就好比我们软件工程师也需要硬件工程师们发明的各种硬件，来执行我们的程序一样。又回到了&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-03-18/"&gt;《学算法有什么用？唉，对你来说，可能真没用》&lt;/a&gt;中的观点：&lt;strong&gt;“分工”本身就是经济学的基础概念之一，是我们这个世界能够良性运转逐渐发展的诸多核心规则之一。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;今天科技界的一大新闻，是深度学习三巨头斩获图灵奖。仔细思考，其实&lt;strong&gt;深度学习，或者深度学习的底层架构——神经网络本身，也是计算机和生物科学的一种融合——用计算机去模拟大脑的神经元&lt;/strong&gt;。如果去看神经网络之父Geoffrey Hinton的背景，就会发现，他有着非常坚实的认知神经科学的背景。认知神经科学已经渐渐成为了一个单独的分支，横跨生物学，医学，心理学。主要研究的，就是大脑认知的机制。虽然，我们现阶段对大脑认知的机制，理解的还相当浅薄，但是这些浅薄的认知，已经能够帮助我们产生出像深度学习这样的技术，让我们看到人工智能的曙光（虽然离强人工智能还很远很远）。未来，更加的前沿的研究工作，和突破性进展，近乎将离不开生物科学的影子。&lt;/p&gt;
&lt;p&gt;&lt;img alt="deeplearning" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-03-27/deeplearning.png" /&gt;&lt;/p&gt;
&lt;p&gt;最近科研圈的另一个大新闻，是一名年轻的华人博士后的一作论文，登上了nature杂志的封面。他的研究成果——仿细胞集群机器人系统，又和生物学相关。是机器人领域和生物学的结合。&lt;/p&gt;
&lt;p&gt;&lt;img alt="nature" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-03-27/nature.png" /&gt;&lt;/p&gt;
&lt;p&gt;一想到软件行业和所有行业一样，逃不出行业周期的“大势”，也会没落，不禁黯然神伤。但是，&lt;strong&gt;人类毕竟要向前，我们能做的，只能是去拥抱未来。&lt;/strong&gt;而且，短时间内，互联网行业的红利期还远不会结束。相信每一个学习计算机的同学都能感受到这一点。不信，去和那些其他理工科专业的同学，比如材料，化学，电控，等等，比比看。&lt;strong&gt;在绝大多数情况下，我们必须承认，我们付出的努力更少，收到的回报更大。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;哎，本来想轻松一些，结果越写越沉重。那最后，再给大家奉献一个段子吧。同样来自Twitter @Delton Ding&lt;/p&gt;
&lt;p&gt;&lt;img alt="tweet2" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-03-27/tweet2.png" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;小王写代码前会仔细思考，如果一个方法会被复用或对性能有很大影响，他会提前设计好架构，然后简洁优雅地实现出来。 &lt;/p&gt;
&lt;p&gt;小张会事后思考，擅长分析性能瓶颈，根据工程规模进行重构，代码仓库保持得很干净。 &lt;/p&gt;
&lt;p&gt;小李想到哪里写到哪里。 &lt;/p&gt;
&lt;p&gt;但因为 git commit 数量比较多，小李被升职了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;哈哈哈。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;新的一天，拥抱未来。大家加油！：）&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-03-27/readme.md" rel="alternate"/></entry><entry><id>2019/2019-03-25/readme.md</id><title>编程语言的发展趋势：从没有分号，到DSL</title><updated>2019-03-25T00:00:00-07:00</updated><content>&lt;h2&gt;编程语言的发展趋势：从没有分号，到DSL&lt;/h2&gt;
&lt;p&gt;在上一周的推文&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-03-18/"&gt;《学算法有什么用？唉，对你来说，可能真没用》&lt;/a&gt;中，我阐述了一个观点：&lt;strong&gt;随着软件行业的逐渐成熟，算法将慢慢不再成为软件行业工作者必备的知识&lt;/strong&gt;（但一定是信息学相关专业必学的知识）。因为算法将被越来越多的封装，被直接使用。这就好比数据库，近乎是每一个软件项目都必备的需求，但是，近乎每一个软件项目都不会选择重新实现一个数据库。太多现成的数据库工具唾手可得。我们只需要学会怎么使用他们就好了。而怎么使用他们，比重新实现一个数据库，简单不止100倍。&lt;/p&gt;
&lt;p&gt;事实上，计算机行业的任何一个细分领域，都在上演着这样的“进化过程”：&lt;strong&gt;很多在以前看来是必学的知识，从现代开发的角度看，不一定是必备的。所以，大家会觉得“面试造核弹，上班拧螺丝”。&lt;/strong&gt;如果你曾经在十五年前，就尝试做一个网页；做一个桌面app（那时还根本没有移动app）；做一个游戏；你就会明白我在说什么。一个非常显然的事实是，在十五年前，做一个网页，做一个桌面app，做一个游戏，相应的成本，都是现在的100倍以上，而最终得到的结果，搞不好不足现在的百分之一。这一万倍的差距，不是因为今天的我们更聪明了，而是因为，行业在发展。今天的我们，不仅仅是“站在巨人的肩膀上”，更是“站在了几百万个巨人的肩膀上”。&lt;/p&gt;
&lt;p&gt;所以，我经常提醒自己，我能实现这么多复杂的功能，不是因为我有多聪明，而是因为编程在现如今竟是如此的简单。&lt;strong&gt;任何一个技术，如果他能被大规模的应用，除了它足够有用之外，还必须具备一个必要的因素——它足够简单。计算机技术在我们这个时代被越来越多，越来越广泛的使用，是因为，计算机技术越来越简单。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在这篇文章中，我想从计算机语言的角度，聊聊编程语言的“演化”。这本身是一个很大的话题，甚至，有很多学者做专门的相关研究。因此，这篇文章的讨论的角度也是极其有限的。大家通过文章的标题就可以看出来，这篇文章将聊到DSL为止。但除了DSL，我们确实还有很多维度去探讨这个话题。以后有机会，我会再逐渐补充我的观点：）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 从没有分号，到给人看的编程语言&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;学习计算机的同学一定了解：分号在计算机编程语言中，有着举足轻重的地位。如果你学习的第一门语言是C，或者C++，或者Java，那么你一定曾经犯过忘记写分号的错误。&lt;/p&gt;
&lt;p&gt;但是，如果多接触几门编程语言，就会发现，大多数“现代”编程语言，是完全不需要写分号的。比如Python，比如Swift，比如Go。为什么？原因很简单，在大多数情况下，分号是给机器看的，而不是给人看的。&lt;strong&gt;写分号，本质是我们人类在迁就编译器&lt;/strong&gt;，毕竟，机器是很傻的。&lt;/p&gt;
&lt;p&gt;有意思的是，即使是同样一定需要分号的语言，Java也比更底层的C++需要的分号少。比如，下面的例子中，我们同样声明一个学生类。&lt;/p&gt;
&lt;p&gt;C++语言：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;class Student{
public:
    string name;
}; // 注意，在C++语言中，这里必须有一个分号&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Java语言：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;public class Student{
    public String name;
} // 注意，对于Java语言，这里不需要分号！&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;可以看到，在类声明结束的时候，C++语言这个老古董，还需要加上一个分号，但是Java语言不需要。显然，Java语言的语法规则更加合理。在这里，大括号的结束已经完全可以表示类声明的结束了，多一个分号，对人类来说，是一个额外的“语法负担”。&lt;/p&gt;
&lt;p&gt;随着编程语言的逐渐演化，这样的语法负担都将被剔除。如果你学习过Python语言，就会知道，何止是分号消失了，连大括号都消失了。为什么？就是因为大括号也是给机器看的。告诉机器，类声明结束了。从Python的角度看，“旧式语言”有太多的语法规则，使用了过多的字符，来告诉机器如何解析程序。比如分号，比如大括号。这使得这些语言猛地看上去，包含一大堆和程序本身所表达的逻辑完全无关的字符。所以，Python在努力减少这样的语法。&lt;/p&gt;
&lt;p&gt;但与此同时，Python在另一些语法中，却在添加更多的字符。最典型的就是三目运算符&lt;code&gt;?:&lt;/code&gt;，在Python中没有了。为什么？三目运算符虽然形式更简单，但是这个“简单的形式”也是给机器看的，不是给人看的。&lt;/p&gt;
&lt;p&gt;比如我们要根据score这样一个变量的值，返回“Perfect”或者“Not Perfect”这样的字符串，在C++或者Java这样的语言中，我们写出的逻辑大概是这样的：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;return score == 100 ? "Perfect" : "Not Perfect";&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;但是，在Python语言中，是这样的：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;return "Perfect" if score == 100 else "Not Perfect"&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;显然，三目运算符比if-else的形式更简洁，但是在逻辑表意上，更加复杂，不够直观。而Python的写法，更接近自然语言，任何人，即使没有计算机背景，也能一眼看懂这句话的意思。所以，三目运算符被Python直接摒弃了。类似的，++, --这类所谓更“简洁”的语法，也被Python摒弃了，也是这个原因。&lt;/p&gt;
&lt;p&gt;这类语法的弃用，绝不仅仅是Python一门语言的选择，比如苹果几年前刚发布的新语言Swift，也是如此。&lt;strong&gt;编程语言的发展趋势之一，就是越来越向着给人看的方向发展，而不是给机器看。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 去除和逻辑无关的语法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;编程语言的另一个发展趋势，就是摒弃和业务逻辑无关的语法规则。最典型的例子，就是现代大多数语言都不再有显示声明指针的语法。&lt;/p&gt;
&lt;p&gt;相信对于大多数同学，如果学习过C或者C++语言，在学习&lt;code&gt;int*&lt;/code&gt;, &lt;code&gt;int**&lt;/code&gt;, &lt;code&gt;int&amp;amp;&lt;/code&gt;, 等等这些语法规则的时候，都是一团浆糊。甚至可能很多同学毕了业，都没有特别搞清楚C/C++语言中的指针和引用到底是怎么回事。&lt;/p&gt;
&lt;p&gt;相信对于绝大多数同学（至少对于我是如此），在刚接触C语言的时候，连使用&lt;code&gt;scanf&lt;/code&gt;，都是一场噩梦。&lt;/p&gt;
&lt;p&gt;```
int a;
scanf("%d", &amp;amp;a); 
// 我们先不提%d是怎么回事，a前面为什么一定要有个&amp;amp;？？？？&lt;/p&gt;
&lt;p&gt;// 但是，如果a是一个char[]的话...
char s[80];
scanf("%s", s);
// 咦？怎么s前又不需要&amp;amp;了？
```&lt;/p&gt;
&lt;p&gt;这段代码中，这个&lt;code&gt;&amp;amp;&lt;/code&gt;(C/C++中是地址符)，就是和业务逻辑无关的语法规则。在这里，我不详细的介绍C/C++中的这个语法规则了。其实，如果你不使用C/C++，对于现代编程语言，你完全不需要理解这其中有什么区别，在什么时候应该使用哪个语法。&lt;/p&gt;
&lt;p&gt;相较而言，比如Java语言的控制台输入，是使用Scanner类，写出来大概是这样的。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Scanner myScanner = new Scanner(System.in); 
int a = myScanner.nextInt();
String s = myScanner.nextLine();&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;同样，对于C++语言，写出来大概是这样的：&lt;/p&gt;
&lt;p&gt;```
int a;
cin &amp;gt;&amp;gt; a;&lt;/p&gt;
&lt;p&gt;string s;
cin &amp;gt;&amp;gt; s;
```&lt;/p&gt;
&lt;p&gt;虽然，对于Java和C++的IO部分的语法设计（或者说类设计），还是有很多吐槽和更好的建议，但是，很明显的，高级语言在努力摒弃掉诸如&lt;code&gt;%d&lt;/code&gt;, &lt;code&gt;%s&lt;/code&gt;, &lt;code&gt;&amp;amp;&lt;/code&gt;, 等等语法规则。因为，这些语法规则和具体逻辑无关。&lt;/p&gt;
&lt;p&gt;对于指针这个概念同理。对于大多数高级语言，和指针相关的语法都被隐藏起来了。当然，现阶段，对于程序员，还是必须要理解清楚指针这个概念的（在Java，Python等语言中，其实就是引用）。但是，从语法的角度，这个概念“消失”了。这显然对初学者更友好。初学者不需要纠结，什么时候用&lt;code&gt;*&lt;/code&gt;，什么时候用&lt;code&gt;&amp;amp;&lt;/code&gt;。&lt;strong&gt;语言的使用者，将更多地精力，集中在逻辑表达上，而非语法细节上。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. 自动垃圾回收&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;说到剔除逻辑无关的规则，最为典型的，就是现代语言在大多数情况下，不再需要程序编写者处理垃圾回收相关的逻辑了。很多语言，即使本来需要手动处理垃圾回收逻辑，在版本升级的过程中，也改为了自动垃圾回收机制。这也是因为，垃圾回收是和我们要表达的逻辑无关的，是关于机器怎么执行逻辑的。这里，最典型的例子，就是OC语言。&lt;/p&gt;
&lt;p&gt;我是iOS 4的时代开始接触iOS开发的。那个时候，OC语言是需要进行手动垃圾回收的（和C/C++语言一样）。但是从iOS 5开始，OC语言引入了自动垃圾回收机制，被称为ARC。虽然严格意义上，ARC和Java的GC还不一样（这是因为这两种语言本身的内存管理模型有所不同），但是他们的目的都是相同的：&lt;strong&gt;让程序员更多的专注于业务逻辑代码的编写，而不是诸如垃圾回收这样的只有机器才关注的问题上。&lt;/strong&gt;如果你尝试使用过需要手动处理垃圾回收机制的语言编写较大的项目，如C/C++/OC，就会明白：&lt;strong&gt;你很有可能会花费50%的时间，来保证整个系统的垃圾回收是没有问题的。但是，使用“现代”编程语言，这些时间都可以用来精进你所要实际表达的代码逻辑。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于现代编程语言，自动垃圾回收机制，近乎是标配。这也使得，越来越多的程序员，根本不了解内存管理，也不需要了解内存管理，就可以胜任大多数工作。在这方面，我一直喜欢举发生在我身边的一个iOS程序员的例子。我的这位朋友，文科生出身，在iOS 5的时代开始接触iOS开发。他接触iOS开发，完全是因为在那个时代对于苹果产品的疯狂着迷，爱屋及乌，也想要开发属于自己的iOS App。结果，竟然在那个大多数程序员都还不太接触iOS开发的年代，无意中转行进入了IT行业，并且抓住了风口，在短短一年的时间里，成为了国内某著名品牌的iOS事业部负责人。在那个年代，大多数硕士毕业的研究生，在大厂的工资，也就是10万每年。他一个文科生，本科学历转行进计算机，借助iOS开发的契机，竟在那时就达到了30万每年的薪水。&lt;/p&gt;
&lt;p&gt;对于这个案例，除了佩服他的兴趣，感叹时代和机遇的力量，以及佩服他的执着和努力之外，我也常常想：或许，这和OC语言本身在iOS 5开始，开发者不再需要处理内存管理，也是分不开的。否则，对于文科生来说，理解内存管理，学习曲线真的太陡峭了。&lt;/p&gt;
&lt;p&gt;苹果每年都会在自己的发布会上声称，iOS开发生态中，有多么多么小的开发者，或者多么多么老的开发者。&lt;strong&gt;是因为突然这个年代的人们都是天才了吗？不是。因为开发真的越来越简单。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="developer" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-03-25/developer.png" /&gt;&lt;/p&gt;
&lt;p&gt;九岁的苹果开发者 Anvitha Vijay &lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. DSL&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;上面举的例子，不论是分号，大括号，三目运算符，指针，地址符，垃圾回收，等等等等，这些功能在编程语言中的演化，本质，其实都是：编程语言在逐渐剔除和业务逻辑无关的语法，从而让开发者更多的关注在业务逻辑自身上，而不是机器怎么执行这些逻辑上。&lt;strong&gt;简单的总结，可以理解成：现代语言的发展趋势是：编程的主要任务越来越多的是告诉机器要做什么（what），而不是怎么做（how）。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;正是因为这个方向的指引，越来越多的DSL语言被发展出来。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DSL，是Domain Specific Language的缩写，翻译成中文，就是“特定领域语言”。&lt;/strong&gt;其实，对于DSL语言，我们都不陌生，最典型的DSL，就是SQL。大家体会一下下面的这段SQL代码：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;SELECT name FROM Student WHERE score = 100&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;大家想想，这段代码所表示的逻辑，用其他语言怎么写？在大多数语言中，大概是这样的：（伪码）&lt;/p&gt;
&lt;p&gt;```
names = []
for student in students:  &lt;br /&gt;
    if student.score == 100:      &lt;br /&gt;
        names.append(student.name)    &lt;/p&gt;
&lt;p&gt;return names
```&lt;/p&gt;
&lt;p&gt;看了这两段代码，不知道大家是不是能够理解，什么叫告诉机器what，而不是how。对于SQL语言来说，我们的代码近乎就是用自然语言说：我们要把分数是100分的学生姓名拿出来；而对于其他大多数语言（C++, Java等等），我们还需要循环(for)，需要条件判断(if)，需要考虑拿回来的学生姓名怎么存储（数组？集合？），还要手动把一个一个符合条件的学生姓名添加进去（append）。显然，这段代码更多的涉及how，而不仅仅是what。&lt;/p&gt;
&lt;p&gt;当然了，SQL语言这种“简洁性”是有代价的，这个代价就是DSL中所谓的Domain Specific, 即领域相关。使用SQL，我们只能处理和数据存储相关的内容（通常所说的增添改查），但是，我们不能用SQL做移动app，不能用SQL做后端业务逻辑，不能用SQL做前端，也不能用SQL做动画，做游戏，做人工智能。但是，只要是和存储相关的东西，掌握SQL这么一个简单的工具就够了。&lt;/p&gt;
&lt;p&gt;DSL还有很多，在现代的环境下，近乎每一个程序员都一定会接触那么几个DSL。再比如说，正则表达式也是一种DSL，正则表达式只可以进行模式匹配。但是，对于模式匹配，再复杂，使用正则表达式解决，也比自己写模式匹配算法或者模式匹配工具要强。&lt;/p&gt;
&lt;p&gt;HTML和CSS也属于DSL，虽然，这两种语言本质上处理的不是逻辑（CSS越来越强大，也已经有了“逻辑引擎”），但是，如果学习过HTML和CSS的同学一定了解，这两种语言都是上手极快的（当然，上手和精通是两回事儿）。我们可以很快的就使用这两种语言来做出页面，而且，看上去还不错。&lt;strong&gt;这就是DSL的意义——可以更快地，更简洁地，去让哪怕是“计算机科学的外行”，用编程的方式，去做特定领域的事情，而不用去纠结过多“计算机科学”相关的内容。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在这个年代，做科研工作，近乎一定要编程，并且，大多数科研相关的编程工作，是和数据相关的。因为各个领域的前沿研究，都需要在领域相关的大量数据中，寻找新的突破和发现。可能有很多同学知道，Python和R是现今最主流的两种用于数据处理的语言。如果你身边有非计算机领域的博士同学，或者研究工作者，去问问他们。你会惊讶的发现，大多数非计算机专业的研究工作者，更常用R语言，而非Python语言。为什么？因为，相较Python语言，R语言更像一个DSL。当然，R语言本身也很强大，但是远没有Python强大。R语言本身近乎就是为数据科学设计的语言，大多数数据科学所需要的功能，R语言或者本身从语法层面支持，或者在标准库中内置好了。所以，对于非计算机专业的人士而言，R语言是更加友好，上手更快的。使用R语言，可以尽量少的去接触和“计算机科学”相关的知识，就能上手复杂的数据处理任务。&lt;/p&gt;
&lt;p&gt;相较于SQL，正则表达式，CSS，HTML，R等等这些DSL，计算机专业的同学通常需要努力学习的，诸如C++, Java, Python等语言，被称为&lt;strong&gt;GPPL。是General Purpose Programming Language的简称。也就是所谓的“通用目标语言”。&lt;/strong&gt;顾名思义，通用目标语言没有把功能限制在特定领域中，相较DSL更灵活，可以完成更多的事情，甚至可以说是任意逻辑（嗯，这句话细究起来，又可以写一篇新文章了），但代价就是：语言本身操作起来更灵活，也更复杂。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;整体而言，越来越多的DSL的出现，也是编程语言发展的一大趋势。&lt;/strong&gt;比如，在现在大火的人工智能界，很多人就认为，使用现有的语言做人工智能算法，太麻烦了。人工智能专家要花很多时间，来处理和人工智能算法无关的逻辑上。发明一个人工智能领域专有的DSL，近乎是必然。很有可能，我们在未来，还将看到医学领域特定的DSL，生物学领域特定的DSL，化工领域特定的DSL，物理学领域特定的DSL，等等等等。&lt;/p&gt;
&lt;p&gt;另一方面，在未来，使用GPPL的工程师们——也就是真正计算机专业的同学们，一个很重要的任务，就是开发DSL。开发出的这些DSL，是给其他领域的专家，或者业务专员使用的。还记得我在&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-03-18/"&gt;《学算法有什么用？唉，对你来说，可能真没用》&lt;/a&gt;所说的吗？&lt;strong&gt;“分工”本身就是经济学的基础概念之一，是我们这个世界能够良性运转逐渐发展的诸多核心规则之一。&lt;/strong&gt;这种GPPL和DSL越来越清晰的分层，也是“分工”这一经济学概念在编程语言界的体现：）&lt;/p&gt;
&lt;p&gt;当然，对于GPPL，也有很多发展趋势。比如动态性，比如对函数式编程的支持，比如对并发的支持，等等等等。有机会，我再向大家总结：）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;对于计算机专业的同学来说，语言只是一种工具而已。学习语言的目的，不是对细微的语言特性和语法糖如数家珍，关键还是要应用语言，解决实际的场景问题。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;很多同学会问，十年后，什么语言最火？&lt;strong&gt;很有可能，十年后最火的语言，现在还没出现呢：）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;大家加油！：）&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-03-25/readme.md" rel="alternate"/></entry><entry><id>2019/2019-03-21/readme.md</id><title>新西兰恐袭，疯狂删帖的小编，背锅的算法工程师，以及“技术优越主义”</title><updated>2019-03-21T00:00:00-07:00</updated><content>&lt;h2&gt;新西兰恐袭，疯狂删帖的小编，背锅的算法工程师，以及“技术优越主义”&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当地时间2019年3月15日下午1点40分左右，新西兰基督城发生恐怖袭击。已确认有50人遇难，另有50人严重受伤。遇难者不乏儿童，妇女和老人。&lt;/p&gt;
&lt;p&gt;相信这个新闻，大多数人都已经知晓了。在这里再简述一下大致经过。3月15日下午，新西兰的两座著名清真寺，先后遭到枪手袭击。枪手对手无寸铁的民众进行扫射，包括对街道的来往车辆进行扫射。随后，基督城医院也发生了枪击。同时，警察在嫌犯的两辆汽车上发现了大量汽车炸弹，所幸没有引爆。奥克兰火车站和商场附近也发现了疑似爆炸包裹，但没有相关伤亡报告。至今，警察已经抓捕了4名嫌犯。&lt;/p&gt;
&lt;p&gt;或许是新西兰这个国家本身离国际政治的漩涡较远；或许是中国民众对新西兰的熟悉程度远没有美国强烈。不管怎样，我发现这个事件在中文媒体上，并没有引发太大的讨论。但是，目测，站在国际历史的角度，这个事件将产生深远影响。事件本身已经再次带动很多国家对“白人优越主义”这一极端思想的讨论和控制。恐袭后，新西兰的枪支卖到脱销，但与此同时，就在当地时间3月21日，新西兰政府改写了法律，实施了“禁枪令”。这些事情不仅对新西兰产生了巨大影响，更进一步将对世界范围对枪支控制问题的态度产生影响。另外，由于一名嫌犯已确认是澳洲国籍，这也使得新西兰和澳洲这两个看似不太介入国际事务，在一般民众看来是super safe的国家，产生了微妙的变化。&lt;/p&gt;
&lt;p&gt;但是，作为一个技术向的公众号，这些政治，经济，世界格局变化相关的问题，不是我想讨论的重点。整个事件有一个更加与众不同的地方，和技术息息相关，甚至，在我看来，有可能引发技术世界的震荡。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在这次恐袭事件中，一名嫌犯，头戴一个配备了go pro的头盔，在Facebook上直播了枪击过程，画面极其血腥残酷。待Facebook发现事态异常，做出反应，封禁了凶手的账号，整个视频已经在网上直播了17分钟。&lt;/p&gt;
&lt;p&gt;对于整个硅谷，这一切还只是一个开始。&lt;/p&gt;
&lt;p&gt;很多同学可能并不了解，即使是Facebook, Google这些国外平台，也是拥有着一个庞大（或者说是相对庞大）的审核队伍的。这些审核人员，每天处理的，就是对违反平台规范的内容进行“删帖”处理。通常，这些规范包括：色情内容；盗版内容；宣传仇恨或者极端思想的内容；极度反人性的内容，等等等等。&lt;/p&gt;
&lt;p&gt;我在这里列举的这些内容规范，看似很容易。实际上，每一个标准都蕴含着巨大的灰色空间。比如：什么是色情内容？露点就是色情内容？那断臂的维纳斯怎么算？而另一方面，很多不露点的视频，反而更具色情意味，对青少年拥有更强大的诱惑力和破坏力。这个问题本身就是一个很深刻的问题，甚至可以专门做成学术研究了。但在实践中，色情和非色情的分界线到底在哪儿？在这些审核人员的主观判断中。&lt;/p&gt;
&lt;p&gt;其实，在Google离开中国之前，由于中国的法律原因，Google中国就拥有一支庞大的“鉴黄师”团队。我曾经认识一个同学，还在本科时期在这个团队里实习过。嗯，是的，这个团队不做技术工作，天天观摩不良信息内容。有兴趣的同学，可以在网上搜索“鉴黄师”这个职位，这个职位现在依然存在。甚至，很多这些大企业大平台的工作人员，了解到了其中巨大的需求，辞职创业，提供这种“审查”服务。毕竟，这种“审查”工作所需要的人员素质，和这些IT巨头整体需要的人员素质，拥有着巨大的差异。外包，或许是最划算的。&lt;/p&gt;
&lt;p&gt;说回新西兰恐袭，在凶手在Facebook上直播了17分钟之后。这段视频在互联网上真真正正的火了。从某一个角度看，这近乎是人类历史上第一次从凶手的角度进行的相对完整的直播杀人视频。在Facebook这一个平台上，这段视频的上传量，在24小时内，就达到了150万次。注意，是上传量，不是播放量！同时，被Facebook拦截的这段视频的上传数，达120万次。这还仅仅是Facebook这一个平台。&lt;/p&gt;
&lt;p&gt;而实际上，这段视频传播最广的平台，是宇宙第一视频网站——Youtube。但是，Youtube官方至今都拒绝透露，他们究竟删除了多少相关的这段视频。可以肯定的是，这段视频上传的频率，是以毫秒为单位计算的。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;很多同学一定会想，难道不能使用人工智能技术自动鉴别这段视频吗？&lt;/p&gt;
&lt;p&gt;事实上，如果大家上传的视频都是原始版视频，使用自动化技术鉴别它是极其容易的，根本不需要动用人工智能。对视频文件计算一个哈希值，直接匹配就好。但问题的关键是，up主们知道这段原始视频一定被禁止上传，所以想出各种各样的方法“改编”视频。&lt;/p&gt;
&lt;p&gt;这其中的方法，包括：或者改变视频的分辨率；或者对视频进行剪辑，截取部分内容；或者为视频添加水印；或者在其中插放其他过场动面或者解说。“人道”一些的up主，会给视频中的部分内容打上马赛克 —— 但是，这无法改变这段视频宣扬暴力的实质，反而为视频的自动化审查添加了巨大的麻烦。甚至，有的up主，动用更加现代化的工具，将视频中的人物头像，都修改成了动物头像。整个视频看起来就是在打电子游戏。呵呵，是的，我们的人脸识别技术可以轻易做到这一点，但是，鉴别技术却无法识别，这到底是一段“宣扬暴力的真实杀人直播”，还是一个16岁小孩卧室中的电子游戏直播。&lt;/p&gt;
&lt;p&gt;由于这段视频上传量太大，Youtube团队还是采取了史无前例的措施。过早的启动了自动化人工智能工具，来自动识别这段视频。如果有机器学习背景的同学都明白，使用机器学习解决这个问题，是一个典型的分类任务，更进一步，是一个二分类任务。机器只需要识别每段视频，是或者不是新西兰枪击案直播，就好了。但是，这个识别过程并不容易。一方面，视频数据本身，相比图像数据，数据量高出了太多，整体数据处理规模上升了好几个台阶；另一方面，要想训练出一个性能优良，识别率高的模型，不是写一两行代码就能搞定的事情，需要算法工程师们夜以继日的调参，测试。这绝不是一个在24小时内可以搞定的任务。但Youtube团队在24小时内，决定使用机器接手。&lt;/p&gt;
&lt;p&gt;这么短的时间，上线的“智能”，一定有巨大的错误率。这个错误，或者是漏判，即本来是枪击视频，但是机器没有识别出来；或者是误判，即本来不是枪击视频，机器却误以为是枪击视频。了解机器学习的同学应该了解，这两类错误是互相牵制，此消彼长的。通过调节参数，减少了一方错误，就会增加另一方错误。在这个事件中，明智的选择，显然是要尽量降低漏判的几率，所以，得到的结果，就是产生了大量的误判。在一段时间中，Youtube很多无辜的up主受到了牵连，无法上传正常的视频。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这样的危机，在Youtube内部，也不是第一次发生了。近乎就在几个月前，就有很多家长投诉Youtube，有up主上传小猪佩奇的动画片，但看到一半的时候，会突然播放恐怖的，怂恿儿童自残甚至自杀的片段。这些片段可能只会持续几秒钟。现代的人工智能技术还完全无法检测到一段正常视频中间，是否夹杂了这样的片段。要想识别出含有这种片段的视频，近乎，只能靠举报，之后删除。可是，这样的事后弥补，伤害显然已经造成了。更可悲的是，即使我们知道了有这样的行为，我们依然无法自动化的事前预防。因为这种“极端思想的宣扬”，可以以任何一种画面形式表达出来。相较而言，大吹大擂的人工智能，真的是人工智障。&lt;/p&gt;
&lt;p&gt;要想事前预防，近乎只能进行人工事前审查。但对于Youtube这种规模的视频网站而言，这几乎是不可能的。2017年的数据，Youtube每分钟就有400小时的视频上传，这个数据还在逐年，甚至是逐日攀升。&lt;/p&gt;
&lt;p&gt;人工智能完全无法应付这项工作。至少现在不能，在短时间内，也很难完成。这是一个明显的“强人工智能”才能解决的例子。虽然机器只需要回答yes或者no，但是为了能够理想的回答好这个问题，机器需要拥有和人类一样的经验力，推导力，主观判断力，甚至是直觉。事实上，不要说视频了，即使是图片，现在我们还只是在为机器可以更好地识别图片中到底是什么动物，什么场景而庆祝。但这些任务，幼儿园的小朋友都能分分钟完胜那些上亿美元投资的项目。&lt;/p&gt;
&lt;p&gt;在新西兰枪击案发生三天之后，新西兰总理更是直接把矛头对准了 Facebook，为什么枪手直播了长达17分钟之久之后，Facebook 才做出反应？&lt;/p&gt;
&lt;p&gt;Facebook 为此已经忙作一团。甚至，已经开始探讨是否要停止“直播”业务。毕竟，开展直播这样一个服务容易。但要能即时，准确的辨别直播内容是否合法，是否在宣扬极端思想，这已经不是技术水平上难了几个数量级的问题了。而是，人类现代的科技，根本做不到。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;让整件事情朝着更坏的方向发展的，则是所谓的推荐系统。事件发生初始，这段直播视频只是产生了一定的热度。毕竟，这是一个国际关注的事件，与此同时，人总会有一定的猎奇心理。但是，推荐系统则直接起到了推波助澜的作用。&lt;/p&gt;
&lt;p&gt;如果你去学习专业的推荐系统的知识，你会遭遇大量宛如天书一般的公式。但是，如果用人话把推荐系统的原理说出来，那么非常简单 —— 别人喜欢的东西，特别是你的朋友，你的亲戚，或者和你相似的人喜欢的东西，那么八成也就是你喜欢的东西，推荐系统就推荐给你。在整个事件中，推荐系统收集到了越来越多的人对于这件事情关注的热度，之后推波助澜的又将这些视频推荐给了更多的人。推荐系统忠实地履行着自己的算法，但是，很多人开始指责系统为什么会被设计成推荐这样的视频？算法工程师们莫名奇妙地背了一口大锅。&lt;/p&gt;
&lt;p&gt;可是，推荐系统在运行过程中有一个基本假设，就是内容本身，应该是安全的。这就好比在我们讨论吃什么的时候，不会思考我们所选择的食材，可能有一部分有毒一样。然而，在互联网的世界中，这个假设其实根本就不成立。之前文章已经分析了，实时准确地辨别视频内容是否安全，还不是人类在当下这个时代所掌握的科技。&lt;/p&gt;
&lt;p&gt;如今，很多媒体在报道新西兰事件中，需要小心的使用关键词，才能不被推荐系统带歪，把自己的新闻和有可能再次卷土重来，或者本身就没处理干净的枪击案直播视频联系起来。虽然有些夸张，但我已经隐隐看到了人类无法控制机器，畏惧机器，小心翼翼的在机器指定的规则下苟活的影子了。&lt;/p&gt;
&lt;p&gt;从另外一个角度看，整个社交网络，突然变得和“核弹”一样。人类制造了它，却无法驾驭它。恐怖主义正在以一种新的方式，将社交网络武器化。这种武器的伤害，直指人类的精神世界。但是，貌似，现如今，我们还不能控制这种武器带来的伤害；而关闭所有的社交网络，显然也不可行。社交网络好像另一个“潘多拉的魔盒”，已经被打开了，却再也关不上。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;实际上，在技术的世界中，早就有一派人士，一直在大声疾呼：很多技术并没有经过有效的“安全”验证，就已经被极大规模地运用在了各个领域。诚然，这些技术一定极大的方便了我们的生活，但是这样的方便背后，究竟牺牲了什么，我们还不知道。或者我们知道，但暂时选择了无视。&lt;/p&gt;
&lt;p&gt;对于很多“传统”行业，比如实施一个建筑工程，或者设计一款新的车型，或者对一片新的矿区进行勘探，我们所需要付出的事前准备工作和安全验证工作，都是巨大的，繁琐的。连带一系列安全问责机制，已经在事前被建立明确了。相较而言，上马一个互联网项目，事前的安全准备工作近乎为0。我们甚至完全没有与之匹配的标准，流程，和心理准备。与此同时，公认的，大多数已有的互联网项目中，对安全的控制，都是远远不足以承载这个项目本身的重要程度。这是一个很残酷的事实。&lt;/p&gt;
&lt;p&gt;人类发展技术，却忽视技术本身在人类社会中应用可能产生的安全风险，我将之称为“技术优越主义”。新西兰枪击案的凶手大力鼓吹“白人优越主义”，是在宣扬白色人种族裔优于其他人种；那么我们当今世界很多人所追求的技术发展，如果稍微深思一下，确是隐含着技术优于人类的思想。&lt;/p&gt;
&lt;p&gt;我热爱技术，并一直关注着技术的发展。但我不希望，技术，在我，和我们的关注下，一步一步变成魔鬼。&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-03-21/readme.md" rel="alternate"/></entry></feed>