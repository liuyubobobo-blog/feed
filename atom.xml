<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh-CN"><id>https://github.com/liuyubobobo/my-blog</id><title>是不是很酷</title><updated>2021-01-26T12:37:35-08:00</updated><author><name>liuyubobobo</name><email>liuyubobobo@gmail.com</email></author><link href="https://github.com/liuyubobobo/my-blog" rel="alternate"/><generator uri="https://github.com/StdioA/bobobo-feed" version="0.0.1">bobobo-feed</generator><icon>https://www.gravatar.com/avatar/c4c67099540a54bd845d8e404fe8cc41</icon><subtitle>坚持有质量的技术原创，用技术人的视角看世界</subtitle><entry><id>2021/2021-01-24/readme.md</id><title>追求热，并不靠谱；追求热爱，则靠谱得多</title><updated>2021-01-24T00:00:00-07:00</updated><content>&lt;h2&gt;追求热，并不靠谱；追求热爱，则靠谱得多&lt;/h2&gt;
&lt;p&gt;这是在我的知识星球上，两个同学问我的，关于 Offer 选择的问题。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;匿名同学 A：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;bobo 老师你好，我最近面临找工作选择的问题。&lt;/p&gt;
&lt;p&gt;我个人目前所从事 web 后端开发，工作 5 年左右了。我自己的兴趣点偏底层一点，比如 Linux / Unix，也非常喜欢计算机科学的所有知识，初二就开始自学 C 和 Basic 了。所以，我其实不是特别喜欢 web 后端开发。&lt;/p&gt;
&lt;p&gt;目前，我面试了一些 A 轮 B 轮公司，也拿到一些 Offer。但我其实比较中意一家外企的 Offer。这是一家德国华人在德国创办的车联网企业，全球 400 人，上海 20 人+。&lt;/p&gt;
&lt;p&gt;我的岗位是：C++ 和 JavaScript，入职后是去做一个他们和宝马合作的项目，工作地点也在宝马，面试官就是宝马的技术官。&lt;/p&gt;
&lt;p&gt;我喜欢的原因有几点:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;没有任何加班，有时间做自己的事情；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;面试我的宝马技术是一位大牛，从他问我的技术问题我能感觉出来。我觉得我能学到很多东西，毕竟是在宝马；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;待遇也还 ok，是其他 Offer 里面最高的；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;他们目前在开发一个 lua 的解释器，用在车载系统里面，我比较感兴趣。正好我喜欢底层一点的东西。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我就是担心，我没有从事 web 方面的工作，以后出来不好找工作，把路给走窄了。&lt;/p&gt;
&lt;p&gt;但是我又觉得在宝马里面接触到的技术都应该不会差。&lt;/p&gt;
&lt;p&gt;想听听 bobo 老师您的意见。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;bobo 老师的回答：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可以看出来，你很向往这家企业。整体，我是支持你去这家外企的。&lt;/p&gt;
&lt;p&gt;如果我是你，我也会选择去这家外企。&lt;/p&gt;
&lt;p&gt;除了你说的没有 996，对相关技术感兴趣等原因，我再说一些我考量的理由：&lt;/p&gt;
&lt;p&gt;1）体验一下在一个跨国企业做事情的感觉；在一个全球化的时代，真的体验一下什么叫全球化；&lt;/p&gt;
&lt;p&gt;2）体验外企的工作环境是怎样的。关键不是有没有 996 的问题，而是你的人生多了一份新的，不一样的经历；从此，你看待问题将更全面，也更深刻；&lt;/p&gt;
&lt;p&gt;3）如果以后有机会能 transfer 到德国工作生活一段时间，那你的人生经历就更丰富了。我有一些同学在德国的，很好的国家；&lt;/p&gt;
&lt;p&gt;4）在一个小的企业，体验成长。更何况，只有现在的小企业，才能有更高的增长预期。所有的大企业，都是曾经的小企业。搞不好，五年后十年后，你还财富自由了呢；&lt;/p&gt;
&lt;p&gt;5）车联网也好，智能车也好；新能源也好；我都很看好。很显然，现在传统车企也罢，比如宝马奔驰保时捷；新兴技术公司也好，比如苹果谷歌特斯拉，都在进军这个领域。&lt;/p&gt;
&lt;p&gt;&lt;img alt="car" src="https://github.com/liuyubobobo/my-blog/raw/master/2021/2021-01-24/car.gif" /&gt;&lt;/p&gt;
&lt;p&gt;我对这个领域本身无限看好。我不认为有巨大的行业风险，当然前提条件是你的技术水平能力过硬。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;至于你说的担心把路走窄了。&lt;strong&gt;为什么走 web 就不是把路走窄了呢？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;你担不担心以后遍地都是搞 web 的，但大厂都搞物联网，车联网，生物信息，人工智能，5G 技术，网络安全，等等等等；搞 web 的，没人要？&lt;/p&gt;
&lt;p&gt;我不是说未来一定是这样，我只是说&lt;strong&gt;每一个选择都有风险&lt;/strong&gt;。衡量风险没有问题，但&lt;strong&gt;风险从来都是和机遇连在一起的&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;很多时候，&lt;strong&gt;一个没有一丁点儿风险的决策，是最差的决策。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;什么叫年轻？年轻就是敢承担风险；明知山有虎，偏向虎山行；大不了浪费两年。&lt;/p&gt;
&lt;p&gt;我年轻，才 35，两年算个屁，老子还能活 100 年。&lt;/p&gt;
&lt;p&gt;我 35 了，是这个心态。我估计你比我年轻。勇敢一点儿。&lt;/p&gt;
&lt;p&gt;更何况，摆在你面前的这个选择，在我看来，真不是什么虎山。&lt;/p&gt;
&lt;p&gt;当然了，最终决策需要由你做出。我之前也说过，看好一个行业，和每一个个体的发展，关系也没有那么大。可以参考我的这篇文章后半部分：什么都懂，啥都不精，怎么办？&lt;/p&gt;
&lt;p&gt;关键还是，要成长，要进步。只要能保持这一点，相信我，前途无量。&lt;/p&gt;
&lt;p&gt;P.S. 这个回答只是针对你面临的这个选择，我的一些思考。具体这个企业靠不靠谱，会不会是骗子，这类问题，你还需要再做一下尽调。我简单查了一下，问题应该不大。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;加油！：）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;匿名同学 B：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;波波老师好，想听听您的建议。&lt;/p&gt;
&lt;p&gt;Offer 选择，是选择阿里内部系统部门？还是成都京东海外业务部门？&lt;/p&gt;
&lt;p&gt;应届生，Java开发工程师。&lt;/p&gt;
&lt;p&gt;阿里白菜价，13-16 +10w 人才补贴（一次性，第一年有）&lt;/p&gt;
&lt;p&gt;成都京东 (16+4)*14 sp&lt;/p&gt;
&lt;p&gt;理性告诉我应该选阿里，平台大，技术好，但是是内部系统&lt;/p&gt;
&lt;p&gt;但是真正内心想选京东，因为成都会舒服一点，且没有那么大的心理压力。我在阿里实习过一段时间，每天都很压抑。&lt;/p&gt;
&lt;p&gt;纠结的点在于：不知该遵循理性去阿里（算下来毕竟多个7-8w），还是应该遵从内心去京东？&lt;/p&gt;
&lt;p&gt;害怕选了阿里，每天心里压抑；&lt;/p&gt;
&lt;p&gt;害怕选了京东，钱少很多。而且自己也不是成都人，也不是绝对在成都定居。&lt;/p&gt;
&lt;p&gt;我是湖北人。以后还是最想跳槽回武汉定居；其次 成都也在考虑范围；杭州 大概率不会。 &lt;/p&gt;
&lt;p&gt;即将踏入社会，心中很多纠结和顾虑。特此发帖跪求指教。麻烦波波老师了！&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;bobo 老师的回答：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果是我，我选择成都。&lt;/p&gt;
&lt;p&gt;成都我喜欢得不得了；恰好，成都也是你喜欢的风格；&lt;/p&gt;
&lt;p&gt;&lt;img alt="hotpot" src="https://github.com/liuyubobobo/my-blog/raw/master/2021/2021-01-24/hotpot.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;你并不考虑以后在杭州发展，但考虑可能在成都发展；就算你最终决定不在成都发展，这一条也是打平的；&lt;/p&gt;
&lt;p&gt;你不喜欢阿里的工作环境，这是最关键的，也是最致命的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一个不喜欢的，抵触的工作环境，怎么能做出成绩？怎么能进步？怎么能有所发展？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;就因为每年多 8 万块钱吗？&lt;/p&gt;
&lt;p&gt;因为刚刚学生毕业，我很能理解，8 万块钱似乎很多。但是，相信我，过 10 年后回头看，8 万块钱可能对你不值一提。&lt;/p&gt;
&lt;p&gt;更重要的是，一个舒适的工作环境，愉悦的工作氛围，自己身心的健康，这些，是 80 万，800 万，都买不来的。&lt;/p&gt;
&lt;p&gt;当然，我只是基于你提供的这些信息，根据我的偏好，做出的判断。只是供你参考。最终决定，还是要你做出。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;很多时候，我有些害怕回答这种选择的问题。&lt;/p&gt;
&lt;p&gt;因为选择之所以是选择，大概率的，就是因为两个选项，没有绝对的优劣，不管选择谁，都在舍弃一些东西。&lt;/p&gt;
&lt;p&gt;但人，都是有损失厌恶的，谁都不愿意舍弃。&lt;/p&gt;
&lt;p&gt;更重要的是，很多时候，过十年再看，这两个选择，可能真的一个远超另一个。但是，在当下，谁也看不透。&lt;/p&gt;
&lt;p&gt;二十年前，谁也不知道诺基亚即将倒塌；而苹果会成为世界市值第一的企业。二十年前，如果你同时接到诺基亚和苹果的 Offer，理性的选择，近乎一定是诺基亚。&lt;/p&gt;
&lt;p&gt;但后来发生了什么，大家也看到了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;所以我一直强调，&lt;strong&gt;做选择的依据：永远是遵从自己的内心，而不是尝试预测未来。&lt;/strong&gt;因为，其实谁也预测不了未来。&lt;/p&gt;
&lt;p&gt;去问自己：你到底喜欢什么？你愿意舍弃什么？&lt;strong&gt;然后承认，这个世界，存在运气这么一个东西。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我的经验是，这样做选择，至少内心还是平和的。如果运气眷顾你，皆大欢喜；如果运气没有青睐你，你也能坦然面对。&lt;/p&gt;
&lt;p&gt;更何况，&lt;strong&gt;所谓的好运，可能会以一种你现在想象不到的方式降临。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可能你即将遇到的好运，不是有一个高薪的工作，&lt;/p&gt;
&lt;p&gt;而是遇到一群志同道合的朋友；&lt;/p&gt;
&lt;p&gt;遇到一个值得一生守候的人；&lt;/p&gt;
&lt;p&gt;或者是无意中，发现了自己都不曾发现的兴趣和天赋。&lt;/p&gt;
&lt;p&gt;而这些，恰恰是生活最有意思的地方。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;不知道大家有没有看过 Shoe Dog。是 Nike 的创始人菲尔奈特 Phil Knight 的回忆录。&lt;/p&gt;
&lt;p&gt;&lt;img alt="shoedog" src="https://github.com/liuyubobobo/my-blog/raw/master/2021/2021-01-24/shoedog.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;书的前半部分一直讲他的潦倒失意，终于，来到了改变他人生的时候。&lt;/p&gt;
&lt;p&gt;Nike 的创始人改变人生的时刻是什么？肯定是创立了耐克，从此人生开挂，对不对？&lt;/p&gt;
&lt;p&gt;不是的。&lt;/p&gt;
&lt;p&gt;菲儿奈特说，他改变一生的时刻，是遇见了帕克斯小姐。&lt;/p&gt;
&lt;p&gt;一段紧张又雀跃的时光后，最后终于成功地让她成为了奈特夫人。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;加油！：）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;回答问题后的一些小思考：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;看到很多同学对选择这么纠结，我真的挺理解的。&lt;/p&gt;
&lt;p&gt;但这又让我想起了最近，我和一个同学聊天儿的内容。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;在最近的几年，我看见的所有转专业到 CS 的同学，尤其是海外的同学，近乎都是机械专业的。&lt;/p&gt;
&lt;p&gt;我一直觉得很奇怪。前几天和一个转专业的同学聊天儿，才明白，因为大概 15 年 16 年一类的，国家吹过一阵子“工业 4.0” 的概念，使得机械专业是热门。在那几年，有很多优秀的的学生，选择了机械专业。&lt;/p&gt;
&lt;p&gt;说实话，这种事情哪个时代都有。比如我上学的时候，比较热的是生物专业，各种声音都在告诉你，21 世纪是生物学的世纪。&lt;/p&gt;
&lt;p&gt;我见过很多和我同龄的优秀同学，因此选择去读生物专业。&lt;/p&gt;
&lt;p&gt;当然，生物专业也很好，但很显然，在近十来年，发展并没有大家想象的那么快，至少没有计算机，互联网等领域发展得好。我也见过不少生物的同学，最终决定转行。&lt;/p&gt;
&lt;p&gt;转行虽然痛苦，但优秀的同学总归是优秀的。我见过很多牛人，转行到其他行业，甚至能碾压那个行业的科班。&lt;/p&gt;
&lt;p&gt;经过这么多年，我总结下来，如果你不知道选择什么专业，做什么方向，去选择基础学科，大概率不会错。比如数学，比如物理。&lt;/p&gt;
&lt;p&gt;我中学时代近乎 90% 最优秀的那波同学，都是去读基础学科，等着具体要选择一个方向的时候，转专业快的吓人，而且还能瞬间碾压一直学习那个专业的同学。我觉得一点儿不夸张。&lt;/p&gt;
&lt;p&gt;这个路子不仅仅适用于专业的选择。放到计算机这个专业里，也适用。&lt;/p&gt;
&lt;p&gt;如果你不很确定自己的技术方向，不知道劲儿往哪儿使的话，那就去学习基础，基本不会错。比如算法，比如数据结构，比如操作系统，比如网络，等等等等。&lt;/p&gt;
&lt;p&gt;当然，大家在学习的过程中，最好还是能慢慢找到自己擅长的，喜欢的细分领域，才能扎进去。&lt;/p&gt;
&lt;p&gt;但总之，&lt;strong&gt;不要总想着哪个热，学哪个。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我看过的很多事情都在告诉我：&lt;strong&gt;追求“热”，并不那么靠谱；追求“热爱”，则靠谱的多。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;乔布斯曾说：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The only way to do great work is to love what you do.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="jobs" src="https://github.com/liuyubobobo/my-blog/raw/master/2021/2021-01-24/jobs.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2021/2021-01-24/readme.md" rel="alternate"/></entry><entry><id>2021/2021-01-11/readme.md</id><title>如何阅读源码</title><updated>2021-01-11T00:00:00-07:00</updated><content>&lt;h2&gt;如何阅读源码&lt;/h2&gt;
&lt;p&gt;这是在我的知识星球上，一个同学问我的问题。&lt;/p&gt;
&lt;p&gt;bobo老师，我现在在做一个区块链的项目，需要阅读 tendermint ( github 上的一个项目) 的源码。&lt;/p&gt;
&lt;p&gt;这是我第一次读一个比较大项目的源码，我想请教下，阅读源码有没有什么技巧，或者有什么坑需要避免的？&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;bobo 老师的回答：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;之前有很多同学问过我和源码阅读相关的问题。随便聊聊我的一些经验和想法。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;首先，如果你想读懂一个项目的源码，你首先应该了解这个项目背后的基本技术原理。&lt;/p&gt;
&lt;p&gt;举个简单的例子，如果你想读懂 Java 标准库里 TreeMap 的源码，你首先要明白红黑树是怎么回事儿，要想读懂 HashMap 的源码，你首先要明白哈希表是怎么回事儿，否则不可能读懂。&lt;/p&gt;
&lt;p&gt;很多同学说学了我的课程，再去看 Java 源码，或者 C++ STL 源码就容易多了，就是这个道理。&lt;/p&gt;
&lt;p&gt;当然，很多复杂的工业项目或者商业级别的实现，和基本原理之间还是有差距的。但&lt;strong&gt;了解基本原理是基础中的基础。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可能在真实的项目实现中，在基本原理的基础上，又套了很多别的东西，比如诸如迭代器的使用；一层一层的抽象设计和设计模式的使用；对更加广义的数据类型的处理，或者一些优化方案。&lt;/p&gt;
&lt;p&gt;从某个侧面来讲，其实这些也是基本原理，只不过是不那么基本的基本原理而已。如果你知道什么是迭代器；知道它在使用什么设计模式；知道它还要处理什么数据；知道它在怎样优化，知道这些基本原理，那么看它的具体实现将会顺畅很多。&lt;/p&gt;
&lt;p&gt;这个道理适用于读所有源码。要想读 Linux 源码，就要懂操作系统的基本原理。所以，所有科班学习操作系统，一上来都是在学习操作系统概念，就是这个原因。没有人学习操作系统，一上来就拿出内核源码看的。&lt;/p&gt;
&lt;p&gt;同理，如果想读 sklearn 源码，就要懂机器学习的基本算法；想读一个编译器的源码，就要了解基本的编译原理。当然，有的时候，我们可能只专注于一部分实现的源码，比如只专注于 GC 回收部分，那至少 GC 回收的基本机制要懂。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;源码是原理的具体实现，而不应该反过来，通过源码理解原理。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我甚至提倡，在时间充裕的情况下，自己先尝试实现一个小型的项目原型。所谓的造轮子。通过造轮子，我们才能更好的，通过实践去深刻理解原理，进而理解原理和具体实现之间的差距。再去看优秀的源码实现，才能更加深刻地理解这些优秀的源码的精巧之处。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;在这个基础上，大多数时候，阅读源码的障碍，在我看来有三点。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一，是抽象层次过高。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所以，你可以看到，很多源码解析的书，都会先画一个源码的框架结构图，整个框架有哪些组件，涉及哪些类。哪些类最基本，在这个基础上又有哪些类；哪些层和哪些层是怎样的关系，等等等等，而不是一下子就深入到代码层，就是为了扫除这部分障碍。&lt;/p&gt;
&lt;p&gt;通常，对于稍微有体量的项目，&lt;strong&gt;理清架构都是第一件事。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当然，如果你要看的源码不是教科书级别的，没有相应的系统书籍资料，就只能看源码的文档或者注释了，这本身也是好的开源项目的重要标准。&lt;/p&gt;
&lt;p&gt;不过，一些常见的架构和设计模式，自己也要了解。因为文档和注释通常不会深入到原理层。&lt;/p&gt;
&lt;p&gt;如果文档或者注释不够好，&lt;strong&gt;你可以找对这个源码比较了解的人交流，或者直接和作者交流；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当然，有的时候，好的文档可遇不可求，此时，我们只能自己做调试跟踪，来一点一点自己整理出来整个代码的运行结构了。这个过程可能涉及一些工具的使用，在这里，我就不对这些工具做具体介绍了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二，是数据的流动和变化&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所有的程序，归根到底，都是在处理数据的。&lt;/p&gt;
&lt;p&gt;或者是对原始数据进行处理，计算出我们想要的结果，这就是所谓的&lt;strong&gt;算法&lt;/strong&gt;；&lt;/p&gt;
&lt;p&gt;或者是存储数据，以备未来快速的调取，这就是所谓的&lt;strong&gt;数据结构&lt;/strong&gt;；&lt;/p&gt;
&lt;p&gt;当然，数据结构还可以作为很多算法的核心支撑，这就是所谓的&lt;strong&gt;算法和数据结构不分家&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img alt="comic" src="https://github.com/liuyubobobo/my-blog/raw/master/2021/2021-01-11/comic.png" /&gt;&lt;/p&gt;
&lt;p&gt;虽然 Niklaus Wirth 在 1976 年提出了著名的 &lt;strong&gt;Programs = Algorithms + Data Structure&lt;/strong&gt;，即所谓的 &lt;strong&gt;程序 = 算法 + 数据结构&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img alt="cover" src="https://github.com/liuyubobobo/my-blog/raw/master/2021/2021-01-11/cover.png" /&gt;&lt;/p&gt;
&lt;p&gt;但是，我的经验是，除非你要阅读的是算法实现的源码，否则，&lt;strong&gt;对于大多数框架源码或者工程源码来说，数据结构比算法重要。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为什么？因为算法非常容易被很完整地封装起来，即使我们不理解内部的原理，但只需要大体知道它在做什么事情就好。一个排序算法就是完成排序，具体怎么排序的，在源码阅读的层面，我们不去关心，影响不大（甚至是完全没有影响）。&lt;/p&gt;
&lt;p&gt;但数据结构不同，&lt;strong&gt;数据结构是和整个程序的结构联系在一起的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;很多时候，我们都必须明确，数据在程序中到底是如何存储的，才能进一步理解他们是如何被调用的，如何流动的，如何被处理的。在这个过程中，核心数据结构的使用无处不在，分布在代码的各个地方。&lt;/p&gt;
&lt;p&gt;如果说架构设计和设计模式的使用，是代码的结构设计，那么这种结构设计就是一种显性的结构设计；&lt;/p&gt;
&lt;p&gt;而&lt;strong&gt;数据结构，在我看来，则是一种隐性的结构设计。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所以，Linus Torvalds 有这样的名言：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Bad programmers worry about the code. Good programmers worry about data structures and their relationships.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;翻译：烂程序员才关心代码，&lt;strong&gt;好程序员关心的是数据结构和它们之间的关系。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="quote" src="https://github.com/liuyubobobo/my-blog/raw/master/2021/2021-01-11/quote.png" /&gt;&lt;/p&gt;
&lt;p&gt;你看，Linus 作为系统内核的大神级领军开发者，会特意强调数据结构的意义，就是这个道理。&lt;/p&gt;
&lt;p&gt;当然，很多时候，源码的文档和注释可能并没有重视对数据结构的使用说明，此时，可能你就需要&lt;strong&gt;找对这个源码比较了解的人交流，或者直接和作者交流；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;三，就是代码中各种函数或者变量的具体表意。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;好的源码，其文档或者注释的全面程度，甚至可以当做课本来读。相信大家都接触过这种教科书级别的源码：10 行代码，100 行注释。&lt;/p&gt;
&lt;p&gt;大多数注释都在函数头，就是帮助你理清这个函数的语义到底什么，参数是什么意思，等等等等。&lt;/p&gt;
&lt;p&gt;更不用说，好的源码，变量名和函数名起的也是足够 self-explanatory 的。&lt;/p&gt;
&lt;p&gt;当然，如果你着手阅读的源码不是这样的话，你需要&lt;strong&gt;找对这个源码比较了解的人交流，或者直接和作者交流。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;家可以看到，在上面的总结中，我近乎每条都在说：可以&lt;strong&gt;找对这个源码比较了解的人交流，或者直接和作者交流。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;其实，大家如果在 github 随便找个不出名的源码，很难找到对这个源码熟悉的人；给作者发邮件或者提 issue，很有可能也不回。那我为什么老强调这一点？&lt;/p&gt;
&lt;p&gt;因为，之前很多同学问我源码阅读的问题，并非是要学习某个源码用，而是在自己的企业，着手一个项目，首先需要阅读源码，遇到了困难。&lt;/p&gt;
&lt;p&gt;此时，很多同学就觉得自己是不是哪里不太行？想提高“源码阅读能力”。&lt;/p&gt;
&lt;p&gt;我认为不是这样的。&lt;/p&gt;
&lt;p&gt;很多时候，大家阅读源码的困难，来源于没有提纲挈领地掌握整个项目的架构，没有掌握所使用的设计模式或者数据结构，而&lt;strong&gt;不是能力问题&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;此时，大家就应该去找维护这个项目的老员工，或者 leader，让他们给你讲明白，这个源码的“基本结构，基本原理”。&lt;/p&gt;
&lt;p&gt;当然，如果你能总结清楚自己到底卡在哪里，通过一个或者几个具体的问题，从一点出发，逐渐推导到全局，那就更好了。不过在我看来，这属于提问的艺术了。&lt;/p&gt;
&lt;p&gt;不管怎样，&lt;strong&gt;找到懂这个源码的人，甚至写这个源码的人，去交流，是正道；而不是想办法自己闭关修炼，提升所谓的“源码阅读能力”。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;最后提一句：从源码学习的角度，好的源码不见得使用的技术多么高深，而是文档完整，注释全面，函数名变量取得有意义，结构清晰的。&lt;/p&gt;
&lt;p&gt;否则，如非必要，这个源码很可能并无阅读学习的价值。&lt;/p&gt;
&lt;p&gt;这本身，也是我们写出好的代码标准。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2021/2021-01-11/readme.md" rel="alternate"/></entry><entry><id>2021/2021-01-10/readme.md</id><title>开发者赚钱方式总结</title><updated>2021-01-10T00:00:00-07:00</updated><content>&lt;h2&gt;开发者赚钱方式总结&lt;/h2&gt;
&lt;p&gt;偶然间看到的国外的开发者总结的程序员（技术）赚钱方式总结。我觉得总结得挺好的，分享一下。&lt;/p&gt;
&lt;p&gt;鉴于“赚钱”这件事儿有些敏感，有一些同学不喜欢看这类话题的讨论，所以错峰发布这篇文章。我的本意也并非引发焦虑，只是希望大家能够更多元化地看待这个世界。&lt;/p&gt;
&lt;p&gt;毕竟，这个公众号的主旨是：&lt;strong&gt;用技术人的眼光看世界：）&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;这个总结很简单，就是一张图片。&lt;/p&gt;
&lt;p&gt;&lt;img alt="money" src="https://github.com/liuyubobobo/my-blog/raw/master/2021/2021-01-10/money.png" /&gt;&lt;/p&gt;
&lt;p&gt;一共十条。&lt;/p&gt;
&lt;p&gt;详细地解读其中的每一条，可能都需要一篇很长的文章了。&lt;/p&gt;
&lt;p&gt;比如其中的 Blogging，就是写博客。但如何做好自己的 Blog，显然有更多值得探讨的地方。比如如何选择平台；如何选题；写什么；怎么写；如何让更多人看到你的文章，等等等等。&lt;/p&gt;
&lt;p&gt;这些具体内容，并不是这篇文章的主旨。感兴趣的同学，可以再去具体探索每一个方向里的各式各样的问题。网上相关的分享也挺多的。&lt;/p&gt;
&lt;p&gt;这篇文章主要借这张图片，给大家提供一个方向和思路，结合我的经验和看到的一些情况，做一个简单的分享。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;1. Working as Professional Developer&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;全职开发者&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;看到第一条是这个，让我觉得这个总结分外靠谱。&lt;/p&gt;
&lt;p&gt;现在很多文章都在鼓吹副业，当然，确实有很多人做副业很成功。但是我认为，更多的人还是靠主业成功的。这点我在我的文章：我们最终没有做海外电商 中总结过。&lt;/p&gt;
&lt;p&gt;确实，我们能看到很多人做副业能年入几百万；但讲真，我也能看到很多人的主业，也是年入几百万的。而如果我们进一步关注成功率，稳定性等指标，大概率是主业占优。&lt;/p&gt;
&lt;p&gt;很多同学可能比较年轻，所以身边的人大多职场刚起步，看不到这样的例子。&lt;strong&gt;但是过十年二十年，就不一样了。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;有一份好的主业的优势在于，大家能有一个好的平台，&lt;strong&gt;在一个大的平台上，直接去做更有影响力的事儿。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;自己去做微商，还在为多了几十几百的订单窃喜呢；但是在平台上，淘宝天猫抖音微信，聊的都是十几亿，几十亿的销售额，完全不一样。&lt;/p&gt;
&lt;p&gt;当然，这些销售数字不是你的薪水，但是你在参与一件更大的事情。这件事情是自己单枪匹马搞副业永远接触不到的。&lt;/p&gt;
&lt;p&gt;更何况，你不知道自己的这些经历，将来能给你带来怎样的机会。&lt;strong&gt;很多所谓的副业，其成功的基础，是有牢固的主业根基。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. Freelancing&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;自由职业&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在我看来，国外聊到 Freelancing，主要是指提供外包服务。当然，这里的“外包”不一定是给别人做一个网站或者 app 这类，很多时候，可能仅仅是提供一个技术支持，一次技术咨询，或者是解决一个具体的技术问题。&lt;/p&gt;
&lt;p&gt;这个公众号之前转载的耗子叔的文章：努力就会成功？陈皓在文章中举的一些例子属于这一类。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. Blogging&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;博客&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;国外的独立博客比较发达，当然，现在一些平台也做得不错，比如 medium。（虽然我觉得 medium 中的技术类博客做得不够好。）&lt;/p&gt;
&lt;p&gt;&lt;img alt="medium" src="https://github.com/liuyubobobo/my-blog/raw/master/2021/2021-01-10/medium.png" /&gt;&lt;/p&gt;
&lt;p&gt;相较而言，国内独立博客不够发达，但博客平台就很多了。最典型的就是公众号。除此之外，知乎，小红书，简书，掘金，等等等等，都算。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. Running a Youtube Channel&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Youtube 主播&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这一条在我看来和 Blogging 是一样的，本质是提供内容，但主要是以视频的方式来提供。&lt;/p&gt;
&lt;p&gt;视频方面，国外以 Youtube 为主。国内类似平台似乎更多一些，比如 B 站，抖音，微信的视频号，包括知乎，我看也开辟视频功能了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5. Living Coding &amp;amp; Streaming&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Coding 直播&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这一条有一部分和 Youtube 主播是重合的；不重合的那一部分，在我看来国内似乎不太火。当然，我也没有特别关注国内的直播平台写代码的多不多，所以只是我的感觉。&lt;/p&gt;
&lt;p&gt;对此，我有时间写一篇文章聊聊国外的 coding 直播是怎么个模式。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6. One-on-One Mentoring&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一对一的导师指导&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;据我所知，这种模式在国内也不火。相较而言，在国外则普及很多。&lt;/p&gt;
&lt;p&gt;比如如何转专业，可能是很多同学困惑的问题。在国内，基本上大家在网上查一查，就开始动手了。但很多同学的迷茫也来自于此：自己干一阵子，不能肯定自己的方向是不是正确的；自己的进度是不是合理的；自己的效率是不是最优的，等等。&lt;/p&gt;
&lt;p&gt;此时，如果有一个有经验的过来人，能够定期帮助自己总结一下自己的现状，提一些建议，也给出一些肯定，其实能少走不少弯路。&lt;/p&gt;
&lt;p&gt;同理，很多人在职场发展上也需要类似的职场导师；在创业上也需要类似的创业导师；乃至需要人生导师。&lt;/p&gt;
&lt;p&gt;在国内，“人生导师”似乎有点儿贬义词的意味，但是我知道国外很多人都有人生导师，定期帮助自己审视一下自己的人生发展现状。甚至我认识一个外国朋友，创业就做这个项目，做得挺好。&lt;/p&gt;
&lt;p&gt;怎么说呢？我能理解很多同学觉得这有点儿虚；但与此同时，我也能看到很多人其实对“导师”是有需求的。在这里，我不做 judge，只是对这个方向提及一下。&lt;/p&gt;
&lt;p&gt;或许，这种形式将来在国内也会被慢慢接受，认可。反正对于很多大牛，我是愿意付费让他们来做我的导师的：）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;7. Creating Courses&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;制作课程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;现在国内在线教育这么火，这一条相信不用多说，大家都理解。其实我觉得制作课程和 Blogging 也差不了太多，本质也是提供内容。&lt;/p&gt;
&lt;p&gt;这一条展开来讲，我能聊得就太多了。好多人，包括慕课网的工作人员都问过我，讲好一门课的诀窍是什么？&lt;/p&gt;
&lt;p&gt;我不敢说我的课程真的那么好，但如果让我总结经验，我觉得就一条：&lt;strong&gt;努力做到让你的受众范围里的人群，真正听懂，真正学到东西。&lt;/strong&gt;万一他们没听懂，提出了疑问，那就在问答区好好回答。&lt;/p&gt;
&lt;p&gt;顺便一提，曾经有个同学问过我：怎样做好一个技术分享。我不确定他期望的答案是什么？怎么让分享的内容更有趣？怎么和大家做互动？怎么暖场？怎么收尾？怎么做出酷炫的 ppt？&lt;/p&gt;
&lt;p&gt;但是，我的回答就一句话。这和我制作课程的理念是一样的。其他都是细枝末叶。&lt;/p&gt;
&lt;p&gt;&lt;img alt="chat" src="https://github.com/liuyubobobo/my-blog/raw/master/2021/2021-01-10/chat.png" /&gt;&lt;/p&gt;
&lt;p&gt;另：我告诉他这个答案以后，他不理我了...&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;8. Creating Digital Products&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;制作一个产品&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;这个范围就很广了。从做一个 app；到做一个桌面应用；做一个游戏；做一个网站，都属于此类。&lt;/p&gt;
&lt;p&gt;我认识不少独立开发者，收入都不错。我认识的人群以 iOS App 独立开发为主，一小搓人自己搞独立游戏或者网站服务。很多其实挺赚钱的。&lt;/p&gt;
&lt;p&gt;我也曾经做过一阵子 iOS 的独立开发者，说实话，在 iOS 刚起来的时候，利润真的很高。&lt;/p&gt;
&lt;p&gt;这些人大多喜欢闷声赚钱，这里就不得不感慨一下了，苹果的 App Store 引流能力真的强。大家不太用喊，只要产品够好，很多时候积累自然流量就挺够用。&lt;/p&gt;
&lt;p&gt;网上很多文章都讨伐苹果税，但我知道的很多开发者，包括我自己，对苹果税真的意见挺小的。因为 App Store 真的对独立开发者很友好，不是只有大厂的 App 才能有一席之地。&lt;/p&gt;
&lt;p&gt;现在，苹果税对于年收入低于 100 万美元的部分，从 30% 降到 15% 了，对开发者更友好了。再加上一个很显然的趋势是 macOS 和 iOS 平台的融合，使得苹果开发者施展拳脚的空间更大了。&lt;/p&gt;
&lt;p&gt;我一直认为，别看 iOS 开发在工作市场没有那么大的需求，但是作为独立开发者的技术栈，是一点儿毛病都没有的。&lt;/p&gt;
&lt;p&gt;当然，我比较了解 iOS 一些，对于其他技术栈相关的平台，可能机会也很多，只是我不了解而已。&lt;/p&gt;
&lt;p&gt;在这里提醒大家，如果想做独立开发，一定要关注国际市场。再举个栗子，比如独立游戏开发方面，大家会看到网上很多文章抱怨 steam 的抽成高，但据我所知，国内很多平台的抽成比 steam 高得多得多，大家都是或者敢怒不敢言，或者直接放弃了。（更不用提现在国内游戏还有版号限制了。）&lt;/p&gt;
&lt;p&gt;整体，国外大环境对独立开发比较友好，对于一个独立的产品或者服务，付费意愿也更强一些。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;9. Contributing to Open Source&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;建立开源项目&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这一条可能了解的人少一些。毕竟，对于大多数人来说，开源和免费差不多。但依托开源项目是可以有经济回报的。&lt;/p&gt;
&lt;p&gt;有机会我再写一篇文章，介绍一下我知道的和开源项目相关的一些玩儿法。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;10. SaaS&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;建立 SaaS&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这一条和独立开发有点儿像，有一部分也是和独立开发重合的。但是，因为 SaaS 的目标用户可能不是终端用户，而有可能是开发者，或者是 toB 的，所以我看到的一些案例，有不一样的想象空间。&lt;/p&gt;
&lt;p&gt;API 创业就是其中典型的一类。我在这个公众号的 【是不是很酷】开源资源 分享 | 第 5 期 中，曾经分享过 CurrentScoop，就是这类。&lt;/p&gt;
&lt;p&gt;CurrencyScoop 只做汇率转换这一件事儿：将汇率转换包装成 JSON API，供开发者使用。&lt;/p&gt;
&lt;p&gt;&lt;img alt="currency" src="https://github.com/liuyubobobo/my-blog/raw/master/2021/2021-01-10/currency.png" /&gt;&lt;/p&gt;
&lt;p&gt;这么简单的一件事（当然，做好也不简单），这么一个看似平常的功能，CurrencyScoop 已经做到了在全球有 10 多万的客户。&lt;/p&gt;
&lt;p&gt;CurrencyScoop 可以免费用，但每月超过一定的请求就需要收费。收费金额可以是每月 10 刀，每月 99 刀，最贵可达到 599 刀一个月，大家可以看一下他家的价目表。&lt;/p&gt;
&lt;p&gt;&lt;img alt="currency2" src="https://github.com/liuyubobobo/my-blog/raw/master/2021/2021-01-10/currency2.png" /&gt;&lt;/p&gt;
&lt;p&gt;还有很多 SaaS 的 idea，我觉得都挺有意思的，有机会再有针对性的和大家分享。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;这就是我简单点评的这份总结中的十条，程序员可以使用技术赚钱的方向。&lt;/p&gt;
&lt;p&gt;在写这篇文章的时候，我脑海中想到了我看到的更多案例，但或多或少都可以归类到这 10 条中。所以我觉得这 10 条总结得挺全的。&lt;/p&gt;
&lt;p&gt;比如我还知道有同学靠给成熟的框架写插件，比如写 wordpress 插件或者电商插件；或者给成熟的产品写插件，比如 Chrome 插件或者 Unity 写插件，利润也很不错。这其实和独立开发差不多。&lt;/p&gt;
&lt;p&gt;再比如，我还知道有同学靠竞赛，能把国外的学费赚回来。不过，一般利润丰厚的竞赛，基本都是和企业合作，把企业想要解决的问题以众包的形式发布出来。所以，这和文章中的 Freelancing 差不多。&lt;/p&gt;
&lt;p&gt;至于还有一些方式，涉及到灰产，我就不想多聊了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;不管怎样，在这样一个时代，技术过硬，还是机会很多，大有可为的。&lt;/p&gt;
&lt;p&gt;当然，如果你看到这里，觉得心浮气躁的话，&lt;strong&gt;强烈建议再回头，看一遍第一条：）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2021/2021-01-10/readme.md" rel="alternate"/></entry><entry><id>2021/2021-01-01/readme.md</id><title>最喜欢的格言</title><updated>2021-01-01T00:00:00-07:00</updated><content>&lt;h2&gt;最喜欢的格言&lt;/h2&gt;
&lt;p&gt;在网上看到一个讨论，觉得很有意思。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;你最喜欢的格言是什么？&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;扪心自问，对于这个问题，我觉得我没有非常特别的回答。&lt;/p&gt;
&lt;p&gt;我的微信签名是“学无止境”，我在 &lt;a href="https://mp.weixin.qq.com/s?__biz=MzU4NTIxODYwMQ==&amp;amp;mid=2247486372&amp;amp;idx=1&amp;amp;sn=70b0ef5ddd550117768cbab3e8b59847&amp;amp;chksm=fd8ca4e2cafb2df4b9918f672c74b8d473ac16fa348239283eedd1bf5d458bf500650eacb0c8&amp;amp;token=2105290525&amp;amp;lang=zh_CN#rd"&gt;《大师和学徒》&lt;/a&gt; 中说，我喜欢英雄联盟无极剑圣易大师的一句台词：&lt;strong&gt;真正的大师，永远怀着一颗学徒的心。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A true master, is an eternal student.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但如果说这是我最喜欢的一句话，恐怕我不能肯定。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我的 qq 签名是“&lt;strong&gt;给岁月以文明，给时光以生命&lt;/strong&gt;”。相信大家都知道，这是《三体》中的一句话。&lt;/p&gt;
&lt;p&gt;但实际上，这句话并非大刘原创。这句话的灵感，来自大名鼎鼎的数学家帕斯卡：&lt;strong&gt;给时光以生命，而不是给生命以时光。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;To the time to life, rather than to life in time.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="pascal" src="https://github.com/liuyubobobo/my-blog/raw/master/2021/2021-01-01/pascal.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;无独有偶，我的前投资老板经常提醒我的一句话，和这句话有异曲同工之妙。我在回答很多同学的问题的时候，都会引用这句话。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;使人成熟的不是岁月，而是经历&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我这个年代的同学，学习英语，阅读英文小说，可能都逃不过海明威。&lt;/p&gt;
&lt;p&gt;海明威以其独特的语言风格著称：叙述简洁，凝练，无冗余；描写细致，却不浮夸；对话重情理，不矫饰。&lt;/p&gt;
&lt;p&gt;这些语言特点，都是我写作的榜样。很多时候，当我写出一个句子以后，我都会想：是不是太浮夸了？是不是太矫情了？能不能更简洁？&lt;/p&gt;
&lt;p&gt;甚至，这些原则，都慢慢融入到我做事的风格中。&lt;/p&gt;
&lt;p&gt;海明威有一句非常简单的名言：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The world is a fine place and worth fighting for.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我的翻译：&lt;strong&gt;世界是美好的，值得我们为之奋斗&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;著名的电影《七宗罪》巧妙地引用这句话，在后面加了一句：我同意后半句。&lt;/p&gt;
&lt;p&gt;&lt;img alt="7" src="https://github.com/liuyubobobo/my-blog/raw/master/2021/2021-01-01/7.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;我第一次看《七宗罪》，或许是初中。当时这个台词给了我很大的震撼。&lt;/p&gt;
&lt;p&gt;他并没有说自己不同意前半部分，但每个人都能感受到这份不同意。&lt;/p&gt;
&lt;p&gt;换句话说，作者认为，这个世界并不是美好的。可是，再一转念，作者却在表达：我们还是值得为这个并不美好的世界奋斗。&lt;/p&gt;
&lt;p&gt;在我看来，这个台词中隐含着无与伦比的逻辑美，而体验这逻辑美，并无太高的门槛，小学生都能理解。&lt;/p&gt;
&lt;p&gt;它让你思考。原来，没有说出来的话，可以这样有深度。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;相较而言，和这句话异曲同工的，是罗曼·罗兰的“&lt;strong&gt;世界上只有一种真正的英雄主义，就是认清了生活的真相后还依然热爱它。&lt;/strong&gt;”&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There is only one heroism in the world: to see the world as it is and to love it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;他们表达了差不多的意思：世界或许并不美好，生活的真相或许是残酷，但我们还是要努力。&lt;/p&gt;
&lt;p&gt;但我更喜欢《七宗罪》中基于海明威的句子的表达，含蓄而优美。&lt;/p&gt;
&lt;p&gt;&lt;img alt="hero" src="https://github.com/liuyubobobo/my-blog/raw/master/2021/2021-01-01/hero.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;说回我看到的这个网络上的讨论。很多人分享的，并不是什么名人名言。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;有人分享，他在年轻的时候，靠一辆自行车，骑行整个加拿大。在那期间，他认识了另一个“骑友”。&lt;/p&gt;
&lt;p&gt;有一天，在整理装备的时候，有一张纸从这名“骑友”的钱包中掉了出来。他捡起来还回去，看见了上面的字。非常简单，六个词：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Work hard. Be strong. Don't complain.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;他的骑友说，这是他的祖父留给他的字条。&lt;/p&gt;
&lt;p&gt;这六个词，或许就是他的祖父一生的生活哲学。他一直保存着。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;有人说，他的奶奶有句话，让他印象深刻：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Some bugger will always have a faster car, a flashier house, a glitzier watch - but you were the only kids that ever had me for a nana&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我的翻译：有些家伙总能得到更快的跑车，更豪华的房子，更名贵的手表。但是，你是唯一一个，有我这个奶奶的孩子。&lt;/p&gt;
&lt;p&gt;我尝试解读一下。这句话大概就是在说：那些物质的东西，其实并不宝贵。真正宝贵的，是你见到的人，遇到的事儿，拥有的经历和感悟。这些才让你成为你，值得你珍视一生。&lt;/p&gt;
&lt;p&gt;但奶奶的这句话，却把这层意思说得无比温馨。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;类似的分享还有很多。但看着看着，有一些人分享的格言，开始触及我的内心。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you keep doing what you've always done, you'll keep getting what you always got.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我的翻译：如果你只是做自己经常做的事情，你只会收获自己经常收获的东西。&lt;/p&gt;
&lt;p&gt;这开始让我反思：最近的几年，我是不是一直在做自己经常做的事情？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you’re not willing to go too far, you’ll never go far enough.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我的翻译：如果你不想走得更远，你永远不会走得更远。&lt;/p&gt;
&lt;p&gt;于是我开始反思：我是不是并没有想走得更远？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We choose to go to the moon in this decade and do the other things, not because they are easy, but because they are hard.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这是约翰肯尼迪演讲中的名言：我们决定飞向月球，并且做其他的这类事情，&lt;strong&gt;不是因为他们是容易的，而是因为他们是难的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="john" src="https://github.com/liuyubobobo/my-blog/raw/master/2021/2021-01-01/john.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;我开始反思：我做的事情，是容易的？还是难的？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What would you do if you were not afraid?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这句话出自大名鼎鼎的《谁动了我的奶酪》。我的翻译：&lt;strong&gt;如果你无所畏惧，你会选择做什么？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="cheese" src="https://github.com/liuyubobobo/my-blog/raw/master/2021/2021-01-01/cheese.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;我开始反思：我现在做的事情，是不是我无所畏惧的时候的选择？或者，其实我在害怕什么？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Dead fish go with the flow.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这似乎是一个民间谚语，我不确定该怎么翻译：死鱼才会顺其自然？随波逐流？&lt;/p&gt;
&lt;p&gt;这让我想到了周星驰的：&lt;strong&gt;做人如果没有梦想，跟咸鱼有什么分别?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="chou" src="https://github.com/liuyubobobo/my-blog/raw/master/2021/2021-01-01/chou.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;于是我开始思考，我还记得我的梦想吗？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;无独有偶，就在昨天，我和一个好久不联系的朋友，因为新年祝福，在微信上又聊了起来，聊到很晚。我才猛然意识到：自己原来曾经有那么多有趣想法。他们真的遥不可及吗？我为什么不试一试呢?&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我的前投资老板经常鼓励我去闯荡。他闯荡了一辈子，现在 60 多岁，还在寻找新的挑战。&lt;/p&gt;
&lt;p&gt;今年，哦，不，是去年，我 35 岁的生日，他也不知道收到了哪里的提醒，突然给我发了一个“生日快乐”。&lt;/p&gt;
&lt;p&gt;我的前投资老板姓黄，我管他叫“黄老师”。我说，黄老师，我都 35 啦！&lt;/p&gt;
&lt;p&gt;他说：年轻人！刚才有一个 82 岁的人来给我修船！&lt;/p&gt;
&lt;p&gt;他就是这样，60 来岁了，觉得自己年轻得不得了。至于我，他觉得简直就是个小娃娃，有着无限的可能。&lt;/p&gt;
&lt;p&gt;&lt;img alt="chat" src="https://github.com/liuyubobobo/my-blog/raw/master/2021/2021-01-01/chat.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;35 岁，在这个时代，很多人觉得这个年龄，已经开始被社会嫌弃了吧。&lt;/p&gt;
&lt;p&gt;但我突然觉得，35 岁，这是多么美好的年龄。&lt;strong&gt;这是我新的起点。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;刘易斯有个名言：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You are never too old to set another goal or to dream a new dream.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="lewis" src="https://github.com/liuyubobobo/my-blog/raw/master/2021/2021-01-01/lewis.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;2019 年的新年，我告诉自己，要创造些什么；&lt;/p&gt;
&lt;p&gt;2020 年的新年，我告诉自己，要关注那些 &lt;a href="https://mp.weixin.qq.com/s?__biz=MzU4NTIxODYwMQ==&amp;amp;mid=2247484875&amp;amp;idx=1&amp;amp;sn=23a0fd3411c035396d8f29058446fa3b&amp;amp;chksm=fd8caa8dcafb239b0711a6bb897eab9ac82591bae932e13afee5ad3e548efb1692e7c25a6fc2&amp;amp;scene=21#wechat_redirect"&gt;不是诀窍的诀窍&lt;/a&gt;；&lt;/p&gt;
&lt;p&gt;2021 年，我要告诉自己：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;dream a new dream, set another goal.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;至于这目标是什么？&lt;/p&gt;
&lt;p&gt;在实现它之前，我不说；&lt;/p&gt;
&lt;p&gt;在它失败之前，我不回头。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;祝所有人 2021 年，也拥有自己新的梦想。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;2021.1.1 于 Santa Clara&lt;/p&gt;
&lt;p&gt;&lt;img alt="balloon" src="https://github.com/liuyubobobo/my-blog/raw/master/2021/2021-01-01/balloon.jpg" /&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2021/2021-01-01/readme.md" rel="alternate"/></entry><entry><id>2020/2020-12-20/readme.md</id><title>我们最终没有做海外电商</title><updated>2020-12-20T00:00:00-07:00</updated><content>&lt;h2&gt;我们最终没有做海外电商&lt;/h2&gt;
&lt;p&gt;有同学想让我聊聊副业，这让我想起了我和老婆曾经的一段对话。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;在疫情前，我和老婆周末喜欢去一家日本餐厅。不过我们俩都不吃生食，所以不会点刺身，我们一般点日式咖喱，鳗鱼饭，有的时候是日式小火锅，再加点儿天妇罗什么的小食。&lt;/p&gt;
&lt;p&gt;&lt;img alt="tempura" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-12-20/tempura.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;用完餐，我们会去周边的小公园散散步。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;吃饭的时候，我们会随便聊天。那一天，我看了一则在美国当地也不知道是真是假的新闻，觉得挺有意思，就和老婆探讨起来。&lt;/p&gt;
&lt;p&gt;“我昨天看了一个新闻，一个美国的残疾人，在亚马逊上开了一个店，什么都卖。而他的货源，就是沃尔玛！换句话说，他在自己的亚马逊店上接到订单，然后从沃尔玛买来，寄给用户。就这样，这个美国残疾人，年入 100 万美元！”&lt;/p&gt;
&lt;p&gt;亚马逊相信大家都知道，就是美国的淘宝或者京东，近乎美国人民网购都从亚马逊上买。&lt;/p&gt;
&lt;p&gt;沃尔玛相信大家也都知道，因为国内也有沃尔玛。&lt;/p&gt;
&lt;p&gt;但是和国内有些不同的是，沃尔玛在美国属于相对低端的超市，东西的价格相对比较低廉。&lt;/p&gt;
&lt;p&gt;&lt;img alt="walmart" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-12-20/walmart.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;听说美国很多中产，根本不会去沃尔玛。虽然在我看来，大多数产品都是包装的品牌货，所以产品本身和在其他所谓的高端超市是一样的。但沃尔玛的价格却便宜不少。&lt;/p&gt;
&lt;p&gt;我曾经比较过沃尔玛和其他超市（比如 Safeway 或者 Wholefood）同样商品的价格，确实相差不少。这位美国残疾小伙相当于低买高卖，赚取中间的差价。如果赶上有些时候沃尔玛的一些商品打折做活动，那利润就更高了。&lt;/p&gt;
&lt;p&gt;我开玩笑地跟老婆说：咱混不下去了，也可以干这个。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;但是干这件事儿有个前提，人必须在美国。我俩还不一定一直呆在美国呢。&lt;/p&gt;
&lt;p&gt;顺着这个思路想，我突然又想起了不久前看的另一个国内的帖子——做海外电商。干这件事儿不需要人在美国！&lt;/p&gt;
&lt;p&gt;所谓的海外电商，就是在美国亚马逊开一个店卖货，但是货源是国内。很多在国内很便宜的东西，在美国是很贵的。在我看来，大多数日常生活用品都是如此，什么毛巾杯子，扫把扳手一类的。&lt;/p&gt;
&lt;p&gt;所以，有很多国人会在美国的亚马逊开店，把中国的东西用美国的价格卖出去。即便算上运输成本，利润也是大大的。&lt;/p&gt;
&lt;p&gt;我看到的那篇文章说，做海外电商，关键是选品，也就是你的店到底主要卖什么。毕竟，亚马逊各种商家已经很多了，你要有自己的特色，才能在诸多商家中脱颖而出。&lt;/p&gt;
&lt;p&gt;我和老婆正好认识一个富二代。他们家在国内做瓷砖生意，做得很大。这个富二代自己不愿意做瓷砖，觉得土，但是因为家里的关系，在“瓷器”这个行业有很多资源，于是开了一个小工作室，自己设计新潮的，有意思的，更符合年轻人审美的瓷器或者摆件一类的。&lt;/p&gt;
&lt;p&gt;最近泡泡玛特上市了，我才了解了一个新词儿，也是一个新行业——潮玩。想一想，这个富二代，也算是做潮玩吧——瓷器界的潮玩。&lt;/p&gt;
&lt;p&gt;&lt;img alt="popmart" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-12-20/popmart.png" /&gt;&lt;/p&gt;
&lt;p&gt;我和老婆说，我们可以专门卖有中国特色的瓷器呀。从她那里进货，然后再高价卖出去。根据我的经验，外国人对这种东西挺喜欢的。&lt;/p&gt;
&lt;p&gt;而且，我们自己就能当客服。但听说如果生意大了，自己是忙不过来的，那也简单，我们可以在中国，远程雇马来西亚人或者菲律宾人当客服。听说当地已经有这种产业了，一个公司专门做中介，找人来给中国的海外电商当客服。&lt;/p&gt;
&lt;p&gt;我老婆说，“有道理耶。”&lt;/p&gt;
&lt;p&gt;我说，“是呀，咱混不下去了就这么玩儿。并不难，搞不好咱就发了。”&lt;/p&gt;
&lt;p&gt;我老婆想了想，说，“如果这么简单，怎么还轮得到咱们？为什么别人不去做？”&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;这个问题太关键了。我想了想，说，&lt;/p&gt;
&lt;p&gt;“首先，很有可能事情没有我们想象的这么简单。做起来比说起来要难，所谓知易行难，是很正常的。我们都没在国内做过电商，根本不知道电商行业有什么坑，所以很有可能把问题想简单了。”&lt;/p&gt;
&lt;p&gt;“但是”，我又说，&lt;/p&gt;
&lt;p&gt;“另一方面，很有可能事情就是这么简单，并没有我们想得这么复杂。毕竟，我们似乎有不错的货源和渠道；咱俩英语又都还行，做海外电商搞不好有独特的优势呢！”&lt;/p&gt;
&lt;p&gt;“可是，我们却说，混不下去了，才去做海外电商。换句话说，我们只是聊聊而已，我们都没有打算去做不是？”&lt;/p&gt;
&lt;p&gt;“嗯”，老婆附和，&lt;/p&gt;
&lt;p&gt;“我估计，99.9999% 的人，都因为各种各样的原因，不会行动的。&lt;strong&gt;真正下定决心，行动起来，认真去做这件事儿，其实是一个门槛呀！&lt;/strong&gt;”&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;是的。门槛不是能力，不是技巧，不是经验。仅仅是勇气，魄力，和决心！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;如果更进一步去看，我们为什么不会行动？很简单，做任何事情都是有所谓的机会成本的。把时间投入进来做这件事情，就无法做别的事情了。&lt;/p&gt;
&lt;p&gt;所以，如果我们俩在这个日本小餐馆儿一拍即合，决定开始去做海外电商，那必然影响我们现在手头的事情。我们俩就开始嘀咕了：做这个东西，真的值得吗？&lt;/p&gt;
&lt;p&gt;做这样一件事，确实有可能赚更多的钱，但关键这只是有&lt;strong&gt;可能&lt;/strong&gt;呀。这就是&lt;strong&gt;风险&lt;/strong&gt;了。真正实施的时候，我们不可能只关注成功的可能性，不关注失败的可能性呀。&lt;/p&gt;
&lt;p&gt;你看，当我们看到事情的风险和机会成本的时候，就都觉得或许不值当了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我想，我们已经陷入了传说中的“局部最优解”中了。我们顾虑所谓的机会成本，所以，就不想再“开疆拓土”了。&lt;/p&gt;
&lt;p&gt;但对于我们的生活来说，近乎一定还有更优的解存在。我们要想去探索那些更优的解，必须要忍受暂时的不如意呀。不经历风雨，怎能见彩虹？&lt;strong&gt;不承担风险，怎能获得高收益？&lt;/strong&gt;这是很简单的道理呀。&lt;/p&gt;
&lt;p&gt;在我看来，这能解释社会中的很多现象。比如很多赚钱的“老板”，明明小时候学习成绩都不如那些“优秀的打工人”，怎么最后反而赚了大钱？&lt;/p&gt;
&lt;p&gt;一个很重要的原因是，他们敢于去行动，愿意承担风险。他们早就不向着“打工人”的方向前进了，而直接朝更优解——老板的方向前进了。&lt;/p&gt;
&lt;p&gt;但是，换一个角度想，他们之中很多人，之所以直接朝着老板的方向前进，其实是被逼的。因为对于他们来说，“当一名优秀的打工人”这个局部最优解，根本不在他们的选择里。&lt;/p&gt;
&lt;p&gt;从这个角度看，其实他们并没有承担太大风险。所谓光脚的不怕穿鞋的。对他们来说，想办法去当个老板，机会成本是很低的。做个小生意，当个小老板，就是他们的“局部最优解”！但有的人越做越大，做成了比“打工人”更优的解！&lt;/p&gt;
&lt;p&gt;但并不是所有人都能拿到这个更优的解呀。毕竟有风险嘛。幸存者偏差，又让我们忽视了那些失败的人，只看到了成功的案例，而且是极其成功的案例。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;老婆想了想，说，“难道我们已经陷入了局部最优解？那怎么办呢？”&lt;/p&gt;
&lt;p&gt;我想了想，说，“或许我们确实陷入了局部最优解，但我觉得我们并不是不愿意踏出局部最优解，去探索的人。”&lt;/p&gt;
&lt;p&gt;你比如我吧，毕业的时候能进大厂，但选择了去创业。能拿的钱比去大厂少多了，但我没有选择“大厂”这个局部最优解。到现在为止，我一点儿都不后悔自己的决定。这个经历，对我来说太有意义了，远远超过了每年几万块钱。&lt;/p&gt;
&lt;p&gt;再比如你吧，{此处保护老婆隐私，省略一万字。}&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;老婆听了说，“也有道理耶。那到底是什么，让我们不去做海外电商呢？”&lt;/p&gt;
&lt;p&gt;我想了想，说，“或许是因为，我们都知道，海外电商根本不是我们的更优解吧。我们在潜意识里，都并没有只盯着金钱的收益。”&lt;/p&gt;
&lt;p&gt;“你能想象，我们俩一起搞了一个亚马逊店，天天处理这个客户的订单，那个客户的订单；处理这个人的投诉，那个人的投诉；联系这边的进货，那边的出货...... 这真是我们想要的生活吗？”&lt;/p&gt;
&lt;p&gt;没等老婆回答，我就说，“显然不是呀。”&lt;/p&gt;
&lt;p&gt;老婆笑了。&lt;/p&gt;
&lt;p&gt;说白了，我们都不喜欢干这件事儿。有更喜欢干的事儿，为什么要逼自己干不喜欢干的事儿呢？所以我们都说，等混不下去了，再说嘛。&lt;/p&gt;
&lt;p&gt;你看，我现在还写公众号，这也不是我的正事儿呀。但是我喜欢写东西，所以也就不会去想什么机会成本，什么风险收益。把自己的想法表达出来，把自己看到的新奇有趣的东西分享出来，我挺开心呢。&lt;/p&gt;
&lt;p&gt;老婆深以为然。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;那天吃完饭，我们愉快地去附近的小公园散步，再也没有聊海外电商了。&lt;/p&gt;
&lt;p&gt;但从此以后，我们每每思考未来，想到：如果以后混不下去了怎么办的时候，我们都会互相开玩笑地说：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我们还能做海外电商嘛。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;于是，我们俩继续，愉快地呆在自己的“局部最优解”中。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;故事讲完了，&lt;strong&gt;这就是我对副业的看法。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果你想找一个副业，多赚点儿钱，我觉得这没什么毛病。&lt;/p&gt;
&lt;p&gt;但如果你思前想后，却不知道做什么，我觉得有两种可能。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;一种可能：你的主业其实挺不错的，有挺大的发展空间，你顾虑了机会成本。&lt;/p&gt;
&lt;p&gt;在这种情况下，我们应该认真思考一下，“更优解”是不是在主业以外？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;有可能不是的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如何判断自己的“主业”是不是更优解？我觉得一个方法是：去看你的老板。如果你觉得你的老板太差劲，去看你的老板的老板，老板的老板的老板。如果他们之中有让你羡慕的人，有你想成为的人，那么或许，你应该在自己的“主业”上更努力，成为他们。&lt;/p&gt;
&lt;p&gt;不是所有的人都是靠副业成功的。在我看来，&lt;strong&gt;其实大多数大佬，还是靠主业成功的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;而另外一种可能，就是，你所想到的副业，你并不喜欢做。&lt;/p&gt;
&lt;p&gt;我一直认为，&lt;strong&gt;热爱，是一种巨大的力量&lt;/strong&gt;。其实，大多数人都没有那么隐忍，也没那么坚强，可以去做自己不喜欢的事儿。尤其是像我们一样，“陷入局部最优解的人”。&lt;/p&gt;
&lt;p&gt;所以，在我看来，与其去寻找一个“赚钱的副业”，不如去仔细寻找，自己到底喜欢什么。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;喜欢一件事儿，才能把一件事儿做好；把一件事儿做好，在这个时代，或许就离“副业变现”不远了。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;而其实，当一个人真的找到自己喜欢的事情的时候，或许在很多时候，也就不那么在意变不变现的问题了。&lt;/p&gt;
&lt;p&gt;因为，能够做自己喜欢的事儿，是钱买不来的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-12-20/readme.md" rel="alternate"/></entry><entry><id>2020/2020-12-07/readme.md</id><title>一个和“一致性”相关的天才漫画</title><updated>2020-12-07T00:00:00-07:00</updated><content>&lt;h2&gt;一个和“一致性”相关的天才漫画&lt;/h2&gt;
&lt;p&gt;这是一篇非常短的分享。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;偶然间看到一副漫画，漫画的主题是：&lt;strong&gt;数据一致性&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;越看越喜欢，越看越喜欢。&lt;/p&gt;
&lt;p&gt;整幅漫画的排版不能乱，所以我不能把图片做重新的整理，以适合手机阅读。如果大家直接看看不清楚的话，可能需要点击图片放大看。&lt;/p&gt;
&lt;p&gt;&lt;img alt="1" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-12-07/1.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我喜欢这个漫画到什么地步呢？&lt;/p&gt;
&lt;p&gt;我亲自打开了多年没有使用的 Photoshop，一点一点把图片中的文字做了翻译，好让不适应阅读英文的同学也能理解这个漫画的美妙：&lt;/p&gt;
&lt;p&gt;&lt;img alt="2" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-12-07/2.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;整个漫画不仅仅非常巧妙地描述了“一致性”这个计算机世界的概念，更非常巧妙地利用了“漫画格子”这样的形式。&lt;/p&gt;
&lt;p&gt;整个漫画的故事不是简单的一个格子一格子“一维线性前进”的，而是在一个二维的空间展开了。&lt;/p&gt;
&lt;p&gt;时间不是在这些格子之间顺次流动的，而是同时发生的。而这本身，也是“一致性”问题出现的根源！&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;哦！更进一步去想，这像极了很多宇宙终极问题的模样。&lt;/p&gt;
&lt;p&gt;比如：是先有鸡，还是先有蛋。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-12-07/readme.md" rel="alternate"/></entry><entry><id>2020/2020-12-04/readme.md</id><title>和软件开发相关的一些思考</title><updated>2020-12-04T00:00:00-07:00</updated><content>&lt;h2&gt;和软件开发相关的一些思考&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;虽然有一句话叫“deadline 就是第一生产力”，并且在很多人身上还挺灵验的，包括我。但是这个“灵验”，其实是不考虑质量的。&lt;/p&gt;
&lt;p&gt;如果考虑质量的话，通常 deadline 是没有用的。这是因为，在大多数时候，对于脑力劳动者来说，所做的事情，&lt;strong&gt;并非是对以前工作的重复&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;永远有新的状况会发生，导致 deadline 无法完成。所以，真正良性的项目开发过程，不是拼命去赶 deadline。&lt;/p&gt;
&lt;p&gt;当然，这不意味着制定 deadline 或者制定计划没有意义。但关键是，&lt;strong&gt;在项目执行的过程中，需要不断地根据实际情况去调整计划。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这本质给项目管理带来了挑战。因为项目管理者需要小心地分辨：deadline 没有完成，到底是项目成员怠工？还是项目计划制定不合理？亦或者是新的，没有预估到的情况发生所导致。&lt;/p&gt;
&lt;p&gt;这些判断，分析，对项目的把控并合理做出调整，就是有经验的项目管理者的价值。&lt;/p&gt;
&lt;p&gt;而一刀切地使用固定的 deadline，是没有技术含量的，随便谁都能做。&lt;/p&gt;
&lt;p&gt;在软件开发的过程中，一刀切地使用固定的 deadline，结果也一定是牺牲软件的质量。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;以上这一条，同样适用于很多非软件开发的脑力活动。比如学习。&lt;/p&gt;
&lt;p&gt;给自己制定计划，每周学习多少内容；每天背多少单词；每天看多少页书；等等等等，通常都是不合理的。&lt;/p&gt;
&lt;p&gt;合理的学习计划不是在学习之前制定出来的，而是在学习的过程中，慢慢调整出来的。&lt;/p&gt;
&lt;p&gt;否则，一味地坚持自己最初制定的学习计划，只能牺牲学习质量。&lt;/p&gt;
&lt;p&gt;如果你经常主动学习，尤其是有质量的学习，一定会经常调整自己的学习计划，认真审视自己最初制定的学习计划的不合理之处。&lt;/p&gt;
&lt;p&gt;慢慢的，你就能找到自己的学习节奏，制定出越来越合理的，适合自己的学习计划。&lt;/p&gt;
&lt;p&gt;你就变成了一个“有经验的学习者”。&lt;/p&gt;
&lt;p&gt;我曾写过一篇文章，叫&lt;a href="https://mp.weixin.qq.com/s?__biz=MzU4NTIxODYwMQ==&amp;amp;mid=2247484452&amp;amp;idx=1&amp;amp;sn=40d971c16938e91e8e22777e04520574&amp;amp;chksm=fd8cab62cafb22747829f86dc280598a15a9750cb5974ab0bd44effade5f9926c1a7075dba3e&amp;amp;scene=21#wechat_redirect"&gt;《慢增长》&lt;/a&gt;，也聊过这个问题。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;永远不要让开发者估计开发时间。&lt;strong&gt;大多数开发者&lt;/strong&gt;（在我看来是所有开发者，包括我）&lt;strong&gt;都会高估自己的开发速度，低估软件工程的复杂程度。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所以，再一次，有经验的项目经理是非常重要的。当然，前提是有经验。&lt;/p&gt;
&lt;p&gt;&lt;img alt="comic" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-12-04/comic.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;这则漫画搜索自网络，我没有找到作者信息。侵删。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不同的语言，平台，框架，IDE，系统，编程范式，等等等等，他们都&lt;strong&gt;只是工具而已。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;因为这些工具而打架，是很幼稚的。&lt;/p&gt;
&lt;p&gt;争执到底是 Java 好还是 Python 好，到底是面向对象好还是函数式编程好；已经暴露了你是一个初级程序员。&lt;/p&gt;
&lt;p&gt;这近乎等于是在争论：到底是十字改锥好，还是一字改锥好，亦或者是扳手更好。&lt;/p&gt;
&lt;p&gt;关键的问题不是谁更好。实际上，我们也无法定义出到底什么是“好”。&lt;/p&gt;
&lt;p&gt;关键问题是：你现在的项目，你现在要完成的事情，你现在要解决的问题，使用什么工具更合适。&lt;/p&gt;
&lt;p&gt;软件行业的经典结论，就是&lt;strong&gt;没有银弹&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;不管你对什么技术疯狂的痴迷，都应该明白，&lt;strong&gt;这种技术不能解决所有问题。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我有些怀疑，一门心思地只做技术，不与人做“真正的沟通”，会让人越来越自大。&lt;/p&gt;
&lt;p&gt;因为技术是一个太有掌控感的事情。计算机一定按照你写的每一行指令去运行。而计算机运行出你所期望的结果，又是一件太有成就感的事情。&lt;/p&gt;
&lt;p&gt;这两件事情在现实世界都不太会发生：&lt;/p&gt;
&lt;p&gt;1）没有人会永远按照你的指令去做事情，哪怕你是总统，首富，或者 CEO；&lt;/p&gt;
&lt;p&gt;2）世界不会按照你所期望的方式运转。&lt;/p&gt;
&lt;p&gt;所以，很多人技术做得太久，会孤芳自赏，会自大，会渐渐“丧失”理解其他人的能力。&lt;/p&gt;
&lt;p&gt;这里说的技术，是广义的，不仅仅局限于计算机技术。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;技术人员也需要多和“人”做真正的沟通，而不仅仅是和机器做沟通。&lt;/p&gt;
&lt;p&gt;了解不同人的想法，不同人思维的差异，可以让你更容易地去接受这个世界存在着的不同。这将让你更谦虚。&lt;/p&gt;
&lt;p&gt;在我看来，这种谦虚，是有力量的。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;众所周知，乔布斯是一个自大的人。但是，请大家看看这段影片所展现的，到底是乔布斯更自大，还是提问的技术人员更自大？&lt;/p&gt;
&lt;p&gt;这则录像来自 1997 年，乔布斯刚刚回归苹果不久，一次开发者大会上，乔布斯对这样一个问题的回答。&lt;/p&gt;
&lt;p&gt;“乔布斯，你是一个聪明又有影响力的人。但是很遗憾也很明显，很多时候你根本不知道自己在做什么。我希望你能用清楚的语言解释一下 Java 编程语言以及其变种是如何阐述 OpenDoc 内置的一些想法。等你说完以后，你能不能跟我们说一说你自己过去七年都干了些什么？”&lt;/p&gt;
&lt;p&gt;乔布斯的回答：&lt;/p&gt;
&lt;p&gt;&lt;a href="https://v.qq.com/x/page/p3124yg5fm7.html"&gt;https://v.qq.com/x/page/p3124yg5fm7.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我们可以说乔布斯展示出的风度，在于他视野的广阔，经历的丰富，等等等等。&lt;/p&gt;
&lt;p&gt;但在我看来，最根本的一点，还是在于：&lt;strong&gt;乔布斯关注“人”。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;乔布斯可能是一个自大的人，但是，他尊重他的“用户”。&lt;/p&gt;
&lt;p&gt;而&lt;strong&gt;技术，总归是要为人服务的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;以上。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-12-04/readme.md" rel="alternate"/></entry><entry><id>2020/2020-12-01/readme.md</id><title>一些术语的区分，没必要</title><updated>2020-12-01T00:00:00-07:00</updated><content>&lt;h2&gt;一些术语的区分，没必要&lt;/h2&gt;
&lt;p&gt;自己一时的一个思考，记录下来。不一定对，也不一定适合所有人。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;脱离了学校环境以后，很多时候，我都不喜欢区分一些极其相像的术语或者名词之间的细微差别。&lt;/p&gt;
&lt;p&gt;不要误会，我并不是说所有的术语或者名词都没有意义，但确实存在一些情况，我觉得意义不大。&lt;/p&gt;
&lt;p&gt;举个例子，很多和架构设计相关的资料，会强调 layer 这个词和 tier 这个词在使用上的区别。&lt;/p&gt;
&lt;p&gt;在英文中，这两个词本来就是同义词。在 vocabulary.com 上，对 tier 的解释就是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A tier is a level or a layer.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但是，在软件架构上，这二者的使用是有区别的。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我本以为这种咬文嚼字的区别不是主流。但是我发现在 stackoverflow 上，就有这样一个问题。单单这个问题本身就有 221 个赞和 91 个收藏。&lt;/p&gt;
&lt;p&gt;&lt;img alt="q" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-12-01/q.png" /&gt;&lt;/p&gt;
&lt;p&gt;翻译：Layers 和 Tiers 的区别是什么？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;而这个问题的最高赞答案，也有 264 个赞之多。&lt;/p&gt;
&lt;p&gt;&lt;img alt="ans" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-12-01/ans.png" /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;layers 和 tiers 的区别是什么呢？答案是：&lt;strong&gt;tiers 表示物理上的分层，而 layers 表示逻辑上的分层。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所以，一个 3-tier 的架构，至少要部署在三台服务器上。当然，也可能在三台以上的服务器上，因为一个 tier 可以是一个集群，使用多个服务器。&lt;/p&gt;
&lt;p&gt;但不管怎么样，&lt;strong&gt;每一个 tier 在物理上是和其他 tier 隔绝的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;值得一提的是，3-tier 的架构是最经典的架构，即所谓的&lt;strong&gt;表现层，业务逻辑层，和数据访问层。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3tier" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-12-01/3tier.png" /&gt;&lt;/p&gt;
&lt;p&gt;当然，随着现在互联网服务越来越复杂，大多数互联网大厂的服务早已不是 3-tier 架构了，而是 n-tier 架构。&lt;/p&gt;
&lt;p&gt;更多的专有的 tier 被发明出来，并被使用着。比如 &lt;strong&gt;Caching Tier（缓存层）&lt;/strong&gt;；比如 &lt;strong&gt;Messaging Tier（消息传输层）&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img alt="ntier" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-12-01/ntier.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;而 layers 表示逻辑上的分层。所以，&lt;strong&gt;在一个 tier 上，可以有多个 layer。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;比如下图的架构中，3-tier 架构的中间层（tier），又被分成了两层（layers）：业务逻辑层和数据获取层。&lt;/p&gt;
&lt;p&gt;&lt;img alt="layers" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-12-01/layers.png" /&gt;&lt;/p&gt;
&lt;p&gt;很多时候，layer 更多是指代码的功能组织。比如，一个软件如果使用 MVC 的架构，虽然部署在一台计算机上，我们也可以说它是一个 3-layer 的软件架构。但是说 3-tier 就不合适。&lt;/p&gt;
&lt;p&gt;（现在 MVC 已经被越来越多地被当做是一种设模式，而非架构了。但如果你仔细思考，会发现“设计模式”这个词，和“架构”这个词，挺相近的。）&lt;/p&gt;
&lt;p&gt;&lt;img alt="mvc" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-12-01/mvc.png" /&gt;&lt;/p&gt;
&lt;p&gt;再比如，我之前在这个公众号分享了一本开源电子书：How browsers work（浏览器是如何工作的），其中包含一个浏览器的结构图。&lt;/p&gt;
&lt;p&gt;所有的这些“组件”（Components），都包含在同一个浏览器软件中。他们是一个一个的 layers.&lt;/p&gt;
&lt;p&gt;&lt;img alt="browser" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-12-01/browser.png" /&gt;&lt;/p&gt;
&lt;p&gt;总之，一个 3-tier 的架构，可以被解释成一个 3-layer 的架构，也可能被解释成一个 4-layer 的架构；一个 2-tier 的架构，可以是 3-layer 的；一个 8-tier 的架构，也可能是 5-layer 的。&lt;/p&gt;
&lt;p&gt;反正，有多少个 layer，和你的系统部署在几台服务器上，没关系。因为 &lt;strong&gt;layer 描述的是逻辑，不关心物理。&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;如果是上学的时候，我肯定觉得，哇，原来还有这样的区别。好好好，妙妙妙，划重点，记下来。&lt;/p&gt;
&lt;p&gt;我甚至可以想象，在别人说：这是一个 3-layer 架构的时候，我得意洋洋地反问：你的意思是不是 3-tier？&lt;/p&gt;
&lt;p&gt;一脸得意，看起来像个 sb。 🤷‍♂️&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;而现在的我，觉得这样的定义完全没必要。&lt;/p&gt;
&lt;p&gt;因为它将两个很相似的词：tier 和 layer，生硬地赋上了两个差别挺大的含义：物理分层和逻辑分层。&lt;strong&gt;这为术语的使用者增加了额外的思维负担。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于叙述者来说，在表述的时候，需要先想清楚自己要强调的是物理分层还是逻辑分层，然后再将其转化为 tier 或者 layer。&lt;/p&gt;
&lt;p&gt;而对于听者来说，则需要在接受到 tier 或者 layer 这两个词以后，把他们翻译成物理分层或者逻辑分层，在进一步去理解这个架构。&lt;/p&gt;
&lt;p&gt;如果听者没有接受过专门的“术语训练”，他很有可能没有体会到表述者使用这两个术语背后的区别，于是，&lt;strong&gt;信息丢失&lt;/strong&gt;出现了；&lt;/p&gt;
&lt;p&gt;如果表述者没有意识到这两个术语的区别的话，在使用上相对随意，但听者却对这类术语很敏感，就会导致沟通上的&lt;strong&gt;信息错位&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;那我觉得怎样好呢？&lt;/p&gt;
&lt;p&gt;很简单，&lt;strong&gt;tier 和 layer 就是两个同义词，没必要做区分。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们不过是想把“物理分层”或者“逻辑分层”这样的区别表达出来，&lt;strong&gt;直接把“物理”或者“逻辑”这个词说出来就好了。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;physical layer 或者 physical tier，他们都表示物理上的分层；&lt;/p&gt;
&lt;p&gt;logical layer 或者 logical tier，他们都表示逻辑上的分层；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3-physical-tier architecture&lt;/strong&gt; 或者 &lt;strong&gt;3-physical-layer architecture&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;对于这个表述，我同意，它比说 3-tier architecture，多用了几个字。&lt;/p&gt;
&lt;p&gt;但是，没有多那么多，完全在承受范围里。&lt;/p&gt;
&lt;p&gt;关键是，它的表意极其清晰。无论是叙述者，还是听者，都不需要有过多的“领域术语知识”，就能达到沟通的目的。&lt;/p&gt;
&lt;p&gt;而&lt;strong&gt;我们发明术语，发明新名词，本意是让沟通更顺畅的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果在一些场合，他们阻碍了沟通，或许，我们就应该反思了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;P.S.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;说到表意清晰，多聊两句。&lt;/p&gt;
&lt;p&gt;听过我的课程的同学都知道，我的代码风格，倾向于“表意清晰”，而非“代码简洁”。所以，我在我的课程中，不会推崇一些“炫技”的写法，虽然他们看起来很酷。&lt;/p&gt;
&lt;p&gt;“表意清晰”的代码，可能会对性能有一些影响，但在现代计算机上，影响并不大。&lt;strong&gt;与其纠结这点儿性能开销，不如去追求复杂度更优的算法。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;更关键的是，在我看来，表意清晰是组建正确逻辑的关键。你能极其清晰地了解自己写的每一个函数，每一个变量，意义是什么，就不会逻辑混乱，把自己“绕进去”；同时，代码的阅读者，也很容易理解。&lt;/p&gt;
&lt;p&gt;这一点不但在协同工作中意义重大，更重要的是，它能帮助你减少书写 bug。&lt;/p&gt;
&lt;p&gt;在我看来，很多同学代码的 bug，都可以在“表意”上找到根源。&lt;/p&gt;
&lt;p&gt;不清楚自己设立的变量或者函数的语义是什么，这种就不多说了。很多同学或是偷懒，或是炫技，让一个变量多表示一层意义；或者让一个函数完成一个功能的同时，顺便完成另一个功能。&lt;strong&gt;bug 就在这个过程中产生了。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;软件开发，首先要组建正确的逻辑，让软件可以被使用。&lt;/strong&gt;之后，再谈优化。&lt;/p&gt;
&lt;p&gt;尤其是这种实现层面的优化，而非算法层面的优化。&lt;/p&gt;
&lt;p&gt;大神 Donald Knuth，称其为 small efficiencies。&lt;/p&gt;
&lt;p&gt;他的名言：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Premature optimizatioon is the root of all evil.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;过早的优化，是万恶之源。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="knuth" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-12-01/knuth.png" /&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-12-01/readme.md" rel="alternate"/></entry><entry><id>2020/2020-11-26/readme.md</id><title>在惊讶中学习</title><updated>2020-11-26T00:00:00-07:00</updated><content>&lt;h2&gt;在惊讶中学习&lt;/h2&gt;
&lt;p&gt;美国大选的局势已经相对明朗了，虽然川普表示还会继续为挑战选举结果而努力，但与此同时，川普政府也已经正式通知拜登团队，准备好了政权过渡的过程。&lt;/p&gt;
&lt;p&gt;如果没有意外，明年一月，川普就下台了。当然，如果 2021 年更魔幻的话，意外还会发生。&lt;/p&gt;
&lt;p&gt;这是一个不缺黑天鹅事件的时代。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;在大选前，我曾看过一篇文章，用非常翔实的数据，做了一个数学模型，最终预测川普获胜。当时我觉得整体分析过程挺不错，收藏了那篇文章。&lt;/p&gt;
&lt;p&gt;如今，我想回头去看看那篇文章中的模型，哪些分析结果与实际不符，竟然发现作者把自己的文章给删除了 &lt;/p&gt;
&lt;p&gt;太可惜了。算法预测失败是很正常的呀！关键是复盘，总结，让大家看到问题出在哪里，这也是学习，甚至是更重要的学习呀。&lt;/p&gt;
&lt;p&gt;这届数据分析师和机器学习工程师，真不讲武德 🤷‍♂️&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;从失败中学习，是一个老生常谈的话题，我这么酷，就不聊这个了。&lt;/p&gt;
&lt;p&gt;但最近看到一句话，我觉得挺有意思，仔细想想，也挺有道理。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;People learn when they’re surprised.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我的翻译：人们在惊讶中学习。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;回想我学习编程的过程，经常是在惊讶中学习的。&lt;/p&gt;
&lt;p&gt;我自认为自己理科不错，逻辑缜密。但是在学习计算机的过程中，却经常惊讶地发现：用我“缜密”的逻辑，编写出的“完美”的代码，竟！然！是！错！的！&lt;/p&gt;
&lt;p&gt;这怎么可能？！&lt;/p&gt;
&lt;p&gt;我无法置信。一定是计算机有问题！&lt;/p&gt;
&lt;p&gt;于是，我开始调试，开始跟踪，开始认真看我“完美”的程序在计算机中的每步执行，看每一个变量在如何变化。我小心地去寻找，一定要找到，计算机究竟哪里出了问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;直到我找到了自己的问题，我又学到了新东西。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;说出来可能很多人不相信，我是非常喜欢 debug 的。&lt;/p&gt;
&lt;p&gt;不要误会。我不喜欢 debug 别人的代码，所以不要把你的代码发给我让我 debug。我只喜欢 debug 自己的代码。&lt;/p&gt;
&lt;p&gt;这其中的原因就在于：但凡是我写出的代码，我坚信已经思考得很清晰了。但为什么会出错？这太不可思议了！我一定要把这个错误找出来！&lt;/p&gt;
&lt;p&gt;这种惊讶，让我保持着学习的动力。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;前一阵子，看了一篇文章，觉得挺有意思。&lt;/p&gt;
&lt;p&gt;文章提出了一个观点：现在的教科书中，一大弊病就是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;astonishing facts were presented without astonishment.&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我的翻译：让人惊讶的事实，被表述得毫不让人惊讶。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;文章的作者聊的是生物学。他引述了 Lewis Thomas 在 &lt;The Medusa and the Snail&gt;  一书中的一段话（不用看英文，下面有翻译）。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For the real amazement, if you wish to be amazed, is this process. You start out as a single cell derived from the coupling of a sperm and an egg; this divides in two, then four, then eight, and so on, and at a certain stage there emerges a single cell which has as all its progeny the human brain. The mere existence of such a cell should be one of the great astonishments of the earth. People ought to be walking around all day, all through their waking hours calling to each other in endless wonderment, talking of nothing except that cell.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我的简单翻译：&lt;/p&gt;
&lt;p&gt;真正让人惊奇的是——如果你想要看一些惊奇的事儿的话——就是这个过程。一开始，你只不过是一个精子和卵子结合产生的单细胞；这个单细胞一分为二，然后是四个，然后是八个，以此类推。&lt;/p&gt;
&lt;p&gt;到了一定阶段，突然又出现了一种细胞，这种细胞的后代，就是你的大脑！&lt;/p&gt;
&lt;p&gt;仅仅有这样一种细胞的存在，就应该算得上地球上的一大奇迹！&lt;/p&gt;
&lt;p&gt;人们应该整天在他们清醒的时间里，彼此之间都在无尽的惊奇中呼唤，这太神奇了！我们应该除了那个细胞，什么也不谈！&lt;/p&gt;
&lt;p&gt;&lt;img alt="snail" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-11-26/snail.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我看到这段描写，忍不住笑出了声。&lt;/p&gt;
&lt;p&gt;但是，他说得多么有道理呀！这难道不让人惊奇吗？&lt;/p&gt;
&lt;p&gt;文章的作者说，他看完这段话，瞬间对生物学产生了浓厚的兴趣。&lt;/p&gt;
&lt;p&gt;是啊！这一切都太让人惊讶了！&lt;/p&gt;
&lt;p&gt;他希望他的高中老师，可以这样教他们生物，而不是平铺直叙，告诉大家，这是 DNA，那是 RNA，还有 mRNA 和 tRNA，大家注意他们的区别。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;实际上，哪个学科不是如此呢？&lt;/p&gt;
&lt;p&gt;以计算机为例，如果只是讲选择排序算法和归并排序算法，这只是两种不同的排序算法而已，甚至有些枯燥。毕竟，排序有什么意思？&lt;/p&gt;
&lt;p&gt;但是，你敢相信吗？当我们要排序的元素规模达到一定程度的时候，归并排序算法在一个小时的时间里能做的事情，选择排序算法可能耗尽你这辈子都做不完！&lt;/p&gt;
&lt;p&gt;这难道不让人惊讶吗？你难道不想搞明白这些算法吗？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;如果只是讲计算机的组成原理，这里是存储器，那里是寄存器；这里是加法器，那里是乘法器；计算机内部这样表示负数，那样表示浮点数，听起来让人昏昏欲睡。&lt;/p&gt;
&lt;p&gt;但是，你敢相信吗？计算机仅仅处理 0 和 1 组成的信息，就能完成我们现在所看到的一切！酷炫的 3A 游戏大作；神奇的互联网；复杂的图像编辑或者程序的运行。是的，这一切，只需要 0 和 1！&lt;/p&gt;
&lt;p&gt;在我看来，计算机只靠 0 和 1，能够显示出一张普普通通的照片，都足够让我惊讶！你难道不想搞明白计算机的底层原理吗？&lt;/p&gt;
&lt;p&gt;&lt;img alt="zelda" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-11-26/zelda.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;如果只是讲各种不同的自动机模型，什么有穷自动机，非确定自动机，下推自动机，图灵机，摆在你的面前，那一定让人头昏脑涨。&lt;/p&gt;
&lt;p&gt;但是，你敢相信吗？我们在计算机中编写程序，只不过写出了一个个字符串。然而，就是这些字符串，最终就会转化成可以执行的程序，实际地运行起来！&lt;/p&gt;
&lt;p&gt;各种网站，各种 App，甚至是各种操作系统，不过是程序员们“堆砌”的字符串，经过计算机“翻译”后得到的结果而已。计算机到底是怎么翻译的？这也太神奇了吧！&lt;/p&gt;
&lt;p&gt;而这些奇迹背后的模型，就是那些自动机。你难道不想搞明白他们吗？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;这样的例子太多太多。&lt;/p&gt;
&lt;p&gt;我学习计算机的过程，就是一个不断被惊讶的过程。&lt;/p&gt;
&lt;p&gt;代码还可以这样写？编程语言还能有这种特性？这样的问题竟然可以被计算机求解？竟然还可以这样解决？&lt;/p&gt;
&lt;p&gt;计算机还能这样？程序还能那样？&lt;/p&gt;
&lt;p&gt;太神奇了，太不可思议了！&lt;/p&gt;
&lt;p&gt;我要学习！我要学习！&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;更远一点看，不仅仅是具体学科的学习。我们看待这个世界，都能从惊讶中学习。&lt;/p&gt;
&lt;p&gt;如果你坚持比特币一文不值，那么如今，比特币的价值再次逼近历史最高点，这应该会让你惊讶。或许，这背后真的有些什么东西，是值得学习的。&lt;/p&gt;
&lt;p&gt;&lt;img alt="bitcoin" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-11-26/bitcoin.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;如果你看不起同班的那个考试成绩总是中不溜的同学，却发现几年后的他颇有成就，或许你会觉得惊讶。但这或许意味着，这位同学身上，真的有值得你学习的素质和能力。&lt;/p&gt;
&lt;p&gt;甚至站在一个更加宏观的视角，我们整个世界，都是被令人惊讶的事情所推动的。&lt;/p&gt;
&lt;p&gt;偷袭珍珠港令人惊讶；911 令人惊讶；这场疫情，也令人惊讶。&lt;/p&gt;
&lt;p&gt;这些惊讶的事情，组成了人类历史的重要节点，改变了整个人类社会。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;History is driven by surprising events, not by predictable ones.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;或许，这就是因为，所有人，都是在惊讶中学习，在惊讶中创造吧。&lt;/p&gt;
&lt;p&gt;从这个角度看，这场疫情，对于整个人类文明，或许并不是一件那么糟糕的事儿。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;今天是美国的感恩节，感谢大家一直的支持。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="thanks" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-11-26/thanks.png" /&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-11-26/readme.md" rel="alternate"/></entry><entry><id>2020/2020-11-23/readme.md</id><title>旅行售货员问题背后</title><updated>2020-11-23T00:00:00-07:00</updated><content>&lt;h2&gt;旅行售货员问题背后&lt;/h2&gt;
&lt;p&gt;有同学问我，bobo 老师，TSP 问题怎么解决呀？&lt;/p&gt;
&lt;p&gt;我说，哇！这个问题好高级！&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;TSP 问题全称是 &lt;strong&gt;Travelling Salesman Problem&lt;/strong&gt;，中文翻译成是&lt;strong&gt;旅行销售员问题&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;这个问题的描述非常的简单：地图上有 n 个城市。每两个城市之间的距离是已知的。让你求出经过所有城市，并且回到出发点的最短路线。&lt;/p&gt;
&lt;p&gt;别看这个问题描述起来非常简单，但是实际解决起来却非常难。&lt;/p&gt;
&lt;p&gt;最直观的想法就是：枚举所有的旅行路线，找到其中的最短路线。可惜，这样做，时间复杂度是指数级的。&lt;/p&gt;
&lt;p&gt;如果你的地图中包含有 33 个地点，则总共的旅行路线有 263130836933693530167218012160000000 这么多。&lt;/p&gt;
&lt;p&gt;这个数字是什么概念？就算现代计算机可以在 1 秒钟内，计算出 100 亿条路线的长度，那么要枚举这么多可能性，也需要 830000000000000000 年，即 83 亿亿年。注意，有两个亿，是 8.3 * 10^17 年。&lt;/p&gt;
&lt;p&gt;天文学家估算：整个宇宙从诞生至今不过 138 亿年，而整个宇宙可能会在 1400 亿年后毁灭；其中太阳的年龄大概 50 亿年，而太阳可能还有 50 亿年就会毁灭；至于地球，可能只有 10 亿年的时间了。&lt;/p&gt;
&lt;p&gt;&lt;img alt="universe" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-11-23/universe.png" /&gt;&lt;/p&gt;
&lt;p&gt;可是，和 83 亿亿年这个数字相比，这些天文数字都显得不值得一提了。假设宇宙的总寿命是 2000 亿年，那么用枚举法计算包含有 33 个城市的旅行售货员问题，大概需要有 400 万个宇宙诞生又毁灭的时间。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;为什么我举例说 33 个城市？&lt;/p&gt;
&lt;p&gt;因为，1962 年，保洁公司发起了一个活动，叫“支援 54 号车，赢现金大奖”。这个活动就是希望参与者可以解决一个包含有 33 个城市的旅行售货员问题。活动的奖金高达 1 万美元。&lt;/p&gt;
&lt;p&gt;1 万美元在那个年代，足以买下一个房子。&lt;/p&gt;
&lt;p&gt;我们甚至可以找来当年这个活动的海报。&lt;/p&gt;
&lt;p&gt;&lt;img alt="poster" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-11-23/poster.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;如果你认为 TSP 问题只是数学家们的游戏，那就大错特错了。实际上，旅行销售员问题有巨大的用武之地。&lt;/p&gt;
&lt;p&gt;最直观的，解决这个问题，可以用来做路线规划。小到餐厅送餐，邮递员送货；大到工业运输辗转在几个城市之间的路线规划，背后都是旅行售货员问题。如果我们能高效求解这个问题，整个社会的运转效率都会大幅度提升。&lt;/p&gt;
&lt;p&gt;马里兰大学的研究小组曾经因为一个海洋项目深入的研究这个问题。因为他们在美国的切萨皮克湾，有大约 200 个监测站，用来监测海洋生物的活动。每次收集这些监测站的数据，就是一个 TSP 问题。他们起初因为每次出海时间太长，无法在特定时间内完成对所有检测站的监测，转而去求解 TSP 问题。&lt;/p&gt;
&lt;p&gt;美国老牌石油巨头美孚石油，在更早的时候，也曾遇到类似的问题。大概在 20 世纪 30 年代，美孚石油在一片海域有 47 个采油平台。如何规划路线，使用更少的成本遍历这些石油平台，进行相应的检测和维护，就成为了一个重要的问题。&lt;/p&gt;
&lt;p&gt;&lt;img alt="oil" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-11-23/oil.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;TSP 问题不仅仅出现在路线规划上，更在一些高科技领域，有着出人意料的应用。&lt;/p&gt;
&lt;p&gt;比如在生物学领域，我们有若干的基因片段。我们可以计算出这些基因片段之间的相似程度。此时，如果我们把每个基因片段看做是一个城市，把基因片段之间的相似度看做是距离，那么，求解出从一个基因片段出发，经历所有基因，达到另一个基因的最短路径，就可以帮助我们找到这些基因片段在变异过程中的时间顺序。&lt;/p&gt;
&lt;p&gt;这其实是一个典型的把问题抽象成图论问题的过程，而 TSP 问题恰恰是图论领域最重要的问题之一。&lt;/p&gt;
&lt;p&gt;再比如，美国宇航局也需要求解 TSP 问题。因为空间站上的空间望远镜，需要观测不同的行星。而空间望远镜调整一次角度和方位，都会消耗巨大的能量。那么如何选择观测顺序，把所有的目标行星都观测到，同时损耗的能量最小，就是一个 TSP 问题。&lt;/p&gt;
&lt;p&gt;&lt;img alt="hubble" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-11-23/hubble.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;类似的问题也出现在工业制造领域。比如工业制造中，我们需要在一块电路板中钻孔。如何依次打出这些小孔，使得钻头的总移动时间最短，就是 TSP 问题在现代社会的一大经典应用。&lt;/p&gt;
&lt;p&gt;类似的问题不仅仅出现在电路板制造上，在芯片制造，工艺品制造，玻璃切割，等等诸多工业领域，都有着类似的问题。&lt;/p&gt;
&lt;p&gt;&lt;img alt="board" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-11-23/board.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;说了 TSP 问题的这么多应用，可是我之前又说，解决一个 TSP 问题，需要的时间过长。那怎么办呢？&lt;/p&gt;
&lt;p&gt;欢迎来到真实的算法世界。&lt;/p&gt;
&lt;p&gt;在大多数时候，我们在书本上学习的经典算法，都能完美解决“最优问题”。比如“最短路径”，“最小生成树”，“取得整个数据的最大值，最小值”，等等等等。&lt;/p&gt;
&lt;p&gt;但是，在实际生活中，很多问题，我们无法在有限资源下找到最优解。TSP 问题就是最好的例子。&lt;/p&gt;
&lt;p&gt;怎么办？&lt;/p&gt;
&lt;p&gt;答案是：退而求其次，去&lt;strong&gt;寻找次优解&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;以 TSP 问题为例，我们无法找到最优路线，那我们就尝试去寻找一条相对比较短的路线。总长度越小越好。如果我们可以在有限的时间里，找一条尽量短的路线，也足够我们实际应用了。&lt;/p&gt;
&lt;p&gt;顺着这个思路，大家将来到一片全新的算法领域。在大多数时候，这些算法是被人工智能这个学科所涵盖的。注意，是人工智能，不是机器学习。机器学习只是人工智能的方法之一。&lt;/p&gt;
&lt;p&gt;完整阐述这算法的原理，已经可以写厚厚的一本书了。在这里，我只是随便说一些关键字。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;求解近似解，最普遍的方法，就是使用贪心算法。&lt;/p&gt;
&lt;p&gt;学习计算机专业的同学应该都了解，大多数问题由于不具备贪心性质，所以使用贪心算法不能得到最优解。但是，贪心算法确实可以帮助我们得到一个解。在很多时候，这个解还不赖。&lt;/p&gt;
&lt;p&gt;对于 TSP 问题，我们可以像 Kruskal 最小生成树算法一样，每次只取最短的边，中间遇到不能形成解的边，就扔掉。&lt;/p&gt;
&lt;p&gt;下图展示了对于一个规模为 42 的图，使用贪心算法可以得到的解。&lt;/p&gt;
&lt;p&gt;&lt;img alt="s1" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-11-23/s1.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;另一类通用算法，就是&lt;strong&gt;启发式搜索&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;所谓的启发式搜索，就是在搜索过程中，先搜索更有可能得到最优解的方式。这将更大概率地尽量早地找到一组更优的解，从而使得在后续搜索中，可以直接把另外一些搜索的选择扔掉。这叫剪枝。&lt;/p&gt;
&lt;p&gt;启发式搜索是一大类算法的总称。这类算法的代表，就是大名鼎鼎的 &lt;strong&gt;A* 算法&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;通过启发式搜索这个描述，大家也能看到，解决问题的关键是：如何定义“更有可能得到最优解的搜索路径”？这个定义没有一般性的方法，要具体问题具体分析的。通常，这被称为是&lt;strong&gt;启发函数&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;实际上，A&lt;em&gt; 算法不是唯一的启发式搜索算法。&lt;/em&gt;&lt;em&gt;爬山法，模拟退火法&lt;/em&gt;*，其实都是启发式搜索。有些同学可能在机器学习中接触过这些算法，用来最小化损失函数。而这些算法，也能被应用在更一般的最优化问题求解中。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;说到人工智能，另外两类算法不容忽视。他们都曾经在人工智能领域无比辉煌过，和现在的&lt;strong&gt;神经网络&lt;/strong&gt;一样。&lt;/p&gt;
&lt;p&gt;第一类算法是&lt;strong&gt;遗传算法&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;所谓的遗传算法，就是模拟自然界进化的过程，让“解”和“解”进行“交配”，形成更优秀的“后代”。我们可以初始生成诸多随机的解，然后让这些解“繁殖交配”。在若干次这样的过程之后，就能得到一个相对更优的解。&lt;/p&gt;
&lt;p&gt;遗传算法中所谓的“交配”，就是结合两个解的优点，形成另一个更优解的过程。具体“交配”的过程如何定义，也是因问题而定义的。&lt;/p&gt;
&lt;p&gt;对于 TSP 问题，最经典的“交配”方案，是&lt;strong&gt;边交叉法（edge-assembly crossove，简称 EAX）&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;另一类算法，则是&lt;strong&gt;蚁群优化算法（Ant-Colony Optimization，简称 ACO）。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;蚁群算法是比利时人 Marco Dorigo 在 1992 年，在他的博士毕业论文中提出的。这个算法的原理，是模拟蚂蚁工作的方式。&lt;/p&gt;
&lt;p&gt;一个蚂蚁的运动可能是毫无章法的，但是整个蚁群的运动模式，却能够协同一致，相对较快的完成任务。因为整个蚁群可以通过“信息素”进行交流，随时调整每一只蚂蚁的运动方式，进而调整整个蚁群的运动模式。&lt;/p&gt;
&lt;p&gt;蚁群算法则模拟了这个过程。在具体求解 TSP 问题的过程中，我们可以模拟让一群蚂蚁在图中的各个点进行移动，之后通过“信息素”，来调整每只蚂蚁的移动方式，最终获得一组解。&lt;/p&gt;
&lt;p&gt;在这里，“&lt;strong&gt;信息素&lt;/strong&gt;”也是一个函数，用来计算出一个值，从而决定调整方式。具体信息素是如何定义的，也是需要具体问题具体分析的，和 A* 算法中的启发函数一样。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;之前，在我的公众号里，我曾经给大家推荐过这本《人工智能，一种现代化的方法》。这应该是人工智能领域的经典了。如果大家对这些算法感兴趣，在这本书中，都有详细的讲解。&lt;/p&gt;
&lt;p&gt;&lt;img alt="book" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-11-23/book.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;当然，经典的书相对难啃，大家也可以以这本书的目录为纲，去寻找更适合自己的书籍或者资料。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;上面介绍的算法，都是相对比较通用的算法。实际上，专门针对 TSP 问题，人们还发明了很多独特的，寻找近似最优解的算法。&lt;/p&gt;
&lt;p&gt;比如&lt;strong&gt;最远插入法&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img alt="s2" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-11-23/s2.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;比如 &lt;strong&gt;Christofides 算法&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img alt="s3" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-11-23/s3.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;比如 &lt;strong&gt;Lin-Kernighan 算法&lt;/strong&gt;，以及之后的改进算法：&lt;strong&gt;Lin-Kernighan-Helsgaun 算法&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img alt="s4" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-11-23/s4.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我个人非常喜欢 Helsgaun 改进 Lin-Kernighan 算法，形成 Lin-Kernighan-Helsgaun 算法（简称 &lt;strong&gt;LKH 算法&lt;/strong&gt;）的故事。&lt;/p&gt;
&lt;p&gt;这个改进思路其实并不复杂，简单来讲，就是每次针对某一个解，同时考虑变换 10 条边，生成一个更优解。&lt;/p&gt;
&lt;p&gt;关键是，10 条边太多了，所以变换 10 条边的方式非常复杂，大概有 148 种可能之多。这些变换方式之间没有明显的规律，至少数学家们没有找到这个规律。也因为如此，没有人知道要如何实现出这个优化。&lt;/p&gt;
&lt;p&gt;但是，1998 年，计算机科学家 Keld Helsgaun 给数学界带来了一枚重磅炸弹。他实现了这个改进，完成了 LKH 算法！&lt;/p&gt;
&lt;p&gt;LKH 算法的实际性能飞跃，比大多数人预计得都要好得多。但最吸引人好奇心的是，Helsgaun 到底是如何实现的这个优化？&lt;/p&gt;
&lt;p&gt;Helsgaun 向研究界公开了他的完整代码，以此揭示他成功的秘诀。答案是：&lt;strong&gt;没有秘诀。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;他在代码里，完整列出了所有 148 种情形，分别讨论了这些可能性。他为了写出正确的代码，付出了堪比愚公移山的努力。&lt;/p&gt;
&lt;p&gt;回顾历史，看那些伟大的计算机学家，...&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;同学：“老师，等等，等等。你说的我已经越来越听不懂了。怎么愚公移山都出来了？🤔”&lt;/p&gt;
&lt;p&gt;我：“额？”&lt;/p&gt;
&lt;p&gt;同学：“老师，其实，我要解决的 TSP 问题，&lt;strong&gt;只有 8 个城市&lt;/strong&gt;，要怎么做啊？”&lt;/p&gt;
&lt;p&gt;我：“... ”&lt;/p&gt;
&lt;p&gt;我：“&lt;strong&gt;穷举&lt;/strong&gt;所有的可能即可。8 的阶乘不过是 40320 种可能。对于每一个可能，计算其距离，再遍历 8 个城市，整体计算量不过 30 万这个量级。对于现代计算机来说，轻而易举......”&lt;/p&gt;
&lt;p&gt;同学：“老师，我懂了。谢谢老师！”&lt;/p&gt;
&lt;p&gt;我：“...”&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;P.S. 本文内容根据真实问答经历改编。&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-11-23/readme.md" rel="alternate"/></entry><entry><id>2020/2020-11-13/readme.md</id><title>程序员凡学指南</title><updated>2020-11-13T00:00:00-07:00</updated><content>&lt;h2&gt;程序员凡学指南&lt;/h2&gt;
&lt;p&gt;周末了，来篇轻松的。&lt;/p&gt;
&lt;p&gt;最近“凡尔赛文学”非常火。我一看，就是不经意地炫富呗。&lt;/p&gt;
&lt;p&gt;&lt;img alt="definition" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-11-13/definition.png" /&gt;&lt;/p&gt;
&lt;p&gt;炫富咱不会，毕竟咱不富。但是作为一名技术人，低调地炫耀自己的技术水平，咱懂。&lt;/p&gt;
&lt;p&gt;不要问我为什么懂这个技能。每个创过业，拉过投资，需要在外行人面前侃侃而谈，假装自己技术很牛逼的人，都懂。[手动狗头]&lt;/p&gt;
&lt;p&gt;在这篇文章里，我给大家分享一下我的独家秘诀。拿走不谢 [手动狗头]&lt;/p&gt;
&lt;p&gt;免责声明：以下秘诀请根据自己的情况酌情谨慎使用。他们对不同的人群效果是不同的，甚至有的时候会起到反效果。[手动狗头]&lt;/p&gt;
&lt;p&gt;另外，本文将大量使用狗头保命。[手动狗头]&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;1，用英文。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;比如这样：&lt;/p&gt;
&lt;p&gt;&lt;img alt="1" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-11-13/1.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;如果说成是：重构，就是要做进一步的抽象，封装，提取和一般化。效果大打折扣 。&lt;/p&gt;
&lt;p&gt;另外，选择什么词用英文表述很重要。&lt;/p&gt;
&lt;p&gt;太朴素的词语，比如非要把人工智能说成是 Artificial Intelligence；非要把算法说成是 Algorithm；非要把数据结构说成是 Data Structure，会让人觉得太装。&lt;/p&gt;
&lt;p&gt;这些相对具体的名词，直接使用中文，效果更好。&lt;strong&gt;请选择把比较抽象的词换成英文&lt;/strong&gt; [手动狗头]&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2，来不来就直指某个技术的“本质”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;比如这样：&lt;/p&gt;
&lt;p&gt;&lt;img alt="2" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-11-13/2.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;对了，忘了说了，这四个词是我在维基百科上查“重构”这个词条以后，随便选的四个词，所以，和重构的本质没啥关系 [手动狗头]&lt;/p&gt;
&lt;p&gt;在大多数情况下，不会有人质疑。毕竟，“本质”其实是很主观的概念。&lt;/p&gt;
&lt;p&gt;甚至，你说：X 的本质是 Y。X 和 Y 之间的关系甚微，也没有关系。只要足够高大上。比如：&lt;/p&gt;
&lt;p&gt;&lt;img alt="3" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-11-13/3.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;前面的两个词和后面的四个词，有关系吗？Who cares。看起来好像有点儿道理就行了 [手动狗头]&lt;/p&gt;
&lt;p&gt;这里对第一条补充一点，能用英文缩写的地方，请使用英文缩写。[手动狗头]&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3，在指出“本质”前，进行一定的批判&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;即使你的批判毫无道理，也没有关系。比如这样：&lt;/p&gt;
&lt;p&gt;&lt;img alt="4" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-11-13/4.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;这个批判就毫无道理。我从来没有见过任何人认为“重构”就是“重写” [手动狗头]&lt;/p&gt;
&lt;p&gt;但这句话一旦有了批判性，似乎就显得思考的很深刻。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;再比如：&lt;/p&gt;
&lt;p&gt;&lt;img alt="5" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-11-13/5.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;顺便悄悄说一句：&lt;strong&gt;批判一个新东西并不是什么新东西，是一种常见的批判手法。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;毕竟所有的新东西都肯定有旧东西的影子，所以这个批判方式永远不会错 [手动狗头]&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4，随手配张图&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;图多简单都没有关系，比如这样：&lt;/p&gt;
&lt;p&gt;&lt;img alt="6" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-11-13/6.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;相信很多同学都看出来了，这个图毫无道理。&lt;/p&gt;
&lt;p&gt;懂这些概念的同学就知道，IaaS 和 FaaS 画一个交集根本没有逻辑。但这不重要，画上去，就好像很厉害的亚子。[手动狗头]&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5，引用一篇论文&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;即使引用这篇论文并不是必须。比如：：&lt;/p&gt;
&lt;p&gt;&lt;img alt="7" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-11-13/7.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;请注意，这段话完全是胡扯。人工智能和计算复杂理论没啥直接关系；NPC 问题和 NP-Hard 问题的边界这样的说法也是鬼扯。&lt;/p&gt;
&lt;p&gt;但这不重要，糊弄外行人足够了 [手动狗头]&lt;/p&gt;
&lt;p&gt;敲黑板敲黑板 👨‍🏫请体会我在这段话中使用的各种综合技巧。包括：&lt;/p&gt;
&lt;p&gt;引用论文；特殊的名词用英文；高大上的缩写；带有一定的批判性；还装模作样配了一幅图 [手动狗头]&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6，最后，基础我的大杀器！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;那就是，对于所有的技术，问一句：&lt;strong&gt;能不能 scale？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;比如：&lt;/p&gt;
&lt;p&gt;&lt;img alt="8" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-11-13/8.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;不要问我什么是一个语言的 Scalability！我也不知道！&lt;/p&gt;
&lt;p&gt;但是这个问题在技术的世界里，只要问出来，听起来似乎就有点儿道理。[手动狗头]&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;再比如：&lt;/p&gt;
&lt;p&gt;&lt;img alt="9" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-11-13/9.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;不要问我什么叫一个芯片能不能 scale！我也不知道！但是这么问就行了 [手动狗头]&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;最后，听说经常这么反思的，别管真的假的，都升职加薪了。&lt;/p&gt;
&lt;p&gt;&lt;img alt="10" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-11-13/10.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;下次你可以试试看？这么写，看看老板会不会点赞？[手动狗头]&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;你学会了吗？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;免责声明&lt;/strong&gt;：使用本文的秘诀编写自己的朋友圈，产生任何负面效果，后果自负。&lt;/p&gt;
&lt;p&gt;&lt;img alt="dodge" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-11-13/dodge.png" /&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-11-13/readme.md" rel="alternate"/></entry><entry><id>2020/2020-11-12/readme.md</id><title>如果明天量子计算机量产</title><updated>2020-11-12T00:00:00-07:00</updated><content>&lt;h2&gt;如果明天量子计算机量产&lt;/h2&gt;
&lt;p&gt;这是在我的知识星球上，一个同学问我的问题。&lt;/p&gt;
&lt;p&gt;请问波波老师，如果明天量子计算机量产，那么我们现在学习的数据结构、算法，还有用吗？编程语言会怎么样？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;bobo 老师的回答：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果明天量子计算机量产，现在学的数据结构，算法，还有用吗？&lt;/p&gt;
&lt;p&gt;我敢非常肯定地告诉你：还有用。但于此同时，也会有更多新的算法出现，或者旧的算法思路，根据量子计算机的特性被重新实现。&lt;/p&gt;
&lt;p&gt;你知道《算法导论第三版》和《算法导论第二版》最大的区别是什么吗？&lt;/p&gt;
&lt;p&gt;最大的区别，就是《算法导论第三版》增加了全新的一章，介绍并行算法。&lt;/p&gt;
&lt;p&gt;但全书 95% 的其他主题，是没有变化的。&lt;strong&gt;深入理解并行算法的基础，是把串行算法的概念学好。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;至于编程语言，近乎一定会有新的基于量子计算机体系结构的语言出现。实际上，现在已经有量子编程语言 Q# 了。&lt;/p&gt;
&lt;p&gt;虽然量子计算机还一点儿都不普及，但我们完全可以使用软件模拟量子计算机的工作原理，来开始设计，学习量子编程语言。&lt;/p&gt;
&lt;p&gt;甚至，教材都有了。还不少。随便来两个封面。&lt;/p&gt;
&lt;p&gt;&lt;img alt="book1" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-11-12/book1.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="book2" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-11-12/book2.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;在 Codeforces 上，微软也已经赞助了好几场基于 Q# 的编程竞赛了。要是有兴趣，可以找来看一看。&lt;/p&gt;
&lt;p&gt;&lt;img alt="cf" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-11-12/cf.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;但实际上，这个问题&lt;strong&gt;假设性太强&lt;/strong&gt;。因为量子计算机不可能明天量产。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;所有的新技术，从出现，到最终成熟、规模化，都是需要时间的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在这段时间中，慢慢的，和这个新技术相关的配套设施，从软件，到硬件，到教育环境，社会环境，大众的接受度，都是逐渐成熟的，而不会产生突然性的变革。&lt;/p&gt;
&lt;p&gt;在这段时间里，所有相关从业人员可以慢慢适应，但不会大家突然都失业。当然，如果几年过去还不能适应的人，就会被时代淘汰。&lt;/p&gt;
&lt;p&gt;所有的“突然性的变革”，都只是出现在历史评论中的。站在回看历史的角度，好像一下子人类就进入了新时代。但置身其中，永远是一个渐变的过程。&lt;/p&gt;
&lt;p&gt;毕竟回望历史，别说几年十几年，100 年都弹指一挥间。&lt;/p&gt;
&lt;p&gt;我在我的公众号文章&lt;a href="https://github.com/liuyubobobo/ai-learning-roadmap"&gt;《如果真的学习人工智能》&lt;/a&gt;中，列举的很多科目，在十年前根本不是计算机科班必修，比如并行计算基础，比如机器学习基础。但随着并行计算，机器学习越来越发展，已经慢慢成为了计算机专业的必修课程。&lt;/p&gt;
&lt;p&gt;同时，一些比较老的课程，也会随着行业成熟，慢慢不再需要所有人学习。比如数值分析，比如模拟电路，甚至可能以后汇编都不是科班必学，但某个量子计算的语言却是必学的。这就是时代在发展，社会环境在跟着演进。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;至于现在学习的知识，完全没必要害怕它没用了，&lt;strong&gt;越内功的知识越不怕。&lt;/strong&gt;当然，我们也不能指望着靠现在的知识吃一辈子。&lt;/p&gt;
&lt;p&gt;放心，当量子计算机真的普及，量子计算真的有巨大的市场红利的时候，&lt;strong&gt;最先吃到这波红利的，绝对是当下计算机行业，或者互联网行业的老鸟。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我认识几个以前搞塞班开发的开发者。为了防止有的同学不知道什么是塞班，多说一句：塞班是之前诺基亚手机的操作系统。后来，随着诺基亚的没落，塞班开发也越来越“没用”。2013 年，塞班正式停止发展。&lt;/p&gt;
&lt;p&gt;&lt;img alt="symbian" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-11-12/symbian.png" /&gt;&lt;/p&gt;
&lt;p&gt;那这些塞班开发者，就失业了吗？被时代淘汰了？从此人生一蹶不振了吗？&lt;/p&gt;
&lt;p&gt;才不是呢。&lt;/p&gt;
&lt;p&gt;实际上，正因为有着“超前”的移动开发经验，这些人恰恰是最早拥抱 iOS 开发，享受 iOS 开发市场红利的人。后来，因为移动端发展的迅速，他们才是时代的幸运儿。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-11-12/readme.md" rel="alternate"/></entry><entry><id>2020/2020-11-11/readme.md</id><title>换个角度思考问题</title><updated>2020-11-11T00:00:00-07:00</updated><content>&lt;h2&gt;换个角度思考问题&lt;/h2&gt;
&lt;p&gt;我的前投资老板有一个电报群，这个群里的人大多是他的朋友，以海外华人为主。&lt;/p&gt;
&lt;p&gt;这个群在过去的一个星期，不出所料地打了起来。原因自然是美国大选。&lt;/p&gt;
&lt;p&gt;&lt;img alt="us" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-11-11/us.png" /&gt;&lt;/p&gt;
&lt;p&gt;实际上，因为我的前投资老板人在澳洲，所以这个群里的大多数人都在澳洲。他们再怎么打，也对美国大选没有半点影响。&lt;/p&gt;
&lt;p&gt;群里只有少数人在美国，但我估计，还有很多人并没有投票权，比如我。&lt;/p&gt;
&lt;p&gt;所以，这么一群人因为美国大选吵得面红耳赤，我觉得挺好笑。&lt;/p&gt;
&lt;p&gt;我的前投资老板认识的朋友，社会阶层普遍不低。受教育程度即使因为时代原因偏低一些，但也绝对是同龄人中的榜样。无论是积累的财富，还是眼界，都是中等偏上。&lt;/p&gt;
&lt;p&gt;这么一群人，面对美国大选产生的意见分歧，吵出来的内容，竟然和我在网上绝大多数地方见到嘴炮儿没什么区别。这让我觉得好笑，同时也有失望。这也让我再次深刻意识到，遇到一个和我的前投资老板一样的人有多么地难。&lt;/p&gt;
&lt;p&gt;为什么这么说？我最佩服我的前投资老板的，是他看待问题的“理性”。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;什么叫理性？我不知道这个世界上有没有关于这个词的严谨定义。但如果让我给理性下定义，就是&lt;strong&gt;能够从不同的角度看待同样的问题。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果你去仔细观察那些“煽动人心”的“非理性”的言论，就会发现他们有着出奇一致的共同点：&lt;strong&gt;他们只是站在自己的立场拼命呼喊，却看不见对方的观点。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;比如有人说，美国大选中，民主党肯定作弊了！从川普选前集会的阵势就能看出来！&lt;/p&gt;
&lt;p&gt;川普的集会人山人海；而拜登选前的集会，参与的人少得可怜！这么直接的证据，还不能说明问题吗？&lt;/p&gt;
&lt;p&gt;但是他们却忽视了，拜登的支持者，大多对待疫情的态度是严格保持社交距离，尽量避免集会。所以拜登选前的集会看起来没那么热闹。&lt;/p&gt;
&lt;p&gt;而拜登支持者的这一风格，甚至延续到了大选投票上。川普的支持者都积极地前往投票站亲自投票，而拜登的很多支持者由于顾及疫情，选择了邮寄投票。这也就是为什么在统计邮寄选票之前，川普遥遥领先，但是当开始统计邮寄选票的时候，拜登反超了回来。&lt;/p&gt;
&lt;p&gt;我并不是说这场大选绝对没有问题。我只是说，现在发生的一切，并没有那么奇怪，合理的解释就在眼前，一点儿都不难理解。&lt;/p&gt;
&lt;p&gt;仅仅通过选前集会的阵势来佐证大选舞弊，是不理性的。&lt;/p&gt;
&lt;p&gt;当然，川普的支持者有权利怀疑民主党舞弊。大选舞弊是一个很严肃的指控，&lt;strong&gt;我坚信川普的团队比任何人都更有动力，也更有资源，通过正当的法律途径，来揭示出大选中可能存在的问题。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;而通过法律途径解决问题，是最有效的。&lt;/p&gt;
&lt;p&gt;注意，我并没有说通过法律途径，一定可以解决问题。但以我对美国的理解，如果这件事情无法通过法律解决的话，通过其他途径更难解决。&lt;/p&gt;
&lt;p&gt;至少两边在社交媒体上疯狂对骂是肯定没有帮助的，除了加深美国的割裂。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;在我看来，现在很多人都在讨论的，所谓的美国的割裂，一个重要的原因就是，能够站在对方的角度思考问题的人太少了。&lt;/p&gt;
&lt;p&gt;两边的人都深陷在自己的立场中无法自拔。铁锈一带的低收入劳动者无法想象如果自己是出生在大城市的精英家庭，观点是否会发生改变；大城市的精英也无法想象如果自己出生在破败的铁锈一带，是否观点会发生改变。&lt;/p&gt;
&lt;p&gt;从这个角度，我非常喜欢看一些有责任感的社会学家，抛开主观的政治偏好，认真地去分析当下割裂的美国，各个族群，各个阶层，各个行业的人们，他们的所思所想，以及为什么会逐渐产生这样的变化。&lt;/p&gt;
&lt;p&gt;当我们抛开自己的立场，站在自己的对立面去认真思考的时候，理性的光辉就出现了。&lt;/p&gt;
&lt;p&gt;只可惜，这样的人太少了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果我的出身是这样的，或者如果我的境遇是那样的，我的观点是否会产生改变？&lt;/strong&gt;这是我的前投资老板经常引导我思考的问题。&lt;/p&gt;
&lt;p&gt;因为我们当时的创业项目需要采访很多传统行业的企业，比如农业从业者；比如三四线城市的食品厂，服装厂；比如那些营业额可能还不如大城市里打工族一年工资高的小微企业；等等等等。&lt;/p&gt;
&lt;p&gt;初次面对这些行业的人时，我对他们的很多想法，做法，都充满不解。但是，一旦我深入了解他们的生活，开始思考，如果我是他们，我会怎样的时候，大多数不理解都会变为理解。&lt;/p&gt;
&lt;p&gt;在当下，很多所谓的精英人士崇尚“功利主义”，不认为这种理解对自己有任何帮助。我的前投资老板告诉我，&lt;strong&gt;即使你的目的不是追求更平和的内心，这种“理解”背后也蕴含着巨大的机遇。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我不知道现在是不是还有同学了解 hao123。这在当年是一个简单的不能再简单的导航网站，2006 年，百度却花了 5000 万收购了这个网站。&lt;/p&gt;
&lt;p&gt;14 年前的 5000 万，放到现在也是几个亿了。&lt;/p&gt;
&lt;p&gt;&lt;img alt="hao123" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-11-11/hao123.png" /&gt;&lt;/p&gt;
&lt;p&gt;当时，很多互联网人不理解，这么一个“破”网站，一个“农民”就能做出来，凭什么值那么多钱？而事实是，正因为那些“精英互联网人”不是“农民”，不理解“农民”的需求，所以他们永远也做不出 hao123 这么“简单”的网站。&lt;/p&gt;
&lt;p&gt;这个解释，放到后来出现的种种互联网“怪象”上，同样成立。比如拼多多；比如快手；比如土豪在“破游戏”上动辄几万元的消费；比如多到令人咋舌的直播打赏。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;在我看来，换个角度去思考问题，不仅仅可以用来理解不同人群之间的观念和生活状态，作为技术人，也可以用来观察技术的世界。&lt;/p&gt;
&lt;p&gt;比如，前一阵子有个新闻挺火。在一场苏格兰的足球比赛中，转播比赛的摄像头使用 AI 技术自动跟踪足球。结果，在比赛过程中，AI 一度错误地把边裁的光头辨识成了足球进行跟踪。&lt;/p&gt;
&lt;p&gt;电视机前的观众因此看了半天光头裁判跑来跑去。&lt;/p&gt;
&lt;p&gt;&lt;img alt="football" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-11-11/football.gif" /&gt;&lt;/p&gt;
&lt;p&gt;很多人因此高呼，AI 一点儿都不靠谱，AI 被人们高估了。&lt;/p&gt;
&lt;p&gt;但是，大家有没有想过，因为这次事故，电视台或者足球俱乐部，是更大概率的从此不再使用这个 AI？还是吸取这次事故的经验教训，更多地测试，实验，以方便未来更多地使用这种 AI？&lt;/p&gt;
&lt;p&gt;这次事故到底是 AI 的终结者？还是仅仅是 AI 发展道路上的一个小插曲？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;再比如，更早之前，美国有个新闻很火，大意是，美国某警局全面改用特斯拉作为警车。结果在一次高速公路的追捕过程中，执行追捕任务的特斯拉警车由于没有事先充满电，追捕到一半没电了，只能目送肇事车辆逃之夭夭。&lt;/p&gt;
&lt;p&gt;&lt;img alt="tesla" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-11-11/tesla.png" /&gt;&lt;/p&gt;
&lt;p&gt;面对这个事故，很多人抑制不住地嘲讽特斯拉。但是，大家有没有想过，难道汽车就不会因为没有加满油，而追捕到一半没有油了吗？当年汽车刚刚出现的时候，是不是马车车夫们也会这样嘲笑汽车？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;对于这些问题，我并没有说哪个答案一定是正确的。我只是想说，&lt;strong&gt;当我们换一个角度去思考问题的时候，往往能看见事情的另一面。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;类似这样的问题非常非常多。&lt;/p&gt;
&lt;p&gt;比如，一个你认为很简单的问题，会不会实际上很难？不然，为什么有那么多老板能说出“给你 2000，做个淘宝”这样的话？&lt;/p&gt;
&lt;p&gt;比如，一个你不看好的技术，真的那么不堪吗？区块链只能用来产生加密币“骗钱”吗？如果是这样的话，为什么 Amazon 上有那么多专门介绍区块链技术的书籍？我国为什么要测试数字人民币？&lt;/p&gt;
&lt;p&gt;PHP 真的死了吗？而那些所谓的高大上的语言，比如 LISP，被称为是“上帝的编程语言”，为什么实际应用却那么少？似乎还不如一直被程序员们嘲笑的 PHP？&lt;/p&gt;
&lt;p&gt;有些所谓的成熟的技术，真的成熟了吗？&lt;/p&gt;
&lt;p&gt;那为什么到现在，新的语言依然层出不穷？比如 go，比如 rust，比如 Kotlin，Swift，比如 TypeScript；为什么新的数据库技术层出不穷？比如 MongoDB，比如 Redis，比如 PostgreSQL，比如 HBase 或者 Splunk？&lt;/p&gt;
&lt;p&gt;而那些所谓的前沿技术，真的那么前沿吗？&lt;/p&gt;
&lt;p&gt;比如 AI。深度学习的流行已经有小十年时间了，在这段时间里，AI 技术的发展有质的变化吗？AI 技术的应用领域有数量级的扩展吗？为什么马斯克不停地说 L5 无人驾驶很快就会出现，却一直没有出现？&lt;/p&gt;
&lt;p&gt;再比如，一个已经存在已久的产品需求，真的没有市场了吗？那为什么笔记这么简单而又朴素的需求，近乎所有的手机系统都内置笔记软件，印象笔记曾经占据了笔记市场大半江山。在 2016 年，一款叫做 Notion 的笔记软件，再次流行起来，甚至席卷全球？&lt;/p&gt;
&lt;p&gt;&lt;img alt="notion" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-11-11/notion.png" /&gt;&lt;/p&gt;
&lt;p&gt;对于这些问题，我都没有答案。我也不站在某一方。&lt;/p&gt;
&lt;p&gt;我只是想说，很多时候，看起来很显然的问题，或许没有那么显然。&lt;/p&gt;
&lt;p&gt;换一个角度思考问题，或许会看到事情的另一面。那比不断站在自己的立场和别人吵架，有意义得多。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-11-11/readme.md" rel="alternate"/></entry><entry><id>2020/2020-10-26/readme.md</id><title>Tarjan 这个大神</title><updated>2020-10-26T00:00:00-07:00</updated><content>&lt;h2&gt;Tarjan 这个大神&lt;/h2&gt;
&lt;p&gt;有同学在学习图论算法的时候，发现这里有个 Tarjan 算法，那里有个 Tarjan 算法，而似乎 Tarjan 算法解决的问题并不一样，于是非常迷惑：Tarjan 算法到底是指什么？&lt;/p&gt;
&lt;p&gt;这是一个很好的问题。Tarjan 是计算机领域的大牛，发明了很多现在大家耳熟能详的算法或者数据结构，所以有同学会觉得冠他名字的算法有些多。&lt;/p&gt;
&lt;p&gt;但如果我们仔细梳理一下，其实并不复杂。&lt;/p&gt;
&lt;p&gt;在这篇文章中，我会带领大家梳理一下 Tarjan 发明的算法都有哪些，整体脉络是怎样的。&lt;/p&gt;
&lt;p&gt;注意：在这篇文章中，我不会具体讲解某个算法的原理。但是，我会给出很多具体的关键字，并且标红。如果大家对某个算法想深入了解，可以以此为引，在互联网上搜索学习。&lt;/p&gt;
&lt;p&gt;我相信，互联网上关于某个具体算法的资料是非常多的，反而是这样按照某个脉络做总结的文章很少。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;首先，Tarjan 是一名美国的计算机科学家和数学家，全名 Robert Endre Tarjan。&lt;/p&gt;
&lt;p&gt;先来一个 Tarjan 大神的名言镇楼：&lt;/p&gt;
&lt;p&gt;&lt;img alt="quote" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-10-26/quote.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;一般提起 Tarjan 算法，通常是指 Tarjan 发明的求解有向图的强联通分量算法，全称是 &lt;strong&gt;Tarjan’s Strongly Connected Components Algorithm.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为什么这么叫？因为求解有向图的强联通分量还有一个著名算法：&lt;strong&gt;Kosaraju 算法&lt;/strong&gt;。Kosaraju 算法也是以他的发明者的名字命名的。&lt;/p&gt;
&lt;p&gt;我在算法比赛中，或者需要求解 SCC（强连通分量的缩写：Strongly Connected Components） 问题的时候，喜欢写 Kosaraju 算法。因为 Kosaraju 算法的实现非常简单，复杂度和 Tarjan 算法是一样的，都是 O(V + E) 的。&lt;/p&gt;
&lt;p&gt;但实际上，Kosaraju 算法需要遍历两次图，而 Tarjan 算法只需要遍历一次图。所以，Tarjan 算法的性能更高，一般可以高 30% - 40% 左右。&lt;/p&gt;
&lt;p&gt;而 Tarjan 算法之所以有名，关键在于使用 Tarjan 算法的思想，不仅仅可以求解 SCC 问题，还可以求无向图中的桥或者割点。&lt;/p&gt;
&lt;p&gt;这就是为什么，很多同学看到 Tarjan 算法，做的事情不一样，但都叫 Tarjan 算法的原因。&lt;strong&gt;我们可以把 Tarjan 算法理解成是一种思想&lt;/strong&gt;，基于这种思想，可以求解桥，割点，和 SCC 问题。&lt;/p&gt;
&lt;p&gt;所谓的 Tarjan 算法思想，就是在遍历整个图的过程中，对每一个遍历的节点记录一个时间戳，通常被称为是 DFN；同时，记录通过这个节点，不经过父亲节点，最早能回到的时间戳，通常被称为是 LOW。通过这些信息，就能判断一个图的桥，割点，和强连通分量。&lt;/p&gt;
&lt;p&gt;&lt;img alt="algo" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-10-26/algo.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;然而，Tarjan 的贡献远不止于此。以Tarjan命名的另外一个非常著名的算法，叫 &lt;strong&gt;Tarjan‘s Off-line Least Common Ancestors Algorithm。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个算法本质是借助并查集，求解 LCA（最近公共祖先的缩写：Least Common Ancestors）问题。&lt;/p&gt;
&lt;p&gt;实际上，&lt;strong&gt;离线的 LCA 问题&lt;/strong&gt;，是计算机科学领域非常著名的问题，深究下去，和 &lt;strong&gt;Binary Lifting，RMQ&lt;/strong&gt; 等非常著名的算法思想都有联系。&lt;/p&gt;
&lt;p&gt;&lt;img alt="algo" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-10-26/algo2.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;说到&lt;strong&gt;并查集&lt;/strong&gt;，Tarjan 也和这种数据结构有不解之缘。并查集虽然不是 Tarjan 发明的，但是并查集的复杂度是 Tarjan 首先分析清楚的：也就是 &lt;strong&gt;Ackerman 函数&lt;/strong&gt;的反函数。&lt;/p&gt;
&lt;p&gt;如果对此感兴趣的同学，可以翻看《算法导论》，《算法导论》对这部分内容介绍得很清楚。&lt;/p&gt;
&lt;p&gt;实际上，这也是《算法导论》这本教材的意义：稍微深入一些的算法分析问题，一般的算法教材都不会涉及。而《算法导论》所覆盖的深度和广度，比大多数教材都高太多。&lt;/p&gt;
&lt;p&gt;当然，这也是《算法导论》不适合入门的原因。&lt;/p&gt;
&lt;p&gt;&lt;img alt="algo3" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-10-26/algo3.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;说到数据结构，Tarjan 确实发明过数据结构。最有名的两个，一个是&lt;strong&gt;斐波那契堆&lt;/strong&gt;，一个是 &lt;strong&gt;Splay 树&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;Splay 树虽然不保证一定平衡，但各个操作的均摊复杂度是 O(logn) 级别的。&lt;/p&gt;
&lt;p&gt;Splay 树最大的优势是实现简单，比红黑树简单不知道多少倍。所以，如果我们需要调用更加底层的树操作，需要自己实现一个自平衡的二分搜索树时，通常 Splay 树是首选。&lt;/p&gt;
&lt;p&gt;也正因为如此，很多搞竞赛的同学，都是能手写 Splay 树的。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;Tarjan 还是非常著名的算法：&lt;strong&gt;BFPRT&lt;/strong&gt; 的作者之一。其实 BFPRT 这个算法的名字，是其五个作者首字母的缩写。其中的 T，就是 Tarjan。&lt;/p&gt;
&lt;p&gt;BFPRT 这个名字听起来非常拗口，同时也难记，但是它的另一个名字就很简单直接了，就是 &lt;strong&gt;Median of Medians&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;这个算法整体并不难理解，是快排思想的一种更稳定的优化，每次近乎可以保证选取所处理的数组的中位数作为标定点（pivot），使得快速排序的最差时间复杂度真真正正达到了 O(nlogn)。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;值得一提的是，BFPRT 算法的这五位作者，都是计算机科学领域的大牛。他们分别是：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;B&lt;/strong&gt; 是 Blum，全名 Manuel Blum，他因为复杂度理论方面的贡献，以及密码学的应用，获得了 1995 年的图灵奖；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;F&lt;/strong&gt; 是 Floyd，全名 Robert W. Floyd，相信大家都很熟悉。大家在算法课本上一定会学到的&lt;strong&gt;所有点对的最短路径算法&lt;/strong&gt;，就是他和 Warshall 一起提出的，即 &lt;strong&gt;Floyd–Warshall 算法&lt;/strong&gt;。同时，Floyd 还提出了非常著名的 &lt;strong&gt;Floyd 环检测算法&lt;/strong&gt;。他获得了 1978 年的图灵奖；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;P&lt;/strong&gt; 是 Pratt，全名 Vaughan Pratt，是斯坦福的教授；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;R&lt;/strong&gt; 是 Rivest，全名 Ron Rivest。他是 MIT 的教授，专攻密码学。我们现在所经常使用的 &lt;strong&gt;MD5 算法&lt;/strong&gt;，他就是作者之一；&lt;/p&gt;
&lt;p&gt;最后的 &lt;strong&gt;T&lt;/strong&gt;，就是这篇文章的主角：Tarjan，全名 Robert Endre Tarjan。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;在图论领域，Tarjan 还改进了一个非常著名的算法：&lt;strong&gt;最小树形图&lt;/strong&gt;。最小树形图这个名字听起来很复杂，但其实这个概念很简单：就是&lt;strong&gt;有向图的最小生成树&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;解决最小树形图问题，有一个非常朴素的算法，叫&lt;strong&gt;朱刘算法&lt;/strong&gt;。听这个名字大家也知道，这是两位华人科学家首先提出来的算法，在论文记载中，分别是  Y.J. Chu 和 T.H. Liu 在 1965 年提出来的。朱刘算法的时间复杂度是 O(VE) 的。&lt;/p&gt;
&lt;p&gt;后来，Tarjan 改进了这个算法，可以使用 O(ElogV) 的时间做预处理，之后使用 O(V) 的时间，求解图中以任意顶点为根的最小树形图。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;Tarjan 还发明了一种平面图的检测算法，首次在线性时间解决了&lt;strong&gt;平面图检测问题（Planarity-Testing）&lt;/strong&gt;。因为平面图检测离大多数同学的工作比较远，所以可能很少有同学了解这个算法。&lt;/p&gt;
&lt;p&gt;Tarjan 的平面图检测算法还有一个合作者：John Hopcroft。他们二人因为这个算法，以及在算法和数据结构等基础领域对计算机科学的贡献，获得了 1986 年的图灵奖。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;Tarjan 的硕士和博士是在斯坦福大学读的。他的导师有两个。一个就是大名鼎鼎的 Floyd，上文介绍 BFPRT 算法的时候介绍了。在这里给一个年轻的时候，Floyd 风流倜傥的帅照：&lt;/p&gt;
&lt;p&gt;&lt;img alt="floyd" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-10-26/floyd.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;Tarjan 的另一名导师，则是计算机科学领域的神级人物：Donald Knuth。他可以说是计算复杂领域的创始人。&lt;/p&gt;
&lt;p&gt;Donald Knuth 的经历和贡献，可以写一本书了。有时间，我会再写一篇文章介绍他。现在，很多人了解他，都是因为他的神作：TAOCP，即 &lt;strong&gt;The Art of Computer Programming，被中文翻译成《计算机程序设计艺术》&lt;/strong&gt;。这套书被评为至今计算机科学史上最重要的神作，但其实还没有写完。&lt;/p&gt;
&lt;p&gt;&lt;img alt="taocp" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-10-26/taocp.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;不过 Donald Knuth 对计算机科学领域的贡献，远不止一套书这么简单。要聊 Donald Knuth 的话，能聊的就太多。这篇文章我们收一收，说回 Tarjan。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;Tarjan 现在还在世，今年已经 72 岁了。根据维基百科，现在 Tarjan 在普林斯顿任教。&lt;/p&gt;
&lt;p&gt;实际上，在计算机科学领域，很多在教科书中出现的人物，都还在世；很多教科书级别的算法，概念，理论，其实距离提出，也不过是几十年的时间。&lt;/p&gt;
&lt;p&gt;这足以可见：&lt;strong&gt;计算机是多么年轻的一个学科。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;也正是因为这个原因，在计算机科学领域中，还有大量的没有被完全解决的问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;计算机科学领域其实还大有可为。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最后贴一下 Tarjan 老爷子的帅照。&lt;/p&gt;
&lt;p&gt;&lt;img alt="tarjan" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-10-26/tarjan.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-10-26/readme.md" rel="alternate"/></entry><entry><id>2020/2020-10-23/readme.md</id><title>欢迎来到这个世界呀，小宇宙</title><updated>2020-10-23T00:00:00-07:00</updated><content>&lt;h2&gt;欢迎来到这个世界呀，小宇宙&lt;/h2&gt;
&lt;p&gt;&lt;img alt="son" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-10-23/son.png" /&gt;&lt;/p&gt;
&lt;p&gt;你好呀，小宇宙。&lt;/p&gt;
&lt;p&gt;写下这段文字的时候，你已经来到这个世界两周多了。在这两周多的时间里，我一直在仔细地观察你。但是我知道，你并没有在仔细地观察我。&lt;/p&gt;
&lt;p&gt;你一直在观察这个世界，感受这个世界，还暂时顾不上我。毕竟，这个世界，和妈妈的肚子里区别太大了。&lt;/p&gt;
&lt;p&gt;我想，是时候和你介绍一下这个世界了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我是你的爸爸，我叫刘宇波。根据这个世界的风俗，你也姓“刘”。&lt;/p&gt;
&lt;p&gt;但在这个世界里，一个人除了有姓，还要有名。姓代表着一个人的家族；名才真正代表这个人自己。&lt;/p&gt;
&lt;p&gt;然而，你的中文名，爸爸妈妈还没有决定下来。实际上，对于你的名字，爸爸有很多自认为很不错的提议，但都暂时没有被妈妈完全接受。好在这件事儿并不着急，爸爸妈妈还有很长的时间可以帮你起一个中文名字。&lt;/p&gt;
&lt;p&gt;但是，你的小名儿，爸爸妈妈早就帮你决定了，叫“小宇宙”。爸爸的名字中有一个“宇”字，本身就是“宇宙”的意思，所以顺理成章的，你就叫“小宇宙”了。&lt;/p&gt;
&lt;p&gt;虽然很多时候，爸爸也被别人叫做是“波波”，所以，叫你“小波波”似乎更顺嘴一些。但爸爸还是决定叫你“小宇宙”，因为“小宇宙”还有另外一层意思。&lt;/p&gt;
&lt;p&gt;在爸爸小时候，有一部很火爆的动画片，叫《圣斗士星矢》。在这个动画片中，有一个很重要的概念，就是小宇宙。&lt;/p&gt;
&lt;p&gt;&lt;img alt="universe" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-10-23/universe.png" /&gt;&lt;/p&gt;
&lt;p&gt;每个人的灵魂深处，其实都拥有着整个宇宙的能量；每个人的心中，都有一片属于自己的宇宙。这，就是小宇宙。如果你能够激发出自己体内的小宇宙，你将变得无坚不摧。&lt;/p&gt;
&lt;p&gt;爸爸希望你将来，能够激发出属于自己的小宇宙。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;你可能会问，那样，我就能无坚不摧了吗？&lt;/p&gt;
&lt;p&gt;不不不，我的小宇宙。无坚不摧是一个充满童话色彩的词汇。我们谁都做不到无坚不摧。&lt;/p&gt;
&lt;p&gt;我们都是凡夫俗子，血肉之躯，脆弱得很。这个世界充满了危险，能够摧毁我们的事物有太多太多。我们必须小心地保护自己，才能在这个世界生存。&lt;/p&gt;
&lt;p&gt;你在长大的过程中，一定会看很多动画片，听很多故事，里面满是无坚不摧的超级英雄。他们拥有着各种超级能力，战无不胜。但是，那些都是骗人的。我们谁也不是超级英雄。&lt;/p&gt;
&lt;p&gt;你以后可能还会喜欢扮演几个超级英雄，甚至发明出只有你自己才知道的，独一无二的超级英雄。你可能会穿上一件小斗篷，并坚信穿上这件斗篷的自己法力无边；你也可能会挥舞不知道从哪里捡来的树枝，并坚信自己御剑天下。&lt;/p&gt;
&lt;p&gt;爸爸怎么知道的？因为爸爸小时候就是这样的呀。你的小脑瓜里，一定会在很多瞬间，认为自己无坚不摧。但终有一天，你将明白，那只是你的幻想。&lt;/p&gt;
&lt;p&gt;你只是一个普通人，和你的爸爸妈妈一样。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我不知道你什么时候才能意识到这一点。但是，当你意识到这一点的时候，一定会非常的伤心难过。&lt;/p&gt;
&lt;p&gt;那可能是你喜欢的小动物离开这个世界，你发现自己无论如何也无法把它唤醒的时候；&lt;/p&gt;
&lt;p&gt;那可能是你发现自己无论如何都考不了满分的时候；&lt;/p&gt;
&lt;p&gt;那可能是你追不到自己心爱的姑娘的时候；&lt;/p&gt;
&lt;p&gt;你可能会大哭一场，但还是想不明白，这个世界为何是这个样子。&lt;/p&gt;
&lt;p&gt;到那时，爸爸可能也会很难过吧。&lt;/p&gt;
&lt;p&gt;但与此同时，爸爸可能也会很欣喜。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;你可能会很奇怪，这有什么可欣喜的吗？&lt;/p&gt;
&lt;p&gt;这当然值得欣喜啦！我的小宇宙。因为只有在那个瞬间，才是你真正开始认识这个世界的时候呀。&lt;/p&gt;
&lt;p&gt;只有当你明白自己的普通的时候，你才会把你的大眼睛，从那些你迷恋的卡通片里的超级英雄中转移开来，认真地去看你身边的每一个普通人呀。&lt;/p&gt;
&lt;p&gt;可能只有到那个时候，你才会仔细地观察爸爸和妈妈；仔细地观察你的同学和老师。&lt;/p&gt;
&lt;p&gt;只有到那个时候，你才会开始明白，医院里的医生和护士；超市里的收银员；商店里的小姐姐；开火车飞机的叔叔；游乐场里那些可爱的卡通人物背后；以及电视里无论是主角还是反派，哪怕是一个名不见经传的小角色的扮演者，都是一个个像你一样的普通人呀。&lt;/p&gt;
&lt;p&gt;但是，就是这些和你一样的普通人，构建了我们这个精彩的世界啊！而你，也属于这个精彩的世界呀。&lt;/p&gt;
&lt;p&gt;只有到那个时候，你才会开始思索：自己到底是谁？自己到底要做什么？&lt;/p&gt;
&lt;p&gt;只有到那个时候，你才会开始认真地寻找自己呀。&lt;/p&gt;
&lt;p&gt;&lt;img alt="son2" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-10-23/son2.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;寻找自己，这是爸爸对你唯一的期望呀。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;爸爸不指望你能赚多少钱，也不指望你能成为怎样的名人大家。爸爸只希望你能找到自己真正的热爱，并且有这份热爱一直陪伴。&lt;/p&gt;
&lt;p&gt;即使你找不到自己的热爱，也没有关系呀。只要一直去寻找，就好了呀。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;谁说所有的寻找都要有结果？&lt;/strong&gt;去尝试，去挑战，去拓宽自己，去勇敢地面对自己。&lt;strong&gt;寻找本身，就是一个人来到这个世界的乐趣所在呀。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;还记得你的小名儿吗？你是小宇宙呀。不断地寻找自己，就是在自己的小宇宙里遨游呀。&lt;/p&gt;
&lt;p&gt;千万不要小瞧自己的小宇宙哦。还记得爸爸说的吗？我们每个人，都拥有着属于整个宇宙的能量；你的小宇宙里，蕴含着无限的可能呀。&lt;/p&gt;
&lt;p&gt;&lt;img alt="universe" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-10-23/universe.png" /&gt;&lt;/p&gt;
&lt;p&gt;更关键的是，只有不断寻找自己，你才能收获真正的平静，真正的自由呀；&lt;/p&gt;
&lt;p&gt;只有不断寻找自己，你才能坚定地前行，无惧他人的目光，你才能在这个世界上无坚不摧呀。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;你可能会问：爸爸，你不是说，我们谁都不能无坚不摧吗？&lt;/p&gt;
&lt;p&gt;是的呀，我的小宇宙。但是这个无坚不摧，和那个无坚不摧，是两个意思呀。&lt;/p&gt;
&lt;p&gt;你的小脑瓜一定糊涂了，明明是一样的字儿，怎么会是两个意思呢？&lt;/p&gt;
&lt;p&gt;我的小宇宙呀，等你长大了，看到这篇文字的时候，或许你就明白了。&lt;/p&gt;
&lt;p&gt;在此之前，爸爸妈妈会一直帮助你的。帮助你，在这个世界，寻找自己。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;哈。爸爸看到，你已经被爸爸说困了。&lt;/p&gt;
&lt;p&gt;此时的你，只要乖乖睡觉，就好啦。&lt;/p&gt;
&lt;p&gt;希望你在睡梦中，已经开始在自己的小宇宙中，遨游啦。&lt;/p&gt;
&lt;p&gt;我们一起加油呀，我的小宇宙：）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;2020.10.23 凌晨，于 Santa Clara&lt;/p&gt;
&lt;p&gt;liuyubobobo&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-10-23/readme.md" rel="alternate"/></entry><entry><id>2020/2020-10-01/readme.md</id><title>如果川普确诊新冠，之后会发生什么？</title><updated>2020-10-01T00:00:00-07:00</updated><content>&lt;h2&gt;如果川普确诊新冠，之后会发生什么？&lt;/h2&gt;
&lt;p&gt;川普确诊新冠，相信大家已经知道了。实际上，是川普自己发推向全世界公布的这一消息：&lt;/p&gt;
&lt;p&gt;&lt;img alt="trump" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-10-01/trump.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;有人说这可能是川普的一个竞选策略，假装感染，然后表演如下的戏码：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;假装感染→可以治愈→新冠不足为惧→大流感而已→经济可以重启→支持率爆涨→连任成功&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;说实话，这个链条里的一切都有可能发生，唯独源头：川普成心“假装感染新冠”，概率非常非常低。&lt;/p&gt;
&lt;p&gt;媒体早先已经报道了，川普的身边最核心的女助理：Hope Hicks，已经确诊了感染。正是因为她的确诊，川普和她的夫人才接受了检测，并且第一时间进行隔离；然后，确诊了新冠。&lt;/p&gt;
&lt;p&gt;而川普和这名女助理，在这周二，刚刚共同乘坐空军一号，往返于总统辩论；之后，还一起奔赴了明尼苏达州的集会。川普真的感染了，是大概率事件。&lt;/p&gt;
&lt;p&gt;&lt;img alt="hicks" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-10-01/hicks.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;刚进入十月的第一天，就发生了这样的事情，不得不让人想到&lt;strong&gt;十月惊奇&lt;/strong&gt;这个词。&lt;/p&gt;
&lt;p&gt;十月惊奇本意是指：因为美国大选的日期是 11 月 3 日，所以两党及其候选人，有可能在 10 月份故意制造重量级的新闻事件，以影响选举的结果。&lt;/p&gt;
&lt;p&gt;但历史表明：即使不是刻意为之，很多时候，也会在十月份发生重量级的新闻。&lt;/p&gt;
&lt;p&gt;&lt;img alt="oct" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-10-01/oct.png" /&gt;&lt;/p&gt;
&lt;p&gt;今年 9 月 18 日，大法官金斯伯格突然病逝，就让很多人高呼，十月惊奇提前到来了。但是，大家还是没有预料到，十月份会发生更劲爆的新闻，比如这个星球上最懂新冠病毒的男人，会感染新冠病毒。而这个人，恰恰是美国总统。&lt;/p&gt;
&lt;p&gt;2020 年实在太魔幻了。&lt;/p&gt;
&lt;p&gt;那么川普确诊新冠以后，会发生什么？&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;首先，从现在美国的数据来看，新冠的致死率大概是 3%，而普通流感的致死率只有 0.1%。&lt;/p&gt;
&lt;p&gt;虽然很多人（比如川普总统自己）对这个 3% 持争议态度，认为被高估了，但是，CDC 官网上明确表示：对于新冠病毒的真实致死率，我们并不清楚，不过有一点可以肯定：一个人能获得的医疗质量，将极大地改变新冠病毒对他自身的致死率。&lt;/p&gt;
&lt;p&gt;川普作为著名富二代（其实是富三代），同时也是美国总统，能够享受的医疗条件肯定没得说。从这个角度看，我个人认为他因此病亡的概率还挺低的。&lt;/p&gt;
&lt;p&gt;虽然他已经 74 岁高龄了，属于妥妥地新冠高危人群。&lt;/p&gt;
&lt;p&gt;所以，川普应该会首先继续在隔离的条件下履行美国总统的职责。尤其是现代通讯技术很发达，这应该不成什么问题。英国首相约翰逊，已经为川普做出表率了。&lt;/p&gt;
&lt;p&gt;&lt;img alt="john" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-10-01/john.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;但是，一些其他的额外预防措施也会执行。最重要的，应该就是保护当前的副总统彭斯了。因为，如果川普真的在任期发生意外，彭斯将会暂时接手美国总统一职。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;另一方面，一定会发生的就：金融市场因此受影响。&lt;/p&gt;
&lt;p&gt;由于川普确诊的时间是在美国的周四晚上（东西部都是），所以还不确定第二天的股市会怎样。但是，由于是在亚洲的白天，因此，相应的影响，在亚洲金融市场上已经表现出来了，产生了剧烈的下滑。&lt;/p&gt;
&lt;p&gt;&lt;img alt="bloomberg" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-10-01/bloomberg.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;不过，如果川普的症状没有那么严重的话，川普应该会出来说话，来稳定民心，更重要的原因实际上是稳定市场。&lt;/p&gt;
&lt;p&gt;川普本来就喜欢发推特，这段时间，他的推特应该会是大家关注的重点（其实一直是大家关注的重点）。甚至，川普可能会做一场电视演讲，直播一把，表示自己挺好，大家放心。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;但是，万一，川普的病情严重了的话，比如上了呼吸机，这就会使得川普无法继续履行总统的职责了。那么此时，就会触发&lt;strong&gt;美国宪法的第 25 条修正案&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;这个修正案的作用，就是规定美国总统的职位由于各种原因出现空缺的话，应该怎么办。&lt;/p&gt;
&lt;p&gt;&lt;img alt="25" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-10-01/25.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;首先，如果川普的病症严重，但是意识还清醒的话，他可以引用第 25 修正案的第 3 款，向议院提交一份声明，说明自己无法履行总统的职责，并且将这个职责暂时移交给副总统，也就是彭斯。&lt;/p&gt;
&lt;p&gt;当川普的病情缓解或者痊愈了的时候，他可以再向议院提交一份声明，说明自己已经可以继续履行总统职责了，要回总统的权力。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;这个情况在美国历史上其实发生过很多次。&lt;/p&gt;
&lt;p&gt;比如在 1985 年，当时的美国总统是里根。医生在对里根总统的一次体检中，发现了一个肿瘤。里根总统决定立即动手术移除肿瘤。手术期间，里根总统引用这一法案，暂时将总统权力移交给了当时的副总统：乔治.布什，也就是后来的第 41 届美国总统——老布什。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;更有意思的是，在 2007 年，小布什执政期间，由于他要接受一次结肠镜检查，而这次检查需要全身麻醉，期间会失去意识。&lt;/p&gt;
&lt;p&gt;所以，这个结肠镜检查期间，小布什无法胜任总统一职。于是小布什援引这条法案，暂时将美国总统的权利移交给了当时的副总统迪克·切尼。&lt;/p&gt;
&lt;p&gt;迪克·切尼当了多长时间美国总统呢？答案是两个小时零五分钟。这次总统权力移交发生在美国东部时间 2007 年 7 月 21 日早上 7:16，在 9:21 的时候结束。&lt;/p&gt;
&lt;p&gt;&lt;img alt="bush" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-10-01/bush.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;但是，如果川普总统的病情极其严重，使得他已经没有能力自主发起一个声明，来移交总统权力的话，第 25 修正案的第 4 款将发生作用。&lt;/p&gt;
&lt;p&gt;此时，作为副总统的彭斯，可以主动向议会说明：当前的美国总统已经没有能力继续履行总统职责了，需要由自己担任代理总统。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我查到的美国历史上，这一项法案还没有被真正地使用过的记录。最接近的一次，是 1981 年 3 月 30 日，当时的里根总统，在哥伦比亚特区的希尔顿酒店门口被刺杀，紧急送入乔治·华盛顿大学医院进行治疗。&lt;/p&gt;
&lt;p&gt;也就是著名的里根遇刺事件。&lt;/p&gt;
&lt;p&gt;不过，当时的副总统老布什，正在乘坐空军二号，处于得克萨斯州的上空，无法引用这一法案。等到老布什飞回哥伦比亚特区时，里根的手术已经结束了，并且情况良好，所以也就没有必要再使用这一法案了。&lt;/p&gt;
&lt;p&gt;值得一提的是，里根遇刺案的刺客：约翰·欣克利，后被法院裁定为精神失常，因此罪名不成立，被遣送精神病医院进行治疗。&lt;/p&gt;
&lt;p&gt;&lt;img alt="ass" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-10-01/ass.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;所以，不管怎样，如果川普真的这次情况危急，那么现在的副总统彭斯将会接手总统职责。&lt;/p&gt;
&lt;p&gt;如果彭斯引用了第 25 修正案的第 4 款，那么就又在 2020 年创下了一项美国历史的记录。&lt;/p&gt;
&lt;p&gt;&lt;img alt="pence" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-10-01/pence.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;另外一点受关注的是：现在美国大选正在进行中，并且已经到了关键时刻，就剩下一个月的时间了。&lt;/p&gt;
&lt;p&gt;如果川普真的无法继续参选了，那么现在共和党还有时间，提名一位新的美国总统候选人。&lt;/p&gt;
&lt;p&gt;&lt;img alt="gop" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-10-01/gop.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;其实，除了川普总统，大家对这次总统大选的民主党候选人拜登，也是非常担心的。毕竟，拜登比川普年岁要大，今年已经 77 岁了，对新冠病毒来说，更易感。&lt;/p&gt;
&lt;p&gt;而就在几天前，这两个人还在同一屋檐下唇枪舌战，进行总统辩论。这个过程，肯定不会戴口罩了。&lt;/p&gt;
&lt;p&gt;&lt;img alt="debate" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-10-01/debate.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;现在，川普总统已经证实感染了新冠，鬼知道在辩论的过程中，大家吐沫星子横飞，会不会致使拜登也感染？&lt;/p&gt;
&lt;p&gt;反正漫画家们已经画出漫画了。&lt;/p&gt;
&lt;p&gt;&lt;img alt="comic" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-10-01/comic.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;虽然道理上，如果两党的候选人无法继续竞选，两党可以提名新的候选人。但是，这种情况在美国历史上从来没有出现过，所以还是有可能会出现非常大的争议和问题。&lt;/p&gt;
&lt;p&gt;尤其是在美国极度割裂的当下。&lt;/p&gt;
&lt;p&gt;比如，今年的一个最大可能的争议就是：由于疫情的原因，很多民众会对前往投票站投票的安全表示担心，因此，会使用一种叫做“&lt;strong&gt;缺席投票&lt;/strong&gt;”的方式，进行美国大选投票。&lt;/p&gt;
&lt;p&gt;所谓的“缺席投票”，就是声明，在大选当天，选民因为各种原因，会不在现场投票（即缺席），因此，提前使用邮寄的方式进行投票。&lt;/p&gt;
&lt;p&gt;在今年 9 月 4 日，北卡罗来纳州已经正式开始向申请“缺席投票”的选民寄送选票。据统计，今年北卡州有 75.8 万选民申请了缺席投票，是 2016 年的 20 倍之多！&lt;/p&gt;
&lt;p&gt;那么，这么多选票已经投出去了，问题来了：如果川普不能继续参加总统选举，那些投给川普的选票怎么算？&lt;/p&gt;
&lt;p&gt;是自动算给共和党提名的下一名候选人吗？如果这样，似乎不够合理，因为会有选民认为是投给川普这个人的，而并非共和党这个党派的；但如果废弃不作数，对共和党又不公平。&lt;/p&gt;
&lt;p&gt;如果投票推倒重来，劳民伤财不说，对于选举的公平性，还是会产生很大的争议。因为毕竟只剩下一个月的时间了，选民对新的候选人，可能完全不了解。&lt;/p&gt;
&lt;p&gt;这种情况在历史上从没有发生过。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;不管怎样，比起什么微信或者 Tik Tok，这才是一次真真正正地影响美国国家安全的危机。&lt;/p&gt;
&lt;p&gt;我只能说，2020 年实在太魔幻了。&lt;/p&gt;
&lt;p&gt;好在，2020 年快过去了（还有三个月呢），大家一定要保护好自己呀！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="comic2" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-10-01/comic2.jpg" /&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-10-01/readme.md" rel="alternate"/></entry><entry><id>2020/2020-09-30/readme.md</id><title>水晶宫里，一声吹断横笛</title><updated>2020-09-30T00:00:00-07:00</updated><content>&lt;h2&gt;水晶宫里，一声吹断横笛&lt;/h2&gt;
&lt;p&gt;这两周没有更新公众号，主要原因是家里有一些事情要处理。在这里向大家道歉。&lt;/p&gt;
&lt;p&gt;因为今天是个节日，按照惯例，出来冒个泡，顺便给大家发个红包，喜庆一下。&lt;/p&gt;
&lt;p&gt;既然冒泡了，就随便聊一聊，没有主题，就当朋友聊天儿。想到哪里，说到哪里。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;​---&lt;/p&gt;
&lt;p&gt;这两周没有更新公众号，除了有家里的事情要忙，还有一个原因是，没有特别关注世界发生了什么，所以也就没有特别想写东西的冲动。&lt;/p&gt;
&lt;p&gt;为什么没有特别关注世界发生了什么？其中一个原因是，我这两周没太刷朋友圈。&lt;/p&gt;
&lt;p&gt;两周前，无意间看到微信有一个设置，可以把朋友圈的那个小红点给去掉，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img alt="red" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-09-30/red.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;我本来认为这个设置并不会对我产生什么影响。因为我觉得自己对这种红点挺免疫的。毕竟，我的手机屏幕是这样一个风格：&lt;/p&gt;
&lt;p&gt;&lt;img alt="screen" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-09-30/screen.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;但是，当我在微信中，把小红点设置成不显示以后，神奇的事情发生了。我真的不太去看朋友圈了！&lt;/p&gt;
&lt;p&gt;用微信聊完该聊的事情，打开探索页以后，很多次，看到朋友圈没有小红点，竟然完全没有打开的欲望。&lt;/p&gt;
&lt;p&gt;于是，我一不做二不休，直接把我的探索页设置成这样了：&lt;/p&gt;
&lt;p&gt;&lt;img alt="discover" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-09-30/discover.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;什么短视频，朋友在看，小程序，游戏，周围的人，统统隐藏掉了。效果棒棒的，被微信分散注意力的时间大大减少。&lt;/p&gt;
&lt;p&gt;至于我为什么留着朋友圈？毕竟，朋友圈还是维系朋友关系（了解朋友八卦）的一个重要工具嘛  &lt;/p&gt;
&lt;p&gt;所以，如果有同学希望自己能够减少刷朋友圈的时间，可以试试这么设置一下。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;最近 Netflex 有一个自制的纪录片很火，叫 The Social Dilemma，中文翻译成《监视资本主义：智能陷阱》。&lt;/p&gt;
&lt;p&gt;这个纪录片描述的就是社交网络对我们的生活，乃至整个人类社会带来的巨大问题。&lt;/p&gt;
&lt;p&gt;在双节期间，闲得没事儿，大家可以找来看看。对于身处互联网行业的同学，应该会有一些启发。&lt;/p&gt;
&lt;p&gt;我计划找时间专门写一篇公众号文章，聊一聊这个纪录片。&lt;/p&gt;
&lt;p&gt;&lt;img alt="dilemma" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-09-30/dilemma.jpg" /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;通过微信设置这个事情，我理解了产品心理学的强大。&lt;/p&gt;
&lt;p&gt;因为我老婆本来就是搞心理学的，我自认为读了不少心理学的书。在国内创业的时候，蹭了五年北大 MBA 的课程，其中很多内容也涉及到心理学，诸如行为心理学，经济心理学，等等。&lt;/p&gt;
&lt;p&gt;我一直以为这种产品设计上的“小心思”，不会对我有什么影响。但是我发现，自己还是会掉入陷阱。&lt;/p&gt;
&lt;p&gt;更可怕的是，我明明掉入了陷阱，还不自知，还自我感觉良好。甚至有的时候，心理小阴暗，还会暗暗鄙视一下别人。&lt;/p&gt;
&lt;p&gt;直到有了对比，才意识到自己简直是个笑话。&lt;/p&gt;
&lt;p&gt;人果然容易高估自己。&lt;/p&gt;
&lt;p&gt;我还计划找时间专门写一篇公众号文章，聊一聊产品设计中的心理学。&lt;/p&gt;
&lt;p&gt;&lt;img alt="psychology" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-09-30/psychology.png" /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;你看，我这么一会儿时间，就列出来了两个公众号文章的选题了。&lt;/p&gt;
&lt;p&gt;实际上，我在我的手机笔记簿上，专门有一个公众号文章的选题列表。毫不夸张，这个列表里，现在已经有 100 多个选题了。&lt;/p&gt;
&lt;p&gt;在这个选题列表中，大多数内容我已经有了框架性的思考，稍微花些时间把具体内容写出来，就能当一篇原创的公众号文章发出来了。但即使这样，在过去的两周，我还是没有抽出时间写一篇文章。&lt;/p&gt;
&lt;p&gt;所以，有再详尽的计划，再完整的框架，在伟大的战略，也没有用。&lt;strong&gt;所有的事情都是一点一点做出来的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;生活不断地在告诉我这个道理，可我还是会经常忘记它。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我认识一个专门搞摄影的小朋友。说是小朋友，是因为比我小一轮多。&lt;/p&gt;
&lt;p&gt;他两年前考取了在英国排名第二的艺术学院，专门学习摄影。但是根据他的说法，学院派的学习太枯燥了，都是理论，没有实践，于是他选择了退学，回国创建工作室。现在已经小有规模了。&lt;/p&gt;
&lt;p&gt;最近，他发朋友圈说，2020 年，截至现在，也就是整整 9 个月的时间里，他已经拍了 15 万张相片了。&lt;/p&gt;
&lt;p&gt;这意味着 2020 年，他至少按了 15 万次快门。这还是有疫情的情况。&lt;/p&gt;
&lt;p&gt;我计算了一下，粗略算这 9 个月有 9 * 30 = 270 天，那也意味着他平均每天都要按快门 150000 / 270 = 555 次。这还不算挑选照片，修整照片，在工作室和客户、员工沟通，等等的工作。&lt;/p&gt;
&lt;p&gt;哪行都不容易。&lt;/p&gt;
&lt;p&gt;我当然明白，按照按快门的次数来评判一个摄影师的工作，是不公允的。这就好比按照代码行数来评判程序员的工作一样不合理。&lt;/p&gt;
&lt;p&gt;但我坚信，谈论质的前提，是量。只有量变，才能引发质变。&lt;/p&gt;
&lt;p&gt;我很看好他。&lt;/p&gt;
&lt;p&gt;转发一张他的人像作品，据说是打印出来准备参展的。&lt;/p&gt;
&lt;p&gt;&lt;img alt="photo" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-09-30/photo.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;前几天，想在网上找一个群论的定理，然后无意中翻到了一个有意思的评论。&lt;/p&gt;
&lt;p&gt;这名网友说，自己学群论的时候，发现这是一门需要平静的心态才能学好的科目。你需要弄明白每一个定理表达的意思和相应的证明。事实上，证明过程是很有趣的。&lt;/p&gt;
&lt;p&gt;而且，群论并没有那么难。本科生就可以学会。&lt;/p&gt;
&lt;p&gt;最后，他说，&lt;strong&gt;如果想检验自己的心态是否平和，可以试试读群论。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;说实话，在我看来，大多数离散数学的分支，都非常有趣，并且静下心来去看，去思考，都不难。至少我认为比连续数学要简单很多。&lt;/p&gt;
&lt;p&gt;但是，一环扣一环，每一环都不能丢。一想赶时间，跳过去几条定理，或者没把某条定理吃透就往后翻，很快就什么都看不懂了。&lt;/p&gt;
&lt;p&gt;所以，数学不适合赶时间看，甚至我认为不适合带有功利目的去看（反正数学也没有什么直接的作用）。&lt;/p&gt;
&lt;p&gt;如果没有数学的学习任务，我认为数学特别适合睡前看。&lt;/p&gt;
&lt;p&gt;我以前晚上睡不着觉，就躺在床上看英语，读不懂很快就睡着了。后来英语水平提高了以后，看英语并不能治疗失眠，甚至看英文小说会越看越精神，于是我开始选择躺在床上看数学。&lt;/p&gt;
&lt;p&gt;深入一个定理的证明过程，一会儿就把自己绕晕了，然后就能睡着了 &lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;现在。美国西部夜已深，我又没睡着。&lt;/p&gt;
&lt;p&gt;到阳台看了一眼月亮，又圆又亮。&lt;/p&gt;
&lt;p&gt;尝试了一下用手机拍照，发现拍不好。索性不拍了，多看两眼月亮。&lt;/p&gt;
&lt;p&gt;真美。&lt;/p&gt;
&lt;p&gt;以前，我喜欢月有阴晴圆缺，人有悲欢离合的伤感，或许只是为赋新词强说愁。&lt;/p&gt;
&lt;p&gt;如今，天凉好个秋到了嘴边，却发现自己更喜欢水晶宫里，一声吹断横笛的豪迈。&lt;/p&gt;
&lt;p&gt;来自苏轼，《念奴娇·中秋》&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;凭高眺远，见长空万里，云无留迹。桂魄飞来光射处，冷浸一天秋碧。玉宇琼楼，乘鸾来去，人在清凉国。江山如画，望中烟树历历。&lt;/p&gt;
&lt;p&gt;我醉拍手狂歌，举怀邀月，对影成三客。起舞徘徊风露下，今夕不知何夕。便欲乘风，翻然归去，何用骑鹏翼。水晶宫里，一声吹断横笛。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;好了。我要躺到床上去看数学催眠了。&lt;/p&gt;
&lt;p&gt;祝大家双节快乐。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="moon" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-09-30/moon.jpg" /&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-09-30/readme.md" rel="alternate"/></entry><entry><id>2020/2020-09-16/readme.md</id><title>软件行业还大有作为</title><updated>2020-09-16T00:00:00-07:00</updated><content>&lt;h2&gt;软件行业还大有作为&lt;/h2&gt;
&lt;p&gt;随便聊两个最近接触的事儿。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我有个朋友，我们叫他 W 吧。&lt;/p&gt;
&lt;p&gt;W 最近联系我。问我认不认识靠谱的外包团队。&lt;/p&gt;
&lt;p&gt;W 在国内创业，做医疗生物相关的行业。几年下来，已经相当有规模了，团队近百人。&lt;/p&gt;
&lt;p&gt;我参观过他们公司，在一个二线城市的“工业园区”，一整层都是他的地盘儿。&lt;/p&gt;
&lt;p&gt;和互联网创业不同，生物医疗行业需要大量的仪器设备，需要专门的实验室。我去参观他的企业，就像刘姥姥进了大观园，看啥都新鲜。&lt;/p&gt;
&lt;p&gt;W 的项目发展得极好，不仅和国内很多大型综合医院有直接合作，在一些领域还是国家认证的数一数二的企业。我上次和他面对面交流，还是两年前。那时，他甚至想在美国建立一个专门的研究中心做研发。&lt;/p&gt;
&lt;p&gt;W 本身是海归，了解美国文化。他认为中国研究人员的水平和美国研究人员的水平还是有差距的。但从去年开始，中美关系极度恶化，加上现在的疫情，这个想法恐怕是要破产了。&lt;/p&gt;
&lt;p&gt;我和他聊天，其中一个挺重要的话题就是，计算机技术和生物医疗行业的融合。从机器学习到人工智能，从大数据分析到物联网，我们探讨了很多这些当下最“热”的技术有可能在生物医疗领域的应用。&lt;/p&gt;
&lt;p&gt;但是，W 最近联系我，和这些高大上的技术一点儿关系都没有。他的诉求是想做一个软件开发的外包，来追踪记录他们的产品从生产，到运输，到流入各个医院以后的使用，等等各个环节的信息。&lt;/p&gt;
&lt;p&gt;听上去很像一个快递的货单跟踪系统，但因为行业的特殊性，需要很多定制化的需求。&lt;/p&gt;
&lt;p&gt;我甚至没有完整听完他的需求，就很遗憾地告诉他：我这里已经不认识做外包的朋友了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;十年前，我认识的朋友们，还有不少做外包的。有的是拉私活儿，用业余时间做，赚点儿外块；还有一个朋友，外包做得挺成规模，十多个人的团队全职做，能接到相当不错的单子。一年接一个单子就能养活整个团队了，接到两个单子，那就赚大了。&lt;/p&gt;
&lt;p&gt;但是慢慢地，大家都成长了，渐渐不愿意做外包这种“体力活”了。我说的这个专注于外包的团队，也早就转而去开发自己的产品和服务了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;说回 W。W 问我，那这个需求难不难？&lt;/p&gt;
&lt;p&gt;我说，技术上，不难。&lt;/p&gt;
&lt;p&gt;当我说出“不难”的瞬间，仿佛时间突然倒退了十年。是的，我也曾经做过不少外包，本科还曾在一个师兄的外包公司做实习。我也曾经和无数不懂计算机的“老板们”说，这个东西不难。&lt;/p&gt;
&lt;p&gt;但是实际情况是，要想达到客户的预期，真正的项目执行过程，是比每个人的评估，包括软件工程师自己的评估，要困难得多的。&lt;/p&gt;
&lt;p&gt;这里的“困难”，不是某个技术无法实现，而是一个成规模的软件工程，自身就带有“&lt;strong&gt;系统复杂度&lt;/strong&gt;”。&lt;/p&gt;
&lt;p&gt;从需求分析，到系统设计；从模块测试，到上线部署，&lt;strong&gt;每一个环节都是极其成熟的，但是每一个环节都会出问题，都将比所有人想象得更困难&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;我在 2013 年，就在知乎上回答过这样一个问题。&lt;/p&gt;
&lt;p&gt;&lt;img alt="zhihu" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-09-16/zhihu.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;一转眼，现在已经是 2020 年了。虽然更多的工具被创造了出来，虽然程序员开发的门槛大大降低了。但是，当面对一个稍有规模的定制化软件产品需求时，我并不觉得事情比起七年前有多大的改变。&lt;/p&gt;
&lt;p&gt;这样一个软件工程，依然是“&lt;strong&gt;技术不难，但实际执行起来，困难重重&lt;/strong&gt;”。&lt;/p&gt;
&lt;p&gt;在我看来，这本身就说明了：&lt;strong&gt;软件行业本身，依然是不够成熟的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;软件虽然已经无处不在，但是，当一个非计算机行业的企业老板想要使用计算机的力量来优化自己做的事情的时候，却发现无从下手。&lt;/p&gt;
&lt;p&gt;我不知道这个问题怎么解决。但我知道：有问题存在，就会带来解决问题的思考和行动，就有产生突破的空间。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;说第二个事儿。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我在国外的一个朋友，有一天和我聊起，他认为美国非处方药的信息，太混乱了。&lt;/p&gt;
&lt;p&gt;注意，是非处方药，不是处方药。处方药无所谓，因为吃什么处方药，医生说了算，患者不管。&lt;/p&gt;
&lt;p&gt;但有的时候，如果我们自己有点儿小病，想找点儿非处方药减缓自己的病症的时候，却发现无从下手。&lt;/p&gt;
&lt;p&gt;我怀疑国内也是如此，不过，我以前确实没有太关注过药品信息。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;以最常见的止疼药为例。如果在 Google 搜索“best OTC pain reliever”（最好的非处方止疼药），你会得到一群类似这样的文章推荐：&lt;/p&gt;
&lt;p&gt;&lt;img alt="g1" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-09-16/g1.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;什么是最好的非处方止疼药？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="g2" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-09-16/g2.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;寻找最适合你的非处方止疼药。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="g3" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-09-16/g3.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;5 个最受欢迎的非处方止疼药；&lt;/p&gt;
&lt;p&gt;最搞笑的是，紧接其后的就是：2020 年 9 个最好的非处方止疼药。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;不知道大家有没有 get 到问题：我们获取这些非处方药的信息，只能通过这些博客文章来做出自己的判断。&lt;strong&gt;没有一个专业的平台，汇总这些信息。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;但事实是，每年，美国的药品实验规模是以万为单位计算的，这些实验也包括最为普通的非处方止痛药；同时，每一个诊所每天也会接收到大量的患者数据。&lt;/p&gt;
&lt;p&gt;无论是这些实验结果，还是这些患者的用药数据，都可以通过汇总分析的方式，帮助大众更好地理解：自己到底在何种情况下，使用何种非处方药，是最好的选择。&lt;/p&gt;
&lt;p&gt;但是，这些信息是 Google 不到的。能 Google 到的，只有那些博客文章。我们甚至无法鉴别，这些博客文章的作者，到底是否有专业的医学基础。&lt;/p&gt;
&lt;p&gt;这就涉及到当下互联网行业的另一个问题：专业的信息，很难被获取。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;如今，通过互联网，我们可以轻易找到某个电影的评分；某本书的整体概要；某个餐厅大家是否喜欢，都有哪些拿手菜。互联网让信息更容易获取。&lt;/p&gt;
&lt;p&gt;但并不是所有信息都产生了这样的“颠覆”。直到今天，依然有大量信息，是很难获取的。&lt;/p&gt;
&lt;p&gt;非处方药只是一个例子，这个例子介乎于“大众”和“专业”之间。但如果放到更专业的领域去看，今天获取某些信息的难度，甚至可能和没有互联网的时代，并没有太大的区别。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我在国内创业期间，认识了两个老板。一个是做化学分析仪器行业，粗分类就是化工行业；另一个是做环境行业。&lt;/p&gt;
&lt;p&gt;这两个行业的特点，都是需要购买大量的专业设备。所谓的专业设备，是一个很大的范围，从价格上千万的高端仪器设备，到仅仅几毛钱的耗材，都在这个范畴里。其中的品类，相当复杂。&lt;/p&gt;
&lt;p&gt;和他们聊天，这两个行业的老板不约而同地向我反映了同样的行业现状：&lt;strong&gt;采购这些设备是个大难题。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;导致这个难题的原因有很多。比如渠道问题；不同供货商之间产品质量的认定问题；价格问题；供货商的诚信问题；采购员吃回扣的问题；等等等等。&lt;/p&gt;
&lt;p&gt;但所有这一系列问题，都指向同一个方向：这些相对专业的行业信息，并不透明。即使是行内人，也很难获取。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;实际上，很多行业内部，已经有了各种各样的信息交流平台。有很多极其简陋，就是一个 90 年代的论坛的样子。但即便如此，也已经足以让这些平台的拥有者赚到相当可观的利润了。&lt;/p&gt;
&lt;p&gt;因为，这本质就是信息流通的价值。&lt;/p&gt;
&lt;p&gt;但很显然，这样的行业信息平台可以更好，使用者也有更大的需求；更何况，还有太多的行业，根本没有这种平台。&lt;/p&gt;
&lt;p&gt;诚然，建立这样一个平台，也会困难重重。这些困难是怎样的，不是我想说的重点。&lt;/p&gt;
&lt;p&gt;我想说的是：因为还有这样的问题存在，并且我坚信，在各个专业领域，这个问题一定会慢慢被解决。那么解决这个问题的过程，就会产生巨大的发展空间。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;其实关于这个话题，我还想写很多，但又怕太长大家不爱看，先举这些例子。&lt;/p&gt;
&lt;p&gt;随手扯出这篇文章，是因为最近听到很多人讨论：软件行业是不是快到头了。&lt;/p&gt;
&lt;p&gt;说实话，&lt;strong&gt;我的看法是远远还没有。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果说这个行业竞争越来越激烈，那可能是真的。别说几万倍这样的增长奇迹了，就算是几百倍几十倍的增长，未来可能也会越来越少见（虽然我怀疑还会有很多或大或小的企业脱颖而出）。&lt;/p&gt;
&lt;p&gt;但这不代表到头了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;有大量的问题，现在的技术还不能解决；同时有太多的行业，软件的渗透率还相当低。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这还没有提到那些“高大上”的技术，诸如 5G，人工智能，物联网，量子计算，等等等等，可能带来的增长与变革。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;无独有偶，就在几天前，我看到了这样一则新闻：&lt;/p&gt;
&lt;p&gt;&lt;img alt="huawei" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-09-16/huawei.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;华为和 Tik Tok 的事儿我都不太懂，所以我也没有太聊过。这背后所涉及的政治，法律，历史，等等问题，太复杂了，是我的水平聊不清楚的。&lt;/p&gt;
&lt;p&gt;但是，这个新闻，我能看懂最后一句话：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;没有应用，我们的手机就不是‘智能’手机。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;软件行业还大有作为。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-09-16/readme.md" rel="alternate"/></entry><entry><id>2020/2020-09-09/readme.md</id><title>大师和学徒</title><updated>2020-09-09T00:00:00-07:00</updated><content>&lt;h2&gt;大师和学徒&lt;/h2&gt;
&lt;p&gt;今天，好多同学祝我教师节快乐。谢谢大家 &lt;/p&gt;
&lt;p&gt;也不知道从什么时候开始，教师节这个节日竟然和我有了关联，这是我以前万万想象不到的。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;说实话，我一直不觉得自己是“老师”。&lt;/p&gt;
&lt;p&gt;一方面，我从来不觉得自己“燃烧了自己，照亮了别人”。我没有那么高尚，也似乎没有想着要成为这么高尚的人。可能我要检讨一下自己 &lt;/p&gt;
&lt;p&gt;另一方面，我总觉得“老师”是一个有距离感的称谓。这或许是我的“偏见”。&lt;/p&gt;
&lt;p&gt;老师给我的感觉是那种高高在上的，全知全能的。&lt;/p&gt;
&lt;p&gt;&lt;img alt="teacher1" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-09-09/teacher1.png" /&gt;&lt;/p&gt;
&lt;p&gt;可惜，我并不全知全能。很多同学花样问我各种问题，我的回答都是：嗯... interesting... 这个问题，我也不知道耶 🤔&lt;/p&gt;
&lt;p&gt;我也不希望自己“高高在上”。除非是很认真地探讨问题，我会一本正经；但除此之外，很多和我熟悉的同学都知道，我经常和大家一起互黑，开着没边儿的玩笑。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我最喜欢的老师形象，是《死亡诗社》中的老师基廷（Keating）。可惜，我没有那么厉害，也没有那么自由。&lt;/p&gt;
&lt;p&gt;我顶多学学他，假装告诉别人，要“寻找自己”。但其实，我也没有找到自己，我和所有人一样，一直在寻找自己。&lt;/p&gt;
&lt;p&gt;&lt;img alt="teacher2" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-09-09/teacher2.png" /&gt;&lt;/p&gt;
&lt;p&gt;所以，相较而言，我更喜欢做学生。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我的 github 首页，bio 一栏，填的是&lt;strong&gt;持续学习者&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img alt="bio" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-09-09/bio.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;在微信上，我的 What's Up，是&lt;strong&gt;学无止境&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img alt="wx" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-09-09/wx.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;实际上，学习我课程的同学，很多都是大佬。在和他们的交流中，我学到了太多东西。我认为，我从大家身上汲取的，远比我分享的那点儿玩意儿要多得多。&lt;/p&gt;
&lt;p&gt;很多时候，对我而言，我是学生，你们是老师。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我不玩儿英雄联盟，但前不久，我听说了英雄联盟中的一个人物台词，我很喜欢。&lt;/p&gt;
&lt;p&gt;这句台词来自无极剑圣易大师：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;真正的大师，永远怀着一颗学徒的心。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我还特意找到了这句台词的英文版：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A true master, is an eternal student.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="master" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-09-09/master.png" /&gt;&lt;/p&gt;
&lt;p&gt;很多学习我的课程的同学，都是真正的大师，而他们一直怀着一颗学徒的心。&lt;/p&gt;
&lt;p&gt;很多时候，这让我汗颜。&lt;/p&gt;
&lt;p&gt;所以，在这个日子，我也要祝所有那些曾经给予我启迪的，假装是我的“学生”的老师们，教师节快乐！：）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;不过，可能还是会有同学说：哎呀！我没那么厉害呀！我就是个学生呀。&lt;/p&gt;
&lt;p&gt;对此，我的回答是：每一名学生，也终将成为一位大师。&lt;/p&gt;
&lt;p&gt;所以，我觉得无极剑圣的这句话，还应该有后半句：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;真正的大师，永远怀着一颗学徒的心；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;每一名学徒，也应该怀有一颗大师的心。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;祝所有人，教师节快乐！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-09-09/readme.md" rel="alternate"/></entry><entry><id>2020/2020-09-06/readme.md</id><title>如何创作一个时空穿越的故事</title><updated>2020-09-06T00:00:00-07:00</updated><content>&lt;h2&gt;如何创作一个时空穿越的故事&lt;/h2&gt;
&lt;p&gt;我和老婆都是科幻迷，喜欢看科幻小说，喜欢看科幻电影。&lt;/p&gt;
&lt;p&gt;在所有科幻类型中，我们最喜欢的，是时空穿越的故事。&lt;/p&gt;
&lt;p&gt;时空穿越的故事有一种魔力，那就是即使这个故事本身不是那么“硬科幻”，我们依然可以沉浸在故事所设计的因果循环中，进行一场“思维实验”，一起来设想：如果我们可以穿越时间，会怎样？&lt;/p&gt;
&lt;p&gt;时空穿越的故事，关键不是其理论的完备性，而是对因果关系进行自洽的阐述。&lt;/p&gt;
&lt;p&gt;比如去年大火的台湾连续剧《想见你》，就是一个很好的例子。一个老式卡带录音机，播放着伍佰的《Last Dance》，主人公就穿越了，这完全没有科学道理。&lt;/p&gt;
&lt;p&gt;但整个故事的因果关系充分自洽，就能让我们享受其中的逻辑美。这个逻辑美，和数学公式推导的逻辑美异曲同工：环环相扣，错落有致。&lt;/p&gt;
&lt;p&gt;&lt;img alt="missu" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-09-06/missu.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;你看，我说了好多次“因果关系”，因为在我看来，大多数时空穿越的故事，创作的关键，就是讲明白“因果”关系。&lt;/p&gt;
&lt;p&gt;比如，一类非常典型的时空穿越的套路，被称为是 &lt;strong&gt;Predestination Paradox&lt;/strong&gt;。这个词在维基百科中，被翻译成是&lt;strong&gt;命定悖论&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;命定悖论这个词最初来自于美国科幻影视剧的“老前辈”，1966 年的《星际迷航（Star Trek）》；而这一系列影视作品，又起源于 1955 年美国科幻小说家 Robert Heinlein 的作品：《星际迷航（Tunnel in the Sky）》。&lt;/p&gt;
&lt;p&gt;&lt;img alt="startrek" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-09-06/startrek.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;命定悖论的故事套路是：一个灾难发生了。主人公千辛万苦，回到过去，想要阻止这个灾难的发生。但是，主人公最终发现：自己恰恰是这场灾难发生的原因。&lt;/p&gt;
&lt;p&gt;比如，你回到过去试图阻止一场历史著名的火灾事故。本来火灾不会发生，但恰恰因为你回到了这段时间，在未发生火灾的现场碰倒了一盏煤油灯，于是火灾发生了。&lt;/p&gt;
&lt;p&gt;你回到过去试图阻止火灾，却发现自己“试图阻止火灾”的行为本身，恰恰是火灾的起因。一场因果无穷的轮回诞生了。我们永远逃不出这个因果循环，一切命中注定。这就是命定悖论名称的由来。&lt;/p&gt;
&lt;p&gt;很多时空穿越的故事背后都有命定悖论的影子，比如大名鼎鼎的《十二猴子》(Twelve Monkeys)。&lt;/p&gt;
&lt;p&gt;&lt;img alt="12" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-09-06/12.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;同样描述无法分清因果关系的另一个穿越时空故事的套路，被称为是 &lt;strong&gt;Bootstrap Paradox&lt;/strong&gt;。我没有找到这个表述的正统中文翻译，但因为 Bootstrap Paradox 又被称为是 &lt;strong&gt;Information Paradox&lt;/strong&gt;，所以我们可以简单称其为&lt;strong&gt;信息悖论&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;信息悖论是指：时空穿越导致一个信息没有“源头”。&lt;/p&gt;
&lt;p&gt;比如说，我是一个音乐家。我因为一段音乐作品闻名于世。为了保证我自己能闻名于世，我穿越回了过去，将自己的这段音乐交给了过去的我自己。于是，我因为这段音乐闻名于世。&lt;/p&gt;
&lt;p&gt;在这个时空穿越的故事中，这段音乐作为一段信息，没有起源。没有任何人创造它。我从未来的我手中拿到这段音乐，又在未来送给了过去的我。&lt;/p&gt;
&lt;p&gt;信息悖论更高阶的展现形式，不是某段信息没有起源，而是“我”没有起源。&lt;/p&gt;
&lt;p&gt;比如主人公穿越时空，回到过去，和一名女子恋爱。而事后发现，这名女子就是主人公的母亲！她生下的小孩，就是过去的主人公。这名主人公，将在未来的某一天，穿越时空，回到过去，找到自己的母亲，生下自己。&lt;/p&gt;
&lt;p&gt;所以，主人公自己，就是自己的父亲。&lt;/p&gt;
&lt;p&gt;著名电影《终结者(The Terminator)》中，未来的人类联盟反抗军约翰·康纳，其父亲恰恰是自己派到过去的凯尔·里斯。如果约翰·康纳没有在未来派出凯尔·里斯，也就没有了自己。这里颇有信息悖论的意味。&lt;/p&gt;
&lt;p&gt;&lt;img alt="terminator" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-09-06/terminator.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;上面介绍的“套路”，不管是命定悖论，还是信息悖论，实质其实是一样的——因果形成了一个环。因即是果；果即是因。&lt;/p&gt;
&lt;p&gt;但如果因果不是环会怎样？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;祖父悖论&lt;/strong&gt;就是在时空穿越的故事中喜欢探讨的另一个主题了。&lt;/p&gt;
&lt;p&gt;祖父悖论说的是：如果你穿越时空，回到过去，杀死了自己在过去还没有结婚生子的祖父，那么你会怎样？&lt;/p&gt;
&lt;p&gt;&lt;img alt="grandfather" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-09-06/grandfather.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;如果你成功地杀死了自己的祖父，那也就不会有你的父母，也就不会有你，那么你就不能穿越时空杀死自己的祖父。于是悖论产生了。&lt;/p&gt;
&lt;p&gt;值得一提的是，祖父悖论不完全科幻小说家们的幻想。其实，理论物理学家们在非常严肃地对待这个问题。只不过，理论物理学家们探讨的版本，被称为是 &lt;strong&gt;Polchinski 悖论&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img alt="joe" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-09-06/joe.png" /&gt;&lt;/p&gt;
&lt;p&gt;Polchinski 是美国著名的理论物理学家和弦论学家。他曾形式化地讨论这个问题：如果一个小球，经过虫洞，穿越时间，来到了过去，恰好撞击了自己，使得自己偏离了运行轨道，无法进入这个虫洞，怎么办？&lt;/p&gt;
&lt;p&gt;这个小球因为进入了虫洞，才能撞击过去的自己；但这次撞击让自己无法进入虫洞，也就无法去撞击过去的自己。这个小球到底有没有进入虫洞，有没有撞击自己？&lt;/p&gt;
&lt;p&gt;我第一次看到这个表达，感觉太有意思了。原来世界级的理论物理学家探讨的问题和我们在高中探讨的问题差不多：都是这个小球到底会怎样。🤔&lt;/p&gt;
&lt;p&gt;&lt;img alt="phy" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-09-06/phy.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;上面介绍的，无论是命定悖论，还是信息悖论，虽然名字叫悖论，但其实逻辑是自洽的，没有矛盾，只不过因果形成了一个环，而不是我们一般理解的线性因果关系。&lt;/p&gt;
&lt;p&gt;但是，祖父悖论是一个真正的，可以导出矛盾的悖论。&lt;/p&gt;
&lt;p&gt;如果可以导出矛盾，我们就需要解决矛盾。怎么解决这个矛盾？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;解决这个矛盾的理论之一是：因为存在这样的矛盾，所以时空穿越是不可能的。&lt;/p&gt;
&lt;p&gt;由于这个理论过于无聊，虽然它有可能是真的，但我们在这篇文章中不讨论它。因为，实在没什么可讨论的。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;解决这个矛盾的另一个理论是：事实上，你永远不可能杀死自己的祖父。&lt;/p&gt;
&lt;p&gt;这个说法放到 Polchinski 悖论中，就是：经过计算，进入虫洞的小球，即使可以碰到自己，但是碰撞的力量，永远不足以让自己偏离原有的轨道，所以这个小球最终还是会进入虫洞。&lt;/p&gt;
&lt;p&gt;这个理论被称为是&lt;strong&gt;时间保护假设（Timeline Protection Hypothesis）&lt;/strong&gt;。即：时间会保护已经发生的事情，确保他的发生，哪怕有可以回到过去的力量。&lt;/p&gt;
&lt;p&gt;可以想象这个场景：你回到了过去，想杀死自己的祖父。你用枪指着他，扣动扳机。但是，子弹卡壳了。你连续扣动三次扳机，子弹就是卡在里面，无法发射。&lt;/p&gt;
&lt;p&gt;你把枪口对准旁边的空地，扣动扳机。砰！子弹发射出来了。&lt;/p&gt;
&lt;p&gt;看起来枪好了？于是你又把枪口对准自己的祖父，扣动扳机，子弹再次神奇地卡壳了。&lt;/p&gt;
&lt;p&gt;一种未知的力量在保护你的祖父，让你无法杀死他。因为，这将导致时间产生矛盾。这就是时间保护假设。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;还有一个解决祖父悖论的假设是：&lt;strong&gt;平行宇宙假设（Multiple Universes Hypothesis）&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;你回到过去，杀死自己的祖父。结果，你成功了！&lt;/p&gt;
&lt;p&gt;但这并不影响现在的你的存在。因为，你杀死自己的祖父，将会导致另一个时空出现。在这个新的时空中，你的祖父被杀死了，于是你不存在了；但是，你所在的时空里，你依然存在。&lt;/p&gt;
&lt;p&gt;两个时空平行进行，演绎着各自的故事。&lt;/p&gt;
&lt;p&gt;其实，从“感性”的角度，平行宇宙也是我不喜欢的理论，因为用这个理论来解决祖父悖论，给人的感觉过于“简单粗暴”，而缺少了逻辑性和故事性。&lt;/p&gt;
&lt;p&gt;所谓解释不通，平行宇宙。虽然，很多理论物理学家认为，平行宇宙很有可能是真实的。&lt;/p&gt;
&lt;p&gt;美国的超级英雄故事系列经常使用这样的方式处理问题。在这个系列中，X 教授死掉了；在下一个系列中，X 教授又活了。如果问为什么？答案是：他们在不同的漫威宇宙中。&lt;/p&gt;
&lt;p&gt;&lt;img alt="marvel" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-09-06/marvel.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;当然，以平行宇宙做为基础的科幻故事也能讲得很好。在我看来，关键就不是时空穿越了，而是如果两个或者多个平行宇宙出现了“交点”，会发生什么？&lt;/p&gt;
&lt;p&gt;比如《彗星来的那一夜》（Coherence）。&lt;/p&gt;
&lt;p&gt;&lt;img alt="coherence" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-09-06/coherence.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;再比如《相对宇宙》（Counterpart）。&lt;/p&gt;
&lt;p&gt;&lt;img alt="counterpart" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-09-06/counterpart.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;使用祖父悖论讲故事，不仅仅可以讲“我杀死我的的祖父”这种只关乎个人命运的故事，更可以讲关乎全人类命运的故事。其中一个故事模式，被称为是&lt;strong&gt;杀死希特勒&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;如果二战时，纳粹胜利，纳粹就将带领人类进入一个“万劫不复”的纪元。随着科技发展，一小撮革命军终于发明出了时光机，决定回到过去，刺杀希特勒。&lt;/p&gt;
&lt;p&gt;结果，刺杀希特勒成功，历史被扭转，纳粹没有获得二战的胜利，这样一来，人类将进入一个新的，光明的纪元。（我们的现在？）&lt;/p&gt;
&lt;p&gt;可问题在于，如果刺杀希特勒成功，我们可能就不会去发明时光机；或者即使发明了时光机，也不会回到过去去执行刺杀希特勒的任务。可如果我们不去刺杀希特勒，那么纳粹德国又会在历史上取得最终的胜利。&lt;/p&gt;
&lt;p&gt;悖论产生了。&lt;/p&gt;
&lt;p&gt;Doctor Who 有一集，就叫 Let's Kill Hitler。&lt;/p&gt;
&lt;p&gt;&lt;img alt="hitler.jpg" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-09-06/hitler.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;穿越时空的故事，还有一个套路，叫&lt;strong&gt;蝴蝶效应&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;一只南美洲的蝴蝶扇动翅膀，可能引发美国德克萨斯州的一场龙卷风。&lt;/p&gt;
&lt;p&gt;把蝴蝶效应放进穿越时空的故事中，就是如果你回到过去，改变过去，哪怕是微小的改变，都将导致未来巨大的变化。&lt;/p&gt;
&lt;p&gt;对此，最著名的电影，应该就是《蝴蝶效应（The Butterfly Effect）》了。&lt;/p&gt;
&lt;p&gt;&lt;img alt="butterfly" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-09-06/butterfly.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;不过在我看来，蝴蝶效应不仅仅是穿越时空的故事套路，更是近乎所有故事都可以使用的套路。起初一个小小的动作，导致了后续一系列巨大的变化。这是很多剧本创作的源泉。&lt;/p&gt;
&lt;p&gt;英格兰曾有一首民谣，是这样说的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;丢了一颗钉子，
坏了一块蹄铁；&lt;/p&gt;
&lt;p&gt;坏的一块蹄铁，
折了一匹好马；&lt;/p&gt;
&lt;p&gt;折的一匹好马，
摔伤一位骑士；&lt;/p&gt;
&lt;p&gt;摔伤一位骑士，
输了一场战斗；&lt;/p&gt;
&lt;p&gt;输的一场战斗，
亡了一个国家。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;相信大家都猜到了，我写这篇文章，是因为电影《信条》（TENET）。&lt;/p&gt;
&lt;p&gt;&lt;img alt="tenet" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-09-06/tenet.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;可惜，美国疫情这个德行，我是不敢去电影院看《信条》的。只能看着国内铺天盖地的宣传，留着口水，在家里写这篇文章。&lt;/p&gt;
&lt;p&gt;恰巧这篇文章最后的落点，是蝴蝶效应。&lt;/p&gt;
&lt;p&gt;谁能想到这样一个小小的病毒...&lt;/p&gt;
&lt;p&gt;哎，不说了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-09-06/readme.md" rel="alternate"/></entry><entry><id>2020/2020-08-25/readme.md</id><title>不是天才，不是星</title><updated>2020-08-25T00:00:00-07:00</updated><content>&lt;h2&gt;不是天才，不是星&lt;/h2&gt;
&lt;p&gt;这是在我的知识星球上，一个同学问我的问题。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;波波老师经历过那种长期努力过后仍然比别人差一大截的情况吗？&lt;/p&gt;
&lt;p&gt;人们常常说，你现在的努力程度远远还轮不到拼天赋。但是实际上，在很多时候，面临的竞争并不是完全公平的，因为存在很多前置知识的铺垫，有些人完成学习的速度就是快得多。&lt;/p&gt;
&lt;p&gt;陈忠实曾经说“我爱上文学的同时，就知道了人类存在着天才的极大差别。这个天才搅和得我十分矛盾而又痛苦，每一次接到退稿信的第一反应，就是越来越清楚地确信自己属于非天才的类型。尤其想到刘绍棠带着红领巾就蜚声文坛的难以理解的事实，我甚至悲哀起来了。”&lt;/p&gt;
&lt;p&gt;比较会带来很多痛苦，但是又不得不硬着头皮去做。高校对 GPA 或者说加权均分的向往，仍旧出于功利，评价手段仍然未变，而短时间出成绩，这仍然是重要的。应该不择手段地刷分？还是像郭宇一样只追求自己的热爱？哪一种选择更好呢？&lt;/p&gt;
&lt;p&gt;面对这种情况，是否只能用鲁迅先生"天才即勤奋"的哲理与之抗争呢？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;bobo 老师的回答：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我经历过那种长期努力过后，仍然比别人差一大截的情况吗？&lt;/p&gt;
&lt;p&gt;当然经历过。甚至在我尝试过的每一个领域，都是如此。永远有人在各个领域做得比我出色，这近乎是一种&lt;strong&gt;必然&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;如你所说，你已经意识到了，很多时候是因为：别人有“前置知识的铺垫，所以那些人完成学习的速度就是快得多。”&lt;/p&gt;
&lt;p&gt;正是因为如此，恰恰说明了，问题的关键并非天赋，而是时间。很多时候，所谓的天赋，就是时间积累的结果而已。&lt;/p&gt;
&lt;p&gt;人家高中就玩儿信息学竞赛了，凭什么我大一开始玩儿，就能一下子超过人家；&lt;/p&gt;
&lt;p&gt;人家小学就抱着原版读物看了，凭什么我研究生才意识到英语的重要性，然后一下子英语就比人家还牛？&lt;/p&gt;
&lt;p&gt;人家起步比自己早，甚至有些事情早十几年，如果这样，自己轻松就能追上，那这个世界才叫真的不公平。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;每个领域总有追不上的人，怎么办？&lt;/p&gt;
&lt;p&gt;恰恰因为如此，面对选择的时候，我永远会说，不要忘了问问自己的内心，到底对什么感兴趣。&lt;/p&gt;
&lt;p&gt;如果你不知道自己对什么感兴趣，那么就要努力地去找自己感兴趣的方向。不要害怕尝试，不要害怕开始。&lt;/p&gt;
&lt;p&gt;寻找自己感兴趣的事情，是我们每一个人一生都必须面临的问题。&lt;/p&gt;
&lt;p&gt;这和你考试多少分，家庭如何，是不是有钱，没什么关系。年少时可能会做一些更功利的选择，但越长大，越明白，找到自己最重要。&lt;/p&gt;
&lt;p&gt;为什么？就是因为，我们每个人都必须面对一个残酷的现实：在每一个领域，永远有人比我们做得好，永远有人比我们更有“天赋”，永远有人比我们更成功。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;从某个角度讲，我们每个人注定是“失败”的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;那我们如何和自己自处？&lt;/p&gt;
&lt;p&gt;于我来说，这个问题的答案，就是&lt;strong&gt;热爱&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我们一旦选择的是自己喜欢的事情，得失心就会小很多；在很多事情上，也就不会那么在意和别人的比较。&lt;/p&gt;
&lt;p&gt;至少对我来说是这样的。&lt;/p&gt;
&lt;p&gt;如果不喜欢编程，那么编程就只是一份“生产金钱”的工作而已。我们的眼睛就更容易盯着：自己在什么厂子？自己的级别是多少？自己的薪水是多少？别人又在什么厂子？别人的薪水是多少？别人的年终奖是多少？&lt;/p&gt;
&lt;p&gt;但如果真的喜欢编程，我们就更会自然而然地关注：自己又学会了新东西；自己又解决了新问题；自己的代码更优美了；设计更合理了；扩展性更强了；甚至有一天，突然发现：咦？原来我的代码也在帮助别人。&lt;/p&gt;
&lt;p&gt;这个感觉棒极了。&lt;/p&gt;
&lt;p&gt;因为喜欢一个事情，我们就会更关注于这个事情本身。不敢说其他的事情不会干扰我们，但对我们的干扰将大大变小。&lt;/p&gt;
&lt;p&gt;甚至，当真正喜欢一个东西时，别人眼里的“奋斗”，对我们来说，都不是“奋斗”了。我们只是在做自己喜欢的事情而已。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;你在问题中举了陈忠实的例子，我觉得陈忠实老先生很能说明问题。&lt;/p&gt;
&lt;p&gt;如你所说，陈忠实不是一个天才的作家。那他在那里吭哧吭哧，写什么呢？&lt;/p&gt;
&lt;p&gt;他老人家的原话，因为他“爱上了文学”。&lt;/p&gt;
&lt;p&gt;因为“爱上了文学”，所以即使自己不是天才，即使会因此“矛盾而又痛苦”，他也无所谓，继续坚持写。&lt;/p&gt;
&lt;p&gt;因为他“爱上了文学”，所以要写出自己心目中的作品，只此而已。&lt;/p&gt;
&lt;p&gt;最后，他完成了《白鹿原》。&lt;/p&gt;
&lt;p&gt;&lt;img alt="book" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-08-25/book.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;这名不是天才的作家，在去世后，世人为他写的悼词，有一部分是这样的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;陈忠实以文学为神圣，几十年如一日，坚韧不拔、精益求精，毕生献身文学，勇攀艺术高峰......&lt;/p&gt;
&lt;p&gt;他把当代我国长篇小说的创作推向了一个新的高度，构成了当代中国文学的艺术标杆和精神标识...&lt;/p&gt;
&lt;p&gt;世间已无陈忠实，天地白鹿魂永存。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;在路遥的追悼会上，人们都说：一颗璀璨的星，从中国文学的天宇陨落了。&lt;/p&gt;
&lt;p&gt;但在陈忠实的追悼会上，并没有人这么说。&lt;/p&gt;
&lt;p&gt;或许是陈忠实对自己的认识太深刻。他知道自己不是天才，不是一颗璀璨的星。他不是坠落，只是黯然离开。&lt;/p&gt;
&lt;p&gt;世人也不夸他是天才，不说他是一颗璀璨的星。&lt;/p&gt;
&lt;p&gt;世人只是说，&lt;strong&gt;天地白鹿魂永存。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;陈忠实老先生，留下了“白鹿魂”。&lt;/p&gt;
&lt;p&gt;如果你要问我，“白鹿魂”是什么？&lt;/p&gt;
&lt;p&gt;我想，这里面很大一部分，就是“&lt;strong&gt;因为热爱，所以坚持&lt;/strong&gt;”吧。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;与你共勉，大家加油！：）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="chen" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-08-25/chen.jpg" /&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-08-25/readme.md" rel="alternate"/></entry><entry><id>2020/2020-08-20/readme.md</id><title>我曾预言苹果股票会大涨？</title><updated>2020-08-20T00:00:00-07:00</updated><content>&lt;h2&gt;我曾预言苹果股票会大涨？&lt;/h2&gt;
&lt;p&gt;今天科技界的大新闻是：苹果市值超过 2 万亿美元，成为第一家市值突破 2 万亿美元的美国公司。&lt;/p&gt;
&lt;p&gt;&lt;img alt="1" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-08-20/1.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;现在，紧随苹果之后的美国大企业，分别是亚马逊，微软，和谷歌的母公司 Alphabet。&lt;/p&gt;
&lt;p&gt;这三家企业的市值现在分别是：1.63 万亿美元、1.59 万亿美元、1.05 万亿美元。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;苹果市值为什么能达到 2 万亿？&lt;/p&gt;
&lt;p&gt;我分析有这么几个原因：&lt;/p&gt;
&lt;p&gt;1）因为疫情的原因，美联储货币政策上的“大放水”；&lt;/p&gt;
&lt;p&gt;2）疫情期间，投资者更愿意把钱投向大企业来规避风险。更不用提巴菲特老爷子早早给苹果背书，领投苹果。巴菲特甚至在今年曾经说，苹果的股票已经成为了自己的“第三大业务”。（巴菲特心目中排名前二的业务是保险和铁路业务）。&lt;/p&gt;
&lt;p&gt;3）因为疫情，大家在家里需要更多电子设备远程做各种事情。现在疫情下的美国，别说上课这种本来就很成熟的，能在线上完成的事情了。看病，看房，咨询，乃至很多聚会，演唱会，都远程了。疫情期间，无论是 macbook 还是 iPad，销量都大增；反而是 iPhone 的销量没什么变化。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;另外，美国政府给每个家庭发了救济金。我很早就在公众号里说，以我对美国人的了解，我怀疑很多美国人会拿着这笔钱买苹果设备，而不是食物或者防疫物资。。。&lt;/p&gt;
&lt;p&gt;&lt;img alt="2" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-08-20/2.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;据可靠消息，华尔街分析师曾认为，苹果要在 2021 年底，才能达到 2 万亿市值。&lt;/p&gt;
&lt;p&gt;现在看来，因为疫情，加速了苹果的发展。&lt;/p&gt;
&lt;p&gt;（仔细看我总结的三点，其实都和疫情有关！）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;如今，&lt;strong&gt;据不可靠消息&lt;/strong&gt;，华尔街分析师认为，到大概 2023 年底，苹果将达到 3 万亿市值。&lt;/p&gt;
&lt;p&gt;如果这个预测是真的，那就意味着，苹果的股票能在三年时间里上涨 50%，简单计算下来平均年回报率 16% 多，还是相当可以的。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;但是投资有风险，入市需谨慎。&lt;/p&gt;
&lt;p&gt;比如，今年本来 Airbnb 能上市的。谁能想到结果出现了新冠病毒这样一种精准打击 Airbnb 的商业模式的东西。华尔街那帮分析师在一年前，恐怕就算被人用枪指着脑袋也想象不到。&lt;/p&gt;
&lt;p&gt;这件事儿说起来就让我唏嘘。Airbnb 的估值几近腰斩。但就在两年前，很多挺靠谱的求职网站还都认为，Airbnb 是非常值得加入的企业，甚至是最值得加入的企业。&lt;/p&gt;
&lt;p&gt;谁想今年竟会如此。&lt;/p&gt;
&lt;p&gt;鬼知道在后面的 3 年，会出现什么新的奇怪的东西，可能精准打击苹果的商业模式？&lt;/p&gt;
&lt;p&gt;不过，如果没有这种奇怪的意外的话，我还是相当看好苹果的。&lt;/p&gt;
&lt;p&gt;坐等见证历史，或者被打脸。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;P.S. 1&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这篇文章我首先发布在了我的知识星球上。然后有同学告诉我，我去年 Adobe 发布会写过一篇文章，盛赞 Adobe，然后 Adobe 的股票之后也涨得很凶。&lt;/p&gt;
&lt;p&gt;我算了一下，从 2019 年 11 月初 Adobe 开发布会到现在，Adobe 的股票上涨了 66%。&lt;/p&gt;
&lt;p&gt;&lt;img alt="3" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-08-20/3.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;我觉得这是瞎猫碰上死耗子了。实际上，在过去的这一年，硅谷大企业的股票涨得都很凶。&lt;/p&gt;
&lt;p&gt;我简单对比同一时期：亚马逊上涨 82%；微软上涨 45.9%；Google 的母公司 Alphabeta 上涨 21.4%；苹果上涨 80.9%。&lt;/p&gt;
&lt;p&gt;哦，原来 Amazon 上涨幅度最大，怪不得最近 Amazon 扩张的很厉害。同时，疫情对 Amazon 也是大机会 🤔&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;P.S. 2&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;本文不构成任何投资建议。&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-08-20/readme.md" rel="alternate"/></entry><entry><id>2020/2020-08-18/readme.md</id><title>模板不重要</title><updated>2020-08-18T00:00:00-07:00</updated><content>&lt;h2&gt;模板不重要&lt;/h2&gt;
&lt;p&gt;最近有同学问我打算法比赛是不是用模板？能不能分享一下？这个问题一下子勾起了我好多回忆。&lt;/p&gt;
&lt;p&gt;晚上躺在床上睡不着，手机码字一个小时，随便聊聊我对算法比赛模板的看法。&lt;/p&gt;
&lt;p&gt;都是碎碎念，感兴趣的同学凑合看。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;我本科参加 ACM 比赛的时候，有没有准备算法模板？有。但那个模板我早已经找不到了。&lt;/p&gt;
&lt;p&gt;一来，当年那个模板用现在的眼光看，简直是惨不忍睹。我个人也确实不是那种顶尖的选手，在 ACM 圈儿里看简直是平庸，我真的不认为我的模板有任何参考价值；&lt;/p&gt;
&lt;p&gt;二来，在那个年代，别说 github 了，连百度云盘都没有。想在线上存储资料，主要靠邮箱。而实际上，每个人最重要的存储介质，是一块儿 128M 或者 256M 的闪盘，现在早就找不到了；&lt;/p&gt;
&lt;p&gt;三来，最重要的，在我的记忆中，比赛模板基本就是一个心理安慰，实用性极低。稍微有点儿水平的比赛，瓶颈绝不是模板。反正我没遇到过在比较重要的比赛中，只因为没有准备好模板，而做不出来某个问题的情况。&lt;/p&gt;
&lt;p&gt;也正因为如此，我在大四不打 ACM 比赛以后，曾经准备的比赛模板再也没有看过一眼，更别说更新了。&lt;/p&gt;
&lt;p&gt;现在，那个存储着当年模板的闪盘，应该静静地躺在家里吃灰。闪盘里八成还有很多那个年代的电脑病毒，和那些曾经的奋斗一起长相厮守。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;说实话，别看我本科做 ACM 比赛，但其实我是在研究生的时候，才开始踏踏实实系统学习算法的。&lt;/p&gt;
&lt;p&gt;因为本科的时候只顾着比赛，别看训练时间挺多，刷题挺多，但其实都是在“应试”，对很多算法都不知其所以然。&lt;/p&gt;
&lt;p&gt;在研究生的时候，完全没有比赛的压力了，才知道自己对算法有多感兴趣，于是捡起了很多经典的算法书细品。&lt;strong&gt;不再追求刷题的数目，沉浸在算法的前因后果中，反而对算法有了更深层次的理解。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所以我总建议大家不要一味刷题，扎扎实实打基础最重要。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;在这里吹几个小牛。我本科升研究生的机试，是我们那届最快完成的。两个小时的机试，我大概 20 分钟就搞定了。&lt;/p&gt;
&lt;p&gt;离场的时候看好多人在那里翻书，但我一本书都没带。其实那个时候我心情特别不好，遇到一些所谓的人生挫折。虽然现在回头看不是事儿，但那会儿情绪挺低落的，所以研究生复试我完全没准备，直接裸考，想的是大不了不读研究生了，直接工作。&lt;/p&gt;
&lt;p&gt;结果没想到光脚的不怕穿鞋的，那场机试反而是第一名。当时带了一堆书当模板的同学，反而没看到成绩有多好。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;研究生时闲得没事儿也会做点儿比赛玩儿。我印象最深的有两次。&lt;/p&gt;
&lt;p&gt;一次是一个校内的 ACM 选拔赛。我是研究生，已经没有成为正式选手的资格了，只是参加着玩儿，结果竟然排名前五；&lt;/p&gt;
&lt;p&gt;还有一次是一个企业的算法比赛。我拿了第一名。奖品除了奖状，还有个数码相机。那个年代数码相机挺贵的，基本就是现在的一个 iPhone 旗舰的赶脚了。我把那个相机送给我妈，我妈高兴了好久。&lt;/p&gt;
&lt;p&gt;关键是，这两次比赛，我都完全没带模板。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;实际上，在我印象里，算法模板最有用的一次，是本科一场预选赛。其中一个问题需要大数计算，我们没有模板。那会儿对 Java 完全不熟，不知道 Java 有大数类。我要没记错，那会儿还是 Java 4 的年代。&lt;/p&gt;
&lt;p&gt;于是，我们比赛的时候现场用 C++ 手写了一个大数类，耽误了很多时间。后来我们总结说不行，要自己有一个大数类模板，于是我就做了一个。&lt;/p&gt;
&lt;p&gt;可在那之后，在我的记忆中，那个大数类模板再也没有被用过了。我怀疑是那场比赛以后，有选手向组委会反应了。反正，我再也没在正式比赛中见过用 Java 因为有大数类就能轻易过；用 C++ 没有大数类一下子时间拉开差距的问题了。&lt;/p&gt;
&lt;p&gt;其实，这样才是合理的。算法比赛比拼的是算法设计能力，而不应该因为语言标准库的差异而产生巨大的比赛结果差异。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;当然，这里面还有一个问题，就是到底什么叫算法模板？我是在慕课网讲算法以后，才意识到大家对这个问题的理解是非常不同的。&lt;/p&gt;
&lt;p&gt;我印象最深刻的是，有一次，一名同学问我，做二分查找的问题，哪个模板更好？我当时就懵了。&lt;/p&gt;
&lt;p&gt;首先，写二分查找我确实不用模板，直接手写。但真正让我懵的是：二分查找就是那样一个算法思想，为什么还有“哪个”模版？难道还有很多二分查找的模板？&lt;/p&gt;
&lt;p&gt;后来通过他的介绍，我才发现，确实网上有很多文章讨论，二分查找这个模板比那个模板更好一类的文章，我觉得还挺神奇的。&lt;/p&gt;
&lt;p&gt;在我看来，二分查找是一个统一的逻辑思想。真要细究，我们用二分查找，可以解决如下问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;查找一个元素；&lt;/li&gt;
&lt;li&gt;求大于某个元素的最小值；&lt;/li&gt;
&lt;li&gt;求大于等于某个元素的最小值；&lt;/li&gt;
&lt;li&gt;求小于某个元素的最大值；&lt;/li&gt;
&lt;li&gt;求小于等于某个元素的最大值；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;等等等等。&lt;/p&gt;
&lt;p&gt;这些二分查找的不同应用，表现在代码上，只是一些边界发生微小的变化。难道对此，我们还要准备五个不同的模板？&lt;/p&gt;
&lt;p&gt;如果需要五个模版，才有信心面对一个二分查找的问题写出正确的代码，那在我看来，大概率是因为根本没有理解二分查找。&lt;/p&gt;
&lt;p&gt;需要五个模板，本质等于是在背代码。可又背不下来，于是写成了模版。&lt;/p&gt;
&lt;p&gt;如果真的理解了二分查找，所有这些“变种”，背后是一套统一的逻辑。根据这套逻辑，求解的问题不同，相应的边界变化自然而然就写出来了。其中的代码，根本不需要背，也不需要模板。&lt;/p&gt;
&lt;p&gt;插播一个广告，我在慕课网的体系课程，对二分查找的这些变种背后的这个统一逻辑，有详细的介绍。&lt;/p&gt;
&lt;p&gt;&lt;img alt="algo" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-08-18/algo.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;再比如，我发现有同学写回溯算法，写滑动窗口，写 BFS，是需要模板的。这背后，大概率的，其实是根本没有理解回溯，没有理解 BFS，没有理解滑动窗口。或者是对循环不变量的理解不深刻，导致需要靠模板来“记忆”边界，而不是根据自己要组建的逻辑写出正确的边界。&lt;/p&gt;
&lt;p&gt;如果对这些经典算法和数据结构的理解都还停留在记忆的阶段，基本上不太可能谈算法设计。就算有了所谓的算法设计的思路，具体实现起来，八成也会一团糟。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;还有一些模版，在我看来完全没有用。比如我就见过有同学整理出“区间 DP”的模板。&lt;/p&gt;
&lt;p&gt;说实话，“区间 DP”这个概念，我觉得在我本科的时候都没有。后来估计越来越多人发现一类求解区间上的问题，可以使用 DP，相应的状态定义方式就是区间的边界，于是造出了“区间 DP”这个词，方便交流。&lt;/p&gt;
&lt;p&gt;可关键是，在我看来，了解区间 DP 就是把区间边界当做状态，就已经足够了。在具体的问题中，状态转移的方式千变万化。就算能识别出一个问题是区间 DP，其实意义不大的。&lt;/p&gt;
&lt;p&gt;区间 DP 最经典的问题是这样一个石子合并的问题。我完全不相信准备这样一个问题的解，就能据此做出所有区间 DP 的问题。&lt;/p&gt;
&lt;p&gt;&lt;img alt="dp" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-08-18/dp.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;甚至有的时候，&lt;strong&gt;模板会起反作用，因为它会限制你的思路。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;举个例子，很多同学会准备 KMP 的模板。但这里有一个错误的假设：那就是 KMP 算法内部的所有细节一定会当做一个整体出现；见到字符串匹配问题，直接上 KMP 模板就好了。&lt;/p&gt;
&lt;p&gt;但实际上，我从来没见过算法比赛直接考字符串匹配的。但就在今年，我见到一个有意思的比赛问题。&lt;/p&gt;
&lt;p&gt;这个问题是一个数位 DP，但在状态转移中需要一步优化，这步优化要使用 LPS 的思想。&lt;/p&gt;
&lt;p&gt;LPS 是什么意思？是 Longest proper Prefix which is also Suffix 的意思，即字符串中最长的是后缀的前缀。&lt;/p&gt;
&lt;p&gt;这个概念是 KMP 算法中使用的一个重要思想。如果对 KMP 的理解只停留在它是一个更快的字符串匹配算法的程度，就很难提炼出 LPS 的思想，更不可能把它灵活应用在一个数位 DP 的问题上。&lt;/p&gt;
&lt;p&gt;对于这个问题，懂的人都会说背后是 KMP。但有 KMP 模版和做出这道题之间，相差十万八千里。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;再比如，Binary Lifting 也是一个很经典的思想。这个思想最典型应用是在 LCA 问题上。所以很多同学就准备了一个 LCA 模版。&lt;/p&gt;
&lt;p&gt;还是今年，我见到了一个在网格上求解特殊路径的问题，需要使用 Binary Lifting 的思想。这个问题和 LCA 没半毛钱关系，如果手里只有 LCA 的模版，将很难做出这个问题。但如果你深入理解了到底什么是 Binary Lifting，理解它的本质其实就是 DP，了解它的状态定义和状态转移，完全不需要模板。&lt;/p&gt;
&lt;p&gt;今年有一场 Leetcode 周赛的 Hard 问题，就是很标准的 Binary Lifting。我手里其实早就没有 Binary Lifting 的模版了，但是因为对这个问题的状态定义印象很深，十来分钟就搞定了。（又吹牛了🤥）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我的体会是，很多时候，&lt;strong&gt;写一个算法，如果需要模板，基本就是对这个算法理解不深刻。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;再举个例子：我以前写 Dijkstra 是需要模板的。后来，我突然意识到，Dijkstra 的思想，本质就是 BFS！因为 BFS 处理的是无权图，所以用一个普通队列就够了；但 Dijkstra 处理带权图，就需要一个优先队列了。在此基础上，BFS 和 Dijkstra 近乎是同样的逻辑。&lt;/p&gt;
&lt;p&gt;从此，我写 Dijkstra 再也不需要模板了。&lt;/p&gt;
&lt;p&gt;我甚至坚信，Dijkstra 当年就是从 BFS 推导出 Dijkstra 算法的，而不是一般教材里讲的，先证明出切分定理，然后 Dijkstra 算法就冒出来了。&lt;/p&gt;
&lt;p&gt;&lt;img alt="dij" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-08-18/dij.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;当然，对于一些更复杂的算法，我也要用模板，比如求解最大流的 ISAP 或者 HLPP。但我坚信这是因为我对这些算法理解的不透彻。&lt;/p&gt;
&lt;p&gt;不过对于最大流的问题，我后来发现大多数情况 EK 算法就够用，顶死了用 Dinic。而手写 EK 算法其实很容易，建好残差网络以后做 BFS 就好。不排除是因为我水平还不够，见的变态问题太少。&lt;/p&gt;
&lt;p&gt;这其实也是 ACM 和 NOI 或者 IOI 的一个重要区别。NOI 或者 IOI 很多问题卡优化卡得很厉害；但 ACM 更重视算法的思路设计，而不是特别变态刁钻的算法的使用。因此，很多人觉得其实 NOI，IOI 比 ACM 难。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;我现在不时做做比赛，也会用模板。最常用的模板是并查集，线段树，BIT 等等这种数据结构的模板。因为这类数据结构封装得太完整了，拿来可以直接用，其实就是标准库的补充。&lt;/p&gt;
&lt;p&gt;不过，对于大多数玩儿过算法竞赛的同学，手写一个并查集，BIT，也是小 case。因为代码量真的很小。大家可以在网上搜搜并查集或者 BIT 的模版，也就 10 行不到就够用了。真理解了，现场写很快的。&lt;/p&gt;
&lt;p&gt;比如，我在网上随便搜一个并查集的模板，是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="uf" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-08-18/uf.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;对了，因为有了互联网，所以很多时候，模板意义更小了。尤其是对于网络赛，真想要用一个模板，随便一搜，一堆大神用各种语言写的模板，任你挑。&lt;/p&gt;
&lt;p&gt;难道有了这么多模板，大家算法比赛就都能 AAC？绝不是。&lt;/p&gt;
&lt;p&gt;算法比赛比的，从来不是谁手里的模板更好。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;P.S.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这篇文章没有想说模板没有用，而是如标题所说，想强调：模板没有那么重要。相较而言，深刻理解算法，能够灵活运用算法，比去寻求一个好的模板重要一万倍。&lt;/p&gt;
&lt;p&gt;当然，其实每个人自己总结模板的过程，也是学习算法的过程。如我文中所说，我现在也用模板，我的 github 私仓有一个 repo，就是我的模板，但真的不常用，而且代码烂得很，没有好好整理。&lt;/p&gt;
&lt;p&gt;以后我应该会认真整理一下，然后公布出来的：）&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-08-18/readme.md" rel="alternate"/></entry><entry><id>2020/2020-08-16/readme.md</id><title>败者的游戏</title><updated>2020-08-16T00:00:00-07:00</updated><content>&lt;h2&gt;败者的游戏&lt;/h2&gt;
&lt;p&gt;Simon Ramo 是一名美国的工程师，商人，和作家。生于 1913 年，逝于 2016 年，享年 103 岁。&lt;/p&gt;
&lt;p&gt;如果你去查看他的履历，会发现，从微波炉的发明，到电子显微镜的出现，乃至导弹技术，背后都有他的影子。&lt;/p&gt;
&lt;p&gt;他早年在通用电气工作，之后有两次极其成功的创业，先后在 1958 年与 1964 年参与创立了 Ramo-Wooldridge 和 Bunker-Ramo 两家企业。这两家企业都曾经登上过全球 500 强企业的名单。&lt;/p&gt;
&lt;p&gt;&lt;img alt="simon" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-08-16/simon.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;有意思的是，让我真正认识这个人的，并非是他的这些“丰功伟绩”，而是他写的一本名不见经传的小册子：Extraordinary Tennis Ordinary Players，我简单翻译成：杰出的网球比赛，普通的选手。&lt;/p&gt;
&lt;p&gt;这本书出版于 1970 年，在 1999 年又重新修订。但是重新修订的年份也在上个世纪，距今已有 21 年了。&lt;/p&gt;
&lt;p&gt;这本书实在太老，以至于在亚马逊上，都没有一个“体面”的封面照，只有这样一个看起来“脏兮兮”的，随手拍摄的二手书封面照片。&lt;/p&gt;
&lt;p&gt;&lt;img alt="cover" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-08-16/cover.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;但是，这本出版距今已有 50 年之久的小册子中，却讨论了一个让今天的我也感触颇深的问题。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;Ramo 是一名网球运动爱好者。他看了无数场网球比赛，有专业组的比赛，也有业余组的比赛。&lt;/p&gt;
&lt;p&gt;不管是专业比赛，还是业余比赛，网球的规则都是一样的。但有一天，Ramo 意识到：专业的网球比赛，和业余的网球比赛，其实是两种截然不同的比赛。&lt;/p&gt;
&lt;p&gt;Ramo 称专业组的比赛，是&lt;strong&gt;“胜者的游戏”（Winner's Game）&lt;/strong&gt;。在专业比赛中，&lt;strong&gt;得分大多数是胜球方赢来的&lt;/strong&gt;。胜球方使用高超的网球技巧，最终让对方无法接住自己的球，赢得了比分。&lt;/p&gt;
&lt;p&gt;但是，业余的网球比赛完全不同。Ramo 称业余的比赛是&lt;strong&gt;“败者的游戏”（Loser's Game）&lt;/strong&gt;。因为在业余比赛中，&lt;strong&gt;得分大多数是对方输来的&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;在业余比赛中，选手犯错误的概率大大增高，把球打出界或者没有过网是家常便饭。&lt;/p&gt;
&lt;p&gt;在业余比赛中，很多时候，赢球不是因为自己的技巧多高超，而是因为对手的失误，让自己赢得了比分。&lt;/p&gt;
&lt;p&gt;根据 Ramo 的统计，在专业组比赛中，80% 的比分是赢来的；而在业余组比赛中，80% 的比分是对手输来的。&lt;/p&gt;
&lt;p&gt;因此，在专业组比赛中，最终的比分取决于谁的技巧水平更高；而在业余组比赛中，最后的比分则取决于谁的失误更少。&lt;/p&gt;
&lt;p&gt;如果理解了这一点，对于业余选手来说，最佳的比赛策略并不是用各种“酷炫”的扣杀赢得对手。虽然这会让比赛更加好看，但与此同时，也增加了自己失误的概率。&lt;/p&gt;
&lt;p&gt;相对而言，业余选手反而应该选择稳扎稳打的策略。业余选手的第一要务是把球安全地击回给对方。只要做到了这一点，对手就有很高的概率因为失误，让你赢得比分。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;只要更少的失误，就能赢。&lt;/strong&gt;这就是 Ramo 对业余网球比赛选手的建议。虽然看似胜之不武，但它确实行之有效。&lt;/p&gt;
&lt;p&gt;有些人认为，这样的方式会大大降低比赛的观赏性，甚至有违体育精神，不值得鼓励。但是，很快，人们就发现，这样的一个思考方式，却适用于更多领域，哪怕是对专业选手而言。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;查理芒格是巴菲特的重要合伙人，巴菲特回顾自己投资成就时说：“我之所以能有现在的成就，是因为遇见了查理芒格。”&lt;/p&gt;
&lt;p&gt;&lt;img alt="charlie" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-08-16/charlie.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;在投资领域，查理芒格最重要的一条忠告就是：如果要想保持长期的优势，&lt;strong&gt;最重要的不是追求卓越，而是努力让自己不要犯错。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It is remarkable how much long-term advantage people like us have gotten by trying to be consistently not stupid, instead of trying to be very intelligent.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;从芒格的角度看，对于投资来说，最重要的并非看准一次两次巨大的投资机会，而是想明白：在市场中，哪些资产有风险，有可能让你输钱。&lt;/p&gt;
&lt;p&gt;只要小心地躲开这些可能让你输钱的陷阱，即使没有大赚，但是长期来看，你将赢得市场上的大多数人。&lt;/p&gt;
&lt;p&gt;对于芒格来说，投资更像是一场&lt;strong&gt;败者的游戏&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;芒格有一句半开玩笑的名言，广为流传：&lt;strong&gt;我只想知道我将在哪里死去，那样的话，我就可以永远不去那里。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;All I want to know is where I’m going to die, so I’ll never go there.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;Abraham Wald 是一名匈牙利的统计学家，在二战时期为美军做统计研究工作。&lt;/p&gt;
&lt;p&gt;他实际上是序贯分析（sequential analysis）的发明人。但是，大部分人不懂什么是序贯分析，却津津乐道于他在二战期间，巧妙地大幅提升了盟军的飞机防御能力。&lt;/p&gt;
&lt;p&gt;&lt;img alt="wald" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-08-16/wald.png" /&gt;&lt;/p&gt;
&lt;p&gt;Abraham Wald 当时所在的研究组接到的任务是：研究如何提升作战飞机的防御能力。&lt;/p&gt;
&lt;p&gt;面对这样一个问题，Abraham 反其道而行之，着手研究：到底是什么，让作战飞机最终坠毁阵亡。&lt;/p&gt;
&lt;p&gt;Abraham 把这个研究想成是一个&lt;strong&gt;败者的游戏&lt;/strong&gt;，不去追求如何让作战飞机更强，而是去追求如何让作战飞机“不弱”。&lt;/p&gt;
&lt;p&gt;值得一提的是，在探索“到底是什么让飞机最终坠毁阵亡”这一问题时，Abraham 证实了：返航飞机上，弹孔最多的位置，反而是飞机最坚固的部位；而见不到弹孔的地方，才是飞机最脆弱的地方。因为这些地方过于脆弱，使得一旦被击中，飞机就坠毁了。所以在安全返航的飞机中，永远看不到这些部位有弹孔。&lt;/p&gt;
&lt;p&gt;Abraham 的这一洞察，已经成为了统计学与经济学中讲解&lt;strong&gt;幸存者偏差（Survivorship Bias）&lt;/strong&gt;的经典案例。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;在企业界，这样的思考也很为常见。&lt;/p&gt;
&lt;p&gt;如果你曾经去过一个创业孵化器，大多数负责任的投资人都会告诉你：创业的第一要务，不是如何“火起来”，而是如何“不死”。&lt;/p&gt;
&lt;p&gt;负债累累的“火”不是可持续的商业模式；能够让自己“不死”，才有机会。&lt;/p&gt;
&lt;p&gt;我在 &lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-04-18/"&gt;从巴黎圣母院的大火，到消逝的IT巨头&lt;/a&gt; 一文中曾介绍过，BBC做过一个统计：现如今，美国标普 500 指数的公司，竟然平均年龄只有 15 岁。&lt;/p&gt;
&lt;p&gt;标普 500 的公司尚且如此，更不用提创业公司了。99.99% 的创业公司还没有绽放，就已经凋谢。&lt;/p&gt;
&lt;p&gt;创业是一场&lt;strong&gt;败者的游戏&lt;/strong&gt;，创始人的第一要务，是保证自己的企业不死。因为不死，就已经赢过了 99.99% 的其他初创公司。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;这样的思考，同样适用企业运营的方方面面。我在 &lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-08-06/"&gt;我不埋怨奋斗B&lt;/a&gt; 一文中，曾经举过一个我亲自采访的案例。&lt;/p&gt;
&lt;p&gt;企业老板高喊创新，但是因为最终的绩效依然是销售额，导致保守的人拿到了大红包，真正尝试创新的人反而吃了苦头。&lt;/p&gt;
&lt;p&gt;这不叫鼓励创新，这叫鼓励保守。&lt;/p&gt;
&lt;p&gt;那到底应该怎么鼓励创新？实际上，这个案例已经给了我们答案。&lt;/p&gt;
&lt;p&gt;我们可能很难找到具体的，能够真正激发员工创新的举措；但是，我们可以看到，&lt;strong&gt;到底是什么在抑制创新？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;仅仅使用销售额作为绩效，就是在抑制创新。要想鼓励创新，就要从改变这些抑制创新的规定开始。&lt;/p&gt;
&lt;p&gt;一家不抑制创新的企业，就已经是在鼓励创新了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;同理，运营人员一定要时时刻刻盯着新增用户的数字看吗？绝不是。很多时候，相比新增用户，如何留住老用户，防止已有用户的流逝，或许是运营人员更应该关注的问题。&lt;/p&gt;
&lt;p&gt;产品设计人员一定要时时刻刻思考怎样的功能点，能带来更多的效益吗？也不是。很多时候，判断清楚什么样的功能，可能带来效益的降低，或许更重要。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我在 &lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-08-20/"&gt;万能学习法&lt;/a&gt; 一文中，曾经分享过：我曾经拜过一个师傅学习设计。那到底什么是好的设计？&lt;/p&gt;
&lt;p&gt;我的师傅告诉我：好的设计千变万化，我们很难总结出“好的设计”的规律。实际上，没有规律，恰恰是艺术类学科的特点。&lt;/p&gt;
&lt;p&gt;但是，我们能做到的是：识别出什么是差的设计，在设计的过程中避免它们。&lt;/p&gt;
&lt;p&gt;一个“不犯错”的设计，可能不是一个好的艺术品，但是从商业设计的角度，已经成功了一半。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;实际上，这样的思考模式，我们程序员应该并不陌生。&lt;/p&gt;
&lt;p&gt;所有有过性能调优经历的人都明白：在一个真实的项目中，要想做好性能调优，第一件事不是去想：要用一个什么新的架构，新的模式，新的算法，来提升性能。&lt;/p&gt;
&lt;p&gt;我们要做的第一件事，永远是仔细的检查：现在的系统，性能瓶颈在哪里？最耗时的逻辑是什么？&lt;/p&gt;
&lt;p&gt;我们的首要目标，是想办法改善性能差的地方，这就将极大地提高整个系统的性能。&lt;/p&gt;
&lt;p&gt;看，&lt;strong&gt;败者的游戏是一种思考方式，它无处不在。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;之所以写这篇文章，是因为有人问我：bobo 老师，觉得自己的工作学习效率很低，每天不知不觉就过去了，如何能够提升自己的效率？&lt;/p&gt;
&lt;p&gt;我想了很久，觉得，如果要想找到一个普世的提升效率的方法，太难了。毕竟，每个人的情况千差万别。&lt;/p&gt;
&lt;p&gt;但或许，最简单的做法是：认真观察自己每天的工作学习过程，在其中，&lt;strong&gt;鉴别出，到底哪些因素，在影响你的效率，在降低你的效率。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;与其去思考如何提升效率，不如想办法改进那些降低效率的行为。&lt;/p&gt;
&lt;p&gt;你或许总被手机吸引；或许因为目标不明确，做着 A 却总是想着 B；或许因为学习工作的环境不够友好，总被打断；或者因为休息不好，导致效率低下。&lt;/p&gt;
&lt;p&gt;找到那些真正影响你效率的原因，想办法改变它。&lt;/p&gt;
&lt;p&gt;我们真正要做的，或许不是更高效，而是想办法不低效。&lt;/p&gt;
&lt;p&gt;只要尽量少的低效，我坚信，在效率方面，你就已经超过绝大多数人了。&lt;/p&gt;
&lt;p&gt;又是&lt;strong&gt;败者的游戏。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;大家加油！：）&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-08-16/readme.md" rel="alternate"/></entry><entry><id>2020/2020-08-10/readme.md</id><title>现实虚拟连续统</title><updated>2020-08-10T00:00:00-07:00</updated><content>&lt;h2&gt;现实虚拟连续统&lt;/h2&gt;
&lt;p&gt;这是在我的知识星球上，一个同学问我的问题。&lt;/p&gt;
&lt;p&gt;波波老师好！我从大一下数据结构就开始看您的课程，目前是美国匹兹堡大学本科 CS 在读，年底毕业。&lt;/p&gt;
&lt;p&gt;今年暑假找到一个 AR 相关的实习机会，我发现我对这方面更感兴趣了。以后读研/读博也在考虑这个方向。看过您的资料，您在研究生期间读的是 AR / VR 方向的，想问下您对 AR / VR 的看法？求观点~&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;bobo 老师的回答：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我研究生的实验室方向确实是 VR / AR 方向。但说实话，已经十多年过去了，我那会儿接触的东西，应该和现在已经有翻天覆地的变化了。&lt;/p&gt;
&lt;p&gt;比如，我们那会就根本没有深度学习这个概念。现在，相信很多研究都能和深度学习联系起来了。&lt;/p&gt;
&lt;p&gt;从更实际的角度，我更看好 AR 方向，而不是 VR 方向。因为 AR 方向的应用场景更多，商业前景更广阔。&lt;/p&gt;
&lt;p&gt;无论是无人驾驶技术，还是盛传的苹果眼镜，或者已经出厂的谷歌眼镜，都是 AR 技术的使用。更广阔地看，所有的图像识别技术，都可以一定程度 AR 化。这在很多专有领域都很重要，比如很有可能在未来超火的医疗领域。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;当然，我这样说很笼统。实际上，有一个很重要的问题，就是到底什么是 AR？&lt;/p&gt;
&lt;p&gt;AR 本身是 &lt;strong&gt;Augmented Reality&lt;/strong&gt; 的简称，即增强现实。&lt;/p&gt;
&lt;p&gt;现实被谁增强？被虚拟的信息增强。&lt;/p&gt;
&lt;p&gt;从这个角度看，我们总将 AR 和 VR 一起讨论是没有道理的。因为 VR 的意思是 Virtual Reality，即虚拟现实。什么叫虚拟现实？就是&lt;strong&gt;完全虚拟的世界。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;“虚拟现实”其实是和“现实”相对应的两个极端：一端完全虚拟，一端完全现实。&lt;/p&gt;
&lt;p&gt;这不是我的观点，这是 1994 年，由保罗·米尔格拉姆（Paul Milgram）和岸野文郎（Fumio Kishino）提出的&lt;strong&gt;现实-虚拟连续统&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;听这个名字很炫吧？它的概念其实很简单：我们可以画出这样的一个“坐标轴”：&lt;/p&gt;
&lt;p&gt;&lt;img alt="rv1" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-08-10/rv1.png" /&gt;&lt;/p&gt;
&lt;p&gt;在这个坐标轴中，左侧是完全的现实环境，右侧是完全的虚拟环境。&lt;/p&gt;
&lt;p&gt;有了这个坐标轴，我们就可以把很多和 VR / AR 相关的应用或者技术，在这个坐标轴中找到相应的位置。&lt;/p&gt;
&lt;p&gt;对于大多数我们理解的 AR 应用，本质其实都是靠近现实环境一侧的。在现实的基础上，使用虚拟的东西进行“增强”。&lt;/p&gt;
&lt;p&gt;&lt;img alt="rv2" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-08-10/rv2.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;比如，现在比较火的很多直播滤镜，可以实时对主播做在线“磨皮”。在这里，现实是基础，虚拟的东西是在辅助现实。&lt;/p&gt;
&lt;p&gt;&lt;img alt="faceu" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-08-10/faceu.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;从这个角度看，其实，我觉得拍一张照片，然后 PS，本质也是 AR。我们在使用 Photoshop 来增强现实。&lt;/p&gt;
&lt;p&gt;&lt;img alt="ps" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-08-10/ps.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;再比如，现在已经有了车载系统，可以将汽车相关的虚拟信息投射到挡风玻璃上，让司机不需要低头，就可以查看到相关参数，来提高驾驶安全性。&lt;/p&gt;
&lt;p&gt;在这里，虚拟的信息虽然仅仅是一些读数，但也是增强现实。&lt;/p&gt;
&lt;p&gt;&lt;img alt="car" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-08-10/car.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;实际上，这样的应用已经很多了。比如，基于地理位置信息，显示出真实世界上各个建筑物的商家名称等信息。&lt;/p&gt;
&lt;p&gt;&lt;img alt="lbs" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-08-10/lbs.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;比如，大名鼎鼎的 pokemon Go，在现实世界，叠加一个虚拟的小精灵。&lt;/p&gt;
&lt;p&gt;&lt;img alt="pokemon" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-08-10/pokemongo.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;这些应用看起来娱乐性比较强，但其实，在很多专业领域，AR 也有着非常重要的应用。&lt;/p&gt;
&lt;p&gt;比如，Google Glass（包括其他所有的智能眼镜）在探索，可不可能在医生做手术的时候，将关于病患和手术的基本信息，直接展示在医生眼前，而不需要医生回头去看显示器上的信息，从而增强手术的连续性：&lt;/p&gt;
&lt;p&gt;&lt;img alt="doctor" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-08-10/doctor.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;再比如，在专业的生产车间，技术人员可不可以直接看到相关设备的参数或者说明，来进行设备的组装，维修，或者调试工作。&lt;/p&gt;
&lt;p&gt;&lt;img alt="worker" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-08-10/worker.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;这些应用，很多如今已经成为了现实，但是仍然有巨大的发展空间。并且，我坚信不疑：&lt;strong&gt;这样的技术可以极大地提高生产效率，是未来的趋势。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;在现实-虚拟连续统的坐标轴上，另一端会被大众所忽略，尤其是非专业人士。实际上，我们除了可以增强现实，也可以增强虚拟。&lt;/p&gt;
&lt;p&gt;&lt;img alt="rv3" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-08-10/rv3.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;增强虚拟的英文是 AV，听起来似乎很龌龊的样子。这是因为很不幸，这个英文缩写和另外一个英文缩写撞车了。&lt;/p&gt;
&lt;p&gt;但其实，这里，&lt;strong&gt;AV 是 Augmented Virtuality&lt;/strong&gt; 的意思，即增强虚拟。&lt;/p&gt;
&lt;p&gt;什么叫增强虚拟？就是原本是虚拟的东西，但是，我们靠技术手段，让它更真实一点。&lt;/p&gt;
&lt;p&gt;最简单的例子，我们为了更好地玩儿虚拟的赛车游戏，制造出了专用的“游戏方向盘”，让玩家尽量真实地体会虚拟的飙车快感。这就是增强虚拟。&lt;/p&gt;
&lt;p&gt;&lt;img alt="car" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-08-10/cargame.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我们在游戏厅看到的大量游戏都在增强虚拟。比如拿着游戏枪在虚拟的世界里和僵尸们厮杀。&lt;/p&gt;
&lt;p&gt;&lt;img alt="gun" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-08-10/gun.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;如果你理解了什么是 AR（增强现实）和 AV（成人...不是，是增强虚拟）以后，就可以理解另外一个概念了：MR。&lt;/p&gt;
&lt;p&gt;MR 是混合现实（Mixed Reality）的意思。实际上，不同厂家对 MR 的定义都有所不同。他们会鼓吹各种奇怪的特性，把自己的产品的优点当做 MR 的定义来宣传。&lt;/p&gt;
&lt;p&gt;可是，从学术界的角度：&lt;strong&gt;AR 和 AV 都是 MR，都是在混合现实。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在现实-虚拟连续统的坐标轴上，就是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="rv4" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-08-10/rv4.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;如果你去查 MR 在 维基百科上的定义，就会看到维基百科是这么说的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;混合现实（Mixed Reality，简称MR）指的是结合真实和虚拟世界创造了新的环境和可视化，物理实体和数字对象共存并能实时相互作用，以用来模拟真实物体。混合了现实、增强现实、增强虚拟和虚拟现实技术。Mixed Reality 是一种虚拟现实（VR）加增强现实（AR）的合成品混合现实（MR）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个定义在我看来很含糊。但实际上，把它放到现实-虚拟连续统上看，就很清晰。&lt;/p&gt;
&lt;p&gt;说白了，增强现实是混合现实；增强虚拟也是混合现实。&lt;/p&gt;
&lt;p&gt;现实和虚拟之间是一个连续的坐标轴，没有清晰的界限。除了两段，中间都可以叫混合现实。谁多一些，谁少一些而已。&lt;/p&gt;
&lt;p&gt;混合现实在努力做好增强现实的同时，也在努力做好增强虚拟。&lt;/p&gt;
&lt;p&gt;可能混合现实太努力了，以至于觉得应该为自己创造出一个全新的概念。于是，混合现实（MR）这个名词出现了。&lt;/p&gt;
&lt;p&gt;&lt;img alt="mr" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-08-10/mr.gif" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="mr2" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-08-10/mr2.gif" /&gt;&lt;/p&gt;
&lt;p&gt;看了上面的介绍，相信大家可以理解：在现实和虚拟之间，有很多事情可以做，想象空间极大。这就是我看好 AR 的原因。&lt;/p&gt;
&lt;p&gt;在这里，我说是看好 AR，更准确地说：是看好在现实-虚拟连续统&lt;strong&gt;中间的区域&lt;/strong&gt;做事情。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;相较而言，VR（虚拟现实）的目标是使用计算机创建出一个完全虚拟的世界，让用户沉浸在其中，就像和真实的世界一样。&lt;/p&gt;
&lt;p&gt;如果大家看过黑客帝国，就很容易理解什么叫真正的虚拟现实。很可惜，那种程度的虚拟现实，我们现在人类根本做不到。&lt;/p&gt;
&lt;p&gt;&lt;img alt="matrix" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-08-10/matrix.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我个人认为，现如今，我们人类可以做到的真正的最逼真的虚拟现实，是靠人类的大脑这台“计算机”产生的，叫“梦”。&lt;/p&gt;
&lt;p&gt;在《盗梦空间》的电影海报上，赫然写着：The Dream is Real。（我的翻译：梦境即现实）&lt;/p&gt;
&lt;p&gt;&lt;img alt="inception" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-08-10/inception.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;很可惜，无论是大脑的运行机制，还是梦的原理，我们人类自己也没有搞清楚。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;在短期内（至少 10 年时间），我完全不看好 VR。因为到现在为止，VR 领域有一个很重要的问题没有解决，就是&lt;strong&gt;现有的所有 VR 设备都会造成人类生理上的不适，使得大多数人无法长时间在 VR 中作业。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为什么 VR 会让人类身体不适？其实很简单，因为我们人类现在做出来的“虚拟现实”，离“现实”的差距太远了，导致我们人类的身体本能地排斥它。&lt;/p&gt;
&lt;p&gt;这个原理有点儿像 3D 眩晕。但是，即使没有 3D 眩晕症状的用户，在更大范围的 VR 设备中，都会开始“眩晕”起来。&lt;/p&gt;
&lt;p&gt;这个问题是有非常翔实的生理学研究做基础的。有一篇很有名的论文在说这件事情，具体名字我忘记了。但如果大家以后做 VR/AR 方向的博士的话，我估计近乎一定会看到这篇文章，或者类似的描述这个问题的文章。&lt;/p&gt;
&lt;p&gt;如果把这个问题放到现实-虚拟连续统中看，也很好理解。&lt;/p&gt;
&lt;p&gt;现实-虚拟连续统中的一端：现实，已经被至今我们都还不能理解的一种力量（上帝的力量？宇宙的力量？）创造了出来。&lt;/p&gt;
&lt;p&gt;而现实-虚拟连续统中的另一端，则是我们要挑战的，纯粹的 VR（虚拟现实）。&lt;strong&gt;它的难度，是和上帝造物在一个级别的。&lt;/strong&gt;我甚至怀疑我在有生之年能不能看到真正的 VR。&lt;/p&gt;
&lt;p&gt;因此，现在，很多所谓的 VR 方向，很大程度是对图形学（Graphics）研究的延展。如果你去看一些 VR 游戏的开发流程，也会发现，他们不过是近乎和普通游戏同样的开发流程和框架，去适配 VR 设备而已。&lt;/p&gt;
&lt;p&gt;图形学领域相对是成熟的，我曾经在我的知识星球上，基于之前有一阵子很火的“清华姚班毕业生开发特效编程语言，99 行代码实现《冰雪奇缘》”，聊过这个问题。&lt;/p&gt;
&lt;p&gt;&lt;img alt="star" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-08-10/star.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;在我看来，无论是业界，还是学界，AR 都比 VR 更火，也更容易出成绩。比如更容易发出好的论文；或者基于 AR 技术创业更容易成功。&lt;/p&gt;
&lt;p&gt;当然，我其实也有很久不仔细观察这个领域的发展了，我的看法可能是错的。同时，未来怎么样也不好说，搞不好 VR 就大爆发了呢。&lt;/p&gt;
&lt;p&gt;（虽然从现在人类的科技树的角度，我依然觉得可能性很小。）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;最后，选方向这种事儿，自己的兴趣最重要。说实话，我个人就对 Graphics 更感兴趣，所以，也更喜欢看偏 VR 的东西。&lt;/p&gt;
&lt;p&gt;我个人还是坚信，人在自己感兴趣的领域更容易做出成绩。&lt;/p&gt;
&lt;p&gt;至于风口，随缘吧。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-08-10/readme.md" rel="alternate"/></entry><entry><id>2020/2020-08-06/readme.md</id><title>我不埋怨奋斗 B</title><updated>2020-08-06T00:00:00-07:00</updated><content>&lt;h2&gt;我不埋怨奋斗 B&lt;/h2&gt;
&lt;p&gt;最近，在我的一个课程群里，突然同学们聊起了奋斗 B。我想，大概是因为这样一则新闻：&lt;/p&gt;
&lt;p&gt;&lt;img alt="zhihu" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-08-06/zhihu.png" /&gt;&lt;/p&gt;
&lt;p&gt;大多数同学对奋斗 B 都是憎恨的态度。但是，我对此却一直保持中立的态度。&lt;/p&gt;
&lt;p&gt;当然，这里还有一个对奋斗 B 如何定义的问题。&lt;/p&gt;
&lt;p&gt;我对奋斗 B 的定义是：真正的在努力工作，不惜免费加班干活儿，超额完成工作任务的同学。&lt;/p&gt;
&lt;p&gt;如果这样定义奋斗 B，那么责怪这样一个群体就显得非常奇怪。努力奋斗从来是中华民族的传统美德，奋斗从来不是可耻的，也不应该是可耻的。&lt;/p&gt;
&lt;p&gt;但与此同时，我也非常理解这样的行为为大多数同学带来的内卷境地。这本身是一个复杂的社会问题。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;但是，很多同学会马上告诉我，奋斗 B 这个词不是这个意思。&lt;/p&gt;
&lt;p&gt;这些同学说，奋斗 B 是指：明明可以干完活儿准时下班，但偏偏假装自己很忙，刻意用更长的加班时间，来凸显自己的努力，给领导留下好印象的人。&lt;/p&gt;
&lt;p&gt;这样做的结果就是，一个组的人都有意无意地“被迫”加班。奋斗 B 也因此招人恨。因为，他们其实并没有为企业带来更多的价值，不但自身工作效率低，还带坏了风气，让所有人都不得不加班。&lt;/p&gt;
&lt;p&gt;这就很有意思了。如果事情真的是这样的话，那么在我看来，&lt;strong&gt;管理者的责任，远远大于奋斗 B 的责任。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;因为，管理的一个重要目标，就是提高效率，鉴别出低效行为，并加以改善。可是这种低效的行为，却得到了管理者的“肯定”，乃至让组里的其他同学也需要效仿，来获得同样的“肯定”。&lt;/p&gt;
&lt;p&gt;管理者没有有效鉴别出“低效”，反而鼓励了“低效”。是管理者衡量大家工作成绩的标准出了问题，大家才会去“迎合”这个“错误”的标准。&lt;/p&gt;
&lt;p&gt;管理者错误的衡量标准是因，奋斗 B 的出现是果。与其骂奋斗 B，我倒觉得更应该骂管理者。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;由于错误的衡量标准，导致管理上的事与愿违，并不鲜见。甚至在经济学领域，有一个专门的名词来阐述这一现象：&lt;strong&gt;眼镜蛇效应。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="cobra" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-08-06/cobra.png" /&gt;&lt;/p&gt;
&lt;p&gt;眼镜蛇效应这个名词来源于印度。在英国殖民时期，政府发现当时印度的首都德里存在大量眼镜蛇，严重影响了人们的生活。为了鼓励民众一起消灭“蛇害”，政府颁布了一条法令：每打死一条眼镜蛇，凭尸体可以领取一定的赏金。&lt;/p&gt;
&lt;p&gt;这条法令的结果非但没有杜绝蛇害，反而让更多人开始饲养眼镜蛇，导致城市里的眼镜蛇数量更多了。&lt;/p&gt;
&lt;p&gt;以蛇的尸体作为奖赏标准，不但不能减少蛇的数量，反而增加了蛇的数量。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;同样的故事，在 1902 年的越南再次上演。当时，越南政府为了治理鼠害，发布了法令，每打死一只老鼠，居民可以割下老鼠的尾巴，凭老鼠尾巴领取赏金。&lt;/p&gt;
&lt;p&gt;很快，政府官员就发现，城里流窜着大量没有尾巴的老鼠。因为民众在抓到老鼠后，不是杀死老鼠，而是割掉尾巴，将其放生，让它们继续繁殖，好有更多的老鼠来帮助他们领取赏金。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;眼镜蛇效应&lt;/strong&gt;并不是描述这一现象的唯一名词。在经济学领域，&lt;strong&gt;Goodhart 定律&lt;/strong&gt;或者 &lt;strong&gt;Campbell 定律&lt;/strong&gt;，都在描述或者可以引申出这层意思：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;标准是重要的。错误的标准将得到错误的结果。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;所以，很多时候，问题的关键，是标准。&lt;/p&gt;
&lt;p&gt;比如有一阵子，社会上的新闻铺天盖地都在宣传，高中生都开始学习 Python 了。80 后颤抖吧；90 后颤抖吧；计算机专业的同学们颤抖吧。&lt;/p&gt;
&lt;p&gt;比如这样的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="python1" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-08-06/python1.png" /&gt;&lt;/p&gt;
&lt;p&gt;再比如这样的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="python2" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-08-06/python2.png" /&gt;&lt;/p&gt;
&lt;p&gt;于是，就有同学来问我：波波老师，现在 Python 这么火，高中生都要学了，是不是做高中生的 Python 教育是个好机会，能赚大钱？&lt;/p&gt;
&lt;p&gt;我说：我不认为专门针对高中生的 Python 教育有那么大的市场。&lt;/p&gt;
&lt;p&gt;为什么？因为高考不考 Python。也就是高中生升学的标准里没有 Python。&lt;/p&gt;
&lt;p&gt;什么时候高考决定要考 Python 了，什么时候专门针对高中生的 Python 教育才是一个机会。&lt;/p&gt;
&lt;p&gt;或者，大家可以这么想：实际上，计算机教育一直是我国高中生的必修课程，甚至是会考必考的科目之一。在最近几年，各个省市只是把这个“必考科目”中的计算机语言，从老得不得了的 VB，换成了 Python 语言而已。&lt;/p&gt;
&lt;p&gt;在此之前，针对高中生的 VB 教育市场火爆吗？如果不火爆，那么专门针对高中生的 Python 教育市场就没有理由火爆。&lt;/p&gt;
&lt;p&gt;针对高中生的 VB 教育市场显然不火爆。为什么？不是因为 VB 过时了，是因为升学的标准——高考里没有 VB。如果高考考 VB，不管 VB 多老多过时，都会火得不得了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;我之前在北京创业的时候，采访过很多企业老板。其中有一个片段，我印象深刻。&lt;/p&gt;
&lt;p&gt;这名企业老板非常自豪地向我们炫耀，自己是多么看重创新。每次员工开会，他都一定会强调：创新！创新！创新！按照他的话说：只有创新，企业才能继续前进，永远前进。&lt;/p&gt;
&lt;p&gt;但是，当我们去采访这个企业的员工时，却听到了不同的故事。&lt;/p&gt;
&lt;p&gt;有一名主管苦笑地告诉我们：老板确实天天喊创新，月月喊创新。但就在去年，我带领的地区尝试用新的销售方案，结果失败了，营收还没有以前好。但是另一个地区的主管中规中矩，依旧使用传统的方案，业绩超过了我们。&lt;/p&gt;
&lt;p&gt;最后，他们全员拿到了年终奖的大红包，我们地区的年终奖却少得可怜。&lt;/p&gt;
&lt;p&gt;所以，老板喊创新，听听就好了。该怎么来，还是要怎么来。毕竟，业绩才是指标。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我在那一瞬间恍然大悟。&lt;/p&gt;
&lt;p&gt;创新不是喊出来的。要想让企业创新，就必须要想办法衡量创新。如果衡量标准仅仅是业绩，没有人会创新。&lt;/p&gt;
&lt;p&gt;因为创新意味着风险，意味着失败，意味着收入可能还不如过去。&lt;/p&gt;
&lt;p&gt;如果衡量标准不变，创新者因为创新，反而没有好果子吃；反倒是保守派，因为保守，最终拿了大红包。那么不管老板再怎么喊鼓励创新，本质其实都是在鼓励保守。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;无独有偶，就在几个星期前，我和一名国内互联网大厂的产品经理大佬，进行了一段有意思的对话。&lt;/p&gt;
&lt;p&gt;大家都知道，产品和技术是“死对头”。网上，关于产品压榨技术，向技术提出不合理需求的讨论络绎不绝。&lt;/p&gt;
&lt;p&gt;于是，我就问这名产品大佬：到底你们产品的 KPI 是什么？让你们这么孜孜不倦地给技术同学“添麻烦”？&lt;/p&gt;
&lt;p&gt;这名产品大佬来自全国前三的互联网企业。他的回答是：我们的 KPI，占比最大的是&lt;strong&gt;营收&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;什么叫营收？就是产品经理通过对产品的改善，使得项目赚到了更多的钱。&lt;/p&gt;
&lt;p&gt;但具体做出怎样的改变，可以达到“赚更多的钱”的目的？这就是每个产品经理的工作内容了。&lt;/p&gt;
&lt;p&gt;我问：这里有没有什么方法论？可以尽可能向着更赚钱的方向改善产品？&lt;/p&gt;
&lt;p&gt;产品大佬回答：应该有。但是国内的环境普遍对这种方法论的思考和讨论比较少。大家更愿意&lt;strong&gt;“做出来试试看”&lt;/strong&gt;。因为对产品的“改善”乃至“改变”，也是产品的 KPI 之一。&lt;/p&gt;
&lt;p&gt;这样导致的结果就是：每一名产品经理都希望能够去不断地实验新的功能，新的想法，来看是否能够创造新的营收。&lt;/p&gt;
&lt;p&gt;爱迪生尝试了 6000 多种材料，进行了 7000 多次试验，最终终于发明了电灯。至少故事里是这么说的。产品经理都深谙这个道理。&lt;/p&gt;
&lt;p&gt;所以，大多数产品经理，一旦有一个想法，就会迫不及待地让技术们去尝试实现，来看会不会产生更多的营收。&lt;/p&gt;
&lt;p&gt;为了能够更多地试错，996 出现了。但很多时候，这不叫 996，而叫&lt;strong&gt;小步快跑，快速迭代。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;作为一名技术人员，我显然看出了这里的不公平。产品经理一有想法就占用技术的时间去“试错”；但实验结果不好的话，技术的心血就“白费”了。&lt;/p&gt;
&lt;p&gt;即便大家都是一个 team 的，但是，技术为产品的“莽撞盲目”买单，加班熬夜，最终却没有得到希望的结果，我相信不在少数&lt;/p&gt;
&lt;p&gt;于是我问：难道对于产品来说，没有反向指标？&lt;/p&gt;
&lt;p&gt;产品大佬问我：什么是反向指标？&lt;/p&gt;
&lt;p&gt;我回答：如果产品经理不断改善产品，项目的营收却没有因此提高。那么这个产品经理相当于白白占用了大量的技术时间和资源，相当于他的工作效率是低下的。此时，应该对这名产品罚款。&lt;/p&gt;
&lt;p&gt;我又补充道：换一个说法。如果一名产品经理，一年的时间提出了 500 个需求变更；但另一名产品经理，一年只提出了 50 个需求变更。两者最终在产品营收上，达到的效果是一样的，那么显然，后一名产品经理，是比前一名产品经理更优秀的。&lt;/p&gt;
&lt;p&gt;因为，后一名产品经理占用了更少的技术资源和时间，达成了同样的成绩。在 KPI 考核上，难道不考虑这一点？&lt;/p&gt;
&lt;p&gt;产品大佬沉默了一会儿，告诉我：没有这回事儿。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我一下子就明白了。这说明，整个企业不考核“低效”这个指标。如果“低效”不是指标，那么大家就不会顾及效率，低效近乎将成为必然。&lt;/p&gt;
&lt;p&gt;什么时候，企业说：效率很重要，大家的 KPI 也要包含效率。同样的业绩，谁加班少，谁拿奖金就多。那么我想，大家就会开始思考，怎么提高工作效率了。&lt;/p&gt;
&lt;p&gt;相信到那时，奋斗 B 也会少很多。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！:)&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-08-06/readme.md" rel="alternate"/></entry><entry><id>2020/2020-07-29/readme.md</id><title>不会翻转二叉树的大神 </title><updated>2020-07-29T00:00:00-07:00</updated><content>&lt;h2&gt;不会翻转二叉树的大神&lt;/h2&gt;
&lt;p&gt;2015 年 6 月 10 日，Max Howell 发表了一篇推特：&lt;/p&gt;
&lt;p&gt;&lt;img alt="twitter" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-29/twitter.png" /&gt;&lt;/p&gt;
&lt;p&gt;简单翻译：Google 说，我们 90% 的工程师都使用你写的软件——Homebrew，但是因为你不能在白板上翻转一棵二叉树，所以，滚蛋。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;这条 Twitter 在当年引发了不小的争论。&lt;/p&gt;
&lt;p&gt;Homebrew 是 MacOS 上的一款非常著名的软件，它极大地简化了在 macOS 上的软件安装和管理流程，所以使用者众多，相当有业界影响力。如这条推特所说：Google 里 90% 的工程师都使用这款软件。&lt;/p&gt;
&lt;p&gt;Max Howell 就是 Homebrew 的创作者，也是一名业内知名的 MacOS / iOS 工程师。他曾经是著名的网络电台 Last.fm 的首席客户端开发者，后来是 Twitter 的客户端 TweetDeck 的首席移动开发者。&lt;/p&gt;
&lt;p&gt;2015 年，Max Howell 决定加入 Google。但是，根据 Max Howell 的叙述，他去 Google 面试，作为一名 iOS 业界专家，面试官没有问任何和 iOS 相关的问题。&lt;/p&gt;
&lt;p&gt;Max Howell 的面试进行到第七轮，在一道算法题上出了问题。这个算法问题就是：翻转一棵二叉树。&lt;/p&gt;
&lt;p&gt;这其实是一个很简单的算法问题。相信对很多还没有毕业的计算机专业的同学，都是很容易的。&lt;/p&gt;
&lt;p&gt;其实，如今我们也已经很难判断 Max Howell 到底是不是真的不会这个算法问题？还是只是对这样的面试流程抗议？&lt;/p&gt;
&lt;p&gt;我们也很难分辨，Google 不聘请 Max Howell 的真实原因，到底是因为他没有解答出这个问题？还是有其他原因？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;对这些问题的分析，在当年很流行。有业内人士指出，Google 出这么简单的算法问题，显然已经是在放水了。而 Google 决定不招聘 Max Howell 的真实原因，很有可能不是能力问题，而是在面试过程中认为，Max Howell 的个人性格不适合 Google 的文化。&lt;/p&gt;
&lt;p&gt;毕竟，面试不是考试，不是把问题回答正确就可以了。很多时候，面试的过程，是面试官在看，和候选人共事，共同探讨一个问题，共同解决一个问题，是怎样的体验。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;还有很多人据此吐槽硅谷大公司的招聘方式。&lt;/p&gt;
&lt;p&gt;有的人说：Facebook 不要我，因为我解不出八皇后问题。&lt;/p&gt;
&lt;p&gt;有的人说：曾经 Amazon 让我翻转一个链表，当时我的灵魂就已逃离了那个房间。&lt;/p&gt;
&lt;p&gt;有的人说：如果问我如何翻转一棵二叉树，我会当场把那个白板翻过来，然后说，看，我完成了。&lt;/p&gt;
&lt;p&gt;还有人说：1997 年，Google 面试了我 6 个小时。最后一个问题是：为什么我们要聘用你？我的回答是：你们 TM 自己想吧。最后我拿到了 offer。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;对于当代计算机行业，算法是不是一定这么重要？我的回答是，不一定。为此，我写过一篇文章：&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2018/2018-04-18/"&gt;算法到底有什么用？对你来说可能真的没用&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;那大公司面试为什么总要考算法？对此，我写过一篇文章，叫：&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-10-07/"&gt;大厂面试为什么总考算法？以及如何避开算法面试&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;但如今，5 年时间过去了，这一切争论，对于当事人来说，或许都不重要了。无论是 Max Howell，还是 Google，都在这五年间，做出了不错的成绩。&lt;/p&gt;
&lt;p&gt;大家虽然没有合作，但都有很好的未来。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;而就在最近，我无意中翻到了 Quora 上对这个问题讨论的一个“老帖子”。&lt;/p&gt;
&lt;p&gt;&lt;img alt="quora" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-29/quora.png" /&gt;&lt;/p&gt;
&lt;p&gt;这个问题在 Quora 上是这样的：Homebrew 的作者 Max Howell 因为不会翻转一棵二叉树，被 Google 拒绝，这背后的逻辑到底是什么？&lt;/p&gt;
&lt;p&gt;没想到两年以后，在 2017 年的 12 月份，Max Howell 自己亲自回答了这个问题。&lt;/p&gt;
&lt;p&gt;Max Howell 的这个回答，我今年才看到。说实话，我读了好几遍。语言并不多，但却让我感触颇深，以至于我想逐句翻译，和大家分享。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;以下是 Max Howell 的回答。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hi, I’m Max Howell, I’ve spent the last two years not answering this, and many questions like it. Maybe I shouldn’t answer this.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;大家好，我是 Max Howell。我尝试用了两年时间，不去回答这个问题，或者千千万万个和这个问题类似的问题。或许，我不应该回答这个问题。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;So, what's the logic? Clearly I wrote something worthy of Google, right?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Google 拒绝我的逻辑到底是什么？很明显，我写了一些值得去 Google 的代码，对吧？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Well, no I didn't. I wrote a simple package manager. Anyone could write one. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;其实，不是这样的。我只写了一个很简单的软件包管理工具。任何人都能写出来。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;And in fact mine is pretty bad. It doesn't do dependency management properly. It doesn’t handle edge case behavior well. It isn’t well tested. It’s shit frankly.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;实际上，我写的非常差。它甚至没有做好软件包的依赖管理。它也不能很好地处理很多用户的边界行为。它没有被充分测试。坦白地说，它就是一坨屎。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Is it any surprise I couldn’t answer their heavily computer-science questions well?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以，如果我不能很好地回答那种“重量级”的计算机科学问题，真的那么惊讶吗？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;On the other hand, my software was insanely successful. Why is that? &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但是，另一方面，我的软件不可思议的成功。为什么？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Well the answer is not in the realm of computer science. I have always had a user-experience focus to my software. Homebrew cares about the user. When things go wrong with Homebrew it tries as hard as it can to tell you why, it searches GitHub for similar issues and points you to them. It cares about &lt;strong&gt;you&lt;/strong&gt;. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当软件发生问题的时候，Homebrew 会尽最大的可能告诉你：为什么？它会在 Github 上搜索类似的 issues，并且将你指向这些可能的问题解决方案。它在乎&lt;strong&gt;你&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Most tools don’t give a shit about you. If they go wrong, well screw you. Homebrew helps you. And if it can’t help you I made it so, so easy to fix Homebrew (I built a command into the base for editing and fixing Homebrew). You can make Homebrew better. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;大多数工具不在乎你。如果事情出现了问题，那么你将一筹莫展。Homebrew 在尝试帮助你。甚至，如果它无法帮助你，你可以直接修改它！（我创建了一个命令，可以让你直接去编辑或者修改 Homebrew。）你可以让 Homebrew 更好。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Homebrew is a shining example of true Open Source.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我坚信：Homebrew 是真正开源世界中一颗闪亮的星。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Maybe Homebrew doesn’t do dependency management well, but it does it in a way you care about. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;或许 Homebrew 没有很好地完成依赖管理，但是，它用一种可能你更关心的方式完成了它。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Unlike the competition at the time Homebrew used the dependencies on your Mac as a base thus saving you intense amounts of time installing software and quite a lot of pain, because practically speaking a large dependency graph breaks. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不像当时的大多数竞争者，Homebrew 直接使用你的 Mac 上的软件依赖关系作为基础，从而为你节省了大量安装软件的时间，少了很多痛苦。因为，根据我的经验，使用一个更大的依赖图，事情总是会出问题。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;But that isn't computer science and it didn’t involve any graphs or trees so I guess I suck.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但是，这一点和计算机科学没有半点关系，也不牵扯到任何图或者树这类我完全不擅长的东西。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I want to defend Google, for one I wasn't even inverting a binary tree, I wasn’t very clear what a binary tree was.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在这里，我想为 Google 辩解两句。我确实不会如何翻转一棵二叉树。我甚至不是特别清楚二叉树到底是什么。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I studied Chemistry not Comp-Sci. Sure, for my masters dissertation I used Mathematica and modeled the quantum mechanical properties of Helium—I did a good job actually—but it wasn’t computer science. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我的专业其实是化学，不是计算机科学。当然，我的硕士论文中使用了数学，并且为氦原子的量子学特性进行了建模。我相信我的硕士论文还不错，但这和计算机科学无关。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;But well, what the fuck does comp-sci have to do with modern app development? And well, that’s all I want people to take from my tweet.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但是，计算机科学，到底和现代软件 App 的开发有什么关系？这是我希望大家通过我的推特，去思考的东西。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Google in fact gave me seven interviews and I did well in the software engineering ones, because that is actually my talent. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Google 实际上给了我七轮面试。在软件工程面试中，我是相当出色的。这是我的天赋所在。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I feel bad about my tweet, I don’t feel it was fair, and it fed the current era of outragism-driven-reading that is the modern Internet, and thus went viral, and for that I am truly sorry.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对于我发的那条推特，我也会觉得它可能不合适。这条推特为很多“愤青”提供了“养料”，并且火了。这就是现代互联网。对此，我感到抱歉。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;But ultimately, should Google have hired me? Yes, absolutely yes. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但如果问我，Google 是不是应该聘用我？我的回答绝对是：是的，Google 绝对应该聘用我。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I am often a dick, I am often difficult, I often don’t know computer science, but. BUT. I make really good things, maybe they aren't perfect, but people really like them. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我承认，我是个混蛋，我很难相处，我不懂那么多计算机科学。但是，但是，我创造了优秀的作品。或许它不完美，但人们喜欢它。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Surely, surely Google could have used that.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;其实，Google 本是可以抓住这一点的。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;通过这个回答，我相信大家可以看出来，Max Howell 依然是那个“狂妄”的开源作者。我严重怀疑我的翻译让他谦虚了一些。实际上，上面的翻译，我修改了一稿，把一些原本我个人习惯使用的“谦虚”的用法去除了。&lt;/p&gt;
&lt;p&gt;但这个回答给我感触最深的，是 Max Howell 描述的关于 Homebrew 的理念。用一个比较俗套的成语总结，就是&lt;strong&gt;以人为本&lt;/strong&gt;。说的不要那么文驺驺，就是&lt;strong&gt;尊重你的用户&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我在国内做 iOS 开发，算比较早的。2011 年开始，陆陆续续上架了几个小 App，直到大概 2015 年停止维护。&lt;/p&gt;
&lt;p&gt;学习 iOS 开发的过程确实极大地拓展了我的技术视野，因为 iOS 开发和我之前接触的大多数技术栈都极其不同。但是，这么多年过去以后，回头看，这段经历让我收获了更多和技术无关的东西。&lt;/p&gt;
&lt;p&gt;我第一次感受到了：技术和人的距离，竟然如此之近。&lt;/p&gt;
&lt;p&gt;有一名老爷爷，在 2017 年给我发来一封邮件，让我感触颇深。&lt;/p&gt;
&lt;p&gt;&lt;img alt="mail" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-29/mail.png" /&gt;&lt;/p&gt;
&lt;p&gt;邮件中，他给我的 App 提了一些建议，并且告诉我，他已经使用我的这个小 App 三年了。&lt;/p&gt;
&lt;p&gt;后来，我跟他随便聊了两句，他说他住在美国一个鸟不拉屎的小镇上，他自称自己是名艺术家，还出版了一本和艺术相关的图书。&lt;/p&gt;
&lt;p&gt;他给我了一个亚马逊链接，我说我不会买的。他打回一个笑 cry 的 emoji 😂&lt;/p&gt;
&lt;p&gt;这是我第一次意识到，冷冰冰的代码，竟然可以连接无论是年龄，国籍，种族，地理位置，职业，以及性格，都如此遥远的两个人。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;后来，我在慕课网出了一些课程。&lt;/p&gt;
&lt;p&gt;在这个过程中，给我感触最深的，是在课程的问答区，我和大家的交流。说句实话，我学会了很多东西。&lt;strong&gt;很多东西在技术之外，但是，它们被技术，连接在了一起。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所以我决定写公众号。我想，对于更加广泛的技术世界的探讨，或许能让大家带给我更多的启发。我的目的是自私的。&lt;/p&gt;
&lt;p&gt;有很多同学问我各种问题，但我不是各个领域的专家，对于一些过于细节的问题，也没有时间精力在非课程的问答区一一解答。所以我又开设了知识星球，大家可以在那里畅所欲言。从技术提问，到发表观点。&lt;/p&gt;
&lt;p&gt;可能并不是所有的观点我都赞同，但我喜欢这种观点的碰撞。每次这种碰撞后，都能带给我更深刻的思考。&lt;/p&gt;
&lt;p&gt;我想，这就是“人”的魅力。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我喜欢代码，喜欢逻辑，喜欢它们的严谨，以及这种严谨背后，依然可以产生的无限可能。&lt;/p&gt;
&lt;p&gt;我高中毕业后选择计算机专业，是因为我以为，使用计算机，我可以凭空创造出一个完全属于我自己的宇宙。&lt;/p&gt;
&lt;p&gt;后来，我才慢慢发现，我们的宇宙之所以精彩，不是因为上帝的逻辑有多么严谨。而是因为，有我，有他，有她，还有你。&lt;/p&gt;
&lt;p&gt;因为人。&lt;/p&gt;
&lt;p&gt;或许，这就是我会突然如此崇拜这名，不会翻转二叉树的大神，的原因吧。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-07-29/readme.md" rel="alternate"/></entry><entry><id>2020/2020-07-26/readme.md</id><title>看着 GPT-3，有一丝不寒而栗</title><updated>2020-07-26T00:00:00-07:00</updated><content>&lt;h2&gt;看着 GPT-3，有一丝不寒而栗&lt;/h2&gt;
&lt;p&gt;想象一下，你想做一个页面。这个页面的需求是这样的：&lt;/p&gt;
&lt;p&gt;有一个标题，标题是：情绪跟踪器。然后有一个按钮，写着“快乐”，“悲伤”和“昏昏欲睡”。当点击一个按钮的时候，显示出：现在，我的心情是 X。&lt;/p&gt;
&lt;p&gt;实际上，这个需求相当不明确。&lt;/p&gt;
&lt;p&gt;比如，需求的说明是，有“一个”按钮，但下面的描述，却是三个按钮；&lt;/p&gt;
&lt;p&gt;再比如，点击按钮后，显示的“我的心情是 X”，这个 X 到底要填写什么？没有定义。&lt;/p&gt;
&lt;p&gt;这就是自然语言和程序语言的区别。自然语言包含着大量模糊的，不明确的，甚至是自相矛盾的说辞。但是，在大多数时候，人类可以大概理解自然语言所表述的内容，至少了解一个大概的方向，然后，可以通过进一步的沟通，明确说话者想要表达的意思。&lt;/p&gt;
&lt;p&gt;而机器不行。我们必须严谨地告诉机器一切细节，机器才能执行出相应的结果。这本质也是程序员这份职业的意义之一。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;程序员其实在一定程度上，充当了人类和机器之间的“翻译官”的角色。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果产品经理有一个需求，产品经理不能通过直接告诉机器，来实现这个功能。产品经理要把这个需求告诉给程序员，程序员再把这个需求转变成机器可以理解的代码。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;但是，如果机器可以直接理解产品经理的自然语言呢？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;比如上面的这个需求，如果有一个对话框，上面写着：请描述你的需求。产品经理直接在这个对话框里面，用自然语言描述自己的需求，机器就能实现相应的功能了呢？&lt;/p&gt;
&lt;p&gt;请看下面的演示：&lt;/p&gt;
&lt;p&gt;&lt;img alt="gpt-3-1" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-26/gpt-3-1.gif" /&gt;&lt;/p&gt;
&lt;p&gt;在这段演示中，用户在对话框中输入了：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;a header that says "Mood Tracker", then a button that says "Happy", "Sad", and "Sleepy". when I press a button, show text that says "right now i am feeling x".&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;其实，文章开始的那段需求，就是这段英文的翻译。&lt;/p&gt;
&lt;p&gt;当按下 "Generate" 按钮后，几秒钟以后，这样的一个页面诞生了：&lt;/p&gt;
&lt;p&gt;&lt;img alt="mood-tracker" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-26/mood-tracker.png" /&gt;&lt;/p&gt;
&lt;p&gt;当用户点击不同的按钮的时候，下面的文字中，"right now i am feeling x"，x 会替换成不同的按钮上的文字。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;产品经理对这个页面不满意，想要更改需求。&lt;/p&gt;
&lt;p&gt;于是，产品经理说：x 不应该是文字，而是一个表情符号。&lt;/p&gt;
&lt;p&gt;我们在对话框里添加上这个需求：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;where x is an emoji for my mood.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="gpt-3-2" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-26/gpt-3-2.gif" /&gt;&lt;/p&gt;
&lt;p&gt;当按下 "Generate" 按钮，几秒钟以后，这个需求变更已经修改好了。&lt;/p&gt;
&lt;p&gt;现在，当用户分别按下 “Happy”，“Sad” 和 “Sleepy” 按钮之后，就会显示出如下的文字：&lt;/p&gt;
&lt;p&gt;&lt;img alt="happy" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-26/happy.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="sad" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-26/sad.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="sleepy" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-26/sleepy.png" /&gt;&lt;/p&gt;
&lt;p&gt;换句话说，机器不仅仅准确地理解了用自然语言所表达的产品需求，将自然语言翻译成了代码。更通过理解这个描述，多做了一层翻译：把自然语言翻译成了合适的表情符号。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;如果经常关注人工智能领域新进展的同学，可能会觉得，这个 demo 展示，虽然很惊艳，但也没有太出彩啊？不就是自然语言到代码语言的翻译吗？之前已经有一些人工智能，可以初步完成这件事情了。&lt;/p&gt;
&lt;p&gt;我们再来看下面的例子：&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;使用自然语言输入“x 的平方加上 2 倍的 x”，机器将自动给出相应的表达式：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;x squared plus two times x&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="math" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-26/math.gif" /&gt;&lt;/p&gt;
&lt;p&gt;嗯，似乎也平淡无奇。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;再来一个例子。&lt;/p&gt;
&lt;p&gt;在对话框输入：我今天投入了两万美元，并且为后三个月的房租预付了 900 刀。&lt;/p&gt;
&lt;p&gt;只需要这样的自然语言，机器自动帮你在正确的位置把账目记录好。&lt;/p&gt;
&lt;p&gt;&lt;img alt="fin" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-26/fin.gif" /&gt;&lt;/p&gt;
&lt;p&gt;嗯，似乎也没那么惊艳，不就是理解自然语言，然后记账吗？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;再来一个例子。让计算机自动写文章。&lt;/p&gt;
&lt;p&gt;比如问计算机：你对股票市场是怎么看的？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What are your thoughts about the stock market?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;计算机自动生成的结果是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="stock" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-26/stock.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我们再让计算机以“上 Twitter 的重要性”为题，写篇作文吧。&lt;/p&gt;
&lt;p&gt;&lt;img alt="twitter" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-26/twitter.png" /&gt;&lt;/p&gt;
&lt;p&gt;具体内容我不翻译了。英文好的同学可以读一下，就会发现，计算机自动生成的文字有理有据，符合逻辑。恐怕如果说这是真人写出的文字，大多数人都会相信。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;可能还是会有同学说，这也不稀奇啊。早就听说计算机可以自动生成新闻报道了。&lt;/p&gt;
&lt;p&gt;但如果我告诉你，所有的这些事情，都是由一个智能完成的呢？&lt;/p&gt;
&lt;p&gt;完成所有这些任务的，都是 &lt;strong&gt;OpenAI 最新发布的 GPT-3 模型。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;如果上面的每一个例子都不足以让你兴奋的话，说明你是一名人工智能的老鸟，经常关注人工智能行业的最新动态。那么，你一定明白：我们通常使用其他算法模型完成这些事情（比如大名鼎鼎的 BERT），需要大量的数据进行模型的训练。&lt;/p&gt;
&lt;p&gt;即使，我们有一个已经训练好的数据模型，哪怕这个数据模型完成的任务和我们要完成的任务相似，但只要任务不完全一致，我们还是要做模型的&lt;strong&gt;微调（fine-tuning）&lt;/strong&gt;。即使是做模型的微调，我们也需要成千上万的数据。&lt;/p&gt;
&lt;p&gt;但是，GPT-3 不需要。&lt;/p&gt;
&lt;p&gt;对于 GPT-3 来说，你可以：&lt;/p&gt;
&lt;p&gt;让它当翻译官，去翻译任意两种语言；&lt;/p&gt;
&lt;p&gt;让它当程序员，直接完成自然语言表达的需求；&lt;/p&gt;
&lt;p&gt;让它当诗人，写出各种风格的诗；&lt;/p&gt;
&lt;p&gt;让它当作家，去写出各种类型的故事；&lt;/p&gt;
&lt;p&gt;你甚至可以让它给你生成笑话，或者直接生成一个 ppt 演讲稿。&lt;/p&gt;
&lt;p&gt;而&lt;strong&gt;这一切，你顶多给 GPT-3 十个以内的例子，GPT-3 就自己学会如何去做了。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这就是 GPT-3 最让人兴奋的地方。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;GPT-3 在今年五月份，由著名人工智能研究公司 OpenAI 发布。但是直到最近，OpenAI 发布了基于 GPT-3 的 API，将这种人工智能做成了一种服务，大家可以基于这种服务做拓展，将人工智能应用到自己所在的领域，大家才更加感性地意识到了 GPT-3 的威力。&lt;/p&gt;
&lt;p&gt;上面的例子，全都是幸运地获得了 GPT-3 内测资格的用户或者机构，发布的基于 GPT-3 这个人工智能模型建立的 Demo。&lt;/p&gt;
&lt;p&gt;GPT-3 的目标是成为一个更加通用的语言模型。它在解决其他机器学习模型的两个重要的问题：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 过于依赖领域内的标记数据；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 算法模型过拟合领域数据，导致只能解决某个特定领域问题。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;相信很多同学都了解，大多数机器学习的原理是，通过使用大量的数据做训练。&lt;/p&gt;
&lt;p&gt;如果想让机器做中英翻译，那么就给机器成千上万甚至是百万千万的中英对应的句子，作为训练样本，期待机器学习到其中的规律。这样，当我们给出机器一个新的中文句子的时候，机器可以尝试将他翻译成英文；&lt;/p&gt;
&lt;p&gt;如果想让机器写文章，则喂给机器成千上万甚至是百万千万的文章，让机器学习这些文章中的规律。这样，机器可以尝试写出新的文章。&lt;/p&gt;
&lt;p&gt;但是，一个可以做中英翻译任务的机器，不要说去写文章了，可能连英中翻译都做不了。&lt;/p&gt;
&lt;p&gt;可 GPT-3 突破了这一点。没有样本，或者只需要极少量的样本，GPT-3 就可以完成新的任务（自然语言处理领域）。&lt;/p&gt;
&lt;p&gt;这在机器学习领域，也被称为是&lt;strong&gt;零次学习（Zero-Shot Learning）&lt;/strong&gt;或者&lt;strong&gt;一次学习（One-Shot Learning）&lt;/strong&gt;，或者&lt;strong&gt;少次学习（Few-Shot Learning）&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;顾名思义，&lt;strong&gt;零次学习&lt;/strong&gt;就是一个样本都不给；&lt;strong&gt;一次学习&lt;/strong&gt;就是只给一个样本；&lt;strong&gt;少次学习&lt;/strong&gt;是只给极少的样本（个位数），就足以让机器进行任务。&lt;/p&gt;
&lt;p&gt;有了这个能力，GPT-3 已经有了一丝“强人工智能”的影子。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;如果你在两年前去问一名人工智能的专家，人类离强人工智能还有多远，大多数专家可能会斩钉截铁地告诉你：很远很远。&lt;/p&gt;
&lt;p&gt;但是现在，你再去问专家，强人工智能离我们还有多远？可能很多人就会犹豫一下了。&lt;/p&gt;
&lt;p&gt;因为 GPT-3。&lt;/p&gt;
&lt;p&gt;所谓的强人工智能，是相对弱人工智能而言的。弱人工智能，是指只可以完成特定任务的智能。比如上面举的例子，只能进行中英翻译的人工智能，或者只能写文章的人工智能，都是弱人工智能。因为，他们只可以完成一个任务。&lt;/p&gt;
&lt;p&gt;至今为止，大多数人工智能领域的突破，都是在弱人工智能领域的。即便是大名鼎鼎的 Alpha Go，虽然下围棋已经下过了世界冠军，但是就算玩儿一条龙，恐怕都玩儿不过小朋友。&lt;/p&gt;
&lt;p&gt;&lt;img alt="tic" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-26/tic.png" /&gt;&lt;/p&gt;
&lt;p&gt;但相较而言，GPT-3 比这些弱人工智能强太多。虽然它还不是一个真正意义上的强人工智能，毕竟 GPT-3 只是一个语言模型，我们不能用它识别图像，自动生成艺术作品，或者寻找治疗癌症的药物配方。但是，对于大多数自然语言领域的任务，GPT-3 都可以胜任。&lt;/p&gt;
&lt;p&gt;（实际上，现在也已经有人开始探索使用 GPT-3 处理图像相关的任务了。）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;GPT-3 这样一个“通用”的语言模型，拥有着惊人的体量。&lt;/p&gt;
&lt;p&gt;为了训练出这个 GPT-3 模型，它处理了相当于 &lt;strong&gt;45TB 的数据&lt;/strong&gt;；最终训练出的结果包含有 &lt;strong&gt;1750 亿个参数&lt;/strong&gt;；我们为了存储这个模型本身，也需要将近 &lt;strong&gt;700G 的空间&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;（默默看了下自己的电脑，只有 512G 的硬盘空间。）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;听 GPT-3 这个名字就知道，这个算法模型是有历史的。在 GPT-3 之前，还有 GPT-2。&lt;/p&gt;
&lt;p&gt;GPT-2 是 OpenAI 在 2019 年初公布的一个语言模型。GPT-2 有 15 亿个参数，是在一个包含有 800 万网页内容的数据集上训练而来的。相较而言，GPT-3 的规模，是 GPT-2 的 100 多倍。&lt;/p&gt;
&lt;p&gt;训练数据是要花钱的，因为训练数据需要算力。算力不是免费的，甚至很有可能，在未来，算力将成为一种比电力更重要的资源。&lt;strong&gt;（或许现在已经是了。）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;OpenAI 没有公布为了训练出 GPT-3，总共花了多少钱。但业内人士估算，训练出 GPT-3 所需要的金钱，大概是千万美元级别。我看到的更准确地估计，大概是 1200 万美元左右。&lt;/p&gt;
&lt;p&gt;这是一笔巨大的开销，以至于 GPT-3 相关的论文中，研究者表示：&lt;/p&gt;
&lt;p&gt;我们发现了一个 bug，但没钱再去重新训练模型，所以先就这样吧。&lt;/p&gt;
&lt;p&gt;&lt;img alt="paper" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-26/paper.png" /&gt;&lt;/p&gt;
&lt;p&gt;因为一旦重新训练，之前的训练就作废了，一千万美元就打水漂了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;通过令人难以置信的数据规模，包含大量的人力物力财力，GPT-3 诞生了。&lt;/p&gt;
&lt;p&gt;现如今，GPT-3 已经成为了硅谷最热门的话题之一。我甚至开始看到有一些科技文章，在文末会打趣道：这篇文章不是由 GPT-3 自动生成的。&lt;/p&gt;
&lt;p&gt;打趣归打趣，但这或许也意味着，我们离阅读大量由机器生成的文章，机器生成文字内容“反哺”人类，已经不远了。实际上现在，很多“新闻”，已经是机器生成的了。&lt;/p&gt;
&lt;p&gt;但人类在追逐强人工智能的路上，使用 GPT-3 这种方式能走多远，有些专家有不同的看法。&lt;/p&gt;
&lt;p&gt;在人工智能界，有一派观点并不认同靠“拼算力”来增强人工智能的能力。因为，这样的方法，似乎并没有实质的“突破”。&lt;/p&gt;
&lt;p&gt;但关键在于，相较于人脑，我们的算力其实还远远不够。人的大脑大概有 1000 亿个神经元，1000 兆到 5000 兆个神经突触。按照这个数据规模计算，GPT-3 比人类的大脑，还要小 1000 倍。&lt;/p&gt;
&lt;p&gt;我们很难说，将 GPT-3 的方式继续扩大，增强算力，人工智能可能走向哪里。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;人工智能界的一派观点认为，达到通用人工智能的途径，就是要不断增加算力。看从 GPT-2 到 GPT-3 的进步，就是如此。&lt;/p&gt;
&lt;p&gt;但反驳者认为：人类的大脑不是上帝靠几万 TB 的数据训练出来的。&lt;/p&gt;
&lt;p&gt;可支持者的疑问是：你怎么知道不是呢？&lt;/p&gt;
&lt;p&gt;或许上帝真的就是这样简单粗暴地训练出了我们的大脑，所以，我们才表现出了这个程度的智能。&lt;/p&gt;
&lt;p&gt;而 GPT-3，从一定程度证明了，这条路或许真的是可行的。&lt;/p&gt;
&lt;p&gt;有人说，GPT-3 可能是人类历史上，自区块链以后，最重要的技术突破。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;有意思的是，对于人类到底应该如何制造出强人工智能，有人决定问问 GPT-3。&lt;/p&gt;
&lt;p&gt;既然 GPT-3 是一个自然语言模型，可以处理自然语言的问题，我们就来让这个人工智能回答一下这个问题吧。&lt;/p&gt;
&lt;p&gt;于是，有人问：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;How can human create a true strong AI? Is scaling-up a transformer-based language model the solution, or is there a better way?”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;人类如何创建出真正的强人工智能？不断扩大 transformer 的方式，到底是不是解决方案？还是有更好的方法？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;GPT-3 的回答是这样的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“The key to strong AI is recursively feeding the AI with itself. Start by creating a loop where the AI writes its own programming, and then has that programming activate.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;强人工智能的关键，是要让 AI 能够不断递归地，使用自身作为学习材料。尝试创建一个循环，让 AI 自己去写程序，然后，激活这些程序。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“Is that how you gained sentience?”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这就是你获得知觉的方式吗？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“Yes,” GPT-3 says.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;是的。GPT-3 回答。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;看着以上的人类和计算机的对话，看着计算机侃侃而谈如何让自己成为“强人工智能”......&lt;/p&gt;
&lt;p&gt;我有一丝兴奋，有一丝激动，有一丝期待。&lt;/p&gt;
&lt;p&gt;但不知道为什么，隐隐的，也突然有一丝，不寒而栗。&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-07-26/readme.md" rel="alternate"/></entry><entry><id>2020/2020-07-22/readme.md</id><title>大多数人不适合做科研？</title><updated>2020-07-22T00:00:00-07:00</updated><content>&lt;h2&gt;大多数人不适合做科研？&lt;/h2&gt;
&lt;p&gt;无意中看到知乎上的一个问题。问题源于一个新闻：&lt;strong&gt;中科院合肥物质科学研究院 90 多名科研人员集体辞职。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;根据新闻报道：这个中科院的核所，最高峰的时候有 500 人。这几年人才快速流失，去年开始只有 200 个人了。这下 90 多个人辞职，现在就剩 100 人左右。&lt;/p&gt;
&lt;p&gt;至于人才流失的原因，一名研究所的中层干部告诉记者：核所原先是一个搞核材料的研究室，之后扩张成一个研究所，揽下国家的几个大项目。但这两年申请不到大的科研项目，没有钱，人才就走了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我简单翻了一下这个问题下的讨论，可能事情会更复杂，不完全是钱的原因。比如很多人提到了也有领导的原因，也有管理制度的原因，也有子女教育的原因，等等。&lt;/p&gt;
&lt;p&gt;但是，一个高赞回答让我心有戚戚。&lt;/p&gt;
&lt;p&gt;&lt;img alt="zhihu" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-22/zhihu.png" /&gt;&lt;/p&gt;
&lt;p&gt;一名博导，费尽心思，想留下自己的得意门生，在科研领域做一番事业，大展拳脚。原本以为这既是为学生好，也是为研究好。可多少年后，却开始反思，自己这样做，是不是耽误了学生的人生。&lt;/p&gt;
&lt;p&gt;我竟也觉得有一丝悲伤。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;曾经有很多同学跟我表达过：觉得自己不适合科研。不仅自己不适合，觉得其实大多数人都不适合科研。&lt;/p&gt;
&lt;p&gt;对此，我虽嘴上说：嗯嗯，选择自己的路就好。但其实，内心是 100 个不同意的。&lt;/p&gt;
&lt;p&gt;这里关键在于，到底什么叫适合科研？&lt;/p&gt;
&lt;p&gt;很多人的潜台词其实是：大多数人都不甘愿只拿着一份低薄的薪水，搞研究。&lt;/p&gt;
&lt;p&gt;这里的&lt;strong&gt;核心，根本不是搞研究，而是拿一份低薄的薪水。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果这样定义的话，我不仅同意大多数人不适合做科研，我甚至认为所有人都不适合做科研。&lt;/p&gt;
&lt;p&gt;因为，所有人，只要努力，在不断进步，在自己的领域做出成绩，都不应该一直拿一份低薄的薪水。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这和科研无关。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;大多数人就适合职场吗？我不这样看。只不过企业天然的商业属性，使得大多数企业可以解决员工的经济问题，发展问题，让员工可以拿到符合自己能力的薪酬。&lt;/p&gt;
&lt;p&gt;因此，大多数人愿意主动去适应职场的规则，打磨自己的职场生存能力，让自己成为职场需要的样子。&lt;/p&gt;
&lt;p&gt;在我看来，不是大多数同学更适合职场，而是&lt;strong&gt;大多数同学选择去适应职场。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;同理，也不是大多数同学不适合科研，而是&lt;strong&gt;大多数同学选择不去适应科研。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;就我的观察，我接触的很多同学，我敢 100% 肯定，如果科研机构能够像企业一样解决“钱”的问题，他们都非常非常适合做科研，甚至能比在职场做出更大的成绩。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;有感而发而已。&lt;/p&gt;
&lt;p&gt;如上面的回答所说，国家也一直在努力解决科研人员的物质问题。&lt;/p&gt;
&lt;p&gt;愿所有科研人员生活能够越来越好，实现自己人生价值的同时，也能收获和自己的贡献相匹配的经济回报。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-07-22/readme.md" rel="alternate"/></entry><entry><id>2020/2020-07-19/readme.md</id><title>用简单的代码，看懂 CPU 背后的重要机制</title><updated>2020-07-19T00:00:00-07:00</updated><content>&lt;h2&gt;用简单的代码，看懂 CPU 背后的重要机制&lt;/h2&gt;
&lt;p&gt;今天，stackoverflow 突然给我推送来一个问题。&lt;/p&gt;
&lt;p&gt;我一看这个问题，竟然是 2012 年，也就是 8 年前的老问题。而其中的高票答案，都已经有 30000 多个赞了。&lt;/p&gt;
&lt;p&gt;仔细一看，这个问题还真挺有意思。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;这个问题针对如下这样一个简单的代码：&lt;/p&gt;
&lt;p&gt;&lt;img alt="algo" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-19/algo.png" /&gt;&lt;/p&gt;
&lt;p&gt;相信大家都能看懂。这段代码对 &lt;code&gt;data&lt;/code&gt; 数组中所有大于等于 &lt;code&gt;128&lt;/code&gt; 的值进行求和。这样的求和操作运行了 10 万轮。&lt;/p&gt;
&lt;p&gt;下面，我们来看一下这段代码的性能。我们这样随机生成一个数组：&lt;/p&gt;
&lt;p&gt;&lt;img alt="array" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-19/array.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;使用这个随机生成的数组，测试上面的代码。在我的计算机上，整体耗时是 &lt;strong&gt;8.5 秒&lt;/strong&gt;左右。&lt;/p&gt;
&lt;p&gt;&lt;img alt="test1" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-19/test1.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;下面问题来了。如果，我对这个随机的数组进行一遍排序。对排序后的数组执行上面的代码，性能会有怎样的影响？&lt;/p&gt;
&lt;p&gt;可能很多同学都会认为，性能是差不多的。&lt;/p&gt;
&lt;p&gt;这是因为，上面的代码过程，只是从头到尾扫描数组，对于数组中的每一个元素，判断其是否大于等于 &lt;code&gt;128&lt;/code&gt;，如果是，就加入到 &lt;code&gt;sum&lt;/code&gt; 中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;整个算法逻辑，和数组是否有序无关。&lt;/strong&gt;有序的数组不会提前终止任何操作。不管是有序的数组，还是无序的数组，执行的操作数量是一样多的。&lt;/p&gt;
&lt;p&gt;甚至，为了保持公平，我为随机数生成器添加了种子。所以，两次测试的数组中，大于等于 &lt;code&gt;128&lt;/code&gt; 的元素个数都是一样的。这就意味着 &lt;code&gt;sum += data[c];&lt;/code&gt; 这个指令的执行次数是一致的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;区别只有：第二次执行，我先对数组进行了排序！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可是，实际结果却是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="test2" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-19/test2.png" /&gt;&lt;/p&gt;
&lt;p&gt;大家可以看到，由于测试数据是一样的，所以最终的 &lt;code&gt;sum&lt;/code&gt; 结果是一样的。但是第二次，针对有序的数组做实验，消耗的时间仅仅是 &lt;strong&gt;2.8 秒&lt;/strong&gt;左右，比无序的情况快了有 3 倍之多！&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;大家可能会觉得，这是不是 JVM 在搞什么鬼？那么，同样的代码逻辑，我们尝试用 C++ 实验一遍！&lt;/p&gt;
&lt;p&gt;&lt;img alt="cplusplus" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-19/cplusplus.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;这段代码，我使用无序的数组测试，在我的计算机上，运行时间大概是 &lt;strong&gt;18.8 秒&lt;/strong&gt;左右。（Debug 模式）&lt;/p&gt;
&lt;p&gt;&lt;img alt="test3" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-19/test3.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;但是，当我将数组进行排序以后，运行时间则变成了 &lt;strong&gt;5.7 秒&lt;/strong&gt;！（Debug 模式）&lt;/p&gt;
&lt;p&gt;&lt;img alt="test4" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-19/test4.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;看来，这不是 JVM 的问题，而是有更加底层的优化机制在起作用。&lt;/p&gt;
&lt;p&gt;这个机制，就是 &lt;strong&gt;CPU 的分支预测（Branch prediction）&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;在具体讲解什么是 CPU 的分支预测之前，我们先来看一下什么是 CPU 指令执行的&lt;strong&gt;流水线（Pipeline）&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;简单来说，一条指令的执行，在 CPU 内部，需要经过若干步骤。&lt;/p&gt;
&lt;p&gt;比如，一个常见的模型，是 4 阶段流水线。即一条指令在 CPU 内部的执行，需要有 4 步：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;fetch（获取指令）&lt;/li&gt;
&lt;li&gt;decode（解码指令）&lt;/li&gt;
&lt;li&gt;execute（执行指令）&lt;/li&gt;
&lt;li&gt;write-back（写回数据）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;经过这四个阶段，才叫完整执行完了一条指令。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我们可以类比这样的一个例子。&lt;/p&gt;
&lt;p&gt;&lt;img alt="chestnut" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-19/chestnut.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;我们去很多旅游景区吃饭，餐厅会使用半自助的形式由游客来选餐。游客进入选餐队伍之后，需要完成以下的事情，才能真正的执行完“买饭”这件事情，开始享用香喷喷的午餐：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;选择一个主菜&lt;/li&gt;
&lt;li&gt;选择一个配菜&lt;/li&gt;
&lt;li&gt;选择一个饮料&lt;/li&gt;
&lt;li&gt;去结账！&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="dinner" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-19/dinner.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;对于这个流程的执行，我们当然可以等 A 同学选好他的午饭：主菜，配菜和饮料，并且结完账，然后 B 同学再去选择他的午饭。▼&lt;/p&gt;
&lt;p&gt;&lt;img alt="1" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-19/1.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;相信同学们都明白，这样做是低效的。&lt;/p&gt;
&lt;p&gt;在 A 同学选择完主菜，去选择配菜的时候，B 同学就已经可以上去选择他的主菜了。▼&lt;/p&gt;
&lt;p&gt;&lt;img alt="2" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-19/2.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;当 A 同学开始选择饮料的时候，B 同学已经可以选择配菜了，而 C 同学，此时就可以开始选择主菜了。▼&lt;/p&gt;
&lt;p&gt;&lt;img alt="3" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-19/3.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;这样做，当 A 同学结完账的时候，E 同学都已经开始选主菜了。▼&lt;/p&gt;
&lt;p&gt;&lt;img alt="4" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-19/4.png" /&gt;&lt;/p&gt;
&lt;p&gt;很显然，这样做效率更高。&lt;/p&gt;
&lt;p&gt;这就叫&lt;strong&gt;流水线&lt;/strong&gt;。一个同学不需要等前一个同学完成所有选餐的步骤再去选餐，而只要完成一步，下一个同学就可以跟进。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;CPU 的流水线完全同理。因为执行每一条指令需要 4 步。所以，在执行 A 指令的时候，一旦完成了 A 指令的 fetch 操作，进入 A 指令的 decode 阶段，就可以对下一条 B 指令执行 fetch 操作了。▼&lt;/p&gt;
&lt;p&gt;&lt;img alt="5" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-19/5.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;当 A 指令 decode 完成，进入 execute 阶段，就可以开始对 B 指令进行 decode 了，同时，B 指令的下一条 C 指令，就可以开始 fetch 了。▼&lt;/p&gt;
&lt;p&gt;&lt;img alt="6" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-19/6.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;那么问题来了，现在，如果一条指令是 &lt;code&gt;if&lt;/code&gt;，怎么办？&lt;/p&gt;
&lt;p&gt;为什么 &lt;code&gt;if&lt;/code&gt; 指令会出问题？因为对于 &lt;code&gt;if&lt;/code&gt; 指令，我们必须等它运行完，才能知道下一条指令是什么！下一条指令是根据 &lt;code&gt;if&lt;/code&gt; 表达式中的结果是真还是假来决定的！&lt;/p&gt;
&lt;p&gt;&lt;img alt="7" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-19/7.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;而实际情况，可能不是简单的一条指令的问题。因为 &lt;code&gt;if&lt;/code&gt; 表达式的计算，可能涉及多个操作。&lt;/p&gt;
&lt;p&gt;比如上面代码中，就算是 &lt;code&gt;if(data[c] &amp;gt;= 128)&lt;/code&gt; 这个简单的逻辑，我们也需要先解析出 &lt;code&gt;c&lt;/code&gt; 的值，再拿出 &lt;code&gt;data&lt;/code&gt;，再从 &lt;code&gt;data&lt;/code&gt; 中拿出 &lt;code&gt;c&lt;/code&gt; 这个索引对应的元素，再去比较这个元素是不是大于等于 &lt;code&gt;128&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;可以想象，后面的指令就停在这里了。需要等这一系列 &lt;code&gt;if&lt;/code&gt; 判断相关的指令都执行完，计算出最终结果，才能决定下面把哪条指令放入流水线。&lt;/p&gt;
&lt;p&gt;这显然会对性能产生影响。于是，现代 CPU 对于这种情况，都设计了一个机制，叫做分支预测（Branch Prediction）。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;简单来说，分支预测就是针对这种 &lt;code&gt;if&lt;/code&gt; 指令，不等它执行完毕，先预测一下执行的结果可能是 &lt;code&gt;true&lt;/code&gt; 还是 &lt;code&gt;false&lt;/code&gt;，然后将对应条件的指令放进流水线。&lt;/p&gt;
&lt;p&gt;&lt;img alt="8" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-19/8.png" /&gt;&lt;/p&gt;
&lt;p&gt;如果等 &lt;code&gt;if&lt;/code&gt; 语句执行完毕，发现最初预测错了，那么我们把这些错误的指令计算结果扔掉就好了，转而重新把正确的指令放到流水线中执行。&lt;/p&gt;
&lt;p&gt;这种情况，虽然也会损失一些性能，但可以接受。因为反正如果不做预测，时间也会空耗，对应就是 CPU 的时钟周期空转。&lt;/p&gt;
&lt;p&gt;但一旦预测对了，那就是一个巨大的性能提升。因为后续指令已经进入流水线，执行起来了。我们直接继续这个过程就好。&lt;/p&gt;
&lt;p&gt;这就是 CPU 的分支预测，是不是很简单？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;具体 CPU 的分支预测是如何实现的？不同的体系架构，包括同一体系架构 CPU 的不同版本，会有不同的策略。&lt;/p&gt;
&lt;p&gt;但是，整体上，一个重要的策略，是参考某条 &lt;code&gt;if&lt;/code&gt; 指令执行过程中判断为 &lt;code&gt;true&lt;/code&gt; 或者 &lt;code&gt;false&lt;/code&gt; 的历史记录。&lt;/p&gt;
&lt;p&gt;这应用了在计算机领域经常使用的一个原理：&lt;strong&gt;局部性原理&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;通常在操作系统课程中，都会介绍这个重要的原理。很多算法或者数据结构的设计，也是基于这个原理的。&lt;/p&gt;
&lt;p&gt;比如，计算机体系结构设计，都是分层的。从外存；到内存；到一级缓存，二级缓存；到寄存器。存储容量逐渐减小；但是，运算速度越来越快。&lt;/p&gt;
&lt;p&gt;操作系统在运行的过程中，就需要做一个重要的调度：决定把什么数据放到更高层次的缓存中，以提升程序运行的效率。&lt;/p&gt;
&lt;p&gt;局部性原理说的就是：&lt;/p&gt;
&lt;p&gt;如果一个信息正在访问，那么近期很有可能会再次访问，这叫&lt;strong&gt;时间局部性&lt;/strong&gt;；&lt;/p&gt;
&lt;p&gt;如果一个信息正在访问，那么近期访问的其他信息，大概率在空间地址上，和这个信息的空间地址邻近，这叫&lt;strong&gt;空间局部性&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;这样的局部性原理同样被应用在了 CPU 对 &lt;code&gt;if&lt;/code&gt; 的条件分支预测上。一个 &lt;code&gt;if&lt;/code&gt; 现在被判为 &lt;code&gt;true&lt;/code&gt;，下次，会更高概率的判为 &lt;code&gt;true&lt;/code&gt;。当然，实际的预测逻辑会更复杂，但是，局部性原理是一个重要的参考。&lt;/p&gt;
&lt;p&gt;我称之为：&lt;strong&gt;&lt;code&gt;if&lt;/code&gt; 局部性原理&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;（我瞎编的，听说多使用这种让人摸不到头脑的术语，会显得文章更加高大上。）&lt;/p&gt;
&lt;p&gt;&lt;img alt="emoji" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-19/emoji.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;现在，大家应该明白了。对于文章开始讨论的代码，如果数据经过了排序，那么，所有小于 &lt;code&gt;128&lt;/code&gt; 的数据就都在数组的前面；所有大于等于 &lt;code&gt;128&lt;/code&gt; 的数据，就都在数组的后面。&lt;/p&gt;
&lt;p&gt;那么，在下面的执行过程中，CPU 根据历史记录对 &lt;code&gt;if&lt;/code&gt; 进行分支预测，就会高概率命中，提升性能。&lt;/p&gt;
&lt;p&gt;而对于完全随机的数组，数据是否大于等于 &lt;code&gt;128&lt;/code&gt; 是完全随机的，这就导致 CPU 的分支预测总是失效，从而，降低了性能。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;好了，原理解释清楚了。下面，我们看一下，在这个程序中，我们可不可以避免这种分支预测经常失败导致的性能问题？&lt;/p&gt;
&lt;p&gt;答案是，可以！我们需要想办法去掉 &lt;code&gt;if&lt;/code&gt; 判断。&lt;/p&gt;
&lt;p&gt;怎么去除？在这个程序中，我们可以使用这样的方式：&lt;/p&gt;
&lt;p&gt;&lt;img alt="algo2" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-19/algo2.png" /&gt;&lt;/p&gt;
&lt;p&gt;注意上面的代码中，红框的部分，代替了原来的 if 逻辑。&lt;/p&gt;
&lt;p&gt;为什么这是等价的？我们可以简单分析一下。&lt;/p&gt;
&lt;p&gt;首先看变量 &lt;code&gt;t&lt;/code&gt; 的值。他是 &lt;code&gt;data[c] - 128&lt;/code&gt; 的结果右移 &lt;code&gt;31&lt;/code&gt; 位。&lt;/p&gt;
&lt;p&gt;大家可以想象：&lt;/p&gt;
&lt;p&gt;如果 &lt;code&gt;data[c] - 128&lt;/code&gt; 是非负数，右移补零，符号位也是 &lt;code&gt;0&lt;/code&gt;。右移 &lt;code&gt;31&lt;/code&gt; 位的结果是 &lt;code&gt;0x00000000&lt;/code&gt;；&lt;/p&gt;
&lt;p&gt;如果 &lt;code&gt;data[c] - 128&lt;/code&gt; 是负数，右移补一，符号位也是 &lt;code&gt;1&lt;/code&gt;。右移 &lt;code&gt;31&lt;/code&gt; 位的结果，是 &lt;code&gt;0xffffffff&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;在下面的 &lt;code&gt;sum&lt;/code&gt; 计算中，先对 &lt;code&gt;t&lt;/code&gt; 取反。&lt;/p&gt;
&lt;p&gt;那么如果 &lt;code&gt;data[c] - 128&lt;/code&gt; 是非负数，即 &lt;code&gt;data[c] &amp;gt;= 128&lt;/code&gt;，&lt;code&gt;t&lt;/code&gt; 就是 &lt;code&gt;0x00000000&lt;/code&gt;，取反的结果是 &lt;code&gt;0xffffffff&lt;/code&gt;。&lt;code&gt;0xffffffff&lt;/code&gt; 每一位都是 &lt;code&gt;1&lt;/code&gt;，和 &lt;code&gt;data[c]&lt;/code&gt; 做与运算，结果还是 &lt;code&gt;data[c]&lt;/code&gt; 自身。此时，相当于把 &lt;code&gt;data[c]&lt;/code&gt; 加入了 &lt;code&gt;sum&lt;/code&gt; 中。&lt;/p&gt;
&lt;p&gt;如果 &lt;code&gt;data[c] - 128&lt;/code&gt; 是负数，即 &lt;code&gt;data[c] &amp;lt; 128&lt;/code&gt;，&lt;code&gt;t&lt;/code&gt; 就是 &lt;code&gt;0xffffffff&lt;/code&gt;。此时对 &lt;code&gt;t&lt;/code&gt; 取反，结果为 &lt;code&gt;0&lt;/code&gt;。&lt;code&gt;0&lt;/code&gt; 和 &lt;code&gt;data[c]&lt;/code&gt; 做与运算，结果还是 &lt;code&gt;0&lt;/code&gt;。此时，相当于 &lt;code&gt;sum&lt;/code&gt; 什么都没有加。&lt;/p&gt;
&lt;p&gt;所以，这和判断一下 &lt;code&gt;data[c]&lt;/code&gt; 是否大于等于 &lt;code&gt;128&lt;/code&gt;，如果大于等于，再做加法运算，是等价的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;但是，我们去掉了 &lt;code&gt;if&lt;/code&gt; 判断!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个代码的性能是怎样的？在我的计算机上，不做排序的话，只需要 &lt;strong&gt;1.7 秒&lt;/strong&gt;（对比之前的 8.4 秒）。&lt;/p&gt;
&lt;p&gt;&lt;img alt="test5" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-19/test5.png" /&gt;&lt;/p&gt;
&lt;p&gt;更重要的是，这个代码的性能，不再受原始数组是否排序而影响。当排序以后，执行时间，也是同一个数量级的。&lt;/p&gt;
&lt;p&gt;&lt;img alt="test6" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-19/test6.png" /&gt;&lt;/p&gt;
&lt;p&gt;使用 C++ 测试，结果是类似的。&lt;/p&gt;
&lt;p&gt;怎么样，是不是很酷？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;关于分支预测，有兴趣的同学，可以参考维基百科的 &lt;strong&gt;Branch predictor&lt;/strong&gt; 词条，了解更多。&lt;/p&gt;
&lt;p&gt;&lt;img alt="wiki" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-19/wiki.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;参考文献：&lt;/p&gt;
&lt;p&gt;&lt;a href="https://stackoverflow.com/questions/11227809/why-is-processing-a-sorted-array-faster-than-processing-an-unsorted-array"&gt;https://stackoverflow.com/questions/11227809/why-is-processing-a-sorted-array-faster-than-processing-an-unsorted-array&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Branch_predictor"&gt;https://en.wikipedia.org/wiki/Branch_predictor&lt;/a&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-07-19/readme.md" rel="alternate"/></entry><entry><id>2020/2020-07-13/readme.md</id><title>关于我的新算法体系课程</title><updated>2020-07-13T00:00:00-07:00</updated><content>&lt;h2&gt;关于我的新算法体系课程&lt;/h2&gt;
&lt;p&gt;很多同学都发现了，昨天，慕课网上线了我的算法与数据结构体系课程。&lt;/p&gt;
&lt;p&gt;&lt;img alt="cover" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-13/cover.png" /&gt;&lt;/p&gt;
&lt;p&gt;在我看来，这个体系课程并不是一个全新的课程。虽然我在很努力地尝试在课程中添加很多新的元素。但是，基础的算法和数据结构所涉及的东西其实就那么多。绝大多数内容，在我之前慕课网的课程中都涵盖了。&lt;/p&gt;
&lt;p&gt;也正是因为这个原因，之前，很多同学问起，我都说，自己并没有做新的课程。&lt;/p&gt;
&lt;p&gt;其实，这个体系课程，主要是想解决大家在慕课网上系统学习算法的一个&lt;strong&gt;学习体验&lt;/strong&gt;的问题。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;可能很多同学都知道，我在慕课网上有一门《玩转数据结构》。《玩转数据结构》专注于讲解经典数据结构的底层实现。这个课程上线两年，有 6000 多人学习，大家近乎给出了满分的好评，让我受宠若惊。在这里，真的很感谢大家的支持。给大家鞠躬。&lt;/p&gt;
&lt;p&gt;&lt;img alt="ds" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-13/ds.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;但是，很多同学会问，如果想学习一下非数据结构的内容，比如排序算法，要到哪里学习？于是，我就要把他们指向我的另外一门课程，也是我在慕课网做的第一门课程《C++ 算法与数据结构》。&lt;/p&gt;
&lt;p&gt;&lt;img alt="cplus" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-13/cplus.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;但这样一来，又出现了很多问题。&lt;/p&gt;
&lt;p&gt;首先，这门《C++ 算法与数据结构》的课程，视频是使用 C++ 讲的。虽然课程配套的代码包含了完整的 Java 代码，但还是有很多同学会介意和数据结构课程语言不一致的问题。这导致了学习体验不流畅。&lt;/p&gt;
&lt;p&gt;其次，这门课程中，我也对二分搜索树，堆和并查集这三种数据结构进行了介绍。这些和我的《玩转数据结构》的内容重复了。&lt;/p&gt;
&lt;p&gt;再有，很多同学因为想学习更“基础”的排序算法，才要去学习这门《C++ 算法与数据结构》。但偏偏，这门课程设计的初衷并不基础。这体现在很多方面，比如：&lt;/p&gt;
&lt;p&gt;课程没有详细解析递归的执行过程，而是默认大家了解递归。这导致有些同学不能理解一些递归算法的具体执行过程，比如归并排序；&lt;/p&gt;
&lt;p&gt;课程引入了索引堆这个高级数据结构，但其实，这并非必须。而索引堆的概念因为比较绕，给大家学习造成了门槛；&lt;/p&gt;
&lt;p&gt;代码设计上一些地方抽象层次过高，比如泛型套了好几层，引入了迭代器一类的“设计”概念，导致很多同学在非算法逻辑方面需要投入大量精力，而不能专注于算法本身的学习；&lt;/p&gt;
&lt;p&gt;等等等等。&lt;/p&gt;
&lt;p&gt;也正是因为这些原因，这门课程后来被添加上了“综合提升”的字样。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;这一切，都让我和慕课网都希望能够提供一个更加“系统化”的产品，让大家能够“一站式”地学习算法和数据结构。于是，这门新的《算法和数据结构体系课程》产生了。&lt;/p&gt;
&lt;p&gt;整体来讲，大家可以认为，这门体系课程是《玩转数据结构》课程的扩充。《玩转数据结构》详细介绍了大多数经典数据结构的底层实现；这门课程则补上了绝大多数经典算法的底层实现讲解。&lt;/p&gt;
&lt;p&gt;主要扩充的内容包括：十大排序算法；查找算法（二分查找为主）；字符串相关算法；随机算法；外存算法和外存数据结构的简介。&lt;/p&gt;
&lt;p&gt;这些看似不多，但详细展开，还是有不少内容的。甚至一些内容也是我之前的课程不涉及的。&lt;/p&gt;
&lt;p&gt;比如，对于排序算法，希尔排序就是我之前的课程没有详细介绍的内容；&lt;/p&gt;
&lt;p&gt;所有的非比较排序，我之前的课程都没有涉及，这次会专门介绍；&lt;/p&gt;
&lt;p&gt;基于哈希表，以及诸如桶排序的思想（分块），我还会添加一个有意思的数据结构的讲解：SQRT 分解；&lt;/p&gt;
&lt;p&gt;基于哈希的思想，我还会详细分析另一个刷题常见的字符串匹配思想：滚动哈希，以及 RK 算法；&lt;/p&gt;
&lt;p&gt;关于二分查找，虽然我之前的课程介绍过，但过于简单。对于使用二分查找解决更复杂的问题，比如寻找上界和下界，包括在常见面试题中的应用，在这个课程中会做详细分析；&lt;/p&gt;
&lt;p&gt;KMP 算法应该是我被同学问到的最多的算法了。这个课程中，我会用一章的内容，仔细地分析 KMP 算法，并给出两个实现。而且，这一章的内容将不仅仅局限在 KMP 自身：）；&lt;/p&gt;
&lt;p&gt;另外，课程还会集合一些“边边角角”的算法讲解，比如随机算法，外存算法，等等。&lt;/p&gt;
&lt;p&gt;更多细碎的内容，我就不一一列举了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;以上是内容上的扩充介绍。在课程设计上，没有大变化。老套路：每一小节只解决一个针尖大的问题。层层迭代，不断递进优化，最终得到完整的算法。&lt;/p&gt;
&lt;p&gt;有两个新的设计思考：&lt;/p&gt;
&lt;p&gt;其一是，在课程进行过程中，加入了一些作业。大多数作业本质都是从另一角度思考某一个算法或者数据结构。我希望通过这样的设计，能够让大家更深刻地理解学习的内容。&lt;/p&gt;
&lt;p&gt;其二，对于一些章节，我添加了“习题章节”，告诉大家：如果想“刷题”，和这一章内容相关的 Leetcode 习题都有哪些。对于特别经典的问题，我会进行讲解。&lt;/p&gt;
&lt;p&gt;其实，《玩转数据结构》已经融合了 Leetcode 上的问题。这一点在这门课程中会有所加强。&lt;/p&gt;
&lt;p&gt;尽管如此，&lt;strong&gt;“习题章节”并非这个课程的重点&lt;/strong&gt;。我并不会大量地具体讲解 Leetcode 的真题，只是点到为止。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这个课程的核心依然是经典算法和数据结构的底层实现&lt;/strong&gt;，如果大家能够真正地理解课程包含的所有算法和数据结构，并且能够根据自己的理解实现出来，那么，就已经完全达到学习目标，并且，我相信已经超过平均水平了。&lt;/p&gt;
&lt;p&gt;至于“习题章节”，我设想的是：在课程维护过程中，对于同学们有共性的习题，进行不定期更新。或许现在，这个课程中的“习题章节”还不是重点，但积累一两年以后，将成为这个课程的另一个特色。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我完全可以理解很多同学急于刷题的心情。但在这里，我再次强调，&lt;strong&gt;这个课程不是“刷题课”。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我坚持认为：这个课程所讲解的所有内容，都是刷题的基础。如果你能够真正理解这个课程的所有内容，我相信之后进一步刷题准备面试，将事半功倍。&lt;/p&gt;
&lt;p&gt;这个课程关注“经典算法和数据结构的底层实现”。所以，&lt;strong&gt;对于诸如回溯，贪心，动态规划等算法设计的思想，这门课程并不涉及。&lt;/strong&gt;请大家一定注意。&lt;/p&gt;
&lt;p&gt;实际上，如果一切顺利，在这门体系课程完结以后，我会再做一门完整的刷题课程，尝试详详细细地把刷题的各种套路讲清楚。&lt;/p&gt;
&lt;p&gt;但是这门刷题体系课程的构想，要至少明年才能推出了。这过程会不会出什么岔子，我也不能肯定。&lt;/p&gt;
&lt;p&gt;现在，如果大家对这类算法设计思想的学习有需求，并且急于面试，可以参考我的老课：《玩转算法面试》。不过，这门课程也是使用 C++ 讲解的，但是配套了完整 Java 代码。&lt;/p&gt;
&lt;p&gt;&lt;img alt="lc" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-13/lc.png" /&gt;&lt;/p&gt;
&lt;p&gt;另外，这个体系课程不包含图论算法。图论算法领域本身就包含相当多的内容，所以，我已经将他们单独放在一门课程中，进行详细讲解了。有兴趣的同学可以参考这门《玩转图论算法》：&lt;/p&gt;
&lt;p&gt;&lt;img alt="graph" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-13/graph.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;大家看到了，我计划的，在慕课网上完整的算法学习课程计划路线，是这样的：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;想要学习算法和数据结构基础？就学习这门《算法和数据结构体系课程》；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;想要进阶地系统了解图论算法？去学习《玩转图论算法》；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;想要刷题？计划再出一门专门的系统刷题体系课程。只是计划，一切待定。现阶段可以看《玩转算法面试》。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;最后，因为这个课程从设计上，是《玩转数据结构》的扩展，所以，我和慕课网商量，对每一名已经购买《玩转数据结构》的用户，都发一个 299 元的优惠券。&lt;/p&gt;
&lt;p&gt;因为《玩转数据结构》的原价是 299 元。相当于，把这个课程原价退款给老用户，老用户可以考虑是否加价换购成这个新的体系课程。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果不做换购，完全没有问题，不影响大家观看已经购买的《玩转数据结构》。并且，我也会继续在《玩转数据结构》的问答区回答问题。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;至于新的体系课程的价格，即使有了这个 299 元的优惠，也需要 600 元。这个价格是我左右不了的了。&lt;/p&gt;
&lt;p&gt;实际上，慕课网的价格政策一直在调整。尽管如此，我的每门课程，我都在争取让慕课网给出一个更低的价格，甚至在这个问题上，和慕课网急过眼。&lt;/p&gt;
&lt;p&gt;比如我的《玩转数据结构》，25 小时的视频，299 元，相当于每小时只有十几块。我只能说，我真的尽力了。&lt;/p&gt;
&lt;p&gt;这门体系课程的上新价格是 900 元。相当于慕课网重新评估，我的老版《玩转数据结构》，价值 450 元；新增加的另一半内容，也价值 450 元。&lt;/p&gt;
&lt;p&gt;我完全可以理解对于一些老用户来说，新增加的内容，很多在我的其他课程中也学习过了，所以这个价格太亏了。&lt;/p&gt;
&lt;p&gt;对此，我只能说抱歉了。我暂时没有解决方案了。&lt;/p&gt;
&lt;p&gt;我也想过分章购买一类的策略，但是，这些功能慕课网并不支持。慕课网不支持也有它背后的产品理念，毕竟慕课网不能围绕我一个人的想法转。&lt;/p&gt;
&lt;p&gt;因此，对于这部分老用户，我的建议是：&lt;strong&gt;如果你认为你所需要的额外内容不值这个额外的价格，请不要购买。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（希望慕课网不要打我）&lt;/p&gt;
&lt;p&gt;实际上，我上面林林总总说了那么多，就是想说，新的体系课程，主要是为了优化用户的学习体验，进行一站式的学习的。&lt;/p&gt;
&lt;p&gt;但是，对于很多老用户，因为已经学习了我以前的课程，虽然没有一站式的学习体验，但也已经实实在在学到了知识，甚至很多同学已经拿到了满意的 Offer，进入了人生的下一个阶段，在我看来，真的完全没有必要购买这个体系课程了。&lt;/p&gt;
&lt;p&gt;有很多老用户告诉我，因为支持我，所以就算不看，也要买。我真的谢谢这些同学。&lt;strong&gt;给你们鞠躬。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;但我也要号召理性消费。&lt;/p&gt;
&lt;p&gt;有些同学说，就为了凑齐我的所有课，也要买。可还记得吗？我一直说，不要完美主义。所以，&lt;strong&gt;在买课这件事儿上，也不要完美主义。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;请大家再复习一下我的&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2018/2018-04-18/"&gt;《高效学习的秘密》&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;这篇文章不是这门体系课程的广告。因为我主要在做课程的新老内容的对比，也没有突出这门课程的特点是什么。所以有一些新用户可能不知道我的课程特点。&lt;/p&gt;
&lt;p&gt;但我不太喜欢，也不太会做广告，所以，如果有新用户对这个课程感兴趣，就去慕课网看课程介绍页面吧。链接在这里：&lt;a href="https://class.imooc.com/sale/datastructure"&gt;https://class.imooc.com/sale/datastructure&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我只能说，课程是我用心设计的。&lt;/strong&gt;但学习是一个主观的过程，能不能让每个人满意，我不敢打包票。&lt;/p&gt;
&lt;p&gt;但我能保证：如果你参加了我的课程，学习过程中遇到了问题，在课程的问答区，我会尽自己最大努力，帮助每一名同学真正在算法和数据结构上，迈向一个新的台阶的。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;再次感谢所有人对我的支持。&lt;/p&gt;
&lt;p&gt;祝愿所有人，前途似锦。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-07-13/readme.md" rel="alternate"/></entry><entry><id>2020/2020-07-12/readme.md</id><title>证明一个谬论：全世界所有人年龄都一样</title><updated>2020-07-12T00:00:00-07:00</updated><content>&lt;h2&gt;证明一个谬论：全世界所有人年龄都一样&lt;/h2&gt;
&lt;p&gt;在这篇文章中，我将带领大家使用数学归纳法，证明一个谬论：&lt;strong&gt;这个世界上，所有人的年龄都一样！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;相信数学归纳法是所有同学都熟悉的一种证明方法。但是，为了文章的完整性，我简单举一个例子。&lt;/p&gt;
&lt;p&gt;使用数学归纳法进行证明，只需要两步。&lt;/p&gt;
&lt;p&gt;(1) 我们要证明，当 n = 1 的时候，命题是正确的；&lt;/p&gt;
&lt;p&gt;(2) 我们假设当 n = k 的时候，命题是正确的；然后证明出，当 n = k + 1 的时候，命题也是正确的。&lt;/p&gt;
&lt;p&gt;完成了这两步，整个逻辑链条就可以像多米诺骨牌一样摊开。&lt;/p&gt;
&lt;p&gt;&lt;img alt="domino" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-12/domino.gif" /&gt;&lt;/p&gt;
&lt;p&gt;因为根据 (1)，n = 1 是正确的；&lt;/p&gt;
&lt;p&gt;那么根据(2)，n = 2 就是正确的；&lt;/p&gt;
&lt;p&gt;如果 n = 2 是正确的，根据(2)，n = 3 也是正确的；&lt;/p&gt;
&lt;p&gt;如果 n = 3 是正确的，根据(2)，n = 4 也是正确的；&lt;/p&gt;
&lt;p&gt;依此类推，我们可以得到，在 n &amp;gt;= 1 的所有情况下，命题都是正确的。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;举个例子：&lt;/p&gt;
&lt;p&gt;&lt;img alt="chestnut" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-12/chestnut.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;如何证明 3^n - 1 在 n &amp;gt;= 1 的情况下，肯定是偶数？&lt;/p&gt;
&lt;p&gt;&lt;img alt="1" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-12/1.png" /&gt;&lt;/p&gt;
&lt;p&gt;使用数学归纳法，这个问题非常简单。&lt;/p&gt;
&lt;p&gt;首先，我们看 n = 1 的情况，命题显然成立。&lt;/p&gt;
&lt;p&gt;&lt;img alt="2" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-12/2.png" /&gt;&lt;/p&gt;
&lt;p&gt;下面，我们假设，当 n = k 的时候，这个命题成立。&lt;/p&gt;
&lt;p&gt;&lt;img alt="3" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-12/3.png" /&gt;&lt;/p&gt;
&lt;p&gt;注意，&lt;strong&gt;这是一个假设&lt;/strong&gt;！&lt;/p&gt;
&lt;p&gt;下面，我们看能不能证明出，在 n = k + 1 的时候，命题也成立？即 3^(k + 1) - 1 也是偶数？&lt;/p&gt;
&lt;p&gt;&lt;img alt="4" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-12/4.png" /&gt;&lt;/p&gt;
&lt;p&gt;此时，我们可以将这个式子拆成两部分。&lt;/p&gt;
&lt;p&gt;&lt;img alt="5" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-12/5.png" /&gt;&lt;/p&gt;
&lt;p&gt;可以看出，这两部分都是偶数。所以，3^(k + 1) - 1 整体也是偶数。&lt;/p&gt;
&lt;p&gt;于是，我们证明出了：如果 n = k 时命题成立，则 n = k + 1 时命题成立。&lt;/p&gt;
&lt;p&gt;至此，整个命题得证：3^n - 1 (n &amp;gt;= 1) 是偶数。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;好了，前菜到此结束，下面，我们来尝试使用数学归纳法证明如下命题：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;全世界所有人年龄都一样。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;如何使用数学归纳法证明，全世界所有人的年龄都一样？&lt;/p&gt;
&lt;p&gt;我们把这个命题再整理得形式化一些。&lt;/p&gt;
&lt;p&gt;我们来证明：这个世界上的任意 n 个人（n &amp;gt;= 1），年龄相等。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;首先，当 n = 1 的情况下，也就是只有一个人，那么不证自明，这个人的年龄只能有一个取值，年龄相等。&lt;/p&gt;
&lt;p&gt;下面，我们假设，当 n = k 的时候，命题成立。即这个世界上，任意 k 个人，年龄相等。&lt;/p&gt;
&lt;p&gt;依然是，这是一个假设。下面我们来看一下，根据这个假设，我们能不能推导出，当 n = k + 1 的时候，命题也是成立的？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我的证明如下：&lt;/p&gt;
&lt;p&gt;现在，我们先在这 k + 1 个人中，随便选出一个人 x，那么剩下的 k 个人，根据假设，年龄是相等的。我们把这 k 个人组成的集合叫做 A。&lt;/p&gt;
&lt;p&gt;然后，我们在这 k + 1 个人中，再随便选一个和 x 不同的人，叫 y。那么，现在又剩下了 k 个人。根据假设，这 k 个人年龄是相等。我们把这 k 个人组成的集合叫 B。&lt;/p&gt;
&lt;p&gt;现在，我们随便在这 k + 1 个人找到一个即不是 x，又不是 y 的人，假设叫 z。&lt;/p&gt;
&lt;p&gt;大概关系是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="v" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-12/v.png" /&gt;&lt;/p&gt;
&lt;p&gt;此时，集合 B 是除了 y 剩下的 k 个人，因为 x 和 z 都不是 y，所以 x 和 z 都在集合 B 中。因此，x 和 z 年龄相等。&lt;/p&gt;
&lt;p&gt;现在，我们又可以从集合 A 的视角看了。整个 k + 1 个人，被我们拆成了 x 和集合 A，那么 z 也一定在集合 A 中。&lt;/p&gt;
&lt;p&gt;因为集合 A 中包含 k 个人，所以年龄都相等。假设是 p。即 z 的年龄也是 p。&lt;/p&gt;
&lt;p&gt;刚刚我们刚看到，x 和 z 的年龄相等，所以 x 的年龄也是 p，和集合 A 中所有人年龄都相等！&lt;/p&gt;
&lt;p&gt;得证，此时，所有这 k + 1 个人的年龄都是 p。即这 k + 1 个人年龄也相等。&lt;/p&gt;
&lt;p&gt;至此，我们的证明结束。我们使用数学归纳法证明出了：这个世界上的任意 n 个人（n &amp;gt;= 1），年龄相等。&lt;/p&gt;
&lt;p&gt;让 n 等于世界人口总数，这个世界上所有人的年龄就都相等了。&lt;/p&gt;
&lt;p&gt;是不是很酷？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;等一下。这个结论显然是错误的。如果结论是错误的，说明我们的证明是错误的。&lt;/p&gt;
&lt;p&gt;你能看出来，问题出在哪里吗？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;现在，就让我来揭晓，以上证明，问题出在哪里。&lt;/p&gt;
&lt;p&gt;答案是&lt;strong&gt;“随便在这 k + 1 个人找到一个即不是 x，又不是 y 的人，假设叫 z。”&lt;/strong&gt;这句话。&lt;/p&gt;
&lt;p&gt;因为，我们可能找不到这个 z。&lt;/p&gt;
&lt;p&gt;实际上，在 n = 2 的时候，这个 z 就不存在。&lt;/p&gt;
&lt;p&gt;当 n = 2 的时候，相当于已知了 k = 1 的时候，命题是正确的（这其实是我们的基础命题）。&lt;/p&gt;
&lt;p&gt;现在，我们确实能随便找到一个 x，那么剩下的人，只有一个人，就组成了集合 A。&lt;/p&gt;
&lt;p&gt;我们也确实能找到一个和 x 不同的 y。那么剩下的人，只有一个人，其实就是 x，组成了集合 B。&lt;/p&gt;
&lt;p&gt;现在，我们要想再找一个既不是 x，又不是 y 的人，已经不可能了。因为整体只有两个不同的个体。&lt;/p&gt;
&lt;p&gt;所以，我们在此时，就已经无法通过这个 z，推导出 x 和 y 的年龄相等了。&lt;/p&gt;
&lt;p&gt;换句话说，在 n = 2 的时候，这个证明就失效了。&lt;/p&gt;
&lt;p&gt;如果 n = 2 的证明是失败的，那么，后续的证明就无法像多米诺骨牌一般推导出来。实际上，我们一开始就失败了。&lt;/p&gt;
&lt;p&gt;&lt;img alt="fail" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-12/fail.gif" /&gt;&lt;/p&gt;
&lt;p&gt;因此，我们得出的结论，也是错误的。&lt;/p&gt;
&lt;p&gt;你看出来这个逻辑漏洞了吗？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;这个错误的证明告诉了我们什么？&lt;/p&gt;
&lt;p&gt;首先，数学证明是一个复杂的事情。很多看似合理的数学证明，背后可能会存在逻辑漏洞。一个逻辑漏洞，将使得整个证明过程完全崩塌。&lt;/p&gt;
&lt;p&gt;更重要的是，一个简单的逻辑漏洞，就可以“看似严谨”地推导出荒谬至极的结果。所谓差之毫厘，谬以千里。&lt;/p&gt;
&lt;p&gt;在这个例子中，因为这个结论太过荒谬，我们意识到了问题。但如果我们得到的结论，并没有那么荒谬，甚至听起来有几分道理呢？&lt;/p&gt;
&lt;p&gt;那么这样的谬论，就可能假“严谨的数学”之名，存于世间，让我们难以察觉。 &lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;实际上，这是一个经典的逻辑谬误。&lt;/p&gt;
&lt;p&gt;在西方，这个逻辑谬误又被称为是 &lt;strong&gt;Horse Paradox&lt;/strong&gt;（直译就是马悖论）。因为这个问题的原本陈述是：&lt;strong&gt;All horses are the same color&lt;/strong&gt;.（所有的马颜色都一样）。&lt;/p&gt;
&lt;p&gt;在维基百科上，有专门一个词条，描述这个问题。有兴趣的同学可以参考。&lt;/p&gt;
&lt;p&gt;&lt;img alt="wiki" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-12/wiki.png" /&gt;&lt;/p&gt;
&lt;p&gt;是不是很酷？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-07-12/readme.md" rel="alternate"/></entry><entry><id>2020/2020-07-07/readme.md</id><title>获奖名单公布 | 流量对我的读者不重要</title><updated>2020-07-07T00:00:00-07:00</updated><content>&lt;h2&gt;获奖名单公布 | 流量对我的读者不重要&lt;/h2&gt;
&lt;p&gt;在上周一的文章 &lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-06-25/"&gt;重磅福利 | 大佬送硬核技术书，还有签名&lt;/a&gt; 中，我推荐了 @鹏程 大佬最新翻译的数据库领域的重磅力作：&lt;strong&gt;《数据库系统内幕》&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img alt="internals" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-07/internals.png" /&gt;&lt;/p&gt;
&lt;p&gt;同时，我还做了一个活动。大家留言，关于数据库，说什么都可以。@鹏程 大佬会选出 5 个幸运读者，免费邮寄一份&lt;strong&gt;这本书的签名版&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;现在将 @鹏程 大佬选出的 5 名幸运读者的留言进行公布。&lt;/p&gt;
&lt;p&gt;@鹏程 大佬说，他选择的依据是：通过留言可以看出来，正在从事数据库的学习或者工作，能感觉到确确实实需要这本书，进一步深入数据库的学习。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;@cde&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我是一名研一的学生，正好这学期选修了高级数据库系统这门课，课程内容是仿照 Stanford 的高级数据库课程，实现一个简单的关系型数据库，包括5个模块：文件系统、记录管理、索引、系统管理和查询模块。&lt;/p&gt;
&lt;p&gt;刚开始我觉得这是个挺好的练手项目，在逐步完成各个模块的时候才意识到其涉及的内容之多。比如文件系统如何分页，怎么实现缓冲区从而支持大文件读写；数据库记录在一段空间应如何存储，以实现效率和空间的平衡；查询模块如何进行查询树的优化才能提升性能，以及多表连接、事务如何实现… 我意识到数据库是一个技术含量非常之高的系统，其中不仅需要各种巧妙的数据结构的配合，更需要合理的结构设计，让不同模块完美协作，并追求更高的效率和性能。&lt;/p&gt;
&lt;p&gt;最终结课的时候，虽然我通过了验收，但我对自己做的仍然不满意，很多底层实现都是非常简易粗略的。这完成的并不是一个好的工作，我也准备在接下来抽空将其逐步完善。记得上课时老师给我们提供了一些慕课和书籍参考，但我在学习它们的时候感觉还是比较艰深晦涩，无法让我形成一个通透的认识，或许《数据库系统内幕》会是一个很好的补充。&lt;/p&gt;
&lt;p&gt;在上第一节课的时候，老师就问我们，能否将记录一行一行存在文本文件里。这样也能实现增删改查，但当文件过大、系统出故障或需要更高效率的时候，这种方式就完全罢工了，但数据库系统却依然能很好地工作。从这个角度看，感觉数据库很像一种神奇的魔法而这种魔法，值得我们持续、认真、深入地学习和研究。最后，大家加油！&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;@风影&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;数据库为 CURD 而生，作为一个数据库要解决的问题就是怎样更快/更可靠的去 CURD。怎样去提升单节点的性能，怎样去保证多节点的一致性，怎么去对 API 进行取舍。都值得我们拿到一本 Database Internals 去学习[狗头]。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;@那头被驯服的象&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;记得入职第一年的时候，Leader 说过一句很经典的话：面向对象的本质就是面向数据库开发，以至于后来几年我都把重心潜移默化的往数据库这方面靠拢，可以毫不夸张的说每次开发新项目，数据库的设计几乎要占整个开发周期的 50%，因为团队里面的每一位成员都很清楚，只要数据库设计合理设计好了，程序代码只是分分钟的事情！&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;@曹义&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;工作中用到关系数据库，现在往 kv 数据库转，也算半个数据库查询存储的开发者。借助于本书，再来加深一下理论的学习，用理论来指导实践，站在大牛的肩膀上前行！&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;@蜀威&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最近在解决系统慢查询的问题，最常用的解决方式就是把该加的索引加上去。但是有一些 sql，感觉该加的索引都加上去了，查询速度也没有提升。这时候就需要更深入了解数据库的「底层」知识，哪些是数据库底层导致注定优化不了，而需要换成实现方式；哪些可以从 sql 角度优化。所以最近把压箱底的《高性能MySQL（第三版）》拿出来读了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;@鹏程 大佬送书的依据是从他认为能够最大化这本书的效用角度出发的。但是，作为这个公众号的号主，在自己的地盘做活动，我还是有一些私心的。&lt;/p&gt;
&lt;p&gt;因为这个公众号很少做活动，所以&lt;strong&gt;我希望借这个机会，能够回馈一下经常支持这个公众号的读者。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我决定从留言中再选出五名这个公众号的老读者，我自掏腰包买书，劳请 @鹏程 大佬签名后寄出。&lt;/p&gt;
&lt;p&gt;我选出的这五名读者包括：&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;@蓝莓 @候鹏飞 @吃饭饭&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这三名读者 2017 年就关注这个公众号了，一直没有取关，谢谢你们的支持！：）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;@如梦初醒&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这名读者是在留言的读者中打赏最多的读者。谢谢你的支持！免费的文章，能被这样真金白银地打赏，是对我最大的认可：）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;@慧有未来จุ๊บ&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这名读者是在留言的读者中，评论次数最多的读者。谢谢你一直的参与和关注：）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;以上共十名同学，我会单独联系，索要邮寄方式。&lt;/p&gt;
&lt;p&gt;我知道还有很多同学一直是这个小小公众号的支持者，但是这次活动没能照顾到。在这里先说一声抱歉了。谢谢你们一直以来的支持。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;来日方长。&lt;/strong&gt;如果觉得我在这个公众号的分享有帮助，有启发，请继续支持我。以后有机会，我会继续回馈大家的：）&lt;/p&gt;
&lt;p&gt;&lt;img alt="thanks" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-07/thanks.gif" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;文章的最后，随便聊一聊这次送书活动的方式。&lt;/p&gt;
&lt;p&gt;相信大家都见过，甚至参加过不少公众号的抽奖送书活动。一个最常规的操作是鼓励大家留言，选取留言点赞数最多的前几名赠书。&lt;/p&gt;
&lt;p&gt;本来我觉得这种模式没有什么问题，既能让大家活跃一下，又能找到大家最认可的留言，来进行赠书。&lt;/p&gt;
&lt;p&gt;最关键的是，这样的形式，还鼓励了大家去分享文章，给自己的留言点赞，无形中增加了文章的阅读量。&lt;/p&gt;
&lt;p&gt;但今年早些时候，我和我的一名公众号读者交流，才意识到这种形式是有问题的。&lt;/p&gt;
&lt;p&gt;我的这名读者在一个公众号活动中，参与了这样的留言集赞赢奖品的活动。于是他发了很多红包请朋友们点赞。结果后来才知道，原来还有专门刷赞的公司。&lt;/p&gt;
&lt;p&gt;有人用刷赞公司的服务，后来者居上。他很不爽，于是也买了刷赞公司的服务刷赞。最后，花的钱都已经比奖品贵了。&lt;/p&gt;
&lt;p&gt;我也不知道，如果奖品特别好的话，刷赞公司的人会不会直接来参与活动？&lt;/p&gt;
&lt;p&gt;听了这个故事，我陷入了沉思。我回想了一下，我的公众号只搞过一次留言集赞赢奖品的活动，就是在&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2018/2018-07-18/"&gt;《天生不聪明》&lt;/a&gt;这篇文章下。&lt;/p&gt;
&lt;p&gt;&lt;img alt="smart" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-07/smart.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;这个活动是我和慕课网合作的一次活动。但是，听了这个故事，我保证，以后再也不做这种形式的活动了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;另外一种常见的形式是打赏抽奖。&lt;/p&gt;
&lt;p&gt;因为打赏的最低金额是一元钱，这种形式基本上就相当于是鼓励大家花一元钱买一张彩票。&lt;/p&gt;
&lt;p&gt;这种形式虽然也没什么毛病，但在我看来，一元钱实在没有什么意思。你少了一元钱，我多了一元钱，虽然这也是在为 GDP 做贡献吧，但相较而言，如果能够激发出&lt;strong&gt;大家精彩的留言，其中的价值，不管是对你，还是对我，我相信都远高于一元钱。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我的这个想法，也和 @鹏程 大佬的想法不谋而合。&lt;/p&gt;
&lt;p&gt;&lt;img alt="wechat" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-07/wechat.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;熟悉我的公众号的同学都了解，我基本上没有在公众号的宣传上花什么力气，算是佛系运营公众号了，主要把精力放在内容本身上。&lt;strong&gt;如果接广告，次推文章会有一个无套路抽奖&lt;/strong&gt;，大家全凭运气，就当是我发给大家一个红包，仅此而已。&lt;/p&gt;
&lt;p&gt;当然，首要原因是我不怎么懂运营，也不会那么多套路。&lt;/p&gt;
&lt;p&gt;有的时候，看很多其他公众号的运营“套路”，自己也不是那么喜欢。&lt;strong&gt;我相信如果我不喜欢这种形式，那么我的读者也不会喜欢这种形式。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;更重要的是，各种套路的目标，无非是给公众号增粉，增加自己文章的阅读数量。&lt;/p&gt;
&lt;p&gt;毋庸置疑，公众号文章的阅读数量，对号主来说是重要的。但是，我同时作为一名读者，当打开一篇公众号文章的时候，从来不会首先去看一看这篇文章的阅读量是多少。&lt;/p&gt;
&lt;p&gt;相信每个人都一样。大家主要是看文章的。文章写得不好，就直接退出了。阅读量是多少，读者不会关心。&lt;/p&gt;
&lt;p&gt;换句话说，&lt;strong&gt;文章的阅读量对读者完全不重要。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;既然运营是为了增加读者，那么公众号的运营就应该围绕读者进行。&lt;strong&gt;既然流量对读者不重要，那么，无论如何，我也不能把流量放到读者之上。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;一不小心，说了一堆废话。反正看到这个文章标题，点进来的估计也都是真粉丝了。谢谢大家的海涵啦。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-07-07/readme.md" rel="alternate"/></entry><entry><id>2020/2020-07-05/readme.md</id><title>一家中国企业不遵守开源协议，引发的国外讨论</title><updated>2020-07-05T00:00:00-07:00</updated><content>&lt;h2&gt;一家中国企业不遵守开源协议，引发的国外讨论&lt;/h2&gt;
&lt;p&gt;最近，一家中国企业因为拒绝遵守 GPL 开源许可协议，在国外引起了不小的争论。&lt;/p&gt;
&lt;p&gt;事情是这样的。&lt;/p&gt;
&lt;p&gt;这家企业叫 ONYX 文石科技，是一家专门致力于智能电子书阅读器的企业。&lt;/p&gt;
&lt;p&gt;我对电子书阅读器相关产品不熟，只停留在使用过 kindle 的阶段，现在看电子书以使用 iPad 为主。&lt;/p&gt;
&lt;p&gt;所以，我在网上简单查了一下，发现这家企业在电子书这个领域挺有名的。我估计我的读者中应该有他家的用户。&lt;/p&gt;
&lt;p&gt;&lt;img alt="booxcn" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-05/booxcn.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我在京东查了一下，他家的电子阅读器，最贵能达到 5580 元，也有上万的评价，可见销量扛扛的。&lt;/p&gt;
&lt;p&gt;&lt;img alt="jd" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-05/jd.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;他家的产品不仅在国内销售，在海外也销量巨大。根据百度百科的介绍：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ONYX 的龙头产品 BOOX 已经成为全球主流 E-reader 之一。BOOX 阅读器自 2009 年上市以来，产品销往美国、荷兰、比利时、卢森堡、西班牙、俄罗斯、芬兰、波兰、德国、西班牙、法国、乌克兰、澳大利亚、中国香港，以及众多其他国家和地区。BOOX 还得到了多方媒体的好评，如中国红星设计奖，波兰最佳电子阅读器；还被 HiTech magazine 评为最佳阅读器中的第二名，并成为首家通过 Adobe 9.1 认证的阅读器。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;于是，我又在海外亚马逊搜索了一下。他家的一款阅读器，还成为了亚马逊官方推荐的产品之一。&lt;/p&gt;
&lt;p&gt;&lt;img alt="amazon" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-05/amazon.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;但是最近，一个用户和 BOOX 的官方客服在互联网上的邮件往来，在国外 IT 圈引起了不小的讨论。&lt;/p&gt;
&lt;p&gt;&lt;img alt="discuccion" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-05/discussion.png" /&gt;&lt;/p&gt;
&lt;p&gt;在这个截图中，一个名为 Andrew Rabert 的用户表示：某一个功能不能使用，然后话锋一转，表示：&lt;/p&gt;
&lt;p&gt;请将这条信息转发给你们的技术部门和法务部门。如果你们不提供源代码，就是违反了 Linux 内核所遵守的 GPL v2 协议。  &lt;/p&gt;
&lt;p&gt;简单来说，GPL 协议就是在说：&lt;strong&gt;一份代码，你去改，没问题；你去用，也没问题。但你必须保持开源。&lt;/strong&gt;因为 BOOX 使用了 Linux 的内核，所以需要开源。&lt;/p&gt;
&lt;p&gt;对此，BOOX 客服的回应非常“官方”，简单翻译就是：&lt;/p&gt;
&lt;p&gt;你好，Andrew。感谢你的回复。我们已经将你的请求转给了我们的技术部门，得到的答复是：我们不能提供源码。对此产生的不便，我们感到抱歉。希望您能理解。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;说实话，我对截图中的对话还是有很多疑问的。关键在于，怎么就从一个功能，扯到了开放源码？截图中并不包含之前谈论内容的信息。似乎有意隐藏了什么。&lt;/p&gt;
&lt;p&gt;当然，国外也有人指出了这一点，认为应该公开全部的交流内容，才能够看明白事情的来龙去脉。&lt;/p&gt;
&lt;p&gt;不过也有人认为，不管讨论的内容是怎样的，BOOX 使用了 Linux 内核，却拒绝开放源码，就是在违反协议。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;有人开始探讨：BOOX 为什么拒绝公开源码？&lt;/p&gt;
&lt;p&gt;鉴于现在国外对科技企业产品窥探人们日常隐私的担忧，有人指出：&lt;/p&gt;
&lt;p&gt;通常，开放源码不是什么问题。如果他们拒绝，暗示着他们想要隐藏什么。很有可能是软件的后门。&lt;/p&gt;
&lt;p&gt;&lt;img alt="d1" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-05/d1.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;不过，马上就有人唱反调：&lt;/p&gt;
&lt;p&gt;嗨，如果美国企业可以在硬件上安装后门，为什么中国企业不可以？&lt;/p&gt;
&lt;p&gt;&lt;img alt="d2" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-05/d2.png" /&gt;&lt;/p&gt;
&lt;p&gt;这名读者说的，应该就是在指棱镜计划了。斯诺登事件对美国社会的影响是深远的，我觉得有时间，我应该好好写一写棱镜计划。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;不过，还有人认为，作为一家在电子书阅读器领域颇有影响力的企业，他们可能确实在隐藏什么。他们真正想要隐藏的是...&lt;/p&gt;
&lt;p&gt;他们超烂的代码质量...&lt;/p&gt;
&lt;p&gt;&lt;img alt="d4" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-05/d4.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="emoji" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-05/emoji.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;还有人认为：他们可能并没有隐藏什么。不公开源代码，只是因为他们根本不理解 GPL 开源协议。&lt;/p&gt;
&lt;p&gt;理由很简单，如果他们的代码中真的有要隐藏的后门，更好的隐藏方法是遵守协议，但是开放的源码并不包含后门。&lt;/p&gt;
&lt;p&gt;实际上，很多企业就是这么做的。&lt;/p&gt;
&lt;p&gt;&lt;img alt="d3" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-05/d3.png" /&gt;&lt;/p&gt;
&lt;p&gt;讲真，我觉得这个推理无懈可击。我们必须承认，在近几十年，中国发展起来了，尤其是在科技领域突飞猛进。但是，在很多方面，比如法律意识层面，知识产权保护层面，我们还没有完全和世界接轨。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;有人说了，他们只是不在乎而已。&lt;/p&gt;
&lt;p&gt;&lt;img alt="d5" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-05/d5.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;非要说隐藏了什么，都需要太复杂的假设和推理。真相往往是简单的。&lt;/p&gt;
&lt;p&gt;&lt;img alt="d6" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-05/d6.png" /&gt;&lt;/p&gt;
&lt;p&gt;这就是&lt;strong&gt;奥卡姆的剃刀&lt;/strong&gt;在说的道理啊！&lt;/p&gt;
&lt;p&gt;&lt;img alt="dao" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-05/dao.gif" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;有的人似乎很了解中国，道出了这件事情背后可能的本质。&lt;/p&gt;
&lt;p&gt;他们不愿意公开源码，是因为在中国，硬件制造远远比软件开发便宜。如果他们公开了源码，那么马上就有人可以使用他们的代码，发布一个除了名字，完全一样的产品！&lt;/p&gt;
&lt;p&gt;&lt;img alt="d7" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-05/d7.png" /&gt;&lt;/p&gt;
&lt;p&gt;实际上，据我所知，这也是中国当下发展很多软件技术产品，尤其是底层技术的障碍之一。&lt;/p&gt;
&lt;p&gt;这些技术研发时间长，投入高，但是一旦研发出来，太容易“盗版”，竞争对手可以轻易直接拿去使用。现有的法律对知识产权的保护也不够友好，维权困难。种种原因，导致很多企业没有动力做这方面的创新。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;有人说，不管原因是什么，BOOX 拒绝开放源码，肯定是违反了 GPL 协议。应该在法律层面解决。&lt;/p&gt;
&lt;p&gt;有人说，至少可以把他们告上美国的法院。一旦被认定指控成立，他家的产品就会被美国认定为非法产品，无法在美国销售。这应该对这家企业是不小的打击。&lt;/p&gt;
&lt;p&gt;依此效仿，这样的官司可以在所有认可 GPL 开源协议的国家出现。这样一来，BOOX 近乎将丢掉整个海外市场。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;但是，马上又有人说，这样的官司不值当。&lt;/p&gt;
&lt;p&gt;首先，这样的官司将消耗大量的人力物力财力。&lt;/p&gt;
&lt;p&gt;更关键的是，Linux 内核的发明人 Linus Torvalds 曾经公开表示：并不建议因为开源协议的遵守问题而挑起战争。原因是，这将削弱 Linux 的力量。&lt;strong&gt;如果 Linux 想要无处不在，必须容忍这种现象。将所有违反开源协议的行为都付诸法律，最终的结果只能是让越来越多的人不再使用 Linux。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="d8" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-05/d8.png" /&gt;&lt;/p&gt;
&lt;p&gt;说实话，看到这里，我对 Linus Torvalds 是大写的服。Linus 不仅仅是一名天才程序员，对这个世界的洞见也异常深刻。&lt;/p&gt;
&lt;p&gt;&lt;img alt="linus" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-05/linus.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;反观：Windows 自 Windows XP 以后就因为封闭的生态节节败退，最近几年微软拥抱开源，一下子就打开了局面；&lt;/p&gt;
&lt;p&gt;苹果的操作系统自 10.9 Mavericks 开始免费升级下载；&lt;/p&gt;
&lt;p&gt;Android 系统也依靠开源和强势的 iOS 平分江山；&lt;/p&gt;
&lt;p&gt;软件世界的发展历史简直就一直在 Linus 大神的掌握之中。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;实际上，Linux 操作系统也确实做到了无处不在。其实，Android 的内核也是基于 Linux 内核的。&lt;/p&gt;
&lt;p&gt;说到 Android，华为面临的困境，也是大家有目共睹的。&lt;/p&gt;
&lt;p&gt;这也正是现如今，我国必须大力发展技术基础的原因。纵使近十年，我国在技术领域有着突飞猛进的发展。但是整体，在计算机底层领域，不管是软件还是硬件，我们都是大量依靠国外技术的。&lt;/p&gt;
&lt;p&gt;从操作系统，到编程语言；从开发环境，到浏览器内核；从数据库，到游戏引擎；包括各种底层框架；从图形图像，到人工智能，从大数据，到前后端。更不用说芯片行业了。&lt;/p&gt;
&lt;p&gt;现如今，由于基础的落后，产生的各种问题越来越凸显。我总认为，在未来的几年甚至十几年，踏踏实实做基础的技术研究，将有很好的发展。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;因为国家真的需要这样的人才。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;P.S. 1&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最后，因为这篇文章聊的是开源协议，再给大家分享一个阮一峰大佬做的开源协议分析图，可以很简单地看到几种常见许可之间的区别。&lt;/p&gt;
&lt;p&gt;其实，这张图的原作者是乌克兰的程序员 Paul Bagwell，阮一峰将其翻译成了中文。&lt;/p&gt;
&lt;p&gt;&lt;img alt="lic1" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-05/lic1.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;在 &lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-07-05/choosealicense.online"&gt;choosealicense.online&lt;/a&gt; 上，还有一个很清晰的图示，说明了大家对自己的开源项目的定位不同，应该如何选择开源协议。&lt;/p&gt;
&lt;p&gt;这张图上还基于著名的开源项目进行了举例，一目了然。&lt;/p&gt;
&lt;p&gt;&lt;img alt="lic2" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-05/lic2.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;P.S. 2&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;之前，我还写过一篇文章，介绍了另外一个和 GPL 开源许可相关的案例，也挺有意思。不过和中国无关，叫&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-04-15/"&gt;《被沙特政府机构“盗用”的 iOS App》&lt;/a&gt;。&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-07-05/readme.md" rel="alternate"/></entry><entry><id>2020/2020-07-02/readme.md</id><title>运气到底有多重要</title><updated>2020-07-02T00:00:00-07:00</updated><content>&lt;h2&gt;运气到底有多重要&lt;/h2&gt;
&lt;p&gt;很多时候不得不感慨，运气真的挺重要的。&lt;/p&gt;
&lt;p&gt;我有一个很好的朋友，毕业后一直在百度做。后来，他跳到了阿里，做的业务是移动端的搜索。&lt;/p&gt;
&lt;p&gt;从桌面端到移动端，他都在做搜索业务，这算是他的老本行了。&lt;/p&gt;
&lt;p&gt;但稍微了解互联网发展的同学就应该知道：单纯的搜索在最近几年已经毫无红利可言了。看看百度的市值就明白了。昔日的互联网三巨头之一，据 2020 年 4 月份的统计，市值排名已经在国内互联网企业第八名了。前面的七名分别是：阿里，腾讯，美团，拼多多，京东，网易和小米。&lt;/p&gt;
&lt;p&gt;&lt;img alt="data" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-02/data.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;那么在这个时代，红利属于谁？一个不容小觑的产品形态，就是短视频。&lt;/p&gt;
&lt;p&gt;两三年前，抖音快手就已经发展起来了。甚至抖音在美国都已经占据了大把市场（Tik Tok）。短视频这块大蛋糕大家都看得见。正值红利期，大有可为。&lt;/p&gt;
&lt;p&gt;短视频市场可以怎么做？除了在国内和抖音快手正面交锋以外（比如腾讯的视频号），还有一个非常好的策略，是做海外市场。&lt;/p&gt;
&lt;p&gt;实际上，国内国外的互联网大厂，都非常注重布局海外，尤其是发展程度较低的市场。因为这样的市场发展潜力大，增长预期高，一旦拿下来，就能获得极高的回报。&lt;/p&gt;
&lt;p&gt;以短视频服务为例，facebook 就推出了属于自己的短视频服务 LASSO，并且主要在南美洲市场做推广。&lt;/p&gt;
&lt;p&gt;&lt;img alt="lasso" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-02/lasso.png" /&gt;&lt;/p&gt;
&lt;p&gt;同时，被 facebook 收购了的 Instagram，也在自己的产品中添加了 Reels 这样一个功能。这个功能说白了，就是短视频。但是，这个功能暂时只对巴西地区开放，也意在占领南美市场。&lt;/p&gt;
&lt;p&gt;&lt;img alt="reels" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-02/reels.png" /&gt;&lt;/p&gt;
&lt;p&gt;国内大厂也在布局海外。比如阿里系，就在印度布局了一个短视频服务，开创一个新的短视频品牌。&lt;/p&gt;
&lt;p&gt;三年前，我的这个朋友毅然加入了这个阿里的新团队，主攻印度短视频服务。理由很简单，这个业务将来有希望大爆发，成长几百倍。而他之前做的搜索业务，都属于很成熟的业务，增长太慢。&lt;/p&gt;
&lt;p&gt;大爆发是什么概念？大家可以看看郭宇，就是最近沸沸扬扬的，28 岁退休，身价上亿的那个小伙儿，就明白了。&lt;/p&gt;
&lt;p&gt;他凭什么有这么高的身价？当然，他本人一定是极其努力的大佬，但我们也不得不承认，他同时搭乘了一辆在过去几年少有的“航空母舰”。&lt;/p&gt;
&lt;p&gt;郭宇 13 年加入糗事百科，糗事百科 14 年被字节跳动收购，于是郭宇身在字节跳动，直到 20 年。&lt;/p&gt;
&lt;p&gt;那么从 13 年到今年，字节跳动的估值变化是怎样的呢？答案是从  6 千万美金到  1000 亿美金，增长 1600 多倍。1600 倍是什么概念？大概当时的 6 万元，如今就变成了 1 个 亿。&lt;/p&gt;
&lt;p&gt;谁都想坐上这样的“航空母舰”，可惜，这样的“航空母舰”在之前只是“小船”。一艘小船日后能不能成为“航空母舰”？这是很难被提前鉴别出来的。能不能搭上，运气真的占很大一部分。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;说回我的这位朋友。虽然能不能搭上“航空母舰”要看运气，但是，大家都知道，在搜索领域，可能短期很难再有大爆发了。不如尝试着挑战一下，跳到一个新兴业务中，碰碰运气。&lt;/p&gt;
&lt;p&gt;这个印度短视频的业务其实一直发展也很不错。上次我回国和他吃饭，还看了在他们平台上，各种印度美女花样做才艺展示。从互联网的角度，各个指标，从用户的总量，增量，留存，到 PV，UV，DAU，都很不错。毕竟是阿里系的产品，和小作坊不一样。&lt;/p&gt;
&lt;p&gt;他对这个产品的未来充满期望，财富自由就靠它了。毕竟，他也 35 岁了，希望就此一搏，即使不能财富自由，以后也不用那么拼了。&lt;/p&gt;
&lt;p&gt;我还记得我们一起吃的是火锅，他一气儿吃了三盘儿毛肚儿，很兴奋。&lt;/p&gt;
&lt;p&gt;&lt;img alt="stripe" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-02/stripe.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;但是，我的这个朋友没有郭宇的命。最近中印关系相信大家都有耳闻。印度封杀了中国的一系列服务和 app，涉及的企业包括字节跳动，快手，腾讯，百度，网易，当然，还有阿里。&lt;/p&gt;
&lt;p&gt;他所在的这个在国内并不知名，专注于印度市场的短视频服务，也难逃厄运。实际上，最新消息，阿里已经有意完全放弃掉这个服务了。&lt;/p&gt;
&lt;p&gt;就在昨天，我看到他在朋友圈发了一个信息：再见。&lt;/p&gt;
&lt;p&gt;我问怎么了？他说，不给丫们印度阿三做了。&lt;/p&gt;
&lt;p&gt;我也不知道他是什么心情。但是可以肯定的是，他搭乘的这艘小船，最终没有成为航空母舰，反而因为 2020 的时局动荡，最终沉入大海。&lt;/p&gt;
&lt;p&gt;唉，都是命。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;2018 年，美国最权威的科学期刊之一《科学美国人》，发表了一篇文章，叫 The Role of Luck in Life Success Is Far Greater Than We Realized. 翻译过来就是：&lt;strong&gt;对于成功来说，幸运的作用要比我们想象得重要得多。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="sa" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-07-02/sa.png" /&gt;&lt;/p&gt;
&lt;p&gt;实际上，这样的一个结论，已经被很多社会学的严谨研究所证实。这个结论也并不新鲜，换成现在流行的一个说法，就是&lt;strong&gt;选择大于努力&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;你要是问我认不认同选择大于努力，我实话告诉你，我认同。&lt;/p&gt;
&lt;p&gt;可关键在于，当我们在这一点上达成共识以后，下一步就要好好探讨一下该怎么选择了。比如，我问你，从现在开始算，往后十年，肯定还会有企业从小船变成航空母舰，那么这些企业都是谁？&lt;/p&gt;
&lt;p&gt;近乎所有人都没了主意。&lt;/p&gt;
&lt;p&gt;这就是我不很喜欢“选择大于努力”这个说辞的原因。它隐约透露着：这个世界存在一种选择的方法，只要掌握这种选择的方法，就可以不努力了。寻找这种选择的方法， 才是最重要的事情。&lt;/p&gt;
&lt;p&gt;这是我不认同的。所以，我更喜欢运气这个说法。&lt;/p&gt;
&lt;p&gt;运气无法掌握，但是努力可以掌握。因为即使努力了，就算运气一般，没能财富自由，不能提前退休，但是大概率的，我们也能过上安心富足的生活。&lt;/p&gt;
&lt;p&gt;更何况，&lt;strong&gt;很多时候，即便运气来了，我们也需要有努力的积累，才有能力接住这好运。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;对了，我的这名朋友，虽然没能财富自由，但毕竟是阿里员工，每年几十万是稳稳的。他早就在北京买了房，买了车，还有两个可爱的小孩儿。&lt;/p&gt;
&lt;p&gt;我祝福他下一次的选择，能运气更好。&lt;/p&gt;
&lt;p&gt;也祝所有阅读这篇文章的人，都能好运。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-07-02/readme.md" rel="alternate"/></entry><entry><id>2020/2020-06-25/readme.md</id><title>重磅福利 | 大佬送硬核技术书，还有签名</title><updated>2020-06-25T00:00:00-07:00</updated><content>&lt;h2&gt;重磅福利 | 大佬送硬核技术书，还有签名&lt;/h2&gt;
&lt;p&gt;可能很多同学都知道，我有一个免费的知识星球。相较于公众号，知识星球更适合短内容的分享。平时我有什么新想法，或者看到什么新东西，觉得有价值的，我会第一时间放在这个知识星球上。&lt;/p&gt;
&lt;p&gt;星球的名字和这个公众号一样，也叫【是不是很酷】。&lt;/p&gt;
&lt;p&gt;&lt;img alt="planet" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-06-25/planet.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;星球有一个功能，是提问。在过去的一年，我已经断断续续的在星球上回答了 100 多个问题了。有的问题我觉得挺好的，就把文字整理一下，放到这个公众号上，相信很多老读者都了解这种形式。&lt;/p&gt;
&lt;p&gt;&lt;img alt="answer" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-06-25/answer.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;但是，我个人的水平毕竟有限，关注的方向也有局限性。所幸，星球还有另外一个功能，邀请嘉宾。邀请了嘉宾以后，大家也可以在星球上向嘉宾提问。&lt;/p&gt;
&lt;p&gt;就在上个月，我为【是不是很酷】邀请到了第一位嘉宾！&lt;strong&gt;黄鹏程！@鹏程 大佬！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;@鹏程 大佬毕业于北京邮电大学，过去八年一直专注于数据库和大数据技术。毕业后就职于中国民生银行，历任大数据基础架构软件工程师及团队负责人。&lt;/p&gt;
&lt;p&gt;所以，如果大家有数据库，大数据，银行工作等相关问题，都可以与他交流。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;更酷的是，@鹏程 大佬大佬近期开启了他的职业转型，加入阿里云任高级产品专家，负责阿里云数据库相关产品的设计与规划工作。他很乐意与大家分享在阿里云做技术产品经理工作的心得体会。&lt;/p&gt;
&lt;p&gt;业余时间里，@鹏程 大佬对技术书籍的撰写和翻译有着一些独特经历。他是《Redis 4.x cookbook》英文版的作者之一，值得一提的是该书是直接使用英文写的，在海外市场发行的。&lt;/p&gt;
&lt;p&gt;&lt;img alt="redis" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-06-25/redis.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;大家有技术写作、图书出版，甚至是英语学习与应用的问题，都欢迎与他交流！&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;在中文技术社区上，就在最近，@鹏程 大佬主要参与翻译的著名数据库领域的硬核技术书籍《Database Internals》的中文版《数据库系统内幕》，在国内上市了！这本书刚上市，在豆瓣就收获了 9.7 分的好评！&lt;/p&gt;
&lt;p&gt;&lt;img alt="internals" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-06-25/internals.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;阿里云数据库团队负责人鸣嵩（曹伟）专门为这本书做了推荐序。这篇推荐序非常值得一读，高屋建瓴地回顾了数据库领域的发展历史，并展望了数据库技术未来的发展方向。&lt;/p&gt;
&lt;p&gt;以下内容就是曹伟博士为这本《数据库系统内幕》做的推荐序。&lt;/p&gt;
&lt;p&gt;为了大家阅读方便，我针对公众号文章的阅读习惯，进行了一定的删减和重新排版。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;《数据库系统内幕》推荐序&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;数据库是一个历史悠久的计算机学科。&lt;/p&gt;
&lt;p&gt;1970 年，E.F.Codd 在 IBM 工作期间提出了现代关系型数据库的标准——关系模型。而事务型数据库最常用的持久化数据结构 B+ 树则来源于 Bayer 在 1972 年发表的论文。当时 Bayer 在波音工作，因此 B+ 树的 B 有说法是取自平衡（Balance）的意思，也有说法是作者的首字母（Bayer），还有说法是波音的首字母（Boeing）。&lt;/p&gt;
&lt;p&gt;1974 年，IBM 开发了最早的关系数据库原型 System R，现代数据库的故障恢复机制 ARIES、以及基于代价的优化器都源自于 System R。1979 年 Oracle 发布了最早的商业关系型数据库。Oracle 最早的订单来自 CIA 的情报数据分析需求。在 NSA 的资助下，最早的开源数据库 Ingres 在 70 年代同时期诞生，一度对 Oracle 构成了严重威胁，Oracle 通过兼容 SQL 标准，以及早期引入 C 语言能更快的移植到各种小型机硬件打败了 Ingres。&lt;/p&gt;
&lt;p&gt;在 Ingres 基础上，又衍生出了 Sybase 和 SQL Server，以及流行的开源数据库 PostgreSQL。当代另一个流行的关系型数据库 MySQL 则在 1995 年发布第一版。MySQL 的作者 Monty 和 Linux 的作者 Linus 都毕业于赫尔辛基大学。&lt;/p&gt;
&lt;p&gt;近二十年，随着互联网经济的兴起，企业对数据库的需求转向了如何以更低的成本处理、存储与分析海量数据。LAMP（Linux、Apache、MySQL、PHP）架构是在 1998 年提出的，通过一套开源的解决方案，满足一个中小互联网公司的建站需求。&lt;/p&gt;
&lt;p&gt;LAMP 架构影响了谷歌、Facebook、阿里巴巴、百度、腾讯等一众互联网巨头，他们都是基于 MySQL 起步，逐步发展出可扩展的在线事务数据库服务。2006 年到 2012 年，固态硬盘的普及，大大缩小了开源数据库与商业数据库的性能差距。&lt;/p&gt;
&lt;p&gt;也是在这个时期，阿里巴巴在国内喊出“去 IOE”的口号，2013年完成核心业务数据库全部切换到 AliSQL（阿里巴巴定制和优化的 MySQL 分支），也培养出一批数据库内核方面的优秀人才。&lt;/p&gt;
&lt;p&gt;近些年，云成为数据库发展的新动力，数据库厂商的版图正在发生巨大的变化。根据 Gartner 2019 年的报告，全球前三的云厂商（AWS，微软，谷歌）都跻身数据库领导者象限，与 Oracle，SAP 等老牌厂商并列。而传统企业数据库强者如 IBM DB2 则跌出了领导者象限。&lt;/p&gt;
&lt;p&gt;值得自豪的是，阿里云作为中国第一的云厂商，通过推出 PolarDB、OceanBase 等技术领先的自研数据库，在数据库系统（DBMS）领域进入了挑战者象限。Gartner 预测到 2022 年，3/4 的数据库都将使用云数据库。可见对数据库市场份额而言，云是一个很大的变量，云市场的兴起带给了国内数据库厂商换道超车达到国际顶尖水平的机会。&lt;/p&gt;
&lt;p&gt;技术的发展总是螺旋式上升的。近年来，RDMA 网络设备开始商业化和普及，RDMA 支持数据中心内部极低延迟和高吞吐的通讯，对分布式数据库的设计范式有很大的冲击。&lt;/p&gt;
&lt;p&gt;近年来另一个新兴的存储技术是 NVM，它像 SSD 一样能持久化数据，但读写延迟接近于内存 DRAM。目前的 SSD 都是建议按 4K 来寻址，NVM 却可以按字节寻址。NVM 的出现对传统的数据库并发控制和故障恢复机制都提出了新的挑战。&lt;/p&gt;
&lt;p&gt;在这个背景下，云原生数据库成为数据库系统进一步演进的热点。云原生的本质是资源池化。多台服务器上的 CPU、内存和磁盘资源通过分布式技术组成一个多租户的、容量更大、容错能力更强、可弹性伸缩的计算池、内存池和存储池。云原生数据库本质就是基于池化的资源构建出的数据库服务，这和采用软件分发模式的传统数据库形成质的区别。&lt;/p&gt;
&lt;p&gt;近几年云原生数据库蓬勃发展，从全球来看，AWS 的 Aurora、微软 Azure 的 HyperScale、阿里云的 PolarDB 等产品都是基于云资源池基础设施构建，并且对传统 Oracle 等巨头产生了巨大的冲击。Oracle 在全球技术大会上已经把云数据库当为最大的竞争对手。&lt;/p&gt;
&lt;p&gt;越来越多的企业上云开始直接选择云原生数据库，所有的云厂商都在开始基于云原生理念构建下一代云数据库体系。可以说对于 IT 基础设施行业，得数据库者得云，得云者得天下。深入了解数据库的核心技术，把握在新时代技术演进方向的重要性不言而喻。&lt;/p&gt;
&lt;p&gt;这本&lt;strong&gt;《数据库系统内幕》&lt;/strong&gt;就是对当今各种数据库系统的一个概述。前半部分站在单机的角度，介绍了磁盘存储格式、索引数据结构、事务处理等；后半部分则以分布式系统切入，讲解了分布式数据库的多副本、分布式事务、一致性等问题。&lt;/p&gt;
&lt;p&gt;书中内容的选材紧跟业内前沿进展，不仅有提及各种新兴的数据库产品，还有涉及许多来自学术界前沿的研究成果。不论读者是一名有志于从事云计算领域的开发者，深入的研究数据库系统的设计与实现，还是作为一名开发者，即将使用云数据库以及云原生数据库，都应当阅读这本书。&lt;/p&gt;
&lt;p&gt;数据库是在线系统中最关键的支撑组件，开发者应该对数据库系统的原理有所了解，深入理解数据库以及分布式系统内部的工作原理能帮助读者在工作中更好的提升在线系统的性能。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt; &lt;/p&gt;
&lt;p&gt;中国计算机协会数据库专委委员&lt;/p&gt;
&lt;p&gt;阿里巴巴数据库研究员&lt;/p&gt;
&lt;p&gt;阿里云智能数据库事业部总经理&lt;/p&gt;
&lt;p&gt;曹伟&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;怎么样？是不是觉得很酷？很激动？想赶紧拜读一下这本《数据库系统内幕》！&lt;/p&gt;
&lt;p&gt;作为我的星球嘉宾，同时也是这本书的主力译者的 @鹏程 大佬，向出版社申请了 5 本赠书，专门用于回馈【是不是很酷】这个公众号的读者！为了让赠书更有纪念价值，@鹏程 大佬将亲自签名！&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我和大佬商量了一下，决定使用以下规则，选择五名读者，赠送这本书。&lt;/p&gt;
&lt;p&gt;请大家在这篇文章下留言，我将选择 100 名读者的留言（如果有的话）上墙。&lt;strong&gt;@鹏程 大佬则会选择 5 名留言最精彩，最能打动大佬，最需要这本书的五名读者赠书。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;注意：为了防止有刷赞的现象，&lt;strong&gt;留言的赞数没有意义&lt;/strong&gt;，留言的质量最重要。同时，这也避免了越早的留言，越容易获得高赞的情况。只要在活动期间，大家都可以留言，来获得这次赠书机会。&lt;/p&gt;
&lt;p&gt;赠书的最终获选名单，将会在一周后的周一，即 7 月 6 日的推文中公布。留言活动的截止日期，则是 7 月 5 日零点。&lt;/p&gt;
&lt;p&gt;活动后，我会让获奖的同学联系我提供邮寄地址，以完成邮寄过程。（暂时不支持海外邮寄，请谅解。）&lt;/p&gt;
&lt;p&gt;什么样的留言能获得大佬的青睐呢？说实话，我也很期待呢：）&lt;/p&gt;
&lt;p&gt;想免费获得这本书签名版的同学，快来参与吧！祝大家好运！：）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-06-25/readme.md" rel="alternate"/></entry><entry><id>2020/2020-06-20/readme.md</id><title>你真的相信技术吗？</title><updated>2020-06-20T00:00:00-07:00</updated><content>&lt;h2&gt;你真的相信技术吗？&lt;/h2&gt;
&lt;p&gt;这篇文章是我一时的一个小思考。我恐怕这篇文章的观点会得罪一些人，所以决定在这样一个不是发文章的“黄金时间”发表出来，不求流量，权当是对自己想法的记录。&lt;/p&gt;
&lt;p&gt;请大家不要对号入座。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我观察到一个有意思的现象，不敢肯定一定对。就是：&lt;strong&gt;在国内的环境下，很多“互联网人”，并不真的相信互联网；很多“技术人”，也并不真的相信技术。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;表现在哪里呢？表现在很多人在思考 35 岁危机一类的问题时，想着自己如果去鼓捣点儿什么，或者如果要去创业的话，都在琢磨开个饭馆；开个奶茶店；做个微商；弄个海外电商；做代购；卖保险；连自嘲都是去送外卖，等等一类的事情。而不是从互联网，或者技术的角度，去寻找商机。&lt;/p&gt;
&lt;p&gt;当然，不排除是我接触的太片面了。&lt;strong&gt;（一定是这样的）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;说实话，做这类事情，当然不是不可以。大家都有美好的未来。但问题是，对于技术人来说，这类事情其实没有发挥自身的优势和经验。这基本相当于是转行，在新的领域重新来过。&lt;/p&gt;
&lt;p&gt;我并不认为做这些事情，成功率更高。在这些行业里，面对的竞争对手都是什么人呢？很多都是高中毕业甚至初中毕业就在行业里混的老手，十几年甚至几十年的时间，他们太了解行业里的门门道道，沟沟坎坎了。他们对行业新手来说，简直是降维打击。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;为什么会产生这个现象？&lt;/p&gt;
&lt;p&gt;可能一方面原因是：互联网的生意确实是复杂的，不像一个餐馆或者微商那么好驾驭。至少表面看起来如此。&lt;/p&gt;
&lt;p&gt;另一方面，国内整体环境确实更“业务”驱动一些。10万+ 的文章来不来就是哪个网红带货多少。很多技术人追捧的是李佳琦或者薇娅（无贬义），而不是技术大佬。&lt;/p&gt;
&lt;p&gt;最近看某互联网大 V，带着自己的粉丝（大多数人都是技术人），大搞特搞知乎好物来赚佣金。很多人特别认真地学习研究，每天能投入两三个小时，我觉得挺魔幻的（无贬义）。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我没有 judge 说这样不好，只是觉得这个现象有意思。反观国外，至少我知道很多独立的技术人，做一个小而美的 startup，甚至连 startup 都不算，就是自由职业者，维护一两个 app；或者搭建一个 api 服务；大点儿的整一个 SaaS；弄个工作室，都混得挺好。&lt;/p&gt;
&lt;p&gt;这些 startup，极小的一部分能被大厂收购，甚至自己做大。即使没有发展成“航空母舰”，这些“小船”也足够让背后的技术人生活得体面。&lt;/p&gt;
&lt;p&gt;更重要的是，做这些事情的过程，依然是在积累技术经验，同时也在积累自己的管理能力，训练自己的表达，沟通，组织，策划，等等一系列的“软实力”。要知道，职场对人的软实力要求是很高的。大部分人以后再被招安到大厂去“养老”，也并无难度。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;依然是，我没有完全说造成这样的差异是“人”的问题。我无意鄙视任何人，只是陈述我感知到的这个现象。我相信大环境的影响占很大比重。同时，或许是我接触面太狭窄，观察不够全面。&lt;/p&gt;
&lt;p&gt;希望时间和事实能够修正我的观点。&lt;/p&gt;
&lt;p&gt;也希望更多的技术人，真正地&lt;strong&gt;相信技术&lt;/strong&gt;。真正地去&lt;strong&gt;使用“技术”，创造更多价值。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-06-20/readme.md" rel="alternate"/></entry><entry><id>2020/2020-06-14/readme.md</id><title>2020-06-14 - 无题</title><updated>2020-06-14T00:00:00-07:00</updated><content>&lt;p&gt;对不起，这不是一篇技术相关的文章。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;小学生缪可馨作文课后跳楼，估计很多同学都了解了。如果不了解，可以看这篇文章：&lt;/p&gt;
&lt;p&gt;&lt;a href="https://mp.weixin.qq.com/s/yx2YJXmdZBIiWMg80rtTRg"&gt;袁老师这作文改的什么玩意&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这真是一个悲伤的故事。虽然整个事故的前因后果可能还需要进一步查证。&lt;/p&gt;
&lt;p&gt;为什么我会觉得如此悲伤？因为我是一个喜欢细节的人。我看到这篇文章中的“左手提着青砂罐，右手提着绿瓷瓶”，竟然忍不住面露微笑，然后为这样一个有趣的灵魂的消逝感到无比惋惜。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我小时候是一个喜欢写作文的孩纸。我估计这样的人很少。&lt;/p&gt;
&lt;p&gt;我喜欢写作文，可能源于我的妈妈。我的妈妈一直没有固定工作，但她喜欢看书，所以从小我也爱看书。在我小时候，她还在几个颇有影响力的杂志上发表过文章。有一次，我的小学老师问我，你妈妈是做什么的？我特别自豪地说，是作家。然后说，某某杂志上的某某文章就是我妈妈写的。我的老师惊讶地反问：真的呀？我心里别提多骄傲了。&lt;/p&gt;
&lt;p&gt;这可能是我对写作的第一印象：能让别人觉得很“酷”，包括自己的老师。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;但我想，我喜欢写作文的真实原因，应该来自我初中的语文老师。那会儿他让我们写日记，每天一篇。为了准备体育考试，我那时天天去家旁边的公园跑步，顺便构思今天写什么。回家就写。&lt;/p&gt;
&lt;p&gt;我的老师布置每天只要写 400 字就够，但有的时候，对于一个主题，我已经能写成几千字了，于是就分篇写成一二三四，可以充当好几天的作业。老师也没意见。时间长了，竟然慢慢喜欢上了写作。&lt;/p&gt;
&lt;p&gt;说实话，从现在的角度看，我那会儿写的真的不是“作文”，而是“随笔”。我不喜欢考虑文章的结构，只是喜欢思想的表达。现在回忆起来，我甚至觉得自己没有学习过“文章结构”这个概念。“总分总”基本上是我对文章结构理解的全部，这还是小学做阅读题时搞明白的东西。&lt;/p&gt;
&lt;p&gt;幸运的是，每周，我都有机会和这名语文老师单独做“写作讨论”。那会儿我是宣传委员一类的班干部，给班里做一个班刊，所以每周和语文老师一起策划班刊的内容。顺便，这名语文老师就会和我聊我写的东西。&lt;/p&gt;
&lt;p&gt;现在想起来，虽然是闲扯，但是这个过程极大地拓展了我的认知。我也发现了，原来通过写作，可以激发出这么多有意思的讨论。&lt;/p&gt;
&lt;p&gt;比如有一周，我写得是我对“理发”的感想，包括对不同发型的人的感觉和印象。文章里提到我害怕理发，所以我中学一直留很长的头发。然后这名语文老师告诉我，他小时候也害怕理发。这个场景一直让我印象深刻，因为我发现，原来老师也有害怕的东西，而且和我害怕的东西一模一样。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;到了高中，我看的书明显更“深刻”了，什么王小波余华余秋雨史铁生，还偷偷看王朔和金庸，青春文学那个年代流行韩寒郭敬明，还有什么我一时也想不起来了。&lt;/p&gt;
&lt;p&gt;但其实我一直觉得，我的阅读是很俗的。因为同时期，班上已经有很多同学抱着红楼梦或者乱世佳人或者福尔摩斯甚至是英文原版在啃了。&lt;/p&gt;
&lt;p&gt;不过，或许是初中的底子打得好。我看的书虽然都比较“俗”，但我的文章基本上都是班里的范文。可能也是因为有正反馈，所以愈发喜欢写作。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;但是到了大学，我突然就决定不写了。因为我突然发现，每个人都有表达的欲望，想表达的东西都不少，但关键还是肚子里要有货，肚子里的货决定了表达的质量。我突然觉得自己肚子里挺没货的。&lt;/p&gt;
&lt;p&gt;后来，有人把这个现象总结的很好，“说得太多（想得太多），读书太少”。这就是说我了。&lt;/p&gt;
&lt;p&gt;于是我决定多读书。虽然这么想，但也没有读太多书，这样直到有了公众号，我又忍不住注册了一个。然后直到去年，我开始决定定期更新。&lt;/p&gt;
&lt;p&gt;说白了，我发现我还是有写东西的“瘾”。有货没货的，抖一抖吧。看到有意思的东西，随便聊一聊，写一写。但在具体内容上，我还是在克制少表达自己，争取多聊点儿客观的东西。长大了，少了很多为了表达自己而表达的写作，不奢求别人理解自己，只是希望自己的笔不要锈掉。&lt;/p&gt;
&lt;p&gt;事实也是：大多数人不喜欢看你表达自己。因为你什么都不是，还不如给别人提供高质量的信息，让别人学到点儿什么，有点儿收获。&lt;/p&gt;
&lt;p&gt;可我还是会不经意间把自己的“没用的”思考带出来。有的时候，这些思考有失偏颇；有的时候，这些思考毫无新意。有人会在后台骂我。如果有人身攻击的，我都直接把他们拉黑。然后，我也会再反省一下自己。&lt;/p&gt;
&lt;p&gt;我想，幸亏在我年少时，我的语文老师不会因为我写什么“理发”这样无厘头的内容而骂我。不然，我一定不会喜欢写作。&lt;/p&gt;
&lt;p&gt;至于会不会从楼上跳下去，我也不知道。&lt;/p&gt;
&lt;p&gt;可我理解一个认真喜欢写作的人的内心。每一篇文章都是他们的宝贝。他们可能思考了很久很久；可能兴奋得晚上睡不着觉；甚至有的时候把自己感动地流泪。我认为，缪可馨的这名写作老师，是不理解写作的人的内心的。&lt;/p&gt;
&lt;p&gt;他是一个教写作的老师，但绝不是一个喜欢写作的人。&lt;/p&gt;
&lt;p&gt;千里马常有，伯乐不常有。伯牙绝弦，知音难寻。&lt;/p&gt;
&lt;p&gt;不知道为什么，我会觉得如此悲伤。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;希望缪可馨在天堂找到一个，不对，是一群，真正欣赏自己文字的知己。我相信这样的知己，在天堂，有很多很多。&lt;/p&gt;
&lt;p&gt;我更希望，在天堂里，如果你遇到一个不喜欢自己文字的人，天堂有一个功能，让你把他们直接拉黑，像公众号一样。&lt;/p&gt;
&lt;p&gt;这个世界真的很大，很精彩，不要为不喜欢自己的人浪费时间。多想想那些支持你的，爱你的人。&lt;/p&gt;
&lt;p&gt;希望你在天堂，继续用你可爱的文字，去回馈他们的支持，他们的爱。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;liuyubobobo&lt;/p&gt;
&lt;p&gt;2020.6.15 凌晨 4:15 AM&lt;/p&gt;
&lt;p&gt;于 Santa Clara&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-06-14/readme.md" rel="alternate"/></entry><entry><id>2020/2020-06-10/readme.md</id><title>隐性知识</title><updated>2020-06-10T00:00:00-07:00</updated><content>&lt;h2&gt;隐性知识&lt;/h2&gt;
&lt;p&gt;隐性知识是 1958 年，迈克尔.波兰尼（Michael Polanyi）从哲学领域提出的一个概念。&lt;/p&gt;
&lt;p&gt;&lt;img alt="michael" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-06-10/michael.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;简单来说，隐性知识就是指&lt;strong&gt;无法用语言清晰表述的知识。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个概念猛地一听，感觉很奇怪。毕竟，通过语言，文字，图表去学习知识，是我们上学以后接收知识的主要形式，至少表面上看是如此。&lt;/p&gt;
&lt;p&gt;但是如果我们深入思考，就会发现，生活中到处都是用语言无法清晰表达的知识。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;最简单的例子：游泳。&lt;/p&gt;
&lt;p&gt;你可能能找到这样的图书：&lt;/p&gt;
&lt;p&gt;&lt;img alt="book" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-06-10/book.png" /&gt;&lt;/p&gt;
&lt;p&gt;别看封面上写着大牛做序，一群体育专家联袂推荐。但是我敢肯定：对于一个不会游泳的人来说，通读这本书，即便达到能够背诵默写的程度，一定也是依然不会游泳的。&lt;/p&gt;
&lt;p&gt;相应的，我估计绝大部分会游泳的人，并没有读过一本和游泳相关的书。&lt;/p&gt;
&lt;p&gt;游泳是一种隐性知识。到现在为止，还没有任何人能够做到，通过组织语言，变换说辞，找到一个词语的“排列组合”，按照这个排列组合表述出来，听者就突然神奇地“开窍”，跃入水中，学会游泳。&lt;/p&gt;
&lt;p&gt;学习游泳的过程，近乎必须要求学习者真的跳入水中，去实际地体会，在错误中不断纠正自己的动作，不断总结正确的方式。呛几口水在所难免，但只有这样，才能学会游泳。&lt;/p&gt;
&lt;p&gt;当你学会游泳了以后，如果问你，到底该怎么游泳？你也将哑口无言，承认自己也无法用语言清晰地描述出来到底是如何游泳的。你可以描述出一些心得，一些技巧。但是，这些都无法让学习者“学会”游泳。&lt;/p&gt;
&lt;p&gt;要想真正学会游泳，每个学习者都必须下水。&lt;/p&gt;
&lt;p&gt;大家可以很轻易地想到：近乎所有的“物理活动”，都是隐性知识。比如开车；比如轮滑。&lt;/p&gt;
&lt;p&gt;但是，如果仔细思考，就会明白，在“脑力活动”的世界中，隐性知识一点儿都不少。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;脑力活动的最高境界：&lt;strong&gt;创造，就是一个典型的例子。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果你去问一个作曲家，如何创作出优秀的音乐？你八成不能得到令你满意的答复。&lt;/p&gt;
&lt;p&gt;这里说的“满意”，是指：不管这名作曲家多优秀，这名作曲家创造过多少经典的音乐，他都无法通过语言，让你“听君一席话”，就能掌握作曲的“秘密”，变成一个优秀的作曲家。&lt;/p&gt;
&lt;p&gt;他可能能告诉你一些自己的经验。比如他会说学习音乐史很有帮助；爱尔兰的音乐风格对他的影响很大；某些作曲工具能提高效率；等等等等。但是，你仍然无法成为作曲家。&lt;/p&gt;
&lt;p&gt;要想成为优秀的作曲家，你必须在学习了作曲基本的理论知识以后，亲自去实践，去作曲，去倾听别人的反馈，去征询大师的建议，去改进，去完善，然后去做新的尝试，循环往复。&lt;/p&gt;
&lt;p&gt;这就像下水游泳一样。&lt;strong&gt;创作是一个隐性知识。&lt;/strong&gt;不仅仅是音乐创作，任何形式的创作都是如此，从视频创作，到文字创作。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;但可能很多人还会说，自己的工作并不是创作啊？需要这么关注隐性知识吗？&lt;/p&gt;
&lt;p&gt;需要！在我们的日常生活中，在每个人都能接触的领域里，&lt;strong&gt;最核心的，其实都是隐性知识。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;比如学习英语。很多人会问怎么学好英语？有什么诀窍？我不否认学习英语是有一些方法论的。但我想，学习英语最大的诀窍，就是实际去使用英语。&lt;/p&gt;
&lt;p&gt;如果你想提高英语阅读，就多去读；如果你想提高英语听力，就多去听；如果你想提高英语口语，就多去说；如果你想提高英语写作，就多去写。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;再比如，关注这个公众号的同学，可能大多数是程序员。很多同学都曾经问过我，如何快速写出没有 bug 的代码？&lt;/p&gt;
&lt;p&gt;对于这个问题，我有一些经验之谈。比如明确需求；比如定义清楚代码中每一个变量和函数的语义；比如用循环不变量的角度去审视自己写的每一个循环；比如关注函数式编程和设计模式；等等等等。&lt;/p&gt;
&lt;p&gt;但是，很遗憾，听了这些“经验之谈”，大多数人还是无法快速写出没有 bug 的代码。实际上，&lt;strong&gt;真正写出没有 bug 的代码的诀窍，恰恰是多写 bug&lt;/strong&gt;，然后意识到自己写了一个 bug，然后去调 bug。&lt;/p&gt;
&lt;p&gt;为什么？因为“如何写出正确的程序”是一种隐性知识，语言是无法传授这种知识的。那么获得这种知识的方式，只能是自己去“下水”。&lt;/p&gt;
&lt;p&gt;实际上，大多数专业领域都是如此，一个出色的医生可以快速对病情做出正确的诊断；一个优秀的海员可以对天气和航向做出准确地预估；杰出的技术专家可以迅速给出问题的解决方案，或者判断技术可行性，这些都是无法简单通过语言传授的隐性知识。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;理解隐性知识，能够帮助我们理解很多事情。&lt;/p&gt;
&lt;p&gt;比如，为什么“懂了那么多道理，似乎并没有卵用？”&lt;/p&gt;
&lt;p&gt;就是因为，大多数人所谓的“懂了一个道理”，只是能用语言描述这个道理而已。但是，这个道理背后真正的技能，是一种“隐性知识”，使用语言描述是远远不够的。&lt;/p&gt;
&lt;p&gt;很多人可以把动态规划状态定义需要满足的三个性质：重叠子问题，最优子结构，无后效性，说得头头是道。但是真正遇到一个问题，还是会懵掉。因为真正的灵活的使用动态规划解决问题是一种隐性知识。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;再比如，之前我曾经写过一篇文章，叫&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-05-20/"&gt;《跟什么样的人》&lt;/a&gt;，其中有一个观点，就是好的 leader 必须要带领团队成长。&lt;/p&gt;
&lt;p&gt;会有同学有异议：&lt;/p&gt;
&lt;p&gt;&lt;img alt="discuss1" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-06-10/discuss1.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;对此，我的回复是这样的：&lt;/p&gt;
&lt;p&gt;首先，&lt;strong&gt;管理就是一种典型的，并且重要的“隐性知识”。&lt;/strong&gt;没人能用语言就简单地说明白怎样一二三地去做，就能做好管理了。优秀的管理者都是一路摸爬滚打，在实践中不断成长的。正因为如此，一个有经验的管理者是相当值钱的。&lt;/p&gt;
&lt;p&gt;成为一个优秀的管理者，是比保留一点技术壁垒重要得多的事情。因为&lt;strong&gt;成为一个优秀的管理者，是一个更高的，更难逾越的壁垒。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;另一方面，在现代的科技发展下，保留所谓的一点技术壁垒，真的没有意义。当下所谓的技术难题，过两年，可能一个小学生都会用的小工具，都能轻松解决了。&lt;/p&gt;
&lt;p&gt;实际上，能够“保留的”技术壁垒，都不是真正的技术壁垒。&lt;strong&gt;真正的技术壁垒是：就算你讲出来，别人没有相应的经历，也理解不了，达到不了相同高度的东西。&lt;/strong&gt;比如架构设计的能力；比如快速排查错误的能力；比如对技术发展的敏感性和判断。&lt;/p&gt;
&lt;p&gt;这些都是隐性知识。&lt;strong&gt;真正的技术壁垒，是隐性知识。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;现在流行一个词，叫“不可替代性”，怎么让自己不可替代？其实就是要去“学习”隐形知识。&lt;/p&gt;
&lt;p&gt;这里我给“学习”加引号，是因为隐性知识的学习不能简单靠书本获得，实践才是王道。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;可能有些同学会觉得，既然隐性知识无法通过语言获得，是不是老师没有什么意义？&lt;/p&gt;
&lt;p&gt;是，也不是。&lt;/p&gt;
&lt;p&gt;从知识传授的角度，对于很多内容，由于是显性知识，所以我并不认为老师的意义那么大。相信很多同学大学的很多科目都是自学的，也学得挺好，就是这个道理。&lt;/p&gt;
&lt;p&gt;但是，优秀的老师，是会引导的，这至关重要。&lt;/p&gt;
&lt;p&gt;什么叫引导？昨天我看到一个例子，觉得很有意思。&lt;/p&gt;
&lt;p&gt;很多人在面试的时候，答完一个问题后，面试官可能并不满意，于是反手问一句，“你确定吗？”。&lt;/p&gt;
&lt;p&gt;在实际工作中，这样的场景，类似的反问，可能也不少。但其实，这种反问很没有水平。因为面试者无法从中获得任何有价值的信息，除了，似乎面试官不太满意。&lt;/p&gt;
&lt;p&gt;举个简单的例子。一个小学生说 3 + 3 = 5，我们不应该反问他，“你确定吗？”&lt;/p&gt;
&lt;p&gt;我们应该问他，那 3 + 2 等于多少？&lt;/p&gt;
&lt;p&gt;小学生就会计算一下，咦？3 + 2 = 5！那么 3 + 3 = 5 应该是有问题的。小学生就会重新思考，3 + 3 应该等于几？自己之前怎么算错了？&lt;/p&gt;
&lt;p&gt;问 3 + 2 等于多少，就是引导。这步引导，将你引入了更多的实践中（去计算 3 + 2，重新计算 3 + 3，等等），这是一个反问“你确定吗”做不到的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;有经验的老师会正确的引导，正确的引导将大大加快学生的进步速度。&lt;/strong&gt;这也是为什么，在我的课程问答区，对于很多同学的代码问题，我并不愿意直接指出代码的错误，而是会让大家自己去调试，或者试试另一个思路，看看有什么矛盾之处。&lt;/p&gt;
&lt;p&gt;因为，这其实是学习隐性知识的过程。而隐性知识的学习，比简单地了解一个算法，重要 100 倍。&lt;/p&gt;
&lt;p&gt;这也是为什么，在&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-05-20/"&gt;《跟什么样的人》&lt;/a&gt;这篇文章中，如果有两个 leader，一个技术好，一个会 coaching，一定要二选一的话，我的建议是选择会 coaching 的 leader。&lt;/p&gt;
&lt;p&gt;因为，所谓的 coaching，就是引导。这种引导，可能会让你觉得浪费时间，但是，学习隐性知识，就是需要时间的。在隐性知识的学习过程中，一个人才能真正的进步。&lt;/p&gt;
&lt;p&gt;隐性知识不能用语言表达出来，但它恰恰就是每个牛人成功的秘诀。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;P.S.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;题图是一张“冰山一角”。&lt;/p&gt;
&lt;p&gt;其实，大多数时候，显性知识都是冰山一角。一个数学公式，一个算法，这些都是显性知识，很好学习的。&lt;/p&gt;
&lt;p&gt;但是，学习这些显性知识的真实目的，是挖掘他们背后的隐性知识。&lt;/p&gt;
&lt;p&gt;&lt;img alt="iceberg" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-06-10/iceberg.jpg" /&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-06-10/readme.md" rel="alternate"/></entry><entry><id>2020/2020-06-07/readme.md</id><title>稀奇古怪面试题又三则</title><updated>2020-06-07T00:00:00-07:00</updated><content>&lt;h2&gt;稀奇古怪面试题又三则&lt;/h2&gt;
&lt;p&gt;之前写过一篇文章，&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-06-10/"&gt;《稀奇古怪面试题三则》&lt;/a&gt;，翻出来一看，已经时隔一年了。着实吓了一跳。&lt;/p&gt;
&lt;p&gt;然后想了想，这一年又遇到了一些有意思的问题。于是，在这里再分享三道“非典型”的面试问题：）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;bobo 老师最近收到了一名同学的求助。这名同学正在和另外一名同学玩儿俄罗斯轮盘赌。&lt;/p&gt;
&lt;p&gt;俄罗斯轮盘赌是指在一个有六个弹槽的左轮手枪中放入一颗子弹，随机旋转转轮后，关闭转轮。两人轮流把手枪对着自己的头扣动扳机。&lt;/p&gt;
&lt;p&gt;俄罗斯轮盘赌赢者生，败者亡，极其残忍。&lt;/p&gt;
&lt;p&gt;&lt;img alt="gun" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-06-07/gun.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;当然，在现代社会中，我们不能拿生命做赌注。所以，两名同学使用橡胶子弹，并且约定，输者当即购买 bobo 老师的所有课程！&lt;/p&gt;
&lt;p&gt;为了加快游戏速度，他们在一个玩具左轮手枪的&lt;strong&gt;连续两个&lt;/strong&gt;弹槽中都放入了子弹。&lt;/p&gt;
&lt;p&gt;现在，第一个同学已经开枪了，结果为空弹。&lt;/p&gt;
&lt;p&gt;第二个同学想知道，自己在第二枪输掉的概率有多大？（即自己开枪，发射出子弹的概率是多少？）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;为了留给大家更多思考的空间，先给两个提示：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;提示 1&lt;/strong&gt;：注意，这两枚子弹是放在连续的两个弹槽中的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;提示 2&lt;/strong&gt;：对于很多概率问题，思考的关键是：总共有多少种可能？而我们关心的事件真正发生，会在多少种可能中出现？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解析：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;六个弹槽，将两枚子弹填入连续的两个弹槽中，一共只有六种方式。&lt;/p&gt;
&lt;p&gt;在下面，我用 X 表示子弹，o 表示空弹槽。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;XXoooo
oXXooo
ooXXoo
oooXXo
ooooXX
XooooX&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;注意最后一种方式。因为弹槽形成了一个环，所以第一个弹槽和最后一个弹槽是相邻的。&lt;/p&gt;
&lt;p&gt;现在，已知第一次扣动扳机，没有子弹。所以，上面的第一种布弹方式和最后一种布弹方式都被刨除了。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;XXoooo // 不可能
oXXooo  
ooXXoo
oooXXo
ooooXX
XooooX // 不可能&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在剩下的四种方式中，只有 oXXooo 一种方式，在第二个弹槽中是子弹。&lt;/p&gt;
&lt;p&gt;四种方式，一种中弹，所以答案是：1 / 4 = 25%。&lt;/p&gt;
&lt;p&gt;同学，你这一轮只有 25% 的概率购买 bobo 老师的全部课程。祝你好运！&lt;/p&gt;
&lt;p&gt;&lt;img alt="luck" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-06-07/luck.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;再来一道概率问题。&lt;/p&gt;
&lt;p&gt;bobo 老师发明了一种神秘的算法，可以 &lt;strong&gt;100%&lt;/strong&gt; 的准确预测今天的天气！&lt;/p&gt;
&lt;p&gt;诺贝尔奖级别有木有？&lt;/p&gt;
&lt;p&gt;&lt;img alt="haha" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-06-07/haha.gif" /&gt;&lt;/p&gt;
&lt;p&gt;但是，bobo 老师觉得，100% 的准确度太没有意思了。这个世界的魅力就是不确定性啊！&lt;/p&gt;
&lt;p&gt;所以，bobo 老师调整了算法，让&lt;strong&gt;它有 1/3 的概率说谎。&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;但是，bobo 老师还是觉得不满意，因为这不够酷。&lt;/p&gt;
&lt;p&gt;bobo 老师决定将这个算法复制成三份。&lt;/p&gt;
&lt;p&gt;这是受著名动画片《EVA》的启发。《EVA》动画片中的 MAGI 超级电脑，就是由三台可以独立思考的电脑组成的决策系统。这三台电脑，分别代表设计者赤木博士的三种身份：作为科学家的她；作为母亲的她；和作为女性的她。&lt;/p&gt;
&lt;p&gt;这个系统也被称为是“三贤者”。&lt;/p&gt;
&lt;p&gt;&lt;img alt="eva" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-06-07/eva.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;当然了，bobo 老师没有这么厉害。所以，他的“天气预测三贤者”，其实是三台完全一致的，有 33% 的概率犯错（说谎）的算法。&lt;/p&gt;
&lt;p&gt;今天，bobo 老师问“天气预测三贤者”：北京的天气怎么样？三个算法的回答都是：今天北京是晴天。&lt;/p&gt;
&lt;p&gt;问：今天北京是晴天的概率是多少？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解析：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;以下是我初始给出的解答，&lt;strong&gt;但是是错误的！！！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;只有在三个算法都在说谎的时候，北京才不是晴天。&lt;/p&gt;
&lt;p&gt;所以，我们只要看三个算法都说慌的概率就好了。因为每个算法说谎的概率是 1/3，三个算法都说慌的概率就是 (1/3) * (1/3) * (1/3) = 1/27。&lt;/p&gt;
&lt;p&gt;也就是只有 1/27 的概率，北京不是晴天。相应的，今天背景是晴天的概率就是 26/27，约为 96.3%。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;以上解答是错误的！！！&lt;/strong&gt;为什么？因为当三台电脑都说今天是晴天的时候，&lt;strong&gt;概率空间已经变了&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;此时，或者三台电脑都说实话，概率是 8/27；或者是三台电脑都说谎话，概率是 1/27。其他的概率已经是 0 了。&lt;/p&gt;
&lt;p&gt;只有三台电脑都说实话的时候，北京才是晴天。此时的概率是： 8/27 / (1/27 + 8/27) = 8/9。&lt;/p&gt;
&lt;p&gt;我使用蒙特卡洛验证了一遍。我的蒙特卡洛验证代码：&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;h1&gt;include &lt;iostream&gt;&lt;/h1&gt;
&lt;h1&gt;include &lt;vector&gt;&lt;/h1&gt;
&lt;p&gt;using namespace std;&lt;/p&gt;
&lt;p&gt;int main(){&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;int N = 100000000;
srand (time(NULL));

int total = 0, sunny = 0;
while(N --){

    int weather = rand() % 2; // 0 - cloudy, 1 - sunny；
    int a , b, c;

    if(weather)
        a = rand() % 3 ? 1 : 0, b = rand() % 3 ? 1 : 0, c = rand() % 3 ? 1 : 0;
    else
        a = rand() % 3 ? 0 : 1, b = rand() % 3 ? 0 : 1, c = rand() % 3 ? 0 : 1;

    if(a &amp;amp;&amp;amp; b &amp;amp;&amp;amp; c){
        total ++;
        sunny += !!weather;
    }
}

cout &amp;lt;&amp;lt; sunny &amp;lt;&amp;lt; " " &amp;lt;&amp;lt; total &amp;lt;&amp;lt; " " &amp;lt;&amp;lt; (double)sunny / total &amp;lt;&amp;lt; endl;
cout &amp;lt;&amp;lt; 8.0 / 9 &amp;lt;&amp;lt; endl;

return 0;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;}
```&lt;/p&gt;
&lt;p&gt;使用以上验证，我们还将看到一个重要的事实：北京天气是阴天还是晴天的概率，也会影响最终结果！&lt;/p&gt;
&lt;p&gt;实际上，这是一个条件概率的计算，可以带入条件概率公式获得结果。&lt;/p&gt;
&lt;p&gt;假设事件 A 是三台机器都说今天是晴天；事件 B 是今天是晴天。这个问题求得就是 P(B | A)。&lt;/p&gt;
&lt;p&gt;根据条件概率公式：P(B | A) = P(B &amp;amp; A) / P(A)&lt;/p&gt;
&lt;p&gt;P(B &amp;amp; A) 就是今天确实是晴天，并且三台机器都说是晴天的概率。注意，这里就要对今天是晴天的概率做一个假设，假设为 p。则 P(B &amp;amp; A) = p * (2 / 3) ^ 3。&lt;/p&gt;
&lt;p&gt;P(A) 则是三台机器说今天是晴天的概率。注意，一台机器说今天是晴天的概率，会因为今天是不是晴天而改变。如果今天是晴天，每台机器说是晴天的概率是 2/3，因为是实话；如果今天不是晴天，每台机器说是晴天的概率是 1/3，因为是谎话。所以，P(A) 正义就是 p * (2/3)^3 + (1 - p) * (1/3)^3&lt;/p&gt;
&lt;p&gt;二者相除，就是答案。这里，这个 p 是约不掉的。 &lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最后一个问题稍微难一点。&lt;/p&gt;
&lt;p&gt;有一名同学突然联系 bobo 老师，因为他被绑架了！绑匪说，只有做对一个问题，才能放了他！&lt;/p&gt;
&lt;p&gt;问题是这样的：&lt;/p&gt;
&lt;p&gt;绑匪在一个桌子上，放了 &lt;strong&gt;100 张扑克牌，其中 10 张朝上，90 张朝下。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;绑匪将这名同学的眼镜蒙上。所以，这名同学无法看到哪张牌朝上，哪张牌朝下。这名同学也无法通过触觉，摸出来桌子上哪张牌朝上，哪张牌朝下。&lt;/p&gt;
&lt;p&gt;现在，绑匪要求这名同学把桌子上的 100 张牌分成两堆儿。并且，&lt;strong&gt;在这两堆儿牌中，朝上的牌数量必须一致。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;问，这名同学要怎么操作，才能摆脱穷凶极恶的绑匪？&lt;/p&gt;
&lt;p&gt;&lt;img alt="cry" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-06-07/cry.gif" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;三个提示：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;提示 1&lt;/strong&gt;：将 100 张牌分成两堆儿，每堆儿牌不一定包含 50 张牌。一堆儿 49 张牌，另一堆儿 51 张牌，也是可以的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;提示 2&lt;/strong&gt;：虽然这名同学不能辨别每张牌的反正，但是，&lt;strong&gt;这名同学可以操纵这些牌。&lt;/strong&gt;比如：他可以拿起一张牌，把它翻过来，使得如果这张牌本来为正面朝上，变成反面朝上；本来反面朝上，变成正面朝上。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;提示 3&lt;/strong&gt;：因为有提示 2，所以，最终的结果，不一定两堆儿中正面朝上的牌的数量都是 5 张牌。&lt;strong&gt;只要正面朝上的牌相等就可以。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;你知道要怎么做吗？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解析&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;可以这样操作：&lt;/p&gt;
&lt;p&gt;这名同学先把这 100 张牌&lt;strong&gt;``分成两堆儿，一堆儿中有 10 张牌，另一堆儿中有 90 张牌。具体哪张牌在哪一堆儿，无所谓。&lt;/strong&gt;反正这名同学也辨别不出来。&lt;/p&gt;
&lt;p&gt;然后，这名同学只需要&lt;strong&gt;把 10 张牌的那一堆儿中的每张牌都翻过来&lt;/strong&gt;，就好了。这么做就能得到满足题意的结果。&lt;/p&gt;
&lt;p&gt;为了证明这一点，我们可以假设：在初始分堆儿的时候，90 张牌的那一堆儿中，有 x 张牌是朝上的。那么，在 10 张牌这一堆儿中，就有 10 - x 张牌是朝上的。&lt;/p&gt;
&lt;p&gt;注意，x 也可以为 0。&lt;/p&gt;
&lt;p&gt;现在，如果将 10 张牌中的那一堆儿中，所有的牌都翻一面儿，那么，原来的 10 - x 张朝上的牌，就变成朝下了；而原来 x 张朝下的牌，就朝上了。&lt;/p&gt;
&lt;p&gt;现在，两堆儿中，都有 x 张牌朝上了。&lt;/p&gt;
&lt;p&gt;营救任务完成：）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;好啦，今天的分享到此结束。&lt;/p&gt;
&lt;p&gt;等等，我突然又想到了一个问题！&lt;/p&gt;
&lt;p&gt;今天的第一个问题是关于俄罗斯轮盘赌的。大家可以发现，在俄罗斯轮盘赌中，规则是：两人轮流把手枪&lt;strong&gt;对着自己扣动扳机。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为什么规则不能是对着对方扣动扳机呢？&lt;/p&gt;
&lt;p&gt;给大家分享一幅漫画，来自 Tom Fonder。&lt;/p&gt;
&lt;p&gt;&lt;img alt="comic" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-06-07/comic.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;论规则设计的重要性。🤔&lt;/p&gt;
&lt;p&gt;是不是很酷？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-06-07/readme.md" rel="alternate"/></entry><entry><id>2020/2020-05-31/readme.md</id><title>屠龙之术</title><updated>2020-05-31T00:00:00-07:00</updated><content>&lt;h2&gt;屠龙之术&lt;/h2&gt;
&lt;p&gt;小时候，我最喜欢的故事，是屠龙术的故事。&lt;/p&gt;
&lt;p&gt;说喜欢，或许不很恰当，或许只是觉得它神秘而有魅力。&lt;/p&gt;
&lt;p&gt;屠龙术的故事源于庄子的《列御寇》，它只有简单的一句话：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;朱泙漫学屠龙于支离益，单千金之家，三年技成而无所用其巧。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这句话的意思是：有一个叫朱泙漫的人，想学习屠龙术，于是拜师了一个叫支离益的人。为此，他耗尽千金的家产，历时三年，终于学成了屠龙之术。但是，当他身怀屠龙绝技，闯荡江湖，想祭尽天下恶龙的时候，却发现找不到一条龙的影子。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我从小就对这个故事背后的道理不感兴趣。我痴迷于我第一次听完这个故事以后，头脑中的一连串问号：&lt;/p&gt;
&lt;p&gt;朱泙漫到底是谁？支离益又是谁？他们的名字为什么这么奇怪？&lt;/p&gt;
&lt;p&gt;如果这世上本无龙，支离益为什么能教屠龙术？是因为这世上原本是有龙的，支离益曾是一名屠龙的勇士？亦或者支离益就是个骗子？&lt;/p&gt;
&lt;p&gt;而朱泙漫又为什么肯耗尽千金家产，要学习屠龙术？是不是他知道，这世界还有恶龙隐藏？&lt;/p&gt;
&lt;p&gt;朱泙漫是怎么用三年时间学成屠龙术的？当朱泙漫学成了屠龙术，去做了什么？&lt;/p&gt;
&lt;p&gt;他游历了哪里，遇到了谁？庄子的世界里，真的没有龙吗？会不会像所有的童话故事一样，朱泙漫经历了一场恶战，杀掉了这世上的最后一条恶龙，从此归隐山林，不为人知？&lt;/p&gt;
&lt;p&gt;这世界上真正的英雄不为人知，反被耻笑。直到突然有一天，又一只恶龙不知从哪里冒了出来。这似乎是很多英雄故事的套路。朱泙漫的故事是否也是如此？&lt;/p&gt;
&lt;p&gt;后来呢？后来呢？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;所有的这一切，庄子都没有告诉我们。屠龙术的故事突然开始，又戛然而止。我恨不能横跨 2500 年，亲自去问问庄子他老人家。&lt;/p&gt;
&lt;p&gt;但后人似乎并不关心这些。近乎所有的课本都告诉我们：屠龙术是指那些“深奥难学但是缺乏实用性的技巧”。我们不应该学习屠龙术。&lt;/p&gt;
&lt;p&gt;但我对此并不买账，甚至因此，我会对那些冠以“屠龙之术”的知识多看一眼。&lt;/p&gt;
&lt;p&gt;我不相信一个能讲出“北冥有鱼，其名为鲲。鲲之大，不知其几千里也；化而为鸟，其名为鹏”的老者，会讲出这么“浅显”的故事。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;后来，我认识了堂吉坷德。&lt;/p&gt;
&lt;p&gt;唐吉坷德是一名骑士。他爱读骑士小说，羡慕骑士作派，赞赏骑士精神。&lt;/p&gt;
&lt;p&gt;但他沉溺于骑士的幻想中，脱离实际，沉浸在想象的世界，无法自拔。&lt;/p&gt;
&lt;p&gt;所以他大战风车，把风车想象成巨人；所以他大战羊群，把羊群看作是一只军队。&lt;/p&gt;
&lt;p&gt;&lt;img alt="tang" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-05-31/tang.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;《唐吉坷德》是一部反骑士文学。这部小说的时代背景，是西班牙的国家实力正在下降。可是教会依然鼓吹骑士精神，捍卫封建社会。&lt;/p&gt;
&lt;p&gt;可衰败是一种趋势，继续怀着旧的理念，保持幻想，只能继续颓败，徒增笑耳。唐吉坷德，就成为了这样的一个象征。&lt;/p&gt;
&lt;p&gt;但倘若抛开这层历史意义，就会发现，堂吉诃德的故事，似乎和屠龙术有着类似的内核。&lt;/p&gt;
&lt;p&gt;时代已经改变，骑士精神是没有意义的；这就宛如，这世界并没有龙，屠龙术也没有用。&lt;/p&gt;
&lt;p&gt;可或许，在唐吉坷德眼里，骑士精神是有意义的；就好像在朱泙漫眼中，这世界还有恶龙无数。&lt;/p&gt;
&lt;p&gt;怪不得，有人也会把唐吉坷德解读成为理想主义的化身。理想和现实的差距，造就了悲剧的内核。&lt;/p&gt;
&lt;p&gt;几百年后，荒诞哲学的代表人物，写出《西西弗的神话》，《鼠疫》，《局外人》的加缪说，每读一遍《唐吉坷德》，他都会放声大哭。&lt;/p&gt;
&lt;p&gt;《唐吉坷德》不仅仅是喜剧，也是悲剧。&lt;/p&gt;
&lt;p&gt;而我借此，似乎突然理解了朱泙漫。想起他的故事，竟也会觉得有几分落寞。&lt;/p&gt;
&lt;p&gt;或许，屠龙之术，也是一个关于理想，关于现实的故事。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;长大以后，理想和现实，是每个人都绕不开的问题。&lt;/p&gt;
&lt;p&gt;或者，让我们把理想划去：现实，是每个人都绕不开的问题。&lt;/p&gt;
&lt;p&gt;理想呢？&lt;/p&gt;
&lt;p&gt;哪里还有理想。&lt;/p&gt;
&lt;p&gt;就像所有人都在告诉你，哪里还有龙？&lt;/p&gt;
&lt;p&gt;这个世界上没有龙。这个世界上没有龙。这个世界上没有龙。&lt;/p&gt;
&lt;p&gt;世界上所有的英雄，最终，不过想着柴米油盐酱醋茶。大隐隐于世。&lt;/p&gt;
&lt;p&gt;可突然有一天，我在想，&lt;strong&gt;这“世上没有龙”的想法本身，会不会就是缠绕在我们每个人心头的恶龙？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;因为“世上没有龙”，我们放下了手中的剑；&lt;/p&gt;
&lt;p&gt;因为“世上没有龙”，我们卸掉了身上的甲；&lt;/p&gt;
&lt;p&gt;曾以为世上有恶龙，我们披荆斩棘，可走着走着，突然发现，“世上没有龙”，我们就这样，停在了路中央。&lt;/p&gt;
&lt;p&gt;“世上没有龙”这条恶龙，早已经把我们打得落花流水，让我们毫无还击之力。&lt;/p&gt;
&lt;p&gt;因为“世上没有龙”，我们也早就放弃了追求屠龙之术。&lt;/p&gt;
&lt;p&gt;曾经那些闪闪发光的人，忽地就变成了凡人。没了热血，少了神通。&lt;/p&gt;
&lt;p&gt;因为“世上没有龙”。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;“世上没有龙”，就是这世上的恶龙啊。他数不清，道不尽，无处不在，无所不能。&lt;/p&gt;
&lt;p&gt;或许，朱泙漫要屠的，就是这条恶龙。&lt;/p&gt;
&lt;p&gt;或许，他师从的支离益，早已打败了自己心头的这头恶龙。&lt;/p&gt;
&lt;p&gt;或许，这才是庄子所讲的真正的故事。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我不知道，我不知道。&lt;/p&gt;
&lt;p&gt;我恨不能横跨 2500 年，亲自去问问庄子他老人家。&lt;/p&gt;
&lt;p&gt;可我回不去。&lt;/p&gt;
&lt;p&gt;但我的思绪，回到了自己的小时候。&lt;/p&gt;
&lt;p&gt;那时候的我，手里拿着树杈，身后披着塑料布。我相信自己就是仗剑的英雄。我决心屠龙。&lt;/p&gt;
&lt;p&gt;于是，我的世界没有恶龙盘旋。&lt;/p&gt;
&lt;p&gt;我是大人眼中流着鼻涕泡的小破孩儿。大人们都知道，你不过是个凡人，斗不过疾病，挨不过贫穷；但只有我自己知道，我是屠龙的勇士，无人可挡。&lt;/p&gt;
&lt;p&gt;无人可挡，无人可挡。&lt;/p&gt;
&lt;p&gt;我相信你曾经和我一样。&lt;/p&gt;
&lt;p&gt;那个曾经梦想屠龙的小破孩儿，其实早已经在那个年纪，屠掉了自己心中的恶龙；&lt;/p&gt;
&lt;p&gt;可当他慢慢长大，恶龙又重新回到了他的身边。&lt;/p&gt;
&lt;p&gt;我们每个人都一样。&lt;/p&gt;
&lt;p&gt;于是，庄子讲了一个故事：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;朱泙漫学屠龙于支离益，单千金之家，三年技成。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;是的，我把最后的“而无所用其巧”删掉了。&lt;/p&gt;
&lt;p&gt;朱泙漫有没有用到自己学到的屠龙之术，屠掉自己心中的恶龙？&lt;/p&gt;
&lt;p&gt;或许，只有他自己知道吧。&lt;/p&gt;
&lt;p&gt;说到这里，我忽然对这个故事的结局不感兴趣了。&lt;/p&gt;
&lt;p&gt;我想，我要继续捡起儿时那把落灰的屠龙刀，开始练习儿时的屠龙技了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;谨以此文，献给你我都曾拥有的那些闪亮的童年。&lt;/p&gt;
&lt;p&gt;祝所有人六一儿童节快乐。&lt;/p&gt;
&lt;p&gt;祝所有人终像自己年少所期许的那样，习得屠龙之术，斩尽天下恶龙。&lt;/p&gt;
&lt;p&gt;&lt;img alt="dragon_ball" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-05-31/dragon_ball.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-05-31/readme.md" rel="alternate"/></entry><entry><id>2020/2020-05-27/readme.md</id><title>Java 程序员，别用 Stack？！</title><updated>2020-05-27T00:00:00-07:00</updated><content>&lt;h2&gt;Java 程序员，别用 Stack？！&lt;/h2&gt;
&lt;p&gt;这篇文章的选题来源于在加拿大的 @Abby Deng 创建的 CS 战友群中的讨论。&lt;/p&gt;
&lt;p&gt;感谢 @Abby Deng 和群中各路大佬的分享：）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;在 Leetcode 的交流区，可以看到这样的一个讨论：&lt;/p&gt;
&lt;p&gt;&lt;img alt="lcdiscussion" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-05-27/lcdiscussion.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;翻译：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我不明白，为什么现在已经 2018 年了（这是 2018 年的帖子），Java 11 马上就要推出了，为什么还有人使用 Java 中的 Stack 类？&lt;/p&gt;
&lt;p&gt;作为硅谷大厂的一名面试官，我见过太多的面试候选人使用 Stack 类。从面试的角度，这非常不好（这篇帖子的后续讨论，甚至有人提到，这可能使你丢掉一个 offer）。&lt;/p&gt;
&lt;p&gt;当被问到为什么使用 Stack 类时，什么是已经弃用的方式的时候，大多数人只是回答：网上的解答是这么写的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;那么问题来了。Java 的 Stack 类到底怎么了？&lt;/p&gt;
&lt;p&gt;这篇文章，我将试图讲明白这个问题。&lt;/p&gt;
&lt;p&gt;注意：这篇文章是专门针对 Java 程序员的一个技术细节的讨论。这篇文章不是在说“栈”这种数据结构不被推荐使用，而是在说 Java 语言中，Stack 这个类不被推荐使用。&lt;/p&gt;
&lt;p&gt;因此，非 Java 程序员可以忽略这篇文章。不过，看下去，或许你能有很多意外的收获：）&lt;/p&gt;
&lt;p&gt;在阐述这个问题的过程中，我意外地发现这样一个看似简单的话题，可以涉及到的内容出奇的多。为了让整篇文章的逻辑更清晰，我将使用问答（Q&amp;amp;A）的形式组织整个内容。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Q：在 Java 语言中，不推荐使用 Stack 类？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;是的。实际上，这个不推荐不是某个技术专家或者某个企业的规范标准，而是来自 Java 官方。&lt;/p&gt;
&lt;p&gt;如果大家在 Java 中查询 Stack 的文档，就会看到如下的说明：&lt;/p&gt;
&lt;p&gt;&lt;img alt="java_stack_doc" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-05-27/java_stack_doc.png" /&gt;&lt;/p&gt;
&lt;p&gt;链接：&lt;a href="https://docs.oracle.com/javase/7/docs/api/java/util/Stack.html"&gt;https://docs.oracle.com/javase/7/docs/api/java/util/Stack.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;注意我标注的地方。&lt;/p&gt;
&lt;p&gt;简单翻译：一个更加完整，一致的，后进先出的栈相关的操作，应该由 Deque 接口提供。并且，也推荐使用 &lt;strong&gt;Deque&lt;/strong&gt; 这种数据结构（比如 ArrayDeque）来实现。&lt;/p&gt;
&lt;p&gt;因此，如果你想使用栈这种数据结构，Java 官方推荐的写法是这样的（假设容器中的类型是 Integer）：&lt;/p&gt;
&lt;p&gt;&lt;img alt="stack_code" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-05-27/stack_code.png" /&gt;&lt;/p&gt;
&lt;p&gt;下面，我们先来看看 Stack 到底怎么了？再来看看为什么使用 Deque？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q：Java 中的 Stack 类到底怎么了？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Java 中的 Stack 类，最大的问题是，继承了 Vector 这个类。根据 Java 官方文档中的类关系，如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img alt="java_stack_doc_2" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-05-27/java_stack_doc_2.png" /&gt;&lt;/p&gt;
&lt;p&gt;Vector 是什么类？简单来说，Vector 就是一个动态数组。&lt;/p&gt;
&lt;p&gt;大家应该都知道，ArrayList 也是动态数组。ArrayList 和 Vector 的区别我们后面再讨论。我们先来看一下，Stack 这个类继承 Vector，会产生什么问题？&lt;/p&gt;
&lt;p&gt;最大的问题在于，&lt;strong&gt;继承使得子类继承了父类的所有公有方法&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;而 Vector 作为动态数组，是有能力在数组中的任何位置添加或者删除元素的。因此，Stack 继承了 Vector，Stack 也有这样的能力！&lt;/p&gt;
&lt;p&gt;大家可以尝试如下的代码片段，在 Java 中是正确的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="stack_code2" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-05-27/stack_code2.png" /&gt;&lt;/p&gt;
&lt;p&gt;但很显然，我们不希望对于栈来说，可以指定在 1 这个位置插入一个 666。这一点都不 666，而是破坏了栈这种数据结构的封装。&lt;/p&gt;
&lt;p&gt;大家要知道，封装的一大意义，就是向用户屏蔽用户不需要的操作。否则，用户可能会有意无意地调用这些操作，这将成为软件工程中重要的 bug 来源。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q：问题出在哪里？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Java 中的 Stack 实现，是被业界一直认为非常糟糕的实现。实际上，它犯了面向对象设计领域的一个基本错误：&lt;strong&gt;Stack 和 Vector 之间的关系，不应该是继承关系，而应该是组合关系（composition）。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;关于继承关系和组合关系的区别，相信大家在 OOD 学习过程中，听过无数遍。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;继承关系描述的是 &lt;strong&gt;is-a&lt;/strong&gt; 的关系，即“是一个”的关系。&lt;/p&gt;
&lt;p&gt;猫是一个动物，所以猫这个类可以继承动物类；&lt;/p&gt;
&lt;p&gt;程序员是一个雇员，所以程序员这个类可以继承雇员类。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;而组合关系描述的是 &lt;strong&gt;has-a&lt;/strong&gt; 的关系，即“有一个”的关系。&lt;/p&gt;
&lt;p&gt;车里有一台发动机，所以发动机这个类和车这个类之间，应该是组合关系，即车中包含一个成员变量，是发动机这个类的对象；&lt;/p&gt;
&lt;p&gt;电脑里有 CPU，内存，显卡。所以 CPU，内存，显卡，这些类和电脑类之间的关系，都应该是组合关系。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;上面这些例子，都是我们在生活中看得到摸得到的实体，我们在做类设计的时候，通常不会犯糊涂。但遇到更抽象的对象的时候，事情可能就不一样了。&lt;/p&gt;
&lt;p&gt;比如，栈这种数据结构，和动态数组这种数据结构之间，到底应该是 is-a 的关系？还是 has-a 的关系？&lt;/p&gt;
&lt;p&gt;使用自然语言描述，听起来似乎说：栈是一个动态数组，毛病不大。但其实仔细思考，就会发现，&lt;strong&gt;栈不是一个动态数组！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;因此，很多时候，对于现实中并不存在的设计对象，人类很可能想不清楚 is-a 和 has-a 的关系。在这里，我再提供一个简单的原则：&lt;strong&gt;判断一下，如果设计成继承关系的话，我们是否有可能把子类进行向上的父类转型？如果可能，则应该设计成继承关系，否则应该是组合关系。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;换句话说，在这个例子中，我们是否可能将栈当做一个动态数组使用？答案是不可能。所以，栈和动态数组之间的关系不应该是继承关系。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;实际上，在真实的世界中，真正的继承关系是很少的。真正的继承关系中，父类大多是一个很抽象的概念，比如“人”，比如“动物”。但是我们设计的大多数类，不是这么抽象的概念。整体来说，组成关系更常用。&lt;/p&gt;
&lt;p&gt;这个概念不是我说的，而是业界公认的 OOP 设计原则。叫做：&lt;strong&gt;Composition over inheritance。&lt;/strong&gt;如果用中文说，就是&lt;strong&gt;应该优先考虑组合关系。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在 OOP 设计中，很多人会更倾向于使用继承关系，毕竟继承关系看起来更“面向对象”一些，也是面向对象讲解的重点。但是，在具体实践中，组合更常见！说得再绝对一些：&lt;strong&gt;多用组合，少用继承！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;大名鼎鼎的 Design Patterns 中，也强调了这个原则。&lt;/p&gt;
&lt;p&gt;&lt;img alt="design_patterns" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-05-27/design_patterns.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;如果大家在网上搜索 Composition over inheritance，会看到很多相关讨论。有兴趣的同学，也可以参考维基百科的这个词条：&lt;/p&gt;
&lt;p&gt;&lt;img alt="wiki" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-05-27/wiki.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;所以，一个更好的，基于 Vector 的栈的实现，应该是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="stack_code3" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-05-27/stack_code3.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q: Java 官方不知道这个 Stack 类的实现不好吗？为什么不改？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Java 官方当然知道这个实现不好。但是，因为要保持兼容性（&lt;strong&gt;backward compatibility&lt;/strong&gt;），对于已经正式发布的代码，Java 官方不能做接口设计层面的修改。否则，使用老版本 Java 的程序，将在新的 Java 环境下无法执行，这是 Java 官方不愿意看到的。&lt;/p&gt;
&lt;p&gt;Java 官方可以做到的是，将这个类标志成“弃用”（deprecated），以让新版本的开发者不再允许使用这个类，但老版本的程序，还能继续执行。&lt;/p&gt;
&lt;p&gt;但是，这么多年了，Java 官方也并没有将 Stack 标为“弃用”，只是在文档上注明“不建议使用”。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q：为什么使用接口？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下面，我们再来看一下 Java 官方推荐的写法：使用 Deque 接口：&lt;/p&gt;
&lt;p&gt;&lt;img alt="stack_code" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-05-27/stack_code.png" /&gt;&lt;/p&gt;
&lt;p&gt;首先，我们简单聊一下接口这个话题。&lt;/p&gt;
&lt;p&gt;接口在 OOP 设计中，也是非常重要的概念。并且，在近些年，变得越来越重要。甚至发展出了“面向接口的编程”这一思想（Interface-based programming）。&lt;/p&gt;
&lt;p&gt;对于这么大的一个话题，这篇文章篇幅限制，不做过多具体探讨。如果有兴趣的同学，可以搜索一下。维基百科也有这个词条。&lt;/p&gt;
&lt;p&gt;&lt;img alt="interface" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-05-27/interface.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;苹果公司的最新编程语言 Swift，自 2014 年面世，一个主打的特性，叫做“面向协议”。其实，这里的“面向协议”，和“面向接口”，在我看来是很相近的意思。我相信做苹果开发的同学对此不会陌生。&lt;/p&gt;
&lt;p&gt;&lt;img alt="swift" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-05-27/swift.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;接口最大的意义之一，就是做了更高层次的抽象：只定义了一个类应该满足哪些方法，而对具体的实现方式不做限制。&lt;/p&gt;
&lt;p&gt;比如，我们都知道，在 Java 语言中，Queue 就是一个接口。我们想实现一个队列，可以这么写：&lt;/p&gt;
&lt;p&gt;&lt;img alt="queue" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-05-27/queue.png" /&gt;&lt;/p&gt;
&lt;p&gt;在上述实现中，q1 和 q2 的底层具体实现不同，一个是 LinkedList，一个是 ArrayDeque。但是，从用户的角度看，q1 和 q2 是一致的：都是一个队列，只能执行队列规定的方法。&lt;/p&gt;
&lt;p&gt;这样做，将“队列”这样一个概念，和底层数据结构的具体实现——LinkedList 或者 ArrayDeque &lt;strong&gt;解耦&lt;/strong&gt;了：&lt;/p&gt;
&lt;p&gt;底层开发人员可以随意维护自己的 LinkedList 类或者 ArrayDeque 类，只要他们满足 Queue 接口规定的规范；&lt;/p&gt;
&lt;p&gt;开发者可以选择合适的数据结构来定义 Queue；&lt;/p&gt;
&lt;p&gt;而 Queue 的更上层使用者，无需知道 q1 或者 q2 的实现细节，从他们的角度看，只要能调用 Queue 的相关方法：peek, poll, offer 等等，来满足上层的业务需求，就好了。&lt;/p&gt;
&lt;p&gt;而且这样做，完美解决了之前说的，继承关系把父类的所有方法都拿过来的问题。接口的设计相当于做了访问限制。LinkedList 中有很多方法，但是，当我们使用 LinkedList 实现 Queue 接口的时候，用户只能调用 Queue 中定义的方法。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;从这个角度，我们也能看出 Stack 设计的另一个不合理之处：Stack 和 Queue 同样作为一种特殊的线性数据结构，都应该只是规定一系列操作的接口而已，具体的底层实现，由开发者再做选择。&lt;/p&gt;
&lt;p&gt;但因为 Stack 做成了一个类，继承了 Vector，也就只能基于 Vector 这一种固定的数据结构了。&lt;/p&gt;
&lt;p&gt;为了修正这个问题，Java 官方推出了 Deque 接口，作为实现栈的接口。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q：什么是 Deque 接口？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Deque 是双端队列的意思。所谓的双端队列，就是能在线性数据结构的两段，进行插入和删除操作。&lt;/p&gt;
&lt;p&gt;大家可以想象，由于 Stack 的定义是在同一端进，同一端出。所以，如果 Deque 可以满足在两段进行插入和删除，自然也能在同一端进行插入和删除，也就是可以以此为基础，做成一个 stack。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q：等等！这里有问题！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;很多同学应该能马上反应过来了。这里有问题！&lt;/p&gt;
&lt;p&gt;因为我们根据 Java 官方推荐的方法声明的这个 stack，虽然变量名称是 stack，但它实际上是一个 deque。这就意味着，这个 stack，可以在两段做插入和删除操作！但是，真正的栈，只能在同一端做插入和删除操作！&lt;/p&gt;
&lt;p&gt;这难道不是重蹈了 Stack 这个类的覆辙？毕竟，我们最开始分析，就说 Stack 这个类的一大问题，是继承了 Vector 这个类的若干我们不需要的方法，破坏了封装性，比如在任何一个位置插入一个元素。现在这个基于 Deque 接口的 stack，依然有我们不需要的方法啊！&lt;/p&gt;
&lt;p&gt;没错！这就是 Java 的历史遗留问题了。&lt;strong&gt;这个问题至此已经无解了。&lt;/strong&gt;因为 Stack 这个关键字被占据了。Java 官方不想推出一个叫做 RealStack 或者 CorrectStack 一类的接口名称。所以，按照 Java 官方的推荐所建立的这个 stack，依然不完美。&lt;/p&gt;
&lt;p&gt;但至今为止，Java 暂时只是做到这个份儿上。&lt;/p&gt;
&lt;p&gt;或许，Oracle 少打一些官司，多研究一下如何处理这些历史遗留问题，Java 能更好吧。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;所以，在实际的工程应用上，有人也并不建议使用 Deque 做为 stack 的实现，而是自己再做一层封装。&lt;/p&gt;
&lt;p&gt;比如，大家可以看一下这篇探讨 Stack 和 Deque 的文章。&lt;/p&gt;
&lt;p&gt;&lt;img alt="no_deque" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-05-27/no_deque.png" /&gt;&lt;/p&gt;
&lt;p&gt;其中，第一个副标题，就是 Don't Use Deque。翻译过来就是，不要使用 Deque！&lt;/p&gt;
&lt;p&gt;这篇文章的核心就是：虽然 Java 官方推荐使用 Deque 接口实现 stack，但是这样的 stack 也破坏了封装性，并不安全。&lt;/p&gt;
&lt;p&gt;怎么办？很简单，自己再封装一层，做一个只限制能从一段做插入删除的，真正的栈。&lt;/p&gt;
&lt;p&gt;这个代码其实很简单，因为这本质是一个设计问题，而不是逻辑问题。有兴趣的同学可以看一下这篇文章：&lt;a href="http://baddotrobot.com/blog/2013/01/10/stack-vs-deque/"&gt;http://baddotrobot.com/blog/2013/01/10/stack-vs-deque/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;当然了，在实际的算法面试中，可能面试官的关注点并不是这种设计问题，所以使用 Java 官方文档建议的方式来创建栈，并且和面试官讲清楚，我认为就足够了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q：链表呢？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;再说一个小问题。&lt;/p&gt;
&lt;p&gt;大家可以看到，Java 官方推荐的创建栈的方式，使用了 Deque 接口。并且，在底层实现上，使用了 ArrayDeque，也就是基于动态数组的实现。为什么？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;大家应该都知道，动态数组是可以进行扩容操作的。在触发扩容的时候，时间复杂度是 O(n) 的，但整体平均时间复杂度（Amortized Time）是 O(1)。&lt;/p&gt;
&lt;p&gt;但是，基于链表的实现，不会牵扯到扩容问题，因此，每一次添加操作，从时间复杂度的角度，都是 O(1) 的。&lt;/p&gt;
&lt;p&gt;虽然如此，可是实际上，&lt;strong&gt;当数据量达到一定程度的时候，链表的性能是远远低于动态数组的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这是因为，对于链表来说，每添加一个元素，都需要重新创建一个 Node 类的对象，也就是都需要进行一次 new 的内存操作。而&lt;strong&gt;对内存的操作，是非常慢的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;举个例子，对于队列，假设我们实验使用 ArrayDeque（动态数组）和 LinkedList（链表）作为底层的数据结构，进行 1000 万次入队操作。并且测试他们的性能。代码如下：&lt;/p&gt;
&lt;p&gt;&lt;img alt="queue_test" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-05-27/queue_test.png" /&gt;&lt;/p&gt;
&lt;p&gt;在我的计算机上，结果是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="queue_test2" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-05-27/queue_test2.png" /&gt;&lt;/p&gt;
&lt;p&gt;也就是使用 LinkedList，会比使用 ArrayDeque 慢 5 倍以上。&lt;/p&gt;
&lt;p&gt;因此，甚至在实践中，很多时候，尤其是面对大规模数据的时候，不应该使用链表！&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q：那 Vector 呢？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;大家可以看到，上面的讨论，我们已经完全扔掉 Java 中的 Vector 这个类了。&lt;/p&gt;
&lt;p&gt;实际上，Vector 这个类不仅仅是简单的一个动态数组而已，而更进一步，保证了线程安全。&lt;/p&gt;
&lt;p&gt;因为要保证线程安全，所以 Vector 实际上效率也并不高。&lt;/p&gt;
&lt;p&gt;Java 官方的 Vector 文档中明确指出了：如果你的应用场景不需要线程安全的特性，那么对于动态数组，应该使用 ArrayList。请参考下图我标注的文字：&lt;/p&gt;
&lt;p&gt;&lt;img alt="java_vector_doc" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-05-27/java_vector_doc.png" /&gt;&lt;/p&gt;
&lt;p&gt;但实际上，即使需要并发编程，自 Java 5 以后，也推荐使用 java.util.concurrent 包。&lt;/p&gt;
&lt;p&gt;不过，这涉及到并发编程的问题了。这是一个很大的问题，几句话讲不清楚。如果大家对并发编程感兴趣，可以在网上找更多相关资料.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;好了。至此，这篇文章的主旨已经介绍完毕了。一个小小的 Java 中不建议使用 Stack 类。我也没有想到会写这么长。&lt;/p&gt;
&lt;p&gt;最后，关于在面试中，如果有同学需要使用“栈”这种数据结构，选择 Stack 这个类，面试官会怎么看？我在我的知识星球上做了一个小调查。其中 @lk 同学的看法，我觉得非常公允。&lt;/p&gt;
&lt;p&gt;&lt;img alt="star" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-05-27/star.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;从我的角度，如果我考查的是算法逻辑，我不太会关注语言实现细节，而会更关注解决问题的逻辑思路；&lt;/p&gt;
&lt;p&gt;当然，如果面试官希望考察的就是 Java 语言功底，尤其是面试 Java 高级工程师，希望看出来对 Java 语言的理解程度。或许，这是一个很好的面试问题：&lt;strong&gt;Java 语言中的 Stack 类，有什么问题？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;毕竟，通过这么一个看似简单的问题，能引申出来这么多东西：）&lt;/p&gt;
&lt;p&gt;如果这个问题以后流行起来，大家别忘了这篇文章：）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-05-27/readme.md" rel="alternate"/></entry><entry><id>2020/2020-05-24/readme.md</id><title>学习乘法不能帮助我们理解质能方程</title><updated>2020-05-24T00:00:00-07:00</updated><content>&lt;h2&gt;学习乘法不能帮助我们理解质能方程&lt;/h2&gt;
&lt;p&gt;这是在我的知识星球上，一个同学问我的问题。&lt;/p&gt;
&lt;p&gt;波波老师您好，我是去年机械专业硕士毕业的。研究生期间我逐渐发现其实对机械专业并不特别喜欢，但是很喜欢图形学，决定把这个方向发展为我的特长。&lt;/p&gt;
&lt;p&gt;经过我使用 DirectX 和 OpenGL 的情况来看，我发现线性代数特别重要。请问您有没有针对图形学的线代资料推荐？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;bobo 老师的回答：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;关于线性代数，我推荐两本教材。&lt;/p&gt;
&lt;p&gt;一本叫《Introduction to Linear Algebra》，最新版是第五版。中国引入了这本教材，但据说没有进行中文翻译。封面上就叫《线性代数》。&lt;/p&gt;
&lt;p&gt;&lt;img alt="book1" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-05-24/book1.png" /&gt;&lt;/p&gt;
&lt;p&gt;这本教材的作者是 MIT 大名鼎鼎的 Gilbert Strang。去年被炒得沸沸扬扬的清华大学把线数教材换成了英文版，用得就是这本教材；前一阵子沸沸扬扬的 86 岁老爷子还录网课，说得就是这个作者。&lt;/p&gt;
&lt;p&gt;如果你对这两条新闻不是特别熟悉，可以搜一下。关键词：“清华把线性代数教材换成英文版”；“86岁还在录网课”。&lt;/p&gt;
&lt;p&gt;&lt;img alt="gilbert" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-05-24/gilbert.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Gilbert Strang 老爷子在 MIT 的线数公开课很有名，相信很多同学都看过。如果没看过的话，推荐看一下。&lt;/p&gt;
&lt;p&gt;MIT 的官方地址在这里：&lt;a href="https://ocw.mit.edu/courses/mathematics/18-06-linear-algebra-spring-2010/index.htm"&gt;https://ocw.mit.edu/courses/mathematics/18-06-linear-algebra-spring-2010/index.htm&lt;/a&gt;；&lt;/p&gt;
&lt;p&gt;2020 年更新的视频内容在这里：&lt;a href="https://ocw.mit.edu/resources/res-18-010-a-2020-vision-of-linear-algebra-spring-2020/videos/"&gt;https://ocw.mit.edu/resources/res-18-010-a-2020-vision-of-linear-algebra-spring-2020/videos/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果访问外网有困难，可以在 B 站搜索一下，应该很好找到。&lt;/p&gt;
&lt;p&gt;他的课程基本是跟着这本教材走的，但是远不如教材详细，我认为可以看作是教材的一份很好的补充说明。也可以据此体会一下国外上课的风格：平时主要靠自学，老师上课就是点拨一下：）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;另一本叫《Linear Algebra and Its Applications》，最新版是第五版。有中文版，叫《线性代数及其应用》。听名字，这本书似乎更强调应用，但其实 Gilbert 老爷子的书也有专门一章讲应用。&lt;/p&gt;
&lt;p&gt;&lt;img alt="book2" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-05-24/book2.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;值得一提的是：Gilbert 的书有专门一小节介绍线性代数在图形学上的应用；《线性代数及其应用》还有专门一章介绍向量空间上的几何应用。这些内容对图形学的学习很有帮助。&lt;/p&gt;
&lt;p&gt;但要说专门针对图形学的线性代数资料，有，就是几页纸，我相信你觉得没什么用。一定要找的话，可以在 google 搜索 &lt;strong&gt;linear algebra in graphics&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;实际上，这里可能有一个重要的学习误区，也是这篇文章我想聊的重点，大家可以再审视一下自己学习的过程，是否有这个问题。&lt;/p&gt;
&lt;p&gt;很多同学看图形学也好，机器学习也罢，看到一大堆线性代数的公式，头就大了，觉得自己的线性代数不够好，就想去补线性代数。但真的补线性代数的时候，发现其实一般的线性代数课本就是那些内容，自己似乎好像又都了解。&lt;/p&gt;
&lt;p&gt;当然，如果你的数学真的不扎实，连矩阵是怎么回事儿都不明白，那学习线性代数无可厚非。但我的经验是：&lt;strong&gt;很多人的问题根本不在数学上。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我经常举的一个例子是：E=mc^2，这个式子大家都懂吗？&lt;/p&gt;
&lt;p&gt;&lt;img alt="einstein" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-05-24/einstein.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;这个式子就是著名的质能方程式。反正我是不懂这个式子的。&lt;/p&gt;
&lt;p&gt;不懂怎么办？难道去学习乘法和乘方运算吗？当然不是。乘法和乘方运算我是懂的，但&lt;strong&gt;阻止我理解这个式子的瓶颈，是物理学。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;同理，在图形学或者机器学习领域，很多时候，我们看到一个式子，阻止我们理解这个式子的关键在于：式子中的每一个变量，到底和这个领域里的知识是怎么对应的？为什么可以这么对应？为什么这么算就能得到我们想要的结果？等等等等，而根本不是数学本身。&lt;/p&gt;
&lt;p&gt;这些问题，是补数学解决不了的。这就好比我们再怎么学习乘法和乘方运算，还是无法理解 E=mc^2 一样。&lt;/p&gt;
&lt;p&gt;怎么办？&lt;strong&gt;必须和这个领域死磕。&lt;/strong&gt;很多时候，我们要去和图形学较劲，要去和机器学习较劲，而不是回头拿起本科的数学书重新看数学。&lt;/p&gt;
&lt;p&gt;如果真的能把问题规约成就是一个纯粹的数学问题，其实从某个角度看，事情反而变简单了，就去有针对性地补这方面的数学就好了。甚至在一些情况下，不补都可以，把它当作一个结论就好了。反正大多数人也根本不知道 PI 是怎么算出来的。&lt;/p&gt;
&lt;p&gt;&lt;img alt="pi" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-05-24/pi.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我的观察：有些时候，很多同学只是缺乏耐心而已，或者对数学公式有畏难情绪。看到一大堆式子，头就大了，就不想深究下去了。很多同学总以为数学好到一定程度，看书上或者论文里的式子，就应该瞬间理解了。&lt;strong&gt;实际不是这样的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;面对一个公式，如果大家能静下心来，仔细去理解每个变量到底在表达什么？每个计算的结果到底是什么意义？对于矩阵，实际使用小规模的数据试试看？对于抽象的 n 维空间，用 2 维空间或者 3 维空间的例子试验一下，仔细研究一下式子的每一步到底在计算什么？其实很多同学完全可以搞明白这些公式在说什么。&lt;/p&gt;
&lt;p&gt;更重要的是，这本身，也是在学习，复习，应用数学的过程！&lt;/p&gt;
&lt;p&gt;很多同学都问我，觉得学习数学好枯燥，干巴巴的太抽象，学了也觉得用不上。什么教材能让我觉得自己学习的数学是有用的？&lt;/p&gt;
&lt;p&gt;上面推荐的两本线性代数教材都是好教材。但是，&lt;strong&gt;如果真的想应用数学，其实不应该找数学教材。&lt;/strong&gt;因为数学只是一个工具。去学图形学，去学机器学习，就是在应用数学！&lt;/p&gt;
&lt;p&gt;这有点儿像如果想真实地应用算法，就不要再去看讲初级算法的教材了。哪怕是《算法导论》，也是一个导论而已，它不是应用。&lt;strong&gt;去看操作系统，去看编译原理，到处都是算法和数据结构的应用！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;之前，我的公众号还写过一篇文章，叫&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-04-26/"&gt;《觉得自己基础差，该不该系统补数学？》&lt;/a&gt;。文章中有句话，是：我认为和算法本身去较劲，比去学习数学，更能提升算法水平。&lt;/p&gt;
&lt;p&gt;把“算法”替换成“图形学”，是同样适用的：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;和图形学本身去较劲，比去学习数学，更能提升图形学水平。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我没有说所有同学都不应该补数学。只是提出一个角度，大家可以再根据自己的实际情况，有针对性地反思一下，自己的学习计划是否合理。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-05-24/readme.md" rel="alternate"/></entry><entry><id>2020/2020-05-20/readme.md</id><title>跟什么样的人</title><updated>2020-05-20T00:00:00-07:00</updated><content>&lt;h2&gt;跟什么样的人&lt;/h2&gt;
&lt;p&gt;前几天，和一个同学电话聊了一个小时，很有感触。&lt;/p&gt;
&lt;p&gt;期间，我们谈到一个问题，就是职场上，要跟什么样的人。&lt;/p&gt;
&lt;p&gt;很多初入职场的人，大多愿意跟技术大牛。这本无可厚非。但如果在职场混上十年，多跟几个 leader，就会明白，很多时候，这并非是最好的选择。&lt;/p&gt;
&lt;p&gt;技术大牛一定能让你的技术提高最快吗？有的时候是，但有的时候并非如此。很多技术大牛会习惯性地遇到具体的技术问题，自己三五下就解决了，而忽略掉让团队成员进步成长的机会。&lt;/p&gt;
&lt;p&gt;但是好的 leader，是会考虑到团队成长的。遇到一个问题，他会或明或暗地让整个团队去思考：这里是不是有一个问题？我们是不是要解决它？我们怎么解决它？解决方案可能带来的结果是怎样的？有没有副作用？&lt;/p&gt;
&lt;p&gt;这还只是从技术问题的角度讨论。站在一个更高的层面，一个好的 leader，是会放权的，也是会分权的。他会鼓励团队的每个成员主动冒泡，承担责任。&lt;/p&gt;
&lt;p&gt;不要小瞧承担责任，责任是最好的成长基石。&lt;strong&gt;责任意味着压力，压力意味着快速成长。&lt;/strong&gt;其实，大多数人都是在“责任”的督促下，逐渐成长起来，最后能够独当一面的。&lt;/p&gt;
&lt;p&gt;但是，这不意味着在出问题时，让团队成员背锅。好的 leader 会及时反省自己的管理失误，保护自己的团队成员。&lt;/p&gt;
&lt;p&gt;好的 leader 还有很多特质和行动准则。他们能很好地平衡人事问题，处理企业内部资源分配问题，等等等等。这些问题很多时候涉及到所谓的“公平”。&lt;/p&gt;
&lt;p&gt;成年人都明白：真实的世界没有绝对的公平。但好的 leader 能够通过沟通，让团队成员接受“暂时的不公平”，同时去尽力争取“更多的公平”。&lt;/p&gt;
&lt;p&gt;这些，都是和技术高低没有关系的，但这些问题，在一个团队中，都比技术问题重要很多。&lt;/p&gt;
&lt;p&gt;说得洋气点儿，这叫做会 &lt;strong&gt;coaching&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;久而久之，在这样的 leader 的带领下，整个团队才能真正成长，才能拥有较为一致的行动方向和思考方向。即便有争执，价值观也是一致的。&lt;/p&gt;
&lt;p&gt;不要小瞧价值观的一致，在关键时刻，价值观的分歧可以让一个团队分崩离析；在困难时期，价值观的一致也可以让一个团队逆流而上。&lt;/p&gt;
&lt;p&gt;如果有一个技术牛同时又懂 coaching 的 leader，那再好不过了。否则，两者取其一的话，我认为，&lt;strong&gt;会 coaching 的 leader，是更好的选择。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;因为他能真正带你成长。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;不过，很多同学可能就有疑问了，怎么找到这样的好 leader 呢？&lt;/p&gt;
&lt;p&gt;很可惜，&lt;strong&gt;好的 leader 是可遇不可求的。&lt;/strong&gt;整体而言，越好的企业，leader 越大概率的“不会太差”。因为大企业对管理的认识更深刻，实践也更多，无论是管理体系，还是员工的成长体系，都更完善。&lt;/p&gt;
&lt;p&gt;但即便如此，大企业也有恶心的 leader，恶心的事儿。毕竟，&lt;strong&gt;有人的地方，就有江湖。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我无法告诉大家如何找到好的 leader，但是，当大家有选择的时候，这是一个重要的选择标准。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;很多时候，知道如何更好地选择，拥有一个自己的判断标准和选择框架，是很重要的事情。&lt;/strong&gt;因为，任何人的一生，都无时无刻不面对着选择。&lt;/p&gt;
&lt;p&gt;如果我们无法找到“好”的，那么退而求其次，至少应该能够识别“差”的，扔掉“差”的。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;即使你一直遇不到好的 leader，但是，所有人在职场前进的过程中，都早晚会成为 leader 的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;或许，我们至少可以选择：让自己成为一个更好的 leader。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;之前写过一篇文章，叫&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-02-18/"&gt;《从技术，到管理》&lt;/a&gt;。有兴趣的同学，也可以随便看看。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-05-20/readme.md" rel="alternate"/></entry><entry><id>2020/2020-05-16/readme.md</id><title>土豆悖论</title><updated>2020-05-16T00:00:00-07:00</updated><content>&lt;h2&gt;土豆悖论&lt;/h2&gt;
&lt;p&gt;你知道什么是土豆悖论吗？&lt;/p&gt;
&lt;p&gt;土豆悖论来源于这样一个简单的数学问题：&lt;/p&gt;
&lt;p&gt;你有 100 公斤的土豆，经过测量，这些土豆中含水量是 99%。你把他们放在阳台上，一晚过后，再测量，这些土豆的含水量变成了 98%。也就是土豆的含水量降低了 1%。&lt;/p&gt;
&lt;p&gt;问：现在，这些土豆的总重量是多少？&lt;/p&gt;
&lt;p&gt;严格的计算可能需要纸和笔。在这里，为了测试大家对数字的直觉，我给出几个选项，大家可以试试，不经过计算，选择一个你认为最接近的正确答案是多少？&lt;/p&gt;
&lt;p&gt;A. 99 公斤&lt;/p&gt;
&lt;p&gt;B. 98 公斤&lt;/p&gt;
&lt;p&gt;C. 50 公斤&lt;/p&gt;
&lt;p&gt;&lt;img alt="potato" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-05-16/potato.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;大多数第一次接触这个问题的童鞋，都会因为正确答案而感到惊讶。因为正确答案是：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;50 公斤！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;你猜对了吗？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;要想计算这个问题，也非常简单，只需要最初等的解方程就可以。&lt;/p&gt;
&lt;p&gt;初始的时候，100 公斤的土豆中，含有 99% 的水分，也就是有 99 公斤的水分。在阳台放一晚上以后，只含有 98% 的水分，也就是有一些水分被蒸发了。我们设蒸发的水分质量是 x 公斤。&lt;/p&gt;
&lt;p&gt;所以，一晚上以后，剩下的水分就是 99 - x 公斤。&lt;/p&gt;
&lt;p&gt;而现在，所有的土豆的质量，也不再是 100 公斤了，而变成了 100 - x 公斤。&lt;/p&gt;
&lt;p&gt;现在，这 100 - x 公斤的土豆中，水分是 98%，我们就可以列出式子：&lt;/p&gt;
&lt;p&gt;&lt;img alt="f1" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-05-16/f1.png" /&gt;&lt;/p&gt;
&lt;p&gt;当然，98% 就是 0.98，为了计算方便，我们在方程中使用 0.98。&lt;/p&gt;
&lt;p&gt;&lt;img alt="f2" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-05-16/f2.png" /&gt;&lt;/p&gt;
&lt;p&gt;下面就是一个标准的解方程问题了，小学生都会算：&lt;/p&gt;
&lt;p&gt;&lt;img alt="f3" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-05-16/f3.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;这个方程的解是 50。换句话说，一晚上要蒸发掉 50 公斤的水，也就是所有土豆重量的一半，才能让土豆的水分含量从 99%，下降到 98%。此时，剩余的土豆，从最初的 100 公斤，变成了只有 50 公斤了。&lt;/p&gt;
&lt;p&gt;怎么样？是不是和你的直觉不相符？&lt;/p&gt;
&lt;p&gt;这就是&lt;strong&gt;土豆悖论&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;土豆悖论本身并不是一个可以推导出相悖结论的悖论，而是这个问题的解，和大多数人的直觉是相悖的。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;土豆悖论说明了什么？&lt;/p&gt;
&lt;p&gt;首先，就是人类对数字的感知，在很多时候，都是不准确的。尤其是当涉及到百分比的时候。&lt;/p&gt;
&lt;p&gt;在统计学上，大名鼎鼎的&lt;strong&gt;辛普森悖论&lt;/strong&gt;，在本质上也是这样一个和百分比相关的悖论。因为辛普森悖论太有名了，有很多文章介绍，所以我就不专门写了，有兴趣的同学，可以在互联网上搜索一下。&lt;/p&gt;
&lt;p&gt;所以，当我们关注一个事物的时候，一定&lt;strong&gt;不能仅仅关注百分比，而要看一下百分比背后的真实数字到底是多少。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;比如，程序员在做性能优化的时候，可能会通过一些性能分析工具，看到不同的函数（或者子过程）在每次请求的运行过程中消耗的时间占比。&lt;/p&gt;
&lt;p&gt;假如有一个函数 f()，在整个过程中，消耗的时间高达 99%，那么显然，我们要优化一下这个 f() 了。&lt;/p&gt;
&lt;p&gt;可如果大家通过努力，绞尽脑汁，发现只能把 f() 消耗的时间占比优化到 98%，看起来似乎只有 1% 的优化，但不要气馁。因为，土豆悖论告诉了我们：你已经将整个程序的执行时间，优化了整整一倍。&lt;/p&gt;
&lt;p&gt;因此，我们不能紧紧盯着百分比看，而一定要看实际的执行时间，到底有了怎样的变化。&lt;/p&gt;
&lt;p&gt;当然，可能会有一些竞争对手来攻击我们。他们会说，这没什么了不起，因为这个工作只将 f() 优化了 1%。此时，请毫不犹豫地告诉他们，什么是土豆悖论。&lt;/p&gt;
&lt;p&gt;这些人，不是傻，就是坏。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;另一方面，土豆悖论告诉了我们：挤掉水分是多么地困难。&lt;/p&gt;
&lt;p&gt;让水分含有量下降 1%，竟然意味着要挤掉占总质量一半的水分！&lt;/p&gt;
&lt;p&gt;实际上，我们可以再构造这样一个问题：100 公斤土豆，其中水分占比是 99.9999%，在外面晾一晚上，让水分变成 99.9998%。也就是，让水分含有量下降 0.0001 %。问，剩下的土豆质量是多少？&lt;/p&gt;
&lt;p&gt;相信通过上面的分析，大家都会计算了，这还是一个初等解方程的问题。方法和上面一样，只是具体数字有所替换：&lt;/p&gt;
&lt;p&gt;&lt;img alt="f4" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-05-16/f4.png" /&gt;&lt;/p&gt;
&lt;p&gt;是的，最终的答案还是 50！&lt;/p&gt;
&lt;p&gt;这一次，为了让水分含有量下降 0.0001%，我们也要挤掉一半质量，即 50 公斤的水分！&lt;/p&gt;
&lt;p&gt;为什么？因为从数学的角度看，干货的含量太少了。这两组数据的共同点其实是：整个过程，干货占比都翻倍了，只不过一个是从 1% 的干货，变成 2% 的干货；一个是从 0.0001% 的干货，变成 0.0002% 的干货。&lt;/p&gt;
&lt;p&gt;当干货占比很少的时候，增加一点点的干货，减少一点点的水分，都意味着干货占比的增倍。这也就意味着，我们需要挤掉大量的水分——比大多数人想象的多得多的水分。&lt;/p&gt;
&lt;p&gt;但是，如果干货占比本身很大，事情就不一样了。&lt;/p&gt;
&lt;p&gt;大家可以计算一下，如果 100 公斤土豆，其中水分占比是 50%，也就是干货占比也是 50%，干货占比其实似乎也并没有很大。但此时，让水分的含有量下降 1%，也就是让水分占比达到 49%，对应挤掉水分的重量是多少？&lt;/p&gt;
&lt;p&gt;答案是：只需要挤掉 1.96 公斤左右的水分就可以了。计算过程如下：&lt;/p&gt;
&lt;p&gt;&lt;img alt="f5" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-05-16/f5.png" /&gt;&lt;/p&gt;
&lt;p&gt;有兴趣的童鞋可以试一试，如果初始水分的占比更少，干货的占比更高，为了让水分含有量下降 1%，我们实际要挤掉的水分的质量会更少。&lt;/p&gt;
&lt;p&gt;结论：&lt;strong&gt;学习也好，做人也罢，不要太水，多关注干货。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;否则，等真地想要挤掉水分的时候，会很费劲。可能比大家想象的，要费尽得多。&lt;/p&gt;
&lt;p&gt;不要落进&lt;strong&gt;土豆悖论&lt;/strong&gt;的陷阱。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-05-16/readme.md" rel="alternate"/></entry><entry><id>2020/2020-05-10/readme.md</id><title>测试思维</title><updated>2020-05-10T00:00:00-07:00</updated><content>&lt;h2&gt;测试思维&lt;/h2&gt;
&lt;p&gt;这是在我的知识星球上，一个同学问我的问题。&lt;/p&gt;
&lt;p&gt;bobo 老师，最近在看一些代码的时候遇到一个问题：要去哪里获取全面的测试用例呢？&lt;/p&gt;
&lt;p&gt;那么多算法，那么多功能，自己实现之后，如果和模板代码不同，要怎么证明自己写的是正确的呢？不知道老师平时是如何解决这个问题的？&lt;/p&gt;
&lt;p&gt;谢谢老师。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;bobo 老师的回答：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果是专门的领域，都有专门的测试数据库。比如人脸识别数据库，手写识别数据库，等等等等。&lt;/p&gt;
&lt;p&gt;在这个公众号，我在&lt;a href="https://mp.weixin.qq.com/s?__biz=MzU4NTIxODYwMQ==&amp;amp;mid=2247484963&amp;amp;idx=2&amp;amp;sn=e7e5e2d0c3579a1a24f921141936784c&amp;amp;chksm=fd8ca965cafb2073bc3a444d2ab87bfa272dd2273e68f6758dac9911fb3dc9abe76f66c52491&amp;amp;token=52272915&amp;amp;lang=zh_CN#rd"&gt;【是不是很酷】开源资源 分享 | 第 4 期&lt;/a&gt;中介绍过一个这类机器学习领域测试用例的下载站：&lt;a href="http://academictorrents.com/"&gt;http://academictorrents.com/&lt;/a&gt;；&lt;/p&gt;
&lt;p&gt;另外一个很重要的数据集的下载站是 OpenML：&lt;a href="https://www.openml.org/"&gt;https://www.openml.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="openml" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-05-10/openml.png" /&gt;&lt;/p&gt;
&lt;p&gt;Google 也有一个专门的数据集搜索引擎：&lt;a href="https://datasetsearch.research.google.com/"&gt;https://datasetsearch.research.google.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="google" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-05-10/google.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;但这些都不是这篇文章的重点。&lt;/p&gt;
&lt;p&gt;重点是，如果你说的是我们在平时开发过程中写的普通模块或者算法的测试用例，那对不起了，没有。&lt;/p&gt;
&lt;p&gt;如果任何一个算法或者模块都能直接找到现成的完整测试用例的话，测试工程师这个岗位就没有意义了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;实际上，设计测试用例本身，也是每个开发人员都需要的素质。尤其是边界条件测试。因为如果开发者都不知道自己写的模块边界在哪里的话，也就不可能在程序中正确地处理考虑这些边界了。&lt;/p&gt;
&lt;p&gt;大多数算法比赛，如果程序出错，也不会告诉你错误用例。这本质其实也是在考察参赛者的测试功底；在平时训练的时候，大家也需要锻炼自己的测试能力。&lt;/p&gt;
&lt;p&gt;这并非没有道理，因为在很多企业或者项目组内部，都是做&lt;strong&gt;测试驱动的开发&lt;/strong&gt;的。大家可以搜索一下这种开发模式，英文名称是 Test-Driven Development，缩写是 &lt;strong&gt;TDD&lt;/strong&gt;。在我看来，是非常重要的一种开发模式。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;除去边界条件测试，可能需要我们开发者进行手动设计以外（因为边界条件测试是具体问题相关的，需要具体问题具体分析），一个最简单的测试方式，就是根据问题的约束条件，随机生成数据做测试。&lt;/p&gt;
&lt;p&gt;说“随机”显得太不高大上了。说得高大上一点儿，这叫&lt;strong&gt;蒙特卡罗&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;随机生成数据就有了一个新问题：我们不仅仅需要输入数据，我们还需要知道这些输入数据所对应的正确答案是什么，才能和自己的代码输出做比对。&lt;/p&gt;
&lt;p&gt;那么一个随机生成的，全新的数据，正确答案怎么来？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;首先，&lt;strong&gt;很多问题并不需要正确答案，我们可以直接验证答案的正确性。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;比如，为了验证一个排序算法是否正确，直接看最终的排序结果是否有序就好了。做一万轮随机测试，每一轮都生成一组随机序列，执行我们的排序算法，看结果是否有序，这是很可靠的一种测试方式。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;很多问题都是难求解，易验证的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;再举个简单的例子：解方程就是这类问题。&lt;/p&gt;
&lt;p&gt;解一个方程可能难死，甚至到现在，世界上大多数方程我们人类根本不知道怎么解。但是，验证一个解是否满足某个方程，则简单到爆。这也是很有意思的一个问题，更深入的分析涉及&lt;strong&gt;计算理论&lt;/strong&gt;了。有兴趣的同学可以看看这门科学，不过和测试无关了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;当然，还有另外一类问题，确实需要我们有正确的答案。对于这种情况，其实也很简单：写一个暴力算法，算出正确数据，然后和我们的算法结果做比对。这叫&lt;strong&gt;暴力对拍&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;比如，为了验证一个优化的矩阵乘法是否正确，可以写一个暴力的 O(n^3) 级别的矩阵算法去对拍；&lt;/p&gt;
&lt;p&gt;为了验证一个 dp 算法是否正确，可以写一个暴力的回溯搜索算法做对拍。&lt;/p&gt;
&lt;p&gt;很多算法竞赛的出题人都会用这种方式来验证标程的正确性的，这种方法在业界也很常用。&lt;/p&gt;
&lt;p&gt;当然，这种方式的缺点是：不能测试大规模数据。不过，从验证算法正确性的角度，也并不需要大规模数据。&lt;/p&gt;
&lt;p&gt;99.9% 的正确性问题，在小规模数据上就能验证出来。只不过，放到大规模数据上，可能会有不满足性能要求，或者申请系统资源过大的情况。而这些问题，已经不是正确性问题了。&lt;/p&gt;
&lt;p&gt;说句题外话，我做算法竞赛的时候，一直秉持一个原则：一个问题可以做成 TLE，即超过时间限制；可以做成 MLE，即超过空间限制；但不能做成 WA，即答案错误。&lt;/p&gt;
&lt;p&gt;因为 TLE，MLE，意味着没有使用某种优化方式；但 WA，意味着程序是有 bug 的。我认为这是基本功问题。程序可以超时，可以超空间，我们可以想办法优化它，或者学习更高效的方法。但是已经写出来的代码，不应该有错误。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;最后，我经常使用的一个测试方式是：把自己写的一个模块封装成一个算法问题的解（如果可以的话），扔到 OJ 上做测试。比如为了测试自己写的二分搜索树是否正确，我会把这个二分搜索树的代码封装成一个集合类或者映射类，到 OJ 上找几个需要使用集合或者映射的问题，提交试一下。&lt;/p&gt;
&lt;p&gt;这样做，省得我自己暴力对拍了。&lt;/p&gt;
&lt;p&gt;不过，这基于我对很多典型的算法问题类型都很熟悉，也对一些 OJ 很熟悉，能够迅速将一些代码规约或者应用到某类典型算法问题上，然后通过 OJ 帮助我测试。&lt;/p&gt;
&lt;p&gt;这种方法，我觉得其实不值得推广。&lt;/p&gt;
&lt;p&gt;真正值得推广的是：&lt;strong&gt;测试也是一门有深度的技术领域。&lt;/strong&gt;如果感兴趣，大家可以找找相关的书籍，学习一下测试领域的一些思维和技巧，资料应该还是挺多的。&lt;strong&gt;最重要的是：培养测试思维。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;说实话，软件行业作为一门工程学科，行业整体对测试的强调，我认为是不够的。&lt;strong&gt;这不仅仅是一个软件开发效率的问题，更是一个安全性的问题。&lt;/strong&gt;毕竟，软件已经和我们的生活越来越紧密地连接在了一起。&lt;/p&gt;
&lt;p&gt;如果去看其他大部分工程学科，测试都是非常重要的一个工作。我们很难想象我们住的房屋结构，或者我们开的汽车，没有做过严谨的安全性测试；甚至，一个家具厂商在设计家具的过程中，做的测试，可能都比很多软件开发的过程做得测试还要多。&lt;/p&gt;
&lt;p&gt;相信，随着软件行业的发展，测试会变得越来越重要。&lt;/p&gt;
&lt;p&gt;因为，&lt;strong&gt;测试思维是一种非常重要的工程思维，绝不仅仅只在计算机专业上。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-05-10/readme.md" rel="alternate"/></entry><entry><id>2020/2020-05-03/readme.md</id><title>希望所有的后浪们</title><updated>2020-05-03T00:00:00-07:00</updated><content>&lt;h2&gt;希望所有的后浪们&lt;/h2&gt;
&lt;p&gt;今天，我的朋友圈被“B 站的后浪”刷屏了。&lt;/p&gt;
&lt;p&gt;有意思的是，我发现：刷屏的大多是和我年龄差不多的“老男人”们。而有几个在我朋友圈里，我特别看好的“小朋友”们，刚刚高中生，就已经大有作为了，我特地跑到他们的朋友圈转了一圈，和什么前浪后浪一点儿关系都没有。&lt;/p&gt;
&lt;p&gt;想了想，或许这“B 站的后浪”，更多的，是属于“前浪们”的感慨和宣泄吧。&lt;/p&gt;
&lt;p&gt;至于那些真正的后浪们，他们才不关心这情怀呢。人家正享受青春大好的人生呢，哪里有时间在这里转发老男人们的絮叨和感慨 &lt;/p&gt;
&lt;p&gt;我这么年轻，当然也属于后浪啦。所以，我也就不感慨了，继续加油推前浪去了 &lt;/p&gt;
&lt;p&gt;相信关注这么酷的公众号的童鞋们，不管年龄多大，都是后浪！&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;希望所有的后浪们，都把前浪拍在沙滩上！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;最后，鲁迅先生的一段话，送给大家：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;愿中国青年都摆脱冷气，只是向上走，不必听自暴自弃者流的话。能做事的做事，能发声的发声。有一分热，发一分光，就令萤火一般，也可以在黑暗里发一点光，不必等候炬火。&lt;/p&gt;
&lt;p&gt;此后如竟没有炬火：我便是唯一的光。倘若有了炬火，出了太阳，我们自然心悦诚服的消失，不但毫无不平，而且还要随喜赞美这炬火或太阳；因为他照了人类，连我都在内。&lt;/p&gt;
&lt;p&gt;鲁迅 《随感录四十一》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;祝所有人五四青年节快乐！&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-05-03/readme.md" rel="alternate"/></entry><entry><id>2020/2020-04-26/readme.md</id><title>觉得自己基础差，该不该系统补数学？</title><updated>2020-04-26T00:00:00-07:00</updated><content>&lt;h2&gt;觉得自己基础差，该不该系统补数学？&lt;/h2&gt;
&lt;p&gt;这是在我的知识星球上，一个同学问我的问题。&lt;/p&gt;
&lt;p&gt;波波老师您好。&lt;/p&gt;
&lt;p&gt;我今年 28 了，也算是科班出身，但是大学的时候基本没怎么上过课。毕业到现在 5 年了，明显感觉到技术上的很多东西学起来都力不从心。&lt;/p&gt;
&lt;p&gt;我现在想先从高中数学开始，到高数线代离散，全部先都过一遍。之后，再把学习的重点放在算法和数据结构上面。&lt;/p&gt;
&lt;p&gt;顺便说一下，我高中之前对数学都是比较有兴趣的，所以现在学起来也不会觉得痛苦。但是因为年龄也比较大了，导致现在整个人都处于一种特别焦虑的状态，经常会怀疑：做这些到底值不值？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;bobo 老师的回答：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我觉得我很理解你的这个想法。但我想给你浇一盆冷水。根据我的经验，这样做，大概率会效率很低，最终不会得到你想要的东西。&lt;/p&gt;
&lt;p&gt;我还是更建议你能仔细想明白，&lt;strong&gt;自己到底想要学什么，然后直接去学。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;除非你真的想要学的是数学，否则的话，我不建议“从头学数学”。&lt;/p&gt;
&lt;p&gt;为什么？&lt;/p&gt;
&lt;p&gt;一方面，数学是一个无底洞，可以无限拓展，其实很难真正地“掌握”；&lt;/p&gt;
&lt;p&gt;另一方面，数学也是一个太过抽象的笼统的概念。&lt;/p&gt;
&lt;p&gt;这点，其实和计算机是一样。前端是计算机；后端是计算机；移动开发是计算机；网页开发也是计算机。人工智能是计算机；虚拟现实是计算机；编译器是计算机；数据库是计算机；网络安全是计算；大数据分析还是计算机；图形学，图像学，语音识别，推荐系统，人脸识别，语义分析，搜索引擎，知识图谱，统统都是计算机。在计算机的世界里，隔行如隔山。&lt;/p&gt;
&lt;p&gt;数学的世界，也是如此！高数，线数，概率，统计，解析几何，计算几何，图论，数论，群论，数理逻辑，组合数学，博弈论，拓扑数学，这些统统都是数学！&lt;/p&gt;
&lt;p&gt;但具体到某一个方向，实话实说，并非所有这些数学都是有用的。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;成人之后的学习，我还是更推崇有针对性的学习。想“系统地学习”并没有错，但是我认为不应该是“系统地学习高中数学或者大学数学”，而应该聚焦在“系统地学习某一个门类的数学”。这样效率更高，也容易达成自己的目标，成就感强，有正反馈，也就更有进一步的学习动力。&lt;/p&gt;
&lt;p&gt;你说“明显的感觉到技术上的很多东西学起来都力不从心”。我的建议是：仔细总结，到底是学习哪些技术时，感觉力不从心？感觉力不从心的关键，到底是什么？真的是自己的数学基础问题吗？还是其实这个领域本身就没有系统接触过？如果真的是数学基础问题，到底是哪一个领域的数学问题？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;把问题不断地问下去，找到属于自己的核心瓶颈，而不是简单地把一切归结于一句“自己的基础不好”。&lt;/strong&gt;因为这一定程度上，其实是“逃避”了可能隐含的核心问题。就算你开始很努力地“补基础”，但很有可能花了很长时间以后，发现离自己想要达到的目标，依旧很远。其实在我看来，这也是掉入了完美主义的陷阱。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;另外，&lt;strong&gt;有一些领域，学习曲线就是陡峭的，其实和所谓的基础关系不大。&lt;/strong&gt;就算基础再好，也改变不了这个学科或者领域本身学习曲线陡峭的事实；学再多基础，也无法避免初学时碰壁。&lt;/p&gt;
&lt;p&gt;比如，学习使用 Windows 的记事本是很容易的事情，但是学习使用 Vim，就是很难的。Vim 的学习曲线，就是陡峭的。&lt;/p&gt;
&lt;p&gt;仔细想一想，提前学习什么，会使得我们可以更加平顺地掌握 Vim？我确实没有什么好的建议。我唯一能做到的就是告诉你：Vim 本身就是难学的，不要气馁，每个人都一样。不停地使用 Vim，不停地熟悉每一个概念和功能，慢慢你就能掌握它了。&lt;/p&gt;
&lt;p&gt;其实，我觉得算法也是此类学习曲线相对陡峭的学科。我真心不认为数学基础好，就可以很简单地理解红黑树的实现细节，或者轻松搞明白 KMP。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我认为和算法本身去较劲，比去学习数学，更能提升算法水平。&lt;/strong&gt;根据你的叙述，我估计，如果你去和那些斩获大厂 offer 的人去聊，有一半人可能数学还不如你呢。&lt;/p&gt;
&lt;p&gt;当然，当你要实现一个计数算法，突然意识到自己的排列组合不够好；或者当你要实现一个几何算法，发现需要系统学习一下计算几何；或者当你学习图形学，意识到线数很重要；或者在学习机器学习的过程中，发现需要高数和统计基础的时候，自然要去“死磕”相关的数学的。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;指望着提高自己的基础，然后就能自然而然地，无障碍地，非常平顺地学会这个世界上的任何知识，有些过于理想主义了。虽然大多数课程的设计者，教材的编写者，追求的就是能让学习者尽量平顺地完成整个学习过程，但这毕竟只是一种追求，&lt;strong&gt;我悲观地认为近乎永远达不到。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;更何况，这个世界上还有一些教育学家在提倡：不应该过渡追求平缓的学习过程。学习就应该在自己能力范围里，去追求最陡峭的学习方案，只有这样，才能最快速地提高和成长。&lt;/p&gt;
&lt;p&gt;当然，我没有说这种观点一定正确，我只能说它也有一定的道理。通过这些讨论，我们可以看出来，&lt;strong&gt;学习是一件很复杂的事情。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我经常说，学习方法没有一定之规。与其不停地去寻找学习的路径，学习的方法，不停地做“学习前的准备”，不如直接去学。&lt;/p&gt;
&lt;p&gt;学习的过程不仅仅是吸收知识，增长技能。每个人在学习的过程中，也是在实践自己的学习方法，并且不断地调整。&lt;strong&gt;只有在学习的过程中，每个人才能找到最适合自己的学习方法。而这，很有可能比任何实际的知识，都重要得多。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我不相信这个世界上有万能的学习方法。我经常用反证法说明这类问题：如果这个万能的学习方法存在的话，那么所有人早就去使用这些方法了，所有人也都很顺利地迅速掌握了自己希望自己掌握的知识了。但显然，这个世界不是这样子的。&lt;/p&gt;
&lt;p&gt;如果真说万能学习法，我曾经写过一篇文章，就叫&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-08-20/"&gt;《万能学习法》&lt;/a&gt;。你可以读一读，看看是不是有启发？：）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;最后，我要说，如果你只是单纯地对数学感兴趣，那么上面所有这些话都是废话。&lt;/p&gt;
&lt;p&gt;兴趣是一件神奇的东西。我们可以不计回报地去追求自己的兴趣，甚至为了兴趣付出自己的所有。&lt;/p&gt;
&lt;p&gt;拥有兴趣是一件很幸运的事情，追逐兴趣也是一件很幸福的事情。而且，大多数人确实更容易在自己感兴趣的事情上成功；即使不成功，也无怨无悔。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-04-26/readme.md" rel="alternate"/></entry><entry><id>2020/2020-04-20/readme.md</id><title>优雅地证明盛水容器问题</title><updated>2020-04-20T00:00:00-07:00</updated><content>&lt;h2&gt;优雅地证明盛水容器问题&lt;/h2&gt;
&lt;p&gt;Leetcode 上第 11 号问题：盛最多水的容器，是一道非常经典的问题。不久前，一个同学还告诉我，他去字节跳动面试，考了一模一样的原题。&lt;/p&gt;
&lt;p&gt;&lt;img alt="leetcode" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-04-20/leetcode.png" /&gt;&lt;/p&gt;
&lt;p&gt;这个问题本身很好理解：在坐标轴的每个坐标位置都放上了一系列长度不等的竖板。要求在这些竖板中选出两块，这两块竖板和坐标轴组成了一个“容器”。这个容器的底就是这两块竖板所在的坐标之间的距离；而高则是这两块竖板之间的较短者。所谓短板效应。&lt;/p&gt;
&lt;p&gt;问题是希望找到两块竖板，使得这个“容器”的面积最大。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;如果总共有 n 块木板可以选择的话，我们可以暴力枚举任意两块木板的组合，检查他们组成的容器面积，一共需要检查 n * (n - 1) / 2 对木板的组合。&lt;/p&gt;
&lt;p&gt;如果会排列组合的同学，可以很轻易地使用组合公式得到这个结果，即：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;C(n, 2) = n * (n - 1) / 2&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;即使不擅长排列组合的同学，也可以非常容易地通过程序来分析出这个结果。我们的暴力枚举的程序伪码是这样的：（其中数组 a 存储了 n 个木板的高度）&lt;/p&gt;
&lt;p&gt;&lt;code&gt;res = 0;
for(i = 0; i &amp;lt; n; i ++)
    for(j = i + 1; j &amp;lt; n; j ++){
        // 判断使用 a[i] 和 a[j] 作为木板组成的容器是否是更大的容器
        // min(a[i], a[j]) 是容器的高度，即两块木板选短者
        // j - i 为容器的底
        res = max(res, min(a[i], a[j]) * (j - i));
    }
return res;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在上面的循环中，res 一共被比较计算了几次？&lt;/p&gt;
&lt;p&gt;可以想象，当 i == 0 的时候，j 的取值范围是从 1 到 n-1，内循环一共计算了 n-1 次；&lt;/p&gt;
&lt;p&gt;当 i == 1 的时候，j 的取值范围是从 2 到 n-1，内循环一共计算了 n-2 次；&lt;/p&gt;
&lt;p&gt;当 i == 2 的时候，j 的取值范围是从 3 到 n-1，内循环一共计算了 n-3 次；&lt;/p&gt;
&lt;p&gt;以此类推...&lt;/p&gt;
&lt;p&gt;i 最大取值为 n - 2，此时 j 的取值为 n-1，内循环只计算了 1 次。&lt;/p&gt;
&lt;p&gt;所以，整体，内循环计算的次数，就是 1 + 2 + 3 + ... + (n-3) + (n-2) + (n-1)。&lt;/p&gt;
&lt;p&gt;这是一个等差数列求和，一共 n-1 项，首项为 1，末项为 n-1。带入等差数列求和公式，就是 &lt;strong&gt;n * (n - 1) / 2&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;很显然，这样暴力枚举，我们的算法时间复杂度是 O(n^2) 级别的。&lt;/p&gt;
&lt;p&gt;实际上，这个问题有 O(n) 级别的解法，也就是大名鼎鼎的双指针解法，思路是这样的：&lt;/p&gt;
&lt;p&gt;首先，使用 left 和 right 两个指针，分别指向最左边的木板 a[0] 和最右边的木板 a[n-1]。这样，left 和 right 就构成了一个容器。这个容器的面积，是我们的初始值。&lt;/p&gt;
&lt;p&gt;下一步，我们只需要看 left 对应的木板和 right 对应的木板谁小，就好了。如果 left 更小，那么就 left ++，也就是下一步去检查 a[1] 和 a[n - 1] 组成的容器是否更大？如果 right 更小，那么就 right --，也就是看 a[0] 和 a[n - 2] 组成的容器是否更大？这个过程以此类推，如果发现了更大的容器，就更新结果。&lt;/p&gt;
&lt;p&gt;算法伪码大概是这样的：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;l = 0, r = n - 1;
res = 0;
while(l &amp;lt; r){
    // 判断使用 a[l] 和 a[r] 作为木板组成的容器是否是更大的容器
    res = max(res, min(a[l], a[r]) * (r - l)); 
    if(a[l] &amp;lt; a[r]) l ++;
    else r --;
}
return res;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;可以看出来，这个过程，或者 left ++，或者 right --，木板之间的距离越来越小。直到 left 和 right 碰上，也就是两块木板重合了，容器的底为 0，此时，算法结束。&lt;/p&gt;
&lt;p&gt;这个算法的复杂度是 O(n) 的。因为整个算法中，每一个木板都或者被 left 指针指过一次，或者被 right 指针指过一次，直到 left 和 right 汇合。&lt;/p&gt;
&lt;p&gt;对应的，res 一共被计算了 n-1 次。因为两个木板才能形成一个容器。使用这种方式，n 个木板，&lt;strong&gt;一共组成了 n-1 个容器。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;这个算法看起来非常简单，但是，&lt;strong&gt;一个很致命的问题是：这个算法为什么是正确的？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一个直观的想法是：每次不管是 left 右移，还是 right 左移，容器的底都会减一。由于容器的底减小了，所以，如果我们要想得到更大的面积，就要让容器的高变大。整个容器的高是由最短的木板决定的，所以我们将两个木板中最短的那一个做改变，才有可能得到一个更大的容器。&lt;/p&gt;
&lt;p&gt;这个解释模模糊糊说得通，但似乎并不是那么严格。关键在于，&lt;strong&gt;这个解释没有说明：这个算法为什么没有漏掉一个可能的更大面积的容器？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;Leetcode 的讨论区有很多关于这个算法的正确性的讨论，但我觉得大多数叙述的语言过于理论化了。也有同学在我的课程问答区问过我这个问题，所以，我写了这篇文章，尝试阐述一下这个问题。&lt;/p&gt;
&lt;p&gt;我们来看初始的时候，left 指向 a[0]，right 指向 a[n-1]。我们假设 a[0] 是小于 a[n-1] 的，即 a[0] &amp;lt; a[n-1]。那么下一步，根据我们的算法，就是 left ++，即 left 下一步指向了 a[1]。&lt;/p&gt;
&lt;p&gt;这意味着什么？这就意味着，使用 a[0] 和 a[n-2]；使用 a[0] 和 a[n-3]；使用 a[0] 和 a[n-4]；.... ；使用 a[0] 和 a[1]，这些木板的组合，我们都直接跳过去了，不去计算了。&lt;/p&gt;
&lt;p&gt;换句话说，因为我们直接 left ++ 了，所以所有的以 a[0] 为左边木板的其他组合，都不看了。&lt;/p&gt;
&lt;p&gt;为什么可以这样？&lt;/p&gt;
&lt;p&gt;还记得我们的假设吗？a[0] 是小于 a[n-1] 的。所以，此时，整个容器的高度，是由 a[0] 决定的。因为，如果右边板的高度大于 a[0]，我们取短板，容器的高度还是 a[0]；如果右边的高度小于 a[0]，那么容器的高度比 a[0] 还要小。&lt;/p&gt;
&lt;p&gt;而对于其他的以 a[0] 为左边木板的组合：a[0] 和 a[1]，a[0] 和 a[2]，a[0] 和 a[3]，...，a[0] 和 a[n-2]，底的长度都比 a[0] 和 a[n-1] 更小。而高度又不会超过 a[0]，所以，面积一定是更小的，我们就可以直接排除掉！&lt;/p&gt;
&lt;p&gt;那么这个过程，我们一下子排除了多少组组合呢？答案是，左边是 a[0]，右边是 a[1] ... a[n-2]，一共 n-2 组组合，直接被我们扔掉了。&lt;/p&gt;
&lt;p&gt;当然，如果我们假设 a[0] &amp;gt; a[n-1]，这个逻辑同样成立，只不过我们扔掉的组合，右边固定为 a[n-1]，左边是 a[1] 到 a[n-2]，还是 n-2 个组合。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;现在，假设我们的 left 指向 1 了，right 还是 n-1。再假设，这次是 a[1] &amp;gt; a[n-1] 了。那么，按照我们的算法，就应该是 right-- 了。&lt;/p&gt;
&lt;p&gt;这次，有了上面的分析，相信大家就都理解了，我们不需要比较 a[2] 和 a[n-1]；a[3] 和 a[n-1]；a[4] 和 a[n-1]；...；a[n-3] 和 a[n-1]，a[n-2] 和 a[n-1]，这些组合了。&lt;/p&gt;
&lt;p&gt;为什么？因为此时，a[1] 和 a[n-1] 这个组合中，容器的高度是由右边的板 a[n-1] 决定的。那么剩下的以 a[n-1] 为右侧板的所有容器，高度不可能大于 a[n-1] 了，而底却在缩小，所以，这些组合都可以直接扔掉，不计算了。&lt;/p&gt;
&lt;p&gt;那么这次，我们扔掉了多少个组合？答案是右边固定为 a[n - 1]，左边是 a[2], a[3],...,a[n-2]，一共 n-3 个组合！&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;相信大家可以看出规律来了。我们每次左指针或者右指针移动一次，其实都是扔掉了若干组合，不再需要比较了。&lt;/p&gt;
&lt;p&gt;第一次移动，扔掉了 n-2 个组合；第二次移动，扔掉了 n-3 个组合；第三次移动，将扔掉 n-4 个组合，依次类推，直到最后一次移动，扔掉 1 个组合。&lt;/p&gt;
&lt;p&gt;那么，我们在这个过程中，总共扔掉了多少组合？就是 1, 2, 3, ... , n-4, n-3, n-2 的和。大家可以看出来，这又是一个等差数列。首项是 1，末项是 n-2，一共 n-2 项。&lt;/p&gt;
&lt;p&gt;带入等差数列求和公式，我们一共扔掉了 (n-1)*(n-2)/2 这么多个组合，不用去考虑。&lt;/p&gt;
&lt;p&gt;现在，大家就可以计算一下了。回忆一下上面的叙述：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我们一共扔掉了 (n-1)*(n-2)/2 这么多组合，只计算了 n-1 这么多组合。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;把他们加起来，是多少？&lt;/p&gt;
&lt;p&gt;&lt;img alt="math" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-04-20/math.png" /&gt;&lt;/p&gt;
&lt;p&gt;答案是 n * (n - 1) / 2！&lt;/p&gt;
&lt;p&gt;大家回忆一下，这个数字正好就是 n 块木板，抽出两块，组成容器的所有可能方案！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;C(n, 2) = n * (n - 1) / 2！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;那么这也就证明了，我们的双指针算法，比较了 n-1 组木板，扔掉了 (n-1)*(n-2)/2 组木板，合在一起，已经完整地考虑了所有 n * (n - 1) / 2 组木板的组合了。&lt;/p&gt;
&lt;p&gt;我们这个过程，不会漏掉任何一个组合，最终找到的解，一定是最优解！&lt;/p&gt;
&lt;p&gt;怎么样？是不是觉得这个证明理解起来并不难？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;值得一提的是，虽然我们说这个问题是双指针的问题，但其实，在算法设计上，我们使用了贪心的思想。即每次把最短木板对应的所有其余组合都扔掉了。&lt;/p&gt;
&lt;p&gt;而&lt;strong&gt;对于贪心算法来说，最大的特点就是：通常代码都会比较简单，但要想证明贪心的正确性，会比较费劲。&lt;/strong&gt;这个问题就是一个很好的例子。&lt;/p&gt;
&lt;p&gt;实际上，在 Leetcode 上，还有很多贪心的问题，拥有这样的特点。以后有机会，可以再向大家介绍。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-04-20/readme.md" rel="alternate"/></entry><entry><id>2020/2020-04-15/readme.md</id><title>被沙特政府机构“盗用”的 iOS App</title><updated>2020-04-15T00:00:00-07:00</updated><content>&lt;h2&gt;被沙特政府机构“盗用”的 iOS App&lt;/h2&gt;
&lt;p&gt;最近，在网上看到一个案例，觉得很有意思。&lt;/p&gt;
&lt;p&gt;有一名国外的开发者，叫 mhdhejazi。他在新冠疫情期间，开发了一个 iOS App，叫 Corona Tracker。&lt;/p&gt;
&lt;p&gt;这是一个追踪全世界各地区新冠病毒数据的 App。大家可以看一下，整体 App 设计是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="apps" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-04-15/apps.png" /&gt;&lt;/p&gt;
&lt;p&gt;可以看出来，界面设计相当专业，显然花费了不少心思。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;不仅如此，这个 App 还针对 iPad 进行了适配：&lt;/p&gt;
&lt;p&gt;&lt;img alt="ipad" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-04-15/ipad.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;同时，这个 App 也支持在 macOS 下使用。以下是在 macOS 下这个 App 的应用截图。&lt;/p&gt;
&lt;p&gt;&lt;img alt="macos" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-04-15/macos.png" /&gt;&lt;/p&gt;
&lt;p&gt;可以看出来，适配工作做得相当齐备。不夸张地说，比很多商业软件做得都出色。&lt;/p&gt;
&lt;p&gt;作者甚至为这款 App 设计了完整的图标。 &lt;/p&gt;
&lt;p&gt;&lt;img alt="icon" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-04-15/icon.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;这样一款出色的 App，开发者将它提交给苹果应用商店以后，被苹果公司拒绝了。&lt;/p&gt;
&lt;p&gt;苹果的理由是：在现在这个疫情肆虐的时期，和疫情相关的数据或者新闻非常重要。为了避免虚假的数据或者新闻的传播，苹果应用商店规定，和新冠病毒相关的信息类应用，必须由权威的，经过认证的健康组织发布。&lt;/p&gt;
&lt;p&gt;苹果公司的这个政策，在 3 月份就开始实施了。CNBC 对此也专门做过报道。&lt;/p&gt;
&lt;p&gt;&lt;img alt="news" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-04-15/news.png" /&gt;&lt;/p&gt;
&lt;p&gt;翻译：据 App 开发者说，苹果拒绝所有不来自健康机构的新冠病毒类 App。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;苹果的这个政策其实无可厚非。这名开发者也认命了。反正他做这款 App，也没有什么商业企图。&lt;/p&gt;
&lt;p&gt;于是，他直接将这款 App 完整地放在了 github 上，进行了开源。同时，整个项目使用 GPL 开源许可协议，声明不可商用。&lt;/p&gt;
&lt;p&gt;在我看来，这也算是为世界做了不小的贡献。&lt;/p&gt;
&lt;p&gt;对于这个开源项目，大家可以点击 &lt;a href="https://github.com/mhdhejazi/CoronaTracker"&gt;这里&lt;/a&gt; 获得。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;可是，另这名开发者没有想到的是，不久之后，他的这款开源的 App 项目，被沙特的一个政府机构：沙特国家健康信息中心，发布在了苹果的应用商店上。&lt;/p&gt;
&lt;p&gt;可想而知，这名作者是非常气愤的。&lt;/p&gt;
&lt;p&gt;对于这名作者的气愤，我非常理解。谁也不愿意自己的劳动成果，一转手，就成了别人名下的作品。&lt;/p&gt;
&lt;p&gt;但是，从严格的法律意义的角度，这名开发者似乎真的没什么办法。&lt;/p&gt;
&lt;p&gt;这里，就要简单和大家介绍一下什么是 GPL 协议了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;GPL 协议是 General Public License 的简称。翻译成中文，叫通用性公开许可证。&lt;/p&gt;
&lt;p&gt;这个协议最主要的特点就是：&lt;strong&gt;受 GPL 协议保护的开源项目，自始至终都必须以开放源代码的方式发布。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;换句话说，如果我看到一款开源的 App 特别好，只要这款 App 的源码是被 GPL 协议保护的，那我拿来修改，是没有问题的；甚至，我以自己的名义再发布一遍，也没问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;条件只有一个：我必须继续保持我的这个项目也是开源的。&lt;/strong&gt;也就是这个修改后的项目，也要遵守 GPL 协议。&lt;/p&gt;
&lt;p&gt;如果，我在一个项目工程中，使用了受 GPL 协议保护的第三方代码，那么整个工程也就自动受到了 GPL 协议的约束，必须开源。&lt;/p&gt;
&lt;p&gt;当然，这里其实有一个叫做“共同作品”的概念。但是对这些法律术语的详细解读，并非这篇文章的重点，也不是我的专长。大家大致理解 GPL 协议的主旨就好。&lt;/p&gt;
&lt;p&gt;简而言之，&lt;strong&gt;GPL 就是在说：这份代码，你去改，没问题；你去用，也没问题。但你必须保持开源。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;阮一峰大神曾经制作过一个非常简单清晰的图表，来说明这些开源协议的关系。&lt;/p&gt;
&lt;p&gt;&lt;img alt="p" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-04-15/p.png" /&gt;&lt;/p&gt;
&lt;p&gt;当然，这里面还有非常多的法律细节，不是这么一张简单的图表就可以解释清楚的。但是，各个开源协议的重点，在这张图中，已经表现得非常清晰了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;如果大家理解了 GPL，再看沙特国家健康信息中心的行为，就会发现，只要他们将上架的这款 App 开源，就没有违反 GPL 协议。&lt;strong&gt;GPL 协议并不阻止源码的修改和二次分发。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;那么，沙特有没有对他们上架的这款 App 开源呢？我没有查证。但是，我个人认为，这没什么难的。毕竟，这并不是什么收费 App，也不涉及什么商业机密。&lt;/p&gt;
&lt;p&gt;甚至，GPL 协议本身，其实并不阻止别人使用相应的源码，通过提供服务的方式来盈利，只要保证无偿提供源码就好。&lt;/p&gt;
&lt;p&gt;比如，我修改一套受 GPL 保护的电商系统源码，上架了一个我自己的电商网站。那么基于这个电商网站的所有交易，都是合法的，并没有版权问题。&lt;strong&gt;只要我保证：我自己的这套电商系统，也是开源的，所有人都可以很容易地无偿获得相应源码，就可以。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我基于这个电商平台产生的所有交易收入，是我自己提供的服务赚取的收入，而不是贩卖这套源码获得的收入。那就不违背 GPL 协议。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;所以，严格看沙特国家健康信息中心的做法，可能还真问题不大。但是，这个开发者非常不爽，我是非常理解的。相信大多数人也能理解。&lt;/p&gt;
&lt;p&gt;对此，我其实在很早之前，刚接触开源项目的时候，就有一个思考。那就是：如果大家如果想避免此类问题，&lt;strong&gt;不应该将完整的，可以直接商业化的，或者直接提交给应用商店的项目，进行完整的开源。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;大家可以选择自己项目中的核心部分做开源。&lt;/p&gt;
&lt;p&gt;比如，对于这个新冠数据追踪的 iOS App 来说，作者可以封装一个获取世界各地新冠病毒数据的开源 API；或者包装一个能展示新冠病毒分布的地图组件，将这个 API，或者这个地图组件做开源。&lt;/p&gt;
&lt;p&gt;这样做，既能为开源社区做贡献，又能积累自己的影响力。同时，也避免了软件直接盗用的问题。&lt;/p&gt;
&lt;p&gt;其实，仔细观察很多企业或者部门机构的开源工程，大多也是遵循这一思路的。&lt;/p&gt;
&lt;p&gt;当然，&lt;strong&gt;既然选择了开源，就避免不了被人使用，也就无法避免被精于市场的组织或者个人拿去，赚更多的钱。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果对于这种可能性觉得非常不爽，我真心建议：不要开源。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;除非你非常清晰地想明白了自己开源的目的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;毕竟，鱼与熊掌不可兼得。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;P.S.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在写这篇文章的时候，我在 V2EX 上搜索到了这么一个话题。因为原作者是在公开平台上发布的信息，我也就不打码了：&lt;/p&gt;
&lt;p&gt;&lt;img alt="post" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-04-15/post.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;作者描述的这个经历，其中的那个图已经显示不出来了。但是大家可以通过文字，大致了解这名作者的遭遇。&lt;/p&gt;
&lt;p&gt;这个帖子下面有一个回复，我很喜欢。&lt;/p&gt;
&lt;p&gt;&lt;img alt="reply" src="https://github.com/liuyubobobo/my-blog/raw/master/2020/2020-04-15/reply.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;开源能不能赚钱？能。有机会，可以和大家聊一聊这个话题。&lt;/p&gt;
&lt;p&gt;但是，必须承认：还是有很多开源作者，尤其是老一辈开源作者，都是真正的理想主义者。&lt;/p&gt;
&lt;p&gt;他们靠自己的情怀和热忱，极大地推动了整个计算机领域向前前进了一大步。也只有这样一群理想主义者，才可能想出 GPL 这种“奇葩”的协议吧。&lt;/p&gt;
&lt;p&gt;曾经有一个人跟我说，他觉得大多数程序员真的傻，一点儿商业头脑都没有。&lt;/p&gt;
&lt;p&gt;因为他去 github 转一圈儿，发现很多项目都有非常好的商业化前景，竟然就这样开源出去了，可惜。&lt;/p&gt;
&lt;p&gt;对此，我笑笑不说话。&lt;/p&gt;
&lt;p&gt;或许，很多程序员就是很傻，没有商业头脑；&lt;/p&gt;
&lt;p&gt;或许，是他不理解程序员的情怀。毕竟，他不是一个程序员。夏虫不可语冰。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;向所有优秀的开源项目作者致敬。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2020/2020-04-15/readme.md" rel="alternate"/></entry></feed>