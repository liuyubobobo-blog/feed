<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh-CN"><id>https://github.com/liuyubobobo/my-blog</id><title>是不是很酷</title><updated>2019-05-30T18:51:18-07:00</updated><author><name>liuyubobobo</name><email>liuyubobobo@gmail.com</email></author><link href="https://github.com/liuyubobobo/my-blog" rel="alternate"/><generator uri="https://github.com/StdioA/bobobo-feed" version="0.0.1">bobobo-feed</generator><icon>https://www.gravatar.com/avatar/c4c67099540a54bd845d8e404fe8cc41</icon><subtitle>坚持有质量的技术原创，用技术人的视角看世界</subtitle><entry><id>2019/2019-05-30/readme.md</id><title>看美剧学英语考不考谱？我说靠谱，但别较劲</title><updated>2019-05-30T00:00:00-07:00</updated><content>&lt;h2&gt;看美剧学英语考不考谱？我说靠谱，但别较劲&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;上周，我的推文&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-05-19/"&gt;《如何把技术做深？可能，这是一个错误的问题》&lt;/a&gt;一文中，我曾经谈到过英语学习，特别是英语阅读的问题。&lt;/p&gt;
&lt;p&gt;在这一周，我在慕课网的专栏更新的&lt;a href="https://m.imooc.com/collector/27?distId=1a99b&amp;amp;utm_source=fenxiao"&gt;《学英语的最佳年龄到底是什么时候》&lt;/a&gt;一文中，带领大家看了一篇比较新的研究英语学习的论文，又谈到了这个问题。&lt;/p&gt;
&lt;p&gt;其实，两篇文章都指向一个方向：&lt;strong&gt;想提高英语水平，最简单的方法，也或许是唯一的方法，就是不停地接触英语。&lt;/strong&gt;用英语去看书，看剧，看新闻，看动漫，打游戏，学习，交流。时间长了，自然而然，就会提高，想拦都拦不住。&lt;/p&gt;
&lt;p&gt;很多同学总把注意力放在非常细节的学习方法上，比如遇到不会的词要不要查？每张纸查几个词？不会的词要不要记录？要不要复习？怎么复习？什么频率？。。。&lt;/p&gt;
&lt;p&gt;对这些具体问题，我确实有一些建议，有机会可以再细说。但是整体上，&lt;strong&gt;在“长期大量接触英语”这个方法面前，所有的这些细节问题都是雕虫小技。&lt;/strong&gt;在具体使用英文的过程中，不认识的词已经影响你获取信息了，你自然会去查。至于要不要复习，肯定能适当复习是好的，&lt;strong&gt;但是，我敢向你保证：只要你愿意长期大量的接触英文，不复习一点儿影响都没有，肯定会进步的。因为长期大量接触英文本身，就是复习！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在这篇文章中，我想聊聊看美剧学英语。&lt;/p&gt;
&lt;p&gt;其实，这是我在知乎的一个回答，之前也曾经向大家推荐过。但是鉴于很多同学肯定没有看到。我稍加修改，在公众号里再推送一遍。&lt;/p&gt;
&lt;p&gt;看美剧学英语有多靠谱？我的结论是：非常非常非常靠谱。这个道理很简单，不断地进行英文输入绝对是没错的。但是，必须强调：&lt;strong&gt;千万不要有中文字幕！&lt;/strong&gt;千万不要有中文字幕！千万不要有中文字幕！重要的事情说三遍！&lt;/p&gt;
&lt;p&gt;如果挂中文字幕能学好英语的话，那每所大学里都有无数的英语达人了！毕竟，据我所知，追美剧的人不在少数，很多人对热播美剧如数家珍。甚至很多同学自大学以来的休闲时间，都是在美剧中度过的。但是！！大多数同学的英语水平没有显著提高，就是中文字幕惹的祸。&lt;/p&gt;
&lt;p&gt;一旦有中文字幕，基本上大家都不会去思考语言的问题了。但没有中文字幕，为了理解剧情，我们就会去思考，这个人说的这句话是什么意思？我们才会去体会，原来表达这个意思，可以用这个词，可以这么说，可以这么搭配，可以这么组织语言，我们的英语水平才可能提高。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于看美剧学英语，很多人都会建议，完全扔掉字幕去看剧，直接啃生肉。当然，如果你的水平能直接啃生肉，固然是好的。但是，对于大部分同学来说，可能一上来就啃生肉，学习曲线过于陡峭了。&lt;/p&gt;
&lt;p&gt;在大家已经有一定的英语基础（大概四级水平）和能啃生肉美剧之间，我认为有一个很重要的过渡。&lt;strong&gt;这个过渡期，我建议大家看美剧挂英文字幕。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;有一派观点认为看美剧挂英文字幕，训练的是阅读而非听力。我的亲身经历表明，这是不对的，或者说是不完全对的。我认为：&lt;strong&gt;看剧使用英文字幕，是从阅读为主的学习向听力为主的学习的一个重要过渡。&lt;/strong&gt;虽然，必须承认：有了英文字幕，很多人会依靠字幕而非听力获得美剧里的信息，但这不是坏事。&lt;/p&gt;
&lt;p&gt;因为，这是一个非常重要的，纠正发音的过程。相信很多同学都有感受：整篇英语文章能“看”懂意思，但要是朗读出来，简直是一塌糊涂。这是因为我们“哑巴”英语的教学环境，使得很多同学是“看”懂词的意思，但是对单词发音并不明确，甚至错的很离谱。对单词发音错误的认识，将直接妨碍听力。你都不知道单词的正确读法，怎么可能听懂？&lt;/p&gt;
&lt;p&gt;那怎么办？难道只能对着字典把所有单词的正确发音听一遍来纠正自己？虽然市面上有这样的产品，我也知道有人这样做，但这实在是太枯燥了！所以，对着英文字幕把美剧看一遍，我认为是非常自然地纠正发音的方式。&lt;/p&gt;
&lt;p&gt;不要以为这个过程会那么的愉快。不信试试看。如果不曾只使用英文字幕看美剧，不管是多么喜欢的美剧，半个小时一定会看累的。就是因为不适应，我们需要额外的集中注意力才能反映出人物对白的意思，从而理解剧情的走向。这个过程大脑是以学习为主，休息为辅的，所以会疲劳。因为这是一个学习的过程。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;另外，我提倡看剧挂英文字幕，还有一个很普遍的原因：词汇量。&lt;/p&gt;
&lt;p&gt;在这一点上，实际看美剧是有优势的。因为美剧中的词汇主要出现在对话中，所以不会像英文原著那样包含很多的复杂的文学性修辞词汇。但即使这样，不要小瞧美剧中的词汇量。《friends》之所以被奉为美语学习的经典，一个很大的原因是其词汇量低，用词简单（这里暂不探讨俚语和文化的问题）。&lt;/p&gt;
&lt;p&gt;那么《friends》的词汇量是多少呢？整部美剧共十季237集，我粗略统计，不重复的单词个数是10697个。当然，这里会包括很多单词的不同形态，所以实际数字比这个数字要少。但大概是这个量级：一万词。&lt;/p&gt;
&lt;p&gt;我不确定大家对词汇量有没有概念。随便在网上查一查，有很多词汇量测试的工具，国内外都有。我建议同学们有时间做一做，对自己的词汇量有一个大概的认识。整体上，如果大家只是在国内的环境下接触英语教育，即使过了六级，应该词汇量都达不到1万的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;词汇量一万是什么水平呢？在英语为母语的国家，这是一个八岁孩子的词汇量的水平。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这也告诉我们，虽然现在很多声音鼓吹什么核心词汇只要2000词；3000词；6000词的（虽然他们也有他们的道理），但是一部简单的friends，需要我们认识上万词。单词都不认识，怎么谈听懂？更不要说一个单词的不同用法和搭配了。所以对着英文字幕看美剧也是一个积累词汇量；更重要的是，学习词汇如何实际使用的过程。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;什么时候可以脱离英文字幕直接看美剧了？我的经验是，当不需要暂停，也能完整理解美剧的意思的时候，就可以尝试不要英文字幕了。注意，是“完整理解”，不是“猜懂”，这个度每个人要自己把握。是的，至少我在刚开始用英文字幕看美剧的时候，需要不时地暂停、甚至要回退重新看几遍，才能真的理解人物到底说了什么，是什么意思......&lt;/p&gt;
&lt;p&gt;真到了那个阶段，如果想要看剧提高自己的英语水平，要聊的可能是另外一些问题了。这篇文章暂时聚焦在“需要使用英语字幕看剧”的阶段。&lt;/p&gt;
&lt;p&gt;在这里，我还想说另外一个话题。就是有很多英语学习方法，建议一个剧来回刷，刷他个五遍十遍甚至二十遍。&lt;/p&gt;
&lt;p&gt;这样做有没有效果呢？有。但是，我不是特别赞同。至少，这种方法不适合我，因为太枯燥了。讲真，在我眼里，很少有美剧值得让我在短时间内重复看十遍二十遍的。连第二遍我都懒得看，包括《friends》。&lt;/p&gt;
&lt;p&gt;这又回到了文章开头的问题了。想提高英语水平，最简单的方法，也或许是唯一的方法，就是长期大量地接触英语。&lt;/p&gt;
&lt;p&gt;我说是“接触英语”，而不是“学英语”。&lt;/p&gt;
&lt;p&gt;什么区别？接触英语，本质是在应用英语，目的在于获取其他信息，而不是学习语言的使用方法（发音，语法，搭配，组织，等等等等）。获取信息是首要的，学英语是次要的。是“顺便”的。&lt;/p&gt;
&lt;p&gt;而把一个美剧翻来覆去的刷，显然首要任务是“学英语”，而不是“获取信息”。因为顶多刷两遍，这个美剧讲的是什么，你肯定已经知道了。&lt;/p&gt;
&lt;p&gt;翻来覆去地刷美剧，在我看来，只会让我“恶心”，时间长了，都不爱看美剧了。那就得不偿失了。&lt;/p&gt;
&lt;p&gt;我觉得只要坚持，但凡看美剧或者英文电影，就只挂英文字幕看，时间长了，就会有效果。既然一遍看懂了，干嘛把美剧当课文，非要烂熟于心呢？那么多美剧，都能看懂也了不得。&lt;/p&gt;
&lt;p&gt;翻来覆去地看，相当于是“精”学习了。&lt;strong&gt;如果大家有时间精力去“精”学习，我建议把这个时间精力放到更专业的英语学习材料上。&lt;/strong&gt;比如《新概念》就很好。用看美剧的方式“学英语”，关键就是“顺便”二字，休息娱乐的时候，顺便学学英语。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果你不是要顺便学英语，有很明确的目标，要专门学英语，请千万不要看美剧学英语&lt;/strong&gt;，耽误事儿。根据你的需求，市面上不同的严肃且有效的英语教材非常多。&lt;/p&gt;
&lt;p&gt;所以，大家想看剧顺便学英语，千万“别较劲”。看个美剧，别想着每个词每句话都搞得一清二楚的。看懂了就好了。真想较劲，跟严肃的英文教材多较劲。请大家再回顾我的文章：&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2018/2018-04-18/"&gt;《如果高效学习有什么秘诀的话，那就都在这里了：）》&lt;/a&gt;。&lt;strong&gt;不要完美主义。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当然了，人和人不同，比如有些人就是觉得《friends》超级好看，看二十遍都不腻，那么翻来覆去刷当然可以。&lt;/p&gt;
&lt;p&gt;这里，还请大家体会我的核心思想：&lt;strong&gt;怎么看，看什么，这些统统不重要。重要的是长期大量坚持接触英语。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最后，有些同学问我怎么找到只有英文字幕的资源。&lt;/p&gt;
&lt;p&gt;国内大多数片源，都是中英文字幕的。其实，使用“物理法”就很好。我学生时代就干过这事儿。拿个纸条一贴就可以。我网上一搜，果然也有人这么干。如下图所示。图片来自知乎。&lt;/p&gt;
&lt;p&gt;&lt;img alt="zhihu" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-05-30/zhihu.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;另外，有一些播放器支持马赛克功能，可以给中文字幕的位置打上马赛克。比如QQ影音。不影响观看的。以下图片来自网络搜索。&lt;/p&gt;
&lt;p&gt;&lt;img alt="subtitle1" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-05-30/subtitle1.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="subtitle2" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-05-30/subtitle2.png" /&gt;&lt;/p&gt;
&lt;p&gt;最后，如果想找到英文字幕的源文件，&lt;strong&gt;可以尝试科学上网后搜索“english subtitles”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;英文原文接触多了，很多时候，对原文所表达的意思，也会有自己的理解，自己的思考。在我看来，这才是学习英语最大的魅力啊。我们因此可以接受第一手的材料，直接和作者“对话”。&lt;/p&gt;
&lt;p&gt;比如，在我的文章&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-04-18/"&gt;《从巴黎圣母院的大火，到消逝的IT巨头》&lt;/a&gt;中，我就对大多数字幕组在《before sunset》中关于巴黎圣母院的那句翻译产生了质疑。&lt;/p&gt;
&lt;p&gt;&lt;img alt="dame" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-05-30/dame.png" /&gt;&lt;/p&gt;
&lt;p&gt;虽然其实无关紧要，但是不是很酷？：）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-05-30/readme.md" rel="alternate"/></entry><entry><id>2019/2019-05-20/readme.md</id><title>浅谈Google限制华为</title><updated>2019-05-20T00:00:00-07:00</updated><content>&lt;h2&gt;浅谈Google限制华为&lt;/h2&gt;
&lt;p&gt;这篇文章我在昨天得知Google停止与华为的所有业务合作的时候，就在第一时间写出来了。结果因为昨天一早推送了一篇准备好的文章&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-05-19/"&gt;《如何把技术做深？可能，这是一个错误的问题》&lt;/a&gt;，就不能推送第二篇文章了。&lt;/p&gt;
&lt;p&gt;今天一天在准备专栏的更新，所以没有特别关注事情的进一步发展。文章进行了一些简单修改，但并不保证消息的实时性。毕竟，&lt;strong&gt;我的公号不是以报道科技新闻为主，而是分享技术观点为主&lt;/strong&gt;，所以，影响应该不大。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我的观点保持不变。愿世界没有战争。愿中国更加强大。&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;由于美国总统特朗普早前签署的禁令，Google已停止与华为的所有业务合作。&lt;/p&gt;
&lt;p&gt;虽然从法律角度，Google无法阻止华为访问安卓已经开放的原始代码（AOSP）。但是，Google可以禁止华为获得Google自家打造的Google框架服务（GMS）以及后续更新。这将限制华为手机使用诸多Google的服务，包括Gmail，Youtube，Google Play，Google搜索，Google日历，等等等等。&lt;/p&gt;
&lt;p&gt;从长期角度，华为无法获取最新版本的GMS及后续更新，会带来怎样的影响，现在还看不出来。也并不排除，在几个月后，中美局势有所缓解，使得这一限制取消。毕竟，这一限制，对Google也是极其不利的。&lt;/p&gt;
&lt;p&gt;但目前来讲，&lt;strong&gt;这些限制虽然对中国用户的影响近乎为零；对华为海外用户的影响，将是致命的。&lt;/strong&gt;因为，绝大多数海外用户，近乎一定使用Google Play作为安卓App的应用市场；近乎一定会看Youtube；近乎一定有一个Gmail邮箱；最常用的地图服务就是Google Map ...... 更不用提，有大量其他App，在制作的时候，会或多或少的使用GMS框架。最典型的例子，就是使用Google账户登录，在国外，就像使用qq或者微信账户登录一样常见。&lt;/p&gt;
&lt;p&gt;目前，安卓的官推已经宣布，现在华为海外手机，不会出现任何安全问题。因为对于Google Play以及背后的安全保护相关功能，还可以正常使用。&lt;/p&gt;
&lt;p&gt;&lt;img alt="android_twitter.png" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-05-20/android_twitter.png" /&gt;&lt;/p&gt;
&lt;p&gt;从我得知的消息，海外华为手机用户，也还可以正常使用诸如Gmail，Youtube等服务。所以这个限制具体将怎样落实，还是说对于已经发布的手机不进行限制，只针对未来华为的新手机做限制，Google还没有进一步的说明。不过，有一些海外用户已经开始表示极度的担心：&lt;/p&gt;
&lt;p&gt;&lt;img alt="twitter1" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-05-20/twitter1.png" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我一个月前买了P30 Pro，现在我不知道我的手机还能不能正常获得更新了。我身边的很多朋友也在担心这个问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2018年，华为的网络设备所占的市场份额，已经是全球第一；而华为手机的市场份额，则是全球第二（第一三星，第三苹果）。其中，华为手机的海外市场占比多少呢？大概占华为手机总市场的一半。2018年的数据，华为手机全球出货量2.06亿台，其中1.01亿台来自海外。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于这个事情，我的第一反应，是觉得有些吃惊。不是因为美国限制华为吃惊，而是这件事儿竟然被一贯以“不作恶”著称的Google打头阵而吃惊。我们曾经熟悉的那个Google，遇见这种事情，一定会一拖再拖，在最不得已的情况下，才会勉强为之。尤其这个事件本身，对Google的影响应该也是巨大的，并且是恶劣的。&lt;/p&gt;
&lt;p&gt;不过在过去的一年，Google在硅谷的口碑非常差（有时间发文单聊吧），现在看来，Google是要一路走到黑了。&lt;/p&gt;
&lt;p&gt;虽然我对安卓手机的生态不太熟悉，但可以预见的，还会有更多公司在Google的“榜样”作用下跟进，以各种方式限制华为。据我所知，现在，Intel，Qualxomn，Xilinx，Broadcom 四家企业也已经中断了和华为的业务往来。&lt;/p&gt;
&lt;p&gt;对于这个禁令发展到现在的状况，整体是非常复杂的。已经很难讲清谁对谁错了。由于国内信息高度不对称，这个禁令酝酿了一年多的时间，其间发生的很多事情，也没法在国内媒体聊。&lt;/p&gt;
&lt;p&gt;我只能简单地说：&lt;strong&gt;对于这场贸易战，从道德的角度，我不站队。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我坚持一个很朴实的观点：&lt;strong&gt;像这个世界上的大多数争执一样，这场贸易战是一个双方都占理，同时双方也都有错误的纠纷。&lt;/strong&gt;如果像某些媒体宣称的那样，这场战争谁对谁错一清二楚的话，这个事情也早就消停了。&lt;/p&gt;
&lt;p&gt;但是谁的理更多一些？谁的错更少一些？我相信，这是说不清楚的。&lt;/p&gt;
&lt;p&gt;不过，因为我的国籍归属，&lt;strong&gt;我希望中国挺住。中国必胜。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;现在，这个禁令所折射出的另一个更严重的问题是，&lt;strong&gt;美国能不能因为自己国家的利益，而损害全球消费者的利益？&lt;/strong&gt;毕竟，全球的其他消费者，是无辜的。&lt;/p&gt;
&lt;p&gt;这是全球经济一体化带来的重大问题，同时也是当下互联网时代，越来越多的商品拥有互联网特性所决定的。如今，我们购买的大量商品，都严重依赖线上服务。我们之所以付费，是因为我们相信，这些线上服务，能持续为我们提供价值。&lt;/p&gt;
&lt;p&gt;在没有互联网的时代，我买一个苹果，交完钱，这个苹果就在我的口袋里了。我想什么时候吃就什么时候吃；我想怎么吃就怎么吃，商家是完全无法限制我的。&lt;/p&gt;
&lt;p&gt;但是在互联网时代，对于一台苹果手机，苹果公司有能力远远地让它变成一个“砖头”，即使你已经付完了全款。这确实是科技的发展为世界带来的一个全新的挑战。&lt;/p&gt;
&lt;p&gt;现在看来，大多数消费者根本不关心贸易战的输赢问题，而是关注这个禁令可能带来的更深远的影响。在安卓的官推上，这样的言论随处可见。&lt;/p&gt;
&lt;p&gt;&lt;img alt="twitter2" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-05-20/twitter2.png" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果川普决定明天把三星或者小米加入黑名单怎么办？作为用户，作为消费者，我们需要知道你们（安卓）在维护我们（消费者）的权益，而不是在维护那个疯狂的老头儿（川普）的权益！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="twitter3" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-05-20/twitter3.png" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我必须说，美国和Google都疯了。这意味着，他们可以任意惩罚世界上的所有公司。那么全世界都会开始做自己的独立产品。安卓终将被打败。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="twitter4" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-05-20/twitter4.png" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;所以，仅仅是因为美国的法律，你们（安卓）就惩罚全世界成千上万的用户？如果这样做，美国以外的用户如何再信任Google？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;可以想见，如果这个禁令持续下去，不管华为愿不愿意，不管华为有没有能力，&lt;strong&gt;想要要生存下去，华为都必须自主研发属于自己的操作系统。站在国家的角度，我们国家也必须自主研制操作系统。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这已经不是一个可能不可能，生态不生态，成熟不成熟的问题了；而是这么做是唯一的出路的问题。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;同时，我们也将看到，在过去二三十年，全世界大多数软件开发者一起致力于建立的开源社区，也将一定程度萎缩。通过这一事件，不仅仅是中国，不仅仅是华为，对各个国家，各个企业，各个团队，都是生动形象的一课：&lt;strong&gt;核心技术必须攥在自己手里。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我认为计算机领域越来越多的非公开项目将开始实施；计算机世界的一些底层技术或者高端技术的交流，将被阻碍；，就像我们现在国家和国家之间交流核技术一样困难。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当然，自主研发操作系统是一个艰巨的任务。对于到底什么叫“自主研发的操作系统”，也有很多争论的空间，这篇文章暂不涉及。但是，&lt;strong&gt;大多数程序员都坚信的“技术没有国界”，被现实啪啪打脸了。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;实际上，&lt;strong&gt;技术一直有国界。&lt;/strong&gt;因为技术一直是和商业利益捆绑在一起的。而一个国家商业利益的总和，就是这个国家的经济。小到一个个人，一个家庭，大到一个国家，经济都是有边界的。你我再熟悉，也不能我的钱你随便花，你的钱我随便花。所谓亲兄弟还要明算账，更不用提国家之间。&lt;strong&gt;而技术上的优势，确实是美国的王牌。&lt;/strong&gt;从芯片，到操作系统。不管我们再怎么热血，也必须承认：&lt;strong&gt;在技术上，我们确实和美国有很大的差距。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最新消息，为了反击美国，中国将对美国的多种进口药品以及进口医疗器械加征关税。而医疗医药又是一个被高科技引领的领域，又近乎是美国的主场。对美国的药品加征关税会不会让美国损失。当然会，美国的股市已经在说明一切。但是，受到影响最大的是谁？&lt;/p&gt;
&lt;p&gt;我们不得不承认：是那些在中国的病患。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;说回Google和华为。&lt;/p&gt;
&lt;p&gt;一切挑战都是机遇。我希望借助这个契机，中国能够再用几年，哪怕是几十年的时间，在诸多高科技领域，真正达到世界领先水平。&lt;/p&gt;
&lt;p&gt;对于今天的局面，有很多海外友人是极度支持华为，支持中国的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="twitter5" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-05-20/twitter5.png" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果华为发布新的操作系统，我会马上开始使用。并且寻找其他服务，来代替Google的所有相关服务。&lt;/p&gt;
&lt;p&gt;我已经使用华为自己的日历，浏览器，以及邮件服务了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="twitter6" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-05-20/twitter6.png" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这一切都太荒唐了。P30 Pro比我曾经使用过的任何一台iPhone都好。我支持华为，并且希望华为能够找到更好的解决方案。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="twitter7" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-05-20/twitter7.png" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我敢打赌，这个禁令之后，中国将做出一个更好的操作系统。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;当然，我很理解，很多同学会觉得，这些外国友人根本不了解国内的实际情况，他们可能并不知道我们到底还差多远。一个完备的操作系统，不是靠喊口号就能做出来的。&lt;/p&gt;
&lt;p&gt;这个逻辑当然对。可是就像前文所说，&lt;strong&gt;事情发展到这里，逐渐拥有独立自主的研发能力和产品，将近乎是我们的唯一出路。&lt;/strong&gt;我也不喜欢空喊口号的人，可是，仅仅一味谴责喊口号，似乎也并不能解决问题。&lt;strong&gt;所有问题的解决，都需要一步一个脚印的做出来。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我想说，大家也不用对我们的国家这么没信心。我可以给大家分享一个去年（2018年），中美贸易战初露端倪时的一个小故事。&lt;/p&gt;
&lt;p&gt;那天，我和一个美国朋友在车上闲聊，不经意之间谈起了中美之间的贸易战。你猜美国人是怎么反应的？&lt;/p&gt;
&lt;p&gt;他大说特说了一顿特朗普政府的“错误”政策和夸张言行以后，一本正经地对我说：我觉得中美贸易战，中国会赢的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;当然，历史可能会告诉我们，贸易战没有赢家。但我衷心希望：中国更加强大。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;大家加油：）&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-05-20/readme.md" rel="alternate"/></entry><entry><id>2019/2019-05-19/readme.md</id><title>如何把技术做深？可能，这是一个错误的问题</title><updated>2019-05-19T00:00:00-07:00</updated><content>&lt;h2&gt;如何把技术做深？可能，这是一个错误的问题&lt;/h2&gt;
&lt;p&gt;前一阵子，有一个同学问了我这样一个问题：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;工作五六年了，开发一直是又前又后，也可以说不前不后，做的项目比较杂，感觉自己技术没法做深，公司都是哪有坑就安排去哪，我一直希望能在某一方面做好做深，该如何是好？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我的回答可能要让这名同学失望了。因为，我想借这个问题，谈另一个话题。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;先讲故事：&lt;/p&gt;
&lt;p&gt;经济学家陈志武，在《中国人为什么勤劳而不富有》一书中，讲过这么一件事。在中国加入世贸组织的时候，提出了很多条款。比如就有这样一个条款：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;美国应该为中国培养更多的管理人才。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;就这么一句话，16个字，美国人看了一脸懵逼。为什么呢？美国人的问题是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;什么是“应该”？就是不做也可以？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;怎么就叫“培养”？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;多少算是“更多”？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;什么叫“管理人才”？&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;合着这么简单的一句话，在美国人看来，除了“中国”，“美国”这两个词没争议，到处都是争议。&lt;/p&gt;
&lt;p&gt;当然了，使用笼统而模糊的方式去表述，可能是中国政治家的有意为之，是一种“智慧”。我们依然是，不谈政治。（请勿随便和当下时事做任何联想，后果自负）&lt;/p&gt;
&lt;p&gt;放到实际的学习生活中，这样的内容，其实是毫无意义的。因为&lt;strong&gt;对内容中的关键词没有明确的定义，我们就无法去执行它。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;曾经有一个同学问我，&lt;strong&gt;如何学好英语。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我问他，你学英语是想做什么？他告诉我，想更流畅的读原版技术书籍。&lt;/p&gt;
&lt;p&gt;我说，那很简单啊。从今天开始，就去读原版技术书籍。我的建议是，找一个对你现在工作或者学习不重要，但是你感兴趣的领域，随便选择一本名声别太差的原版书籍，每天花半个小时到一个小时，坚持去读就好了。&lt;/p&gt;
&lt;p&gt;比如，你现在可能是做web开发的，那就找本Python原版书；比如你是做移动开发的，那就找本游戏制作的原版书。我只是举例子。关键在于：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;对你现在工作或者学习不重要。因为一开始读原版书，阅读进度肯定会很慢，如果是你工作学习就需要的内容，就会耽误正常的进度，不可取；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;要是你感兴趣的领域。这个不用多说了。只有你感兴趣，才有毅力读下去，如果是连中文你都不想读的内容，为什么要虐待自己读原版？&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在此基础上，我认为没什么特殊的方法。遇到不认识的词，觉得影响自己理解了，就去查。就这么简单。据传闻，《冰与火之歌》的翻译者，连英语六级都没过。当然，这是传闻，我没验证过真假。但是，一个没过英语六级的同学，能啃下冰火原著，我是完全相信的。我在初中的时候，学英语的全部动力，就是打游戏。并且事实证明，啃下来了游戏中的很多英文表述以后，我的英语考试成绩并不低。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;结果，这个同学听了我的建议之后，又说，其实，他还想能看懂没字幕的美剧。&lt;/p&gt;
&lt;p&gt;我说，那也容易啊，从今天开始，坚持看美剧。从有字幕的开始看，&lt;strong&gt;但一定不能有中文字幕&lt;/strong&gt;，只要有英文字幕就好了。天天看一集，看一年我估多少就有一些感觉了。别问我看什么，你喜欢看什么都可以。&lt;/p&gt;
&lt;p&gt;（关于看剧学英语的更多内容，我在知乎回答过一个这样的问题，有兴趣的同学可以去查看：&lt;a href="https://www.zhihu.com/question/21430286/answer/98312360"&gt;https://www.zhihu.com/question/21430286/answer/98312360&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;结果，这个同学听了我的建议之后，又说，其实，他还想考个雅思或者托福琢磨着出国读研。&lt;/p&gt;
&lt;p&gt;我说，那更简单啊，雅思托福都是标准化的考试，市面上帮你应考的教材培训班多如牛毛...&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我不知道大家有没有听懂这个故事。这个同学的问题是，“如何学好英语？”。&lt;strong&gt;但是，他自己却没有定义清楚，什么叫学“好”。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;诚然，能顺畅阅读原版书叫学好英语；能无字幕看懂美剧叫学好英语；能托福雅思考高分也叫学好英语。但是，在我们基础还比较薄弱的时候，我们必须选择一个方向前进，所以，我们必须定义清楚我们的需求，当下，我们觉得怎样是“好”。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;很多时候，一旦想清楚对问题的实际定义是怎样的，具体该怎么做，其实是简单的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;有很多同学问我，&lt;strong&gt;如何学好算法？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;相信大家现在已经理解我的思路了。我会反问回去，你是怎么定义“学好算法”的？&lt;/p&gt;
&lt;p&gt;对于有一些同学来说，学好算法，就是能应付面试中的算法问题；&lt;/p&gt;
&lt;p&gt;对于另一些同学来说，学好算法，是能在算法竞赛中拿大奖；&lt;/p&gt;
&lt;p&gt;还有一些同学想要学好算法，是因为自己当下在学习人工智能；或者编译原理；或者操作系统；或者数据库；或者图形学；或者图像学，等等等等的时候，遇到了阻碍，发现算法是自己的薄弱环节；&lt;/p&gt;
&lt;p&gt;看到了吗？同样是学好算法，其实大家的定义完全不同。而且，一旦我们明确了自己的定义，自己的目标，其实，向着这个目标该如何去行动，并没有大家想象的那么复杂。很多时候，我们不知道如何去行动，关键是，不知道自己的目标是什么。&lt;/p&gt;
&lt;p&gt;当然，关于该怎么学习，我不赘述了，有兴趣的同学，可以参考我的&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2018/2018-04-18/"&gt;《高效学习的秘密》&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;还有的同学的问题，升华到了人生的高度。比如，&lt;strong&gt;我要怎么做，才能成功？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我的问题就是，你到底怎么定义“成功”的？&lt;/p&gt;
&lt;p&gt;有的同学会回答我，我定义的成功，就是“当上CEO，赢取白富美”。怎么样，够清晰了吧？&lt;/p&gt;
&lt;p&gt;我们不去评价这个定义怎么样，单说对问题定义的清晰程度。很抱歉，非常非常的不清晰。我还能问出一大堆问题，才能回答你具体要怎么做。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我们先来看”赢取白富美“这部分。具体，你心目中，是不是已经有了这个“白富美”的人选了？&lt;/p&gt;
&lt;p&gt;如果你还没有一个具体的人选，那么问题就来了，你是怎么定义“白富美”的？是学历达到什么标准？经济能力达到什么标准？家庭背景达到什么标准？还是怎样？&lt;/p&gt;
&lt;p&gt;一旦你开始思考这些问题，你就会去想，这样的人，会去哪里？我要到哪里，才能大概率的碰上我心目中的白富美？我要满足哪些条件才能出现在这些地方？我要具备哪些能力才能吸引她？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;同理，我们来看“当上CEO”的部分。你想当一个什么企业的CEO？&lt;/p&gt;
&lt;p&gt;是一个科技企业？还是一个媒体企业？还是传统行业？一旦你思考这个问题，你就会仔细思考：自己的优势在哪里，做什么更有希望成功，或者自己离创办一个企业还缺少什么？缺少的这些东西自己如何一点一点去弥补？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;看到了吗？一旦将抽象问题具体化，大家其实会不自觉地开始思考如何行动。而一旦我们对问题有了更加明确的定义，&lt;strong&gt;更关键的是去行动，而根本不是寻找“该如何行动”。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;说回标题的问题，平时工作，即做前端，又做后端，如何把技术做深？&lt;/p&gt;
&lt;p&gt;我想反问的是，究竟想深入做什么技术？自己又是如何定义这个“深”的。&lt;/p&gt;
&lt;p&gt;这些其实都是更关键的问题，并且，只有你自己有答案。你必须先明确这些定义，才能具体行动。而且，一但你明确了这些内容，就会发现，具体行动并不难。&lt;strong&gt;想清楚目标，是最难的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可能有的同学会觉得，自己天天996，就算有目标，但是根本没有时间去行动啊。&lt;/p&gt;
&lt;p&gt;首先，这依然是我坚决反对996的原因。可以参考&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-04-14/"&gt;《大佬们都是这么不讲道理》&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;其次，就算你觉得自己“没有时间”，但是先想清楚目标，也是异常重要的。因为，真的，时间就像海绵里的水。仔细去思考，你就会发现，&lt;strong&gt;在大多数时候，阻止我们前进的，不是没有时间，而是没有目标。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;挤时间，要比想清楚自己的目标，容易太多。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;新的一周，大家加油！：）&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-05-19/readme.md" rel="alternate"/></entry><entry><id>2019/2019-05-13/readme.md</id><title>游戏的云端化，随便聊聊Stadia</title><updated>2019-05-13T00:00:00-07:00</updated><content>&lt;h2&gt;游戏的云端化，随便聊聊Stadia&lt;/h2&gt;
&lt;p&gt;谷歌在GDC2019大会上正式宣布了云游戏平台Google Stadia。&lt;/p&gt;
&lt;p&gt;在笔记本界，除了Windows和macbook，其实一直有第三个竞争者。那就是Google一直提倡的Chrome Book。简单来说，就是整个笔记本就运行一个浏览器，就够了。（当然实际上没有这么简单，所以有Chrome OS的概念。）&lt;/p&gt;
&lt;p&gt;&lt;img alt="chrome" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-05-13/chrome.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Chrome Book是Google在2011年就提出的一个概念，到现在已经8年多了。直到如今，这个概念依然不够深入人心，因为技术上还不够成熟。但是，我从来不怀疑，这是趋势。如果大家思考一下，就会明白，已经有越来越多的任务，我们都可以直接在线上完成。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;今年，Google在GDC2019上，公布了其云游戏平台Stadia，可谓是游戏界的一个重磅炸弹。&lt;/p&gt;
&lt;p&gt;其实，这个平台做的事情，描述起来很简单，在云端运行游戏，客户端只需要浏览器显示游戏画面就好了。这样一来，我们根本不需要关注游戏对电脑的硬件的需求。因为真正的游戏相关运算，是在云端完成的。客户端，只是一个画面展示。&lt;/p&gt;
&lt;p&gt;相信大家可以很容易地理解这样做的优点。理论上，我们再也不用担心自己的电脑配置无法运行新游戏了。因为，我们自己的电脑，本质就是一台显示器而已。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;而其实，这样做的优势，还远远不止如此。从玩家的角度，我们可以想象这样的场景：在家里的客厅打了一半的游戏，要上班了，暂停。然后在通勤的路上，用手机或者平板电脑登录云服务，继续游戏。当然了，到了班上，如果你的老板允许，可以在单位的机子上继续...&lt;/p&gt;
&lt;p&gt;也就是所谓的&lt;strong&gt;终端无缝切换&lt;/strong&gt;。这里的关键还是在于，终端只是一个显示器而已，真正有价值的文件，在云端。&lt;/p&gt;
&lt;p&gt;&lt;img alt="stadia" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-05-13/stadia.png" /&gt;&lt;/p&gt;
&lt;p&gt;这还只是从客户端的角度。从服务端的角度，这样做，很有可能将重塑整个游戏行业。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;首先，这样做，将&lt;strong&gt;极大的杜绝外挂。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;了解外挂的同学都知道，一大部分外挂发挥作用的原理，都在于游戏本身需要在客户端进行计算，再将计算结果和服务器端做通信。&lt;/p&gt;
&lt;p&gt;那么一方面，这个通信过程，我们可以做手脚；&lt;/p&gt;
&lt;p&gt;另一方面，这个计算过程，由于也发生在客户端，我们也能做手脚；&lt;/p&gt;
&lt;p&gt;还有一方面，一些计算结果，是依赖本地操作系统的。最典型的，就是时间。所以，我们还可以使用诸如变速齿轮一类的东东，根本不对游戏客户端做手脚，只是修改本地系统的运转速度，就能达到作弊的目的。&lt;/p&gt;
&lt;p&gt;但现在，所有的这一切都发生在云端，而不在客户端。客户端就是一个显示器。可以预见的，外挂问题将得到极大地改善。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;另外，这样的做法，还可能开创全新的游戏体验。由于所有的运算都发生在云端，那么，游戏厂商就能汇集更多的计算资源，提供以前无法想象的游戏模式。&lt;/p&gt;
&lt;p&gt;比如，现在的吃鸡游戏，一局的参与者是100人，但是完全的云端游戏体验，一局10000人不是什么问题；&lt;/p&gt;
&lt;p&gt;再比如，以前魔兽世界副本任务，最多40人参与，以后，全北京市的玩家一起打一个侵略北京城的大boss...？ &lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;当然了，这样做有一定的“副作用”，最大的副作用，在于简化了审核。某个游戏犯错误了，一秒钟就被拿下，所有的人都再也玩儿不了了。这个游戏，就像根本没有存在过一样。。。因为所有的游戏信息，都在云端。。。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;anyway，云服务一定是趋势。理论上，所有的服务都能够云端化，同时，也都需要云端化。&lt;/p&gt;
&lt;p&gt;这也是Oracle为什么要疯狂向云服务转型的核心原因。&lt;/p&gt;
&lt;p&gt;很有可能，未来，我们的笔记本，其最大的功能，只是显示而已。到时候，我们争论的，应该是去使用微软的云服务，还是苹果的云服务：）&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-05-13/readme.md" rel="alternate"/></entry><entry><id>2019/2019-05-12/readme.md</id><title>答读者问 | 工作一两年后去读研，值吗？</title><updated>2019-05-12T00:00:00-07:00</updated><content>&lt;h2&gt;答读者问 | 工作一两年后去读研，值吗？&lt;/h2&gt;
&lt;p&gt;最近，有个同学问我：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;工作了快一年，再去考研值得吗？考完研后出来找工作会不会有年龄限制？毕竟做开发的，年龄大是不是一个问题？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;无独有偶，最近看一个大V的公众号，遇到了一个读者类似的困惑，问了一个大概同样的问题。大V的态度坚决：考什么研啊，在想什么。&lt;/p&gt;
&lt;p&gt;我瞬间就明白为什么人家是大V，我不是大V了。&lt;strong&gt;我的观点总是那么不鲜明。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;比如对于这个问题，我的答案就是：不同的人，不一样，你还是要根据你的实际情况去考虑，balabalabala。&lt;/p&gt;
&lt;p&gt;你看，这么说，不是和废话一样嘛。根本没有回答人家的问题。而且，对于想考研的人和不想考研的人，两边都不讨好。&lt;/p&gt;
&lt;p&gt;再去看大V文章下面的留言，一堆人分享自己没有读研，但是在工作上多么的不输研究生，甚至工资各种花样超过研究生......&lt;/p&gt;
&lt;p&gt;哎，对于这个“现象”，以后有时间，我再深入分析吧，在这里，我先把我最“废话”的答案分享给大家吧。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;bobo老师的回答：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先，你应该明白，这个问题是没有标准答案的。每个人的具体情况不同，家庭背景不同，对这个问题思考的角度不同，得到的答案就不同。而且，对于这个问题，如果你去咨询不同的人，由于回答者的背景不同，经历不同，思考不同，给你的答案也会完全不一样。&lt;/p&gt;
&lt;p&gt;所以，我不能给出一个“值”或者“不值”的答案。但是，对于你的问题中的几个细节，我觉得我可以随便说一说：&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;其实你刚毕业一年。所以，如果你明年读研，你也比起本科毕业再去读研，推迟了一两年的时间而已。实在不算什么。我只能告诉你，如果你真的去读研，就会看到大量工作以后选择去读研甚至读博的人。这实在不是什么新鲜事儿。而且越好的学校，这样的人越多。如果你有机会去国外的学府看一看，三，四十岁，甚至六十岁去读研读博，都不是什么新鲜事儿。&lt;/p&gt;
&lt;p&gt;其实，我个人认为工作后读研是一件很好的事情，因为你有了一定的工作基础，了解了你在本科时候所学习的那些知识是怎么被用在工作中的，就会更充分的思考：你缺少什么，如果继续深入学习，要学什么，自己适合学什么，学习也就更具有目的性。在我看来，这比本科毕业，没有工作经验，直接去读研，有效的多。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我也不认为年龄是什么问题。因为，如果你真的想读研的话，假设你现在不行动，到了30岁，年龄对你的掣肘更深；到了35岁，更更深；到了40岁，更更更深。如果你担心年龄问题，这更是一个拖不得的问题。因为这个问题无解，你的年龄就是在逐渐增大。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果你真的担心年龄问题，那么最好的解决方案，就是现在去做。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;曾经看过一个对老年人的访谈，问他们最后悔的事情是什么？其中有一个活了100岁的老人说，&lt;strong&gt;她后悔自己没有在60岁的时候学习小提琴。因为如果自己在60岁去学习小提琴，到现在，自己已经是一名有着40年经验的小提琴手了。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所以，最重要的是：你到底为什么想读研。你说工作以后再去考研，值吗？你说的“值”，到底是什么意思。你自己是怎么定义“值”的？&lt;/p&gt;
&lt;p&gt;这个问题别人无法给你答案，只有你自己才能给你自己答案。像我说的，每个人的思考不同，经历不同，得到的答案就是不一样。&lt;/p&gt;
&lt;p&gt;但是在这里，我首先旗帜鲜明地认为：&lt;strong&gt;如果你有经济顾虑，就不要读研。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;什么意思？就是，如果你读研要花费一大笔钱，但是自己的存款或者家庭支付这笔费用有困难；或者自己已经有房贷有小孩，生活压力比较大，读研会可预计地大幅度降低自己包括自己家庭的生活质量，那就不要纠结了，不读。&lt;/p&gt;
&lt;p&gt;为什么？因为在我看来，&lt;strong&gt;我们必须承认：接受教育本身是一件奢侈的事情。&lt;/strong&gt;但是，在我们的文化里，却总认为，穷人就要好好读书，好好读书，将来才能赚大钱。这个逻辑整体没毛病，尤其在初等教育阶段。但是进入高等教育阶段，稍微有点儿问题。&lt;/p&gt;
&lt;p&gt;讲个故事：&lt;/p&gt;
&lt;p&gt;曾经，有个美国教授，问她的中国博士生，为什么要读博。&lt;/p&gt;
&lt;p&gt;那个博士生回答：因为家里穷。&lt;/p&gt;
&lt;p&gt;美国教授听完以后，瞪大眼睛反问：&lt;strong&gt;家里穷还来读博？为什么不工作？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不知道你能不能理解这之中思维的不同。&lt;/p&gt;
&lt;p&gt;当然，可能有些同学认为教育是一种投资，而不是奢侈。但是仔细想一想，&lt;strong&gt;投资不也是一件很奢侈的事情吗？&lt;/strong&gt;你必须首先有足够的财富，才能去投资啊。而到社会上去积累财富，会比在学校里容易得多。&lt;/p&gt;
&lt;p&gt;这也就是为什么，之前我说的：在国外的学府看一看，三，四十岁，甚至六十岁去读研读博，真的不是什么新鲜事儿。因为到了那个年龄，大家才能开始能奢侈起来，才开始能认真思考：自己到底想学什么，想成为怎样的人。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;很多同学要读研，只是想提高自己的专业水平。在这里，我想告诉那些“不打算读研的同学”一个好消息；“打算读研的同学”一个坏消息。&lt;/p&gt;
&lt;p&gt;2019年，美国某权威研究机构（具体是什么研究机构，我忘了，抱歉）公布了一项统计结果。这家机构跟踪了若干不同领域，不同学历，不同学校的学生，看他们毕业后两年左右的职业经历和薪资水平，大致得出了这样的结论：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;对于工程专业的学生（计算机包含在内），他们的学校背景，学历背景，和他们工作后的薪资水平没什么关系。&lt;/strong&gt;换句话说，你是麻省毕业的，还是某野鸡大学毕业的，都出来当程序员，薪资差别不大；甚至你是研究生毕业的，或者你本科都没上，就出来当程序员，薪资差别也不大。&lt;/p&gt;
&lt;p&gt;但是，&lt;strong&gt;对于商科，艺术类学科，学校背景、学历背景，影响巨大。&lt;/strong&gt;这背后的原因，应该很好想明白，我不仔细分析了。&lt;/p&gt;
&lt;p&gt;当然，虽然中国整体情况和美国有很大的不同，但是程序员入行薪资这方面，我观察也是差不多的。不管你是211，985的学生，还是二本学生，都是有机会进BAT的，关键是你的实力，而不是学历。进去以后，只要评级相同，工资差别不大。&lt;/p&gt;
&lt;p&gt;固然要承认，你的学历背景会让你的简历留存概率更高，但这背后的原因依然是：统计意义上，名校学生基础就是好，整体素质就是高。如果你是二本学生，有拿得出手的东西，可以轻易证明自己不输985，211的学生的话，BAT不太会鄙视你。这就是搞技术公平的地方。这样的例子我看到了太多太多。即使在今年这样一个行情不景气的时候，依然在上演着。我在&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-03-18/"&gt;《算法有什么用，没用》&lt;/a&gt;一文中，曾说过，关键不是你没有什么，而是你到底有什么。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所以，不要指望靠读完研究生，你的技术能力就有巨大的提升。&lt;strong&gt;技术能力的巨大的提升，肯定来自你的努力。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果你够努力，不读研究生，工作的过程中，技术能力也能有巨大的提升。&lt;strong&gt;尤其是现在，知识传播这样简单，在网上可以轻松找到一流学府的学习材料。&lt;/strong&gt;区别是，读研，会有大量的时间专门用来学习，所以时间会宽裕一些。这也是前面所说的，受教育是“奢侈品”的原因。&lt;/p&gt;
&lt;p&gt;那么到底为什么要读研呢？&lt;/p&gt;
&lt;p&gt;除了换取了大块儿的，专门的时间用于精进学习以外，以下，是我思考的一些优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;学历在一些场景下，或者是很多场景下，还是一个硬通货。这个大家都懂的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;你还可以再一次以应届生的身份找工作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;你可以认识一群同样拥有研究生学历的朋友。你在扩展自己的社交圈。而且，在学校这个环境，认识的朋友，和在社会环境下，认识的朋友，不太一样。当然，这一点，每个人体会不同。但整体，我认为，在学校认识的朋友，利益纠纷更少，所以会更真诚一些。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;研究生生活帮助你了解学术界在做什么，在怎么思考问题。这在我看来，还是挺有意义的。&lt;/p&gt;
&lt;p&gt;当然，可能很多人读完研以后，得到的结论是：学术界就是一坨屎。我觉得这无妨。这就是我经常说的：&lt;strong&gt;明白一些东西没有用，在很多时候，和明白一些东西很有用，是同样重要的；明白自己不适合什么，在很多时候，和明白自己适合什么，是同样重要的；知道什么时候说NO，在很多时候，和知道什么时候说YES，是同样重要的。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;研究生自己做毕业论文，在我看来，更像是在经历一次“创业”。什么意思呢？就是你将近乎从零开始，对一个属于自己的小项目全权负责。从寻找选题（idea），到开题（商业计划书），到具体实施过程中遇到的各种琐碎的困难，到最后的答辩（接受投资人的检阅）。其中的酸甜苦辣，只有经历的人才了解。&lt;/p&gt;
&lt;p&gt;对一些同学来说，这是一个难得的机会。当然，对于另一些同学来说，他们本身就维护自己的一个小产品，或者开源项目，对这套并不陌生，但我相信对于更多同学来说，体验一下这个从0到1的感觉，是一次不可多得的经历。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;我不确定现在是不是这样了，至少通过我的个人经验，研究生学习的过程极大的帮助我提高了我的英语水平，因为看英文文献是必须的。也是在这个阶段，我才开始认真思考总结适合自己的英语学习方法是怎样的，并且有了质的飞跃。&lt;/p&gt;
&lt;p&gt;其实，看的那些文献具体内容是怎样的，肯定早就忘了，但是英语水平的提高，是非常非常有用的。这就是我在&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-04-11/"&gt;《知识掌握的七个境界》&lt;/a&gt;里说的：&lt;strong&gt;所谓的教育，就是忘记了在学校所学的一切之后，剩下的东西。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果你有机会在读研期间出国的话，就更不用说了。以学生身份出国，比以工作身份出国，容易太多了。尤其是现在的中美局势。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上仅供参考。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;好了，我的废话说完了。&lt;/p&gt;
&lt;p&gt;最后，依然是，只有你自己能给出答案。&lt;/p&gt;
&lt;p&gt;但不管怎样，我一直认为，&lt;strong&gt;选择没有对错。任何选择，你总能在很多人身上，找到证据，这样选择是正确的；而在另外一些人身上，找到证据，这样选择是错误的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所以，还差一句废话：&lt;strong&gt;遵循你的内心，然后努力，就好了：）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;大家加油！：）&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-05-12/readme.md" rel="alternate"/></entry><entry><id>2019/2019-05-09/readme.md</id><title>分享：国外大神制作的游戏开发学习线路</title><updated>2019-05-09T00:00:00-07:00</updated><content>&lt;h2&gt;分享：国外大神制作的游戏开发学习线路&lt;/h2&gt;
&lt;p&gt;很多同学曾经问我游戏开发相关的问题。&lt;/p&gt;
&lt;p&gt;嗯，怎么说呢。&lt;/p&gt;
&lt;p&gt;我的建议是，选择一个你想做游戏的平台：iOS？Android？桌面？然后，直接上手游戏引擎，直接开发属于你的游戏。比较主流的，适合独立游戏开发者的引擎，是Unity。&lt;/p&gt;
&lt;p&gt;当然，学习游戏引擎有一定的技术门槛，但是，现如今，游戏真的不完全是拼技术的行业。尤其是独立游戏越来越蓬勃发展的今天。近乎，每一个技术人，都有足够的基础，花不了那么多的时间，就能开始属于自己的独立游戏开发。在我看来，游戏行业更多的是一个创意行业。还有足够多的耐心和时间打磨自己的作品。&lt;/p&gt;
&lt;p&gt;当然了，如果你想进入游戏相关大厂，参与AAA级别的游戏制作，那完全是另外一回事儿。你需要精进自己的技术，达到大厂要求。游戏行业涉及的具体技术非常非常多（其实前端，后端，移动开发，系统运维，大数据，人工智能...都很多啦）。在下面，我会给大家分享一个国外大神做的游戏行业学习路线图。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;首先，这个路线图在我看来不能完全叫路线，不能顺着这个路径去学习的，会学死的。千万不要路径依赖。可以参考我的文章：&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2018/2018-04-18/"&gt;《高效学习的秘密》&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;但是，里面所涉及的知识点。是非常有参考价值的。能让大家对游戏开发领域有一个全局性的认识。&lt;/p&gt;
&lt;p&gt;另外，图中都是英文，我就不翻译了。都是一个一个的技术名词而已，如果有不了解的，大家可以自行Google，也可以当一个计算机专业英语词汇手册来学习。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;首先，不管是什么领域，只要在计算机行业，请学好至少一门基础语言，加上算法和数据结构。对于游戏开发来说，使用C++居多。由于Unity引擎的极度流行，C#也应用广泛。当然，根据你的游戏部署平台的不同，包括后端架构的不同，主流语言都在游戏行业有一席之地的。&lt;/p&gt;
&lt;p&gt;&lt;img alt="basic" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-05-09/basic.png" /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;在这个基础上，整体这个“路线图”分&lt;strong&gt;服务端和客户端&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;服务端的知识点，其实和网页或者app的服务端，区别是不大的。所以，即使你的专业不是游戏相关的专业，对游戏行业感兴趣，进游戏厂做服务端是完全没有问题的：）&lt;/p&gt;
&lt;p&gt;&lt;img alt="server" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-05-09/server.png" /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;然后是客户端。&lt;/p&gt;
&lt;p&gt;游戏开发的客户端，有一些其他领域开发不涉及的内容，其实主要集中在图形学，物理引擎，还有智能方面（是基于agent的AI，不是机器学习）。&lt;/p&gt;
&lt;p&gt;而且，其实，做一名游戏开发工程师，也并不需要全部精通。比如，通常来讲，做渲染（图形学相关），做引擎，做智能，不是同一拨人。&lt;/p&gt;
&lt;p&gt;&lt;img alt="client" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-05-09/client.png" /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;最后，这个路线图，在我看来，也有不完善的地方。比如，游戏测试，其实是很重要的一块儿。据我所知，很多游戏为了测试方便，甚至会研发专门的内部使用的测试工具乃至专门的测试语言。我曾经翻看过一本不错的从底层搭建一个解析语言的书，竟然是一名游戏开发者写的：）&lt;/p&gt;
&lt;p&gt;原文在这里：&lt;a href="https://codeburst.io/the-2018-game-developer-roadmap-e07e45b3c423"&gt;https://codeburst.io/the-2018-game-developer-roadmap-e07e45b3c423&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;大家加油！：）&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-05-09/readme.md" rel="alternate"/></entry><entry><id>2019/2019-05-08/readme.md</id><title>从Oracle的裁员，到“技术专家陷阱”</title><updated>2019-05-08T00:00:00-07:00</updated><content>&lt;h2&gt;从Oracle的裁员，到“技术专家陷阱”&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Oracle裁员了。而且幅度还挺大。&lt;/p&gt;
&lt;p&gt;整体事情很简单。Oracle的中国区研发中心（CDC）确定裁员900余人。而整个CDC的人员只有1600余人，并且肯定还有第二批裁员。根据外媒的估计，如果不出意外，Oracle的中国区研发中心将完全撤离。&lt;/p&gt;
&lt;p&gt;对于这次裁员，虽然很多媒体给出了“良心裁员”的评价，但还是有很多Oracle员工进行抗议，并且打出了“坚决反对政治性裁员”，“让政治远离科技”的标语。&lt;/p&gt;
&lt;p&gt;&lt;img alt="protest" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-05-08/protest.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;这些标语怎么来的，这事儿目测在公众号不能深说。说深了，绝对被禁。前几天，很多文章第一时间发文，发表了关于中美贸易战的新闻，都被封了。所以，对于中美贸易战，我们就和新华社保持一致就好了。在这里直接引用新华社的新闻：&lt;a href="https://mp.weixin.qq.com/s?__biz=MzA4NDI3NjcyNA==&amp;amp;mid=2649449918&amp;amp;idx=1&amp;amp;sn=4b079415402b49e9c83579767cc1eece&amp;amp;chksm=87f66125b081e8331a235ad59da04fa8795ae6dd8077cae0f76cab595609d7527814ed5c3b75&amp;amp;scene=21#wechat_redirect"&gt;《中方关于美方拟升级关税措施的声明》&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;中美贸易战绝对将是影响整个世界格局发展的一个重大事件。当下我们看到的一切，比如这条新华社新闻，只是整个巨大棋局中太小的冰山一角。但是独立媒体不能太深入分析。反正我说中国必胜，求腾讯不要封我。&lt;/p&gt;
&lt;p&gt;作为一个技术向的公众号，也不应该深入探讨政治话题，说多了招人讨厌。所以我们不说政治。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在具体说回技术之前，我们先扯一扯这个所谓的“良心裁员”。&lt;/p&gt;
&lt;p&gt;为什么很多媒体说这是一个“良心裁员”呢？因为，Oracle高调公布了补偿标准：N + 6。其中N所对应的基数，是三倍于社会平均工资。大家估算，大概是25k；而6所对应的基数，是你在Oracle的工资水平（这是我现在得到的消息）。&lt;/p&gt;
&lt;p&gt;所以，按照这样计算，假设你在Oracle干了10年，月薪5万元的话，你拿到的赔偿金就是 10 * 25k + 6 * 50k = 55万人民币。&lt;/p&gt;
&lt;p&gt;猛地看，这绝对是一笔巨款。与此同时，在国内的环境，大家都懂的，很少会有企业完全遵守劳动法进行这样的全额赔偿。其实，说实话，外企也不想这么“合规办事”。但是在特殊时期，加上在别人家的地盘，只能100%的依法办事。100%的依法办事，就是“良心”了，想来，也有一丝不是滋味。&lt;/p&gt;
&lt;p&gt;但是，为什么还会有Oracle员工抗议呢？&lt;/p&gt;
&lt;p&gt;据称，&lt;strong&gt;裁员的这批人，平均年龄是37岁，平均月薪是5万元。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;换句话说，即使你是一个10年的老员工，上面计算的那笔赔偿金，不到一年就赚回来了。而且，Oracle即使在硅谷，也素以硅谷养老院闻名。近乎没有加班哦。965是必须的。但这么好的工作，没有了。&lt;/p&gt;
&lt;p&gt;肯定有很多同学说，这批工程师应该不愁再找到工作吧。其实我也觉得这批工程师是不愁再找到工作的。但可能很难像现在这么“理想”了。&lt;/p&gt;
&lt;p&gt;毕竟今年的市场行情，大家都是有目共睹的。这还仅仅是从工作时间，工作强度和工资这些角度去分析，如果再思考一些其他因素，比如很多人可能基于当前的职业选择买了房，但是新工作的地点难免尴尬，就还会多一些通勤上的困难。再加上这个年龄段，可能还要考虑接送小孩儿上下学等问题。不管怎样，在短期内，生活质量肯定会有所下降的；长期看，则肯定充满了不确定性。虽然不确定性意味着机会。但不是所有人都想要机会的。其实大多数人都更喜欢平平稳稳。&lt;/p&gt;
&lt;p&gt;而且，貌似员工手上的股权等问题也有纠纷，具体我就不了解了。这么看来，这个裁员，就不能叫“良心”了。这只是一个“特别合法的裁员”而已。&lt;/p&gt;
&lt;p&gt;这也是之前，我在&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-04-14/"&gt;《大佬们都是这么不讲道理》&lt;/a&gt;一文中，坚决反对996的另一个原因。大家再怎么违法给企业加班加点的干活，最终，如果企业“不行了”，撑死了，换回一个“合法裁员”。所以，大家合法上班就够了，别违法加班。&lt;/p&gt;
&lt;p&gt;不是让大家不努力。下了班，努力的方向多了去了。而且，很多努力，对你的企业也是有潜在好处的。这篇文章最后，我也会给你一些建议的。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;正儿八经说技术了。&lt;/p&gt;
&lt;p&gt;Oracle的这批员工能不能找到工作？肯定能。不用想。30-40岁是人的黄金年龄。所谓的“壮”年。对于工程师来说，既有之前的技术，职场和经验的积累，同时，学习能力，专注能力，认知能力，也都基本是在顶峰的。&lt;/p&gt;
&lt;p&gt;别和我说什么三四十岁的人学习能力不如年轻人。绝对是扯淡。&lt;strong&gt;学习意愿没有年轻人高是真的。但真要学习起来，甩年轻人10条街。&lt;/strong&gt;反正现在的我，比起十年前的我，学习效率高100倍。&lt;/p&gt;
&lt;p&gt;但是！所有的事情似乎都有但是。为什么我说，近乎一定的，这批Oracle的老员工，哪怕有着十年的经验，名片上的title是技术专家，但是可能很难找到像现在一样的“理想工作”？&lt;/p&gt;
&lt;p&gt;我们来看一个故事：&lt;/p&gt;
&lt;p&gt;去年，一位ID是oraguy的程序员，在网上吐槽为Oracle的数据库做维护开发有多困难。据悉，现在的Oracle数据库，是一个有近2500万行C代码的复杂项目。不断的更新迭代，让内部的逻辑，是被数千个flag连接起来的。Oracle数据库的开发人员日常，是这样的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;开始处理一个新的 bug 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;花两周的时间试图理解 20 个不同的 flag ，这些 flag 以神秘的方式相互交互，导致这个困境。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;再添加一个 flag 来处理新的特殊场景。添加几行代码来检查此 flag ，并解决有问题的情况，规避该 bug 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将更改提交到包含大约100-200台服务器的测试服务器集群，这些服务器将编译代码，构建新的 Oracle 数据库，并以分布式方式运行数百万个测试。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;回家。第二天来上班，继续处理别的 bug 。测试可能需要20-30个小时才能完成。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;再回家。再来上班，检查你的集群测试结果。顺利的话，会有大约100个失败的测试。倒霉的话，将有大约1000个失败的测试。随机选择一些测试并试图搞清楚你的假设出了什么问题。或许还需要考虑10多个 flag 才能真正理解 bug 的本质。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;再添加一些 flag 以尝试解决问题。再次提交更改以进行测试。再等20-30个小时。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;来来回回重复两周，直到你得到了将这些 flag 组合起来的“神秘咒语”。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;终有一天，你会成功，不再出现测试失败。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;为你的新更改添加100多个测试，以确保下一个不幸接触这段新代码的开发人员永远不会破坏你的修复。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;提交最后一轮测试的成果。然后提交以供审核。审查本身可能还需要2周到2个月。所以接下来继续去处理下一个 bug 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在2周到2个月之后，一切已就绪，代码将最终合并到主分支中。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这段描述，如果你没有较大的项目经验，可能不太能理解。但如果你稍微有一点点项目经验，应该都会心有戚戚。据说，为Oracle添加一个小功能，可能要6-12个月，但是大一点的功能，比如添加一种新的身份验证，预估时间是两年。&lt;/p&gt;
&lt;p&gt;其实，这赤裸裸地反映了当下软件工程行业的局限性，以及IT人员的工资为什么高。（如果有同学没看懂这个局限性在哪里，有时间我单写。）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;好了，现在问题来了，&lt;strong&gt;一个Oracle的技术专家，回到就业市场，受不受欢迎呢？我的结论是：不好说。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为什么不好说？上面的Oracle工作日常已经揭示了答案。&lt;/p&gt;
&lt;p&gt;你在Oracle内部，可能是一个技术专家。&lt;/p&gt;
&lt;p&gt;为什么你是技术专家，别人不是？因为你能比别人更快地修改bug，或者添加新的功能，完成需求。&lt;/p&gt;
&lt;p&gt;为什么你能比别人更快地修改bug，或者添加新功能？因为你对Oracle数据库的内部代码非常熟悉，对几千个flag如数家珍。&lt;/p&gt;
&lt;p&gt;可问题是，熟悉这几千个flag，对Google, Facebook, Apple, BAT, 没什么卵用。因为，&lt;strong&gt;别人家的产品，是另外几千个，和你熟悉的，完全不同的flag。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;你理解了吗？&lt;strong&gt;这样的技术专家的称号，是无法100%的平移到其他企业的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当然，你可以说，长期和这几千个flag作斗争，让你有了balabalabalabala的经验。我也同意。但是，在别的企业眼里，他还是不值你原来的薪水所代表的那个价值。&lt;/p&gt;
&lt;p&gt;这个现状，就是大家经常说的，被大企业磨成了“螺丝钉”，也是这篇文章标题所说的“技术专家陷阱”。你确实是一个技术专家，但是，这个专家的头衔极其受限，脱离了Oracle这个平台，你的价值大大降低。&lt;/p&gt;
&lt;p&gt;对于Oracle来说，你可能确实是其某一台“机器”不可或缺的“零件”。但关键是，&lt;strong&gt;如果Oracle决定放弃这台机器了呢？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这里，我只是用Oracle举例。所有的大企业员工，近乎都有这个困境。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;曾经有人分享过这么一个“现状”：&lt;/p&gt;
&lt;p&gt;某企业招聘一个系统技术人员，来面试的人，都有着极好的学历背景，公司背景，以及工作经验。甚至十年之久的技术专家。但是当面试官让面试者写一段代码，描述一下LRU的原理的时候，大部分人却表现得一团糟糕。&lt;/p&gt;
&lt;p&gt;很多同学都说，工作的时候从来不需要接触到那么底层的代码。但那是因为，你所在的公司，前人已经铺好路了。你只需要基于前人的工作，进行小修小补就好。在这个过程中，你对自己公司的代码越来越熟悉，看似能解决越来越多的问题，但与此同时，&lt;strong&gt;你很有可能离真正的核心技术问题越来越远。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;你甚至可能一直在维护你们公司中的一个缓存系统，天天在和LRU打交道，却无法清晰地阐述LRU的原理。&lt;/p&gt;
&lt;p&gt;那么换一个企业，即使还让你维护新的企业的缓存系统，你连LRU的基本原理都说不清楚，怎么能让人信服你能迅速理清楚上千个和LRU过程交互的flag，快速为企业提供价值？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;怎么避免这种情况？&lt;/p&gt;
&lt;p&gt;首先，你为一个企业效力，尤其是大企业，势必会被打磨成螺丝钉。因为只有把你打磨成螺丝钉，你才对这个企业更有价值。&lt;/p&gt;
&lt;p&gt;但是，我们要做的，是尽量成为一个形状不太奇怪的螺丝钉；尽量让自己能在别的机器上，也可以发挥相当的作用。&lt;/p&gt;
&lt;p&gt;我的建议如下：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1）拥有自己的开源项目。&lt;/strong&gt;拥有自己的开源项目，意味着自己要从底层实现一些东西，而不仅仅是依靠你的企业平台上成熟的技术栈。这个过程会让你对技术理解的更深刻。你的项目可能不会成为一个主流的产品，改变世界，但是，它绝对能改变你。更何况，万一改变世界了呢：）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2) 看成熟开源项目或者框架的源码，而不仅仅停留在应用的层面。&lt;/strong&gt;如果只是自己做开源项目，难免受制于自己的能力。但是成熟的开源项目，已经集结了很多程序员智慧的结晶和实践的成果，看别人的设计，学习别人的实现，也可以让你走进技术的核心。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3）适当轮岗。&lt;/strong&gt;接触更广阔的工作任务，而不仅仅把自己局限在一个部门的一个职位中。拓宽自己的眼界和经验的多样性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4）闲得没事儿的时候，多关注一些技术比赛信息。&lt;/strong&gt;这里，我说的不是ACM那样的算法比赛，因为算法比赛的形式太固定了。这个世界还有很多其他形式的计算机竞赛，这些竞赛，即使你不参加，关注一下，也能拓宽你的视野。&lt;/p&gt;
&lt;p&gt;比如现在很多人工智能的竞赛，通过他们，你就会慢慢明白：人工智能能如何具体的应用在某一个领域，具体能解决什么问题。数据具体是什么样子。甚至别人是怎么分析这些数据的。这和看新闻，完全不一样。&lt;/p&gt;
&lt;p&gt;再比如很多hackathon的比赛，通常都是在很短的时间（12-48个小时），完成一个小项目，从游戏开发，到物联网，到区块链应用，我还见过为太阳能板编程的hackathon。这些都会让你了解，原来，这个世界上有那么多奇怪的API；用编程的方式可以做那么广泛的事情；面对同样的主题，大家的想法那么不一样。这些，大会让你一定程度地逃离“技术专家”陷阱。&lt;/p&gt;
&lt;p&gt;&lt;img alt="hackathon" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-05-08/hackathon.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5）不要局限在一般科技媒体中谁家裁员了，谁家盈利又多了一点，谁家又出了一个折叠屏一类的小事情。&lt;/strong&gt;多关注一些“大事情”。比如科技的昨天，今天，和未来。&lt;/p&gt;
&lt;p&gt;关注我的公众号《是不是很酷》，就是一个很好的开始：）我绝对不会因为这样的小事情发文的。即使发文（比如这篇），也一定会有独立的观点，而不是制造焦虑感。&lt;/p&gt;
&lt;p&gt;我在慕课网上的专栏[《用技术人的眼光看世界，程序员技术指北》(https://www.imooc.com/read/27)，可能是另一个很好的开始。&lt;strong&gt;付费专栏，文章角度会不同，但我会尽最大努力，保证深度。&lt;/strong&gt;这个公众号上一篇推文，就是开篇词：&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-05-06/"&gt;《正式邀请你，和我一起，用技术人的眼光，探索世界》&lt;/a&gt;。推荐你读一下，开篇词下面有订阅海报。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;希望Oracle的被裁员工都能拿到令自己满意的补偿，同时有更广阔的前途。&lt;/p&gt;
&lt;p&gt;也祝所有人都成为技术专家，同时不会掉入“技术专家的陷阱”。&lt;/p&gt;
&lt;p&gt;大家加油！：） &lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-05-08/readme.md" rel="alternate"/></entry><entry><id>2019/2019-05-06/readme.md</id><title>正式邀请你，和我一起，用技术人的眼光，探索世界</title><updated>2019-05-06T00:00:00-07:00</updated><content>&lt;h2&gt;正式邀请你，和我一起，用技术人的眼光，探索世界&lt;/h2&gt;
&lt;p&gt;今天，我的新产品，在慕课网上线了：）&lt;/p&gt;
&lt;p&gt;这个新产品是一个文字专栏，叫《用技术人的眼光看世界 · 程序员技术指北》。在这个专栏里，我没有聚焦在某一个具体技术上，而是打算使用一年的时间，每周更新一篇文章，一点一点陪你，一起，用技术人的眼光，看这个世界。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;以下，将是这个专栏的《开篇词》，我会描述我的创业经历：）&lt;/strong&gt;同时，这个专栏文字的试读，我挑选了6篇文章。这6篇文章，都选自我的公众号。老用户应该已经很熟悉这些文字了。但如果你不了解我的文字风格，可以通过这些试读文章，更多地了解这个专栏。&lt;/p&gt;
&lt;p&gt;这个专栏的定价，现在购买，是69.9元，6月7日恢复原价后，是99元。所以，现在购买，平均下来，每篇文章，你将花费1.3元左右。&lt;strong&gt;我有这个自信，让你为每篇文章付费的这1.3元，都物有所值。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可能有些同学会问，有了这个专栏，这个公众号的文章怎么办？请大家放心。这个公众号还将继续运营。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;专栏的文字内容，由于是付费阅读，整体会更硬核一些；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;而公众号的文字，探讨的话题，会更随意一些。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;但我向大家保证，从我手里发表出去的文字，一定都经过了我的仔细思考。硬核也好，随意也罢，只是话题角度的不同。但我会努力顾及每一篇文章的深度，让我的用户，能够通过我的每一篇文字，都有所收获。&lt;/p&gt;
&lt;p&gt;希望大家能继续支持我：）&lt;/p&gt;
&lt;p&gt;对了，专栏支持推荐分享赚佣金活动。每分享推荐成功一个用户，赚13.98元，可以直接体现。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;《用技术人的眼光看世界 · 程序员技术指北》开篇词&lt;/h3&gt;
&lt;p&gt;大家好，我是liuyubobobo。是一名创业者，现旅居美国。研究生未毕业就开始创业，直到今天，已经将近15载了。同时，我也是资深的慕课网讲师。在慕课网的实战栏目中，已经有6门课程了，主要负责算法和数学方向。&lt;/p&gt;
&lt;p&gt;2019年初，慕课网联系我，希望我能写一个专栏，用文字的方式，和大家分享更多技术知识。我毫不犹豫地答应了。但是，具体分享什么内容，我有一些不一样的想法。很多熟悉我的同学，可能会以为我一定会做一个算法技术相关的专栏，毕竟，讲解这些领域对我来说很是得心应手的。但是，思考再三，我决定不这样做。而是推出现在这个《用技术人的眼光看世界 · 程序员技术指北》。&lt;/p&gt;
&lt;p&gt;可能，很多同学不明白，这是一个怎样的专栏。不要着急，这篇文章的最后，我会给大家解释清楚的。在这里，我想先给大家讲一讲，我创业时期的故事。&lt;/p&gt;
&lt;p&gt;我前后有两次创业。第一次创业以失败告终；第二次创业，进展还不错，拿到了投资，到现在，也有稳定的现金流。我们的创业产品不是面向大众的产品，而是和北京大学光华管理学院合做，基于管理学教育的一个专属平台。是一个在极其垂直细分的领域内部的创业项目。所以，大家通过市面的途径，无法使用我们的产品，要更加详细理解我们的产品，其实是一个很专业的话题了，这和我们的这个专栏没有关系。不过，这次创业，让我深刻感受到了技术，和这个世界之间的复杂关系。&lt;/p&gt;
&lt;p&gt;我创业初期，四处找投资。那时候，我参与了一次很奇特的饭局。饭局的主宾是一名投资人。那次饭局，投资人别出心裁，或许是想考考大家，又或者只是在饭桌上，不想聊那么严肃的问题，于是，让大家依次说一说，未来五年或者十年，世界会变成什么样子。这个饭局打开了我认知世界的另一扇门，因为，我突然发现，在座的各位创业者，即使80%都不是技术出身，对技术的理解，却比我这个科班专业的计算机学生更深刻。而且，他们普遍年龄，比我还小。&lt;/p&gt;
&lt;p&gt;当然，他们不会Java和C++；不知道什么是复杂度分析；不懂逻辑回归和SVM；搞不好有的人都没接触过微积分。但是，他们知道某个行业发展的历史和现状；知道这个行业的局限性在哪里，也就知道发展的可能性在哪里，机会在哪里；他们知道技术有可能从哪个侧面，能改变这一切。因此，他们的创业项目大多有着明确的方向。虽然，他们的方向有可能是错误的，毕竟，谁也不能预测未来。但是，因为他们是有目的的行动，即使失败，他们也能更有针对性地从中吸取教训，或者及时调头，向着更好的方向前进。&lt;/p&gt;
&lt;p&gt;相较而言，我虽然懂具体的技术知识，却只见树木，不见森林。别人告诉我，要实现这样一个功能，我能实现出来，却不明白，这个功能到底有没有意义，别人为什么需要这个功能，这一切背后是否有更深层次的原因。简单来说，我一直自以为是地在技术的小世界里畅游，却忽视了外面更大的世界。&lt;/p&gt;
&lt;p&gt;好在，我研究生时的专业——虚拟现实，让我对VR，AR领域的前沿现状有一些了解，也能随便说上两句，不至于太尴尬。但是，那个饭局后，我就告诉自己，仅仅是技术好，是不够的。必须有更大的视野，必须看更大的世界。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;由于我的第二次创业项目是和北京大学光华管理学院合做，所以，近乎整整五年，每个周末，我都是坐在北大的MBA或者EMBA课堂上度过的。在这个过程中，我也接触了很多来自各行各业的大佬朋友。他们有职业经理人，企业的中层管理者；也有创业者，企业的高管，甚至不乏身价上亿的老板。因为这个创业项目，我还有幸和万科集团合作；和王石先生一起吃饭，亲自来到云南哀牢山，采访了褚时健老先生。&lt;/p&gt;
&lt;p&gt;这段时间，中国互联网飞速发展，新生事物层出不穷，新的企业也不断携着新的商业模式登台上场，为中国乃至是世界的技术史添加注脚。我们看到了越来越多的企业，正在使用技术，改造我们生活的方方面面。而与此同时，在北大的光华管理学院里，各行各业的大佬们探讨最多的话题，就是技术的发展趋势。大佬们最关心的，是技术如何和某一个具体行业融合。&lt;/p&gt;
&lt;p&gt;此时的我，距离那次饭局，已经有两三年的光景了。这两三年的时间，我都在尝试，对我接触的每一个技术，不仅仅学习它的原理方法，还从一个更高的视角，去思考：这个技术为什么出现；它出现前，世界是怎样的；它解决了什么样的问题；现在，在这个技术的推动下，现状如何；局限性在哪里；改进的方向在哪里；未来又在哪里。&lt;/p&gt;
&lt;p&gt;这样不停地思考，广泛地涉猎，是有回报的。在北大光华管理学院，逐渐和各个行业的大佬们交流的过程中，我发现自己对很多问题，有了属于自己的见解。这些见解不一定对，但是，在交流碰撞的过程中，大家互相取长补短，让我有了更大的收获。&lt;/p&gt;
&lt;p&gt;有的大佬只是想通过互联网的方式销售自己的产品或者服务，但是，他们不明白，为什么淘宝这样一个看起来简单的网站，需要那么多人，用那么长时间维护；他们不知道怎么估计自己项目的预算和工期，也不知道怎么从零开始，创建一个网站；创建好一个网站，对企业的管理体系，又有着怎样的影响；&lt;/p&gt;
&lt;p&gt;有的大佬希望自己的项目有新的增长点，想将诸如人工智能这样的技术运用到自己的行业中，但是，他们不知道怎么运用是合理的，可行的；可能的挑战又在哪里；他们不知道人工智能的商业化运用，前人已经有了怎样的尝试，又获得了怎样的经验教训；&lt;/p&gt;
&lt;p&gt;有的大佬希望构建企业内部的知识管理系统，将企业的知识沉淀下来，而不仅仅是掌握在核心人物的手里。但是，他们不了解，知识管理有哪些工具，这些工具的优缺点是怎样的，哪一个适合自己的企业；&lt;/p&gt;
&lt;p&gt;有的大佬想使用大数据，优化自己的企业发展，兴奋地跟我探讨每一个数据源可能的作用。这些数据源，甚至包括办公楼里抽水马桶抽水的频率和数量；&lt;/p&gt;
&lt;p&gt;有的大佬，跟我探讨使用计算机技术分析海量法律文件资料的可行性；&lt;/p&gt;
&lt;p&gt;还有的大佬，直接跟我探讨，有没有可能使用人工智能的方式，预测股票，或者金融市场的走势。&lt;/p&gt;
&lt;p&gt;面对所有的这些问题，我都惊讶于，技术竟然已经如此无孔不入，深入地遍布在我们生活的方方面面。作为一个新时代的技术工作者，掌握具体的技术知识，固然是安身立命之本。但是，对技术发展有着全局性的认识和见解，将让你对整个世界拥有全新的认知。&lt;/p&gt;
&lt;p&gt;在和行业大佬们的交流过程中，我又见识到了更大的世界，听到了很多人对同一个问题，不同角度的思考。这些思考汇集起来，进一步充实了我的认识，形成了一个正向循环。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;后来，由于家庭原因，我先后旅居新加坡，美国两地。在海外，我不认识那么多商业大佬，平时对技术于商业发展上的探讨少了很多。但是，我却惊讶的发现，海外人才们普遍对世界发展趋势的关注。&lt;/p&gt;
&lt;p&gt;即使不是技术工作者，不是创业者，大多数受过高等教育的民众，也会关注科技的发展可能给社会带来的问题。在如今的时代，隐私到底还是否存在，隐私的边界是否要被重新定义；区块链技术到底是不是下一代货币的革命性技术；人工智能的发展到底又意味着什么，能带给人类更多的便利，还是终将成为毁灭人类的技术；美国已经针对人工智能技术的具体应用，建立了新的法律，那么这一切，又将怎样改变技术的发展...&lt;/p&gt;
&lt;p&gt;这些东西听起来好像很虚，离我们平时的工作生活很远，但你又不得不承认，这些东西和我们息息相关。他们反映了当今世界的走势。作为一名技术工作者，更多地把握世界的走势，就意味着更清醒的认识，更主动的选择权，以及更多的机会。程序员虽然自嘲自己是“码农”，但绝不能仅仅面朝黄土背朝天，每天只低头看着屏幕上的代码。我们必须能够不时地抬头，看一看这个世界。&lt;/p&gt;
&lt;p&gt;于是，我决定推出这个专栏。&lt;strong&gt;在这个专栏中，我们不讨论具体的技术知识，而是探讨：技术和这个世界的关系。技术，正在如何一点一点的，和我们所生活的世界交错，互相影响，互相改变。&lt;/strong&gt;这些改变的源头到底在哪里；现在正在怎样发展；未来将可能是怎样的。&lt;/p&gt;
&lt;p&gt;所以，我管这个专栏叫《用技术人的眼光看世界》，我坚信，每一名技术人，由于有着扎实的技术功底，在面对如今这个技术无孔不入的世界时，能够多一分优势，能够更早地看懂世界的变化。&lt;/p&gt;
&lt;p&gt;与此同时，我又加上了一个副标题——《程序员技术指北》。大家在攀登技术高峰时，都要在某一个技术栈上不断地学习精进，这个过程，叫做“指南”。然而，我的这个专栏，不是“指南”，而是指着相反的方向，在“指北”。我希望同学们平时钻研具体的技术，累了的时候，或者上下班通勤的途中，闲了的时候，翻开这个专栏的文章，是朝着相反的方向看了看。这就好像登山途中，大多数时候，我们都关注着脚下的山路，不断前行。但不时地，我们也要回头，向反方向望一望，看看高处的风景。我希望这个专栏的文章，能提供给你一些“反方向的风景”。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;为了让大家更详细的了解这个专栏的风格，我为大家准备了六篇试读。这些试读文章，都是我的公众号《是不是很酷》中的文章。每一篇试读文章，都将从一个侧面，反映了这个专栏可能涉猎的内容。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 各类技术的发展趋势&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先，在专栏中，会有很多文章，分析某一个特定技术领域，甚至只是一个针尖大的技术点，相应的曾经和未来。比如这篇试读文章，探讨了编程语言的发展趋势和未来：&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-03-25/"&gt;&lt;strong&gt;《编程语言的发展趋势：从没有分号，到DSL》&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;甚至，在这个专栏中，你将会看到非计算机科学技术方面的文章。比如，生物医学和计算机科学的结合，在硅谷也是重要的趋势。所以，你也会在专栏中，看到类似这样的文章，探讨人类为了追求更长的寿命，所做出的各式各样的技术努力，以及未来。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-04-05/"&gt;&lt;strong&gt;《科技，死亡，和永生》&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 时事热点新闻的深度分析&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;每天，这个世界都产生着剧烈的变化。这些变化，很多都和计算机科学有着密切的关系。针对重大的实时热点新闻，我也会在这个专栏，发表一些深度解读。在这里，同学们大可放心，我的文章，绝不会仅仅是叙述一遍事实而已，肯定会向大家尽可能地奉献“干货”，提供有深度的视角和思考。比如这篇试读，我试着解读，新西兰恐袭事件背后，科技在扮演着怎样的角色：&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-03-21/"&gt;&lt;strong&gt;《新西兰恐袭，疯狂删帖的小编，背锅的算法工程师，以及“技术优越主义”》&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我公众号中的另一篇文章，则从巴黎圣母院的大火，谈到IT世界的兴衰。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-04-18/"&gt;&lt;strong&gt;从巴黎圣母院的大火，到消逝的IT巨头&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. 让普通人也能看懂学术文章&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;学术界也是推动当今社会发展的一股重要力量。很多新兴的技术，都是先从学术界诞生，之后慢慢走向业界，最终商用化的。在这个专栏中，我也会不时选取我认为有意义的论文，或者论文系列，以科普的方式，向大家介绍，让不在学术界的你，用一种更加浅显的方式，了解学术界的前沿思考。比如在下面这篇试读中，我将以美国著名教育学家Dweck对聪明的研究为主线，向大家介绍她的一系列论文观点，同时，希望大家也能从中，找到更多努力的动力。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2018/2018-07-18/"&gt;&lt;strong&gt;《天生不聪明》&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. 高效学习的秘密&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在如今这个知识爆炸的时代，每一个同学，都面临着持续学习，终身学习的问题。到底怎样学习才是高效的？在这个专栏中，你也将会不时地看到一些学习方法论的文章，探讨学习的秘密。比如以下两篇试读：&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2018/2018-04-18/"&gt;&lt;strong&gt;《高效学习的秘密》&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-04-11/"&gt;&lt;strong&gt;《知识掌握的七个境界》&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5. 不时加餐，向你推荐更多内容，打开新的世界&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当然了，在这个专栏中，我还将会不时地给你加餐，可能会向你推荐一些好的书籍；可能会邀请你看一部好的电影。不要误会，我不是一个文艺青年，顶多是一个伪文艺青年。我的推荐一定都和技术有关。但在这个时代，技术本身，也已经深度和艺术结合在了一起。我相信，我推荐的作品，一定能够拓宽你的技术视野，更好地，从一个技术人的角度，看待这个世界的。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;那么，还等什么？现在，就让我们一起，花一年时间，一点一点，用技术人的视角，看这个世界。&lt;/p&gt;
&lt;p&gt;欢迎加入《用技术人的眼光看世界 · 程序员技术指北》。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我是liuyubobobo：）&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;对了，现在推荐你的朋友加入这个专栏，还能赚佣金。每一份成功推荐，赚13.98元。直接提现。&lt;/p&gt;
&lt;p&gt;&lt;img alt="earn" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-05-06/earn.png" /&gt;&lt;/p&gt;
&lt;p&gt;怎么加入？以下这个二维码，就是我的分享赚佣金的海报。&lt;/p&gt;
&lt;p&gt;&lt;img alt="poster" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-05-06/poster.png" /&gt;&lt;/p&gt;
&lt;p&gt;当然，你可以不使用，而是直接去慕课网的官网或者app中，直接购买。在首页，只要点击专栏，第一个映入眼帘的，就是我的新产品：）&lt;/p&gt;
&lt;p&gt;&lt;img alt="app" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-05-06/app.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;谢谢大家支持：）&lt;/p&gt;
&lt;p&gt;新的一天，大家加油！&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-05-06/readme.md" rel="alternate"/></entry><entry><id>2019/2019-05-03/readme.md</id><title>关于公众号的二三事 + 致歉</title><updated>2019-05-03T00:00:00-07:00</updated><content>&lt;h2&gt;关于公众号的二三事 + 致歉&lt;/h2&gt;
&lt;p&gt;今天是五四青年节。先祝各位朋友们青年节快乐。不管你是10后，00后，90后，80后，70后，60后，甚至是50后，只要保持酷酷的心态，就永远是青年：）&lt;/p&gt;
&lt;p&gt;今天的推文没有干货，所以只对干货感兴趣的同学可以直接关闭了。哦，对了，文末还有抽奖！&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先，我把这个公众号的文章，在github上做了一下备份。地址是：&lt;a href="https://github.com/liuyubobobo/my-blog"&gt;&lt;strong&gt;https://github.com/liuyubobobo/my-blog&lt;/strong&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;为什么要做这个备份？因为有一天，一个公众号大佬慌里慌张地告诉我：把你写的两篇和996相关的文章删掉吧。一篇是&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-03-28/"&gt;《我们每个人都是囚徒。996.ICU与囚徒困境。》&lt;/a&gt;，另一篇是&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-04-14/"&gt;《大佬们都是这么不讲道理》&lt;/a&gt;。不然的话，腾讯会给你删掉，与此同时，还会在你的公号上记一条违规。甚至，可能被封号。&lt;/p&gt;
&lt;p&gt;作为一个公众号新手，我当时也吓了一跳。但思考了一下，马上就镇定了。&lt;/p&gt;
&lt;p&gt;因为我写的文章完全没有违背社会主义核心价值观啊！甚至在&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-04-14/"&gt;《大佬们都是这么不讲道理》&lt;/a&gt;一文中疯狂引用官媒党媒的观点，为人民网，人民日报打电话。&lt;/p&gt;
&lt;p&gt;但是，我创业的时候也做过社交网络，了解很多时候，互联网上的审查会来得很突然。所以，我第一时间对我的两篇文章进行了备份。备份好以后，我就想，何不把我公众号的所有文章都备份一下？毕竟，我的每篇文章，不管好坏如何，都是我认真原创的结果。多少年后回头看，想必是很有意思的事情。但是，根据我在&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-04-18/"&gt;《从巴黎圣母院的大火，到消逝的IT巨头》&lt;/a&gt;一文中的观点，微信公众号这个平台早晚要倒。&lt;/p&gt;
&lt;p&gt;所以，就有了这个代码仓：&lt;a href="https://github.com/liuyubobobo/my-blog"&gt;&lt;strong&gt;https://github.com/liuyubobobo/my-blog&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;当然，github也早晚要倒。但是，github本质是文件版本控制结果的一个展现，这些文件都保留好，就ok了。&lt;/p&gt;
&lt;p&gt;再有时间，我琢磨琢磨，把我的文章放上区块链。年近35岁的技术大叔，就是这么矫情，还不要脸地问别人：是不是很酷？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;由于我创业的时候接触过社交网络的运营，所以对中国的互联网审核机制略知一二。&lt;/p&gt;
&lt;p&gt;首先，对于互联网内容审核，我持中立态度。这个世界有很多国家，同样有严格的互联网审核制度，甚至比中国更加严格，想法更加大胆。比如俄罗斯。有时间我会好好写一下这个事情，挺有意思。&lt;/p&gt;
&lt;p&gt;与此同时，即使以自由民主著称的西方国家，也不是零审核。关键在于，审核的边界在哪里，大家对违规内容的定义，背后依据的法理，参与决策的势力，以及如何执行，怎么执行，是不一样的。没有规矩肯定不行。关于互联网内容审核的问题，西方世界，尤其是最近，也一直在争论。有机会，关于这个话题，我也会好好写一下。&lt;/p&gt;
&lt;p&gt;对于中国，其实，很多“审核”，并非政府所为，而是平台所为。这是因为，政府并没有统一的敏感词列表，或者敏感话题列表。但是，如果你的平台出现“不当”言论，会有严重的法律后果。所以，各家平台，会不自主的加强自我审查。因此，很多“删帖”行为，其实是平台怕不小心触及了红线，而自我严格审查的结果。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;尽管如此，在中文媒体环境里，写东西确实要小心，不能太偏激。但我也不是很偏激的人。如果我有“偏激”的观点，一定是因为法理不容。比如在&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-04-14/"&gt;《大佬们都是这么不讲道理》&lt;/a&gt;一文中，我坚定不移地反对996，就是因为强制所有员工996，是100%的违法行为。这是全文的核心观点。这里的核心问题是“强制”。什么该不该奋斗，要不要努力，在法理面前，都要先放到一边。这叫依法治国。&lt;/p&gt;
&lt;p&gt;当然，如果有人一定要争论法律是否合理，那是另一回事儿。法律有可能不合理，但解决这个问题的途径，是想办法推动法律的修订和完善。&lt;/p&gt;
&lt;p&gt;前一阵子，B站源代码泄露，后来听说很多相关的文章被封了。我不确定这些文章持什么观点，但不管怎样，程序员泄露公司的源码，肯定也是违法的。包括删库跑路。大家平时开玩笑可以，但是真要付诸行动，请一定想清楚后果。&lt;/p&gt;
&lt;p&gt;还有刘强东事件，听说很多维护女事主的文章被删，甚至有一个公众号，被永久封禁了。我依然不了解这些文章持怎样的观点，触犯了怎样的红线。但是刘强东事件确实已经陷入了罗生门。&lt;/p&gt;
&lt;p&gt;当然，他出轨了，这事儿应该是坐实了，这就是我在&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-04-18/"&gt;《从巴黎圣母院的大火，到消逝的IT巨头》&lt;/a&gt;一文中说的，刘强东是洗不白的。&lt;/p&gt;
&lt;p&gt;但他到底是不是违法了，还真不好说。我们只能等待法律的裁决。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最近，我还收到了一份提醒。有人举报了某个IT大佬公号的文章，理由是这篇文章疑似抄袭我的原创文章&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-03-28/"&gt;《我们每个人都是囚徒。996.ICU与囚徒困境。》&lt;/a&gt;。微信官方询问我是否确认发起投诉。&lt;/p&gt;
&lt;p&gt;&lt;img alt="complaint" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-05-03/complaint.png" /&gt;&lt;/p&gt;
&lt;p&gt;对于举报的这篇文章，我仔细读了一遍。在我的概念里，不能叫抄袭。毕竟，&lt;strong&gt;不能因为我写了一篇“996和囚徒困境”，别人就不能写“996和囚徒困境”了。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;知识产权保护是一个异常复杂的问题。即使在知识产权保护极其健全的西方世界，也是如此。因为&lt;strong&gt;知识产权保护是一把双刃剑，如何在保护原创者利益的同时，能够让知识自由的传播，而不遭到垄断，是一个两难的困境。&lt;/strong&gt;这还只是从法理上看这个问题，在具体执行上，其实也面临着更多的挑战。有时间，我也会好好写一下这个问题。&lt;/p&gt;
&lt;p&gt;但不管怎样，在这里，我要感谢我的读者朋友，不管是谁举报的，我真的很感激。与此同时，也让我很有信心，继续在原创这条路上坚持下去。&lt;/p&gt;
&lt;p&gt;因为，我观察到的，经历到的，都在告诉我，越来越多的人拥有了版权意识，越来越多的人，能够理解原创者的辛劳，并且愿意为他们的付出给予回报。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;谢谢你们：）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这一个多月运营公众号，我还犯了两个错误。&lt;/p&gt;
&lt;p&gt;第一个错误，是之前接了一个广告。我在这个广告前面，写了一段原创文字，所以，对于这个广告推文，就申请了“原创保护”，结果导致广告商无法把这段广告文案使用在别的文章中......&lt;/p&gt;
&lt;p&gt;这是多么愚蠢的错误啊......&lt;/p&gt;
&lt;p&gt;现在，这篇广告被我删掉了。但是，前面的这一小段文字，我觉得可能会对有一些同学有用，所以今天接着这个机会，我再推送一次，放在次条的位置。&lt;/p&gt;
&lt;p&gt;&lt;img alt="delete" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-05-03/delete.png" /&gt;&lt;/p&gt;
&lt;p&gt;公众号新手，如有打扰，还望大家见谅。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;另外一个错误，就有点儿严重了。&lt;/p&gt;
&lt;p&gt;可能大家都知道，为了维护公众号的热度，我在我的每篇原创文章的后面，都添加了一个抽奖活动。这一招是跟别人学的，连抽奖活动的文案，我都是照抄的。以前一直写的是：大家如果转发我的文章，或者点击“在看”，可以增加中奖概率。&lt;/p&gt;
&lt;p&gt;在&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-04-23/"&gt;《还有没有机会逆袭？谈成功者的困境。》&lt;/a&gt;一文中，有人发出了来自灵魂深处的质疑：&lt;/p&gt;
&lt;p&gt;&lt;img alt="ask" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-05-03/ask.png" /&gt;&lt;/p&gt;
&lt;p&gt;虽然我的回答是“请咨询点赞抽奖小程序官方团队”，但毕竟是我发起的抽奖，于是，我联系了“点赞抽奖小程序”的客服。得到的答复是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="answer" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-05-03/answer.png" /&gt;&lt;/p&gt;
&lt;p&gt;简单的说，&lt;strong&gt;中奖概率和大家点击“在看”和转发文章没有关系。&lt;/strong&gt;和大家是否邀请朋友参加抽奖活动，大家在抽奖活动中的留言是否被点赞，有关。至于这个答复中的3)，4)，貌似暂时和我的公众号无关。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;所以，在这里向大家致歉。我不小心欺骗了大家。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不过，在这个公众号，&lt;strong&gt;我还会继续保持每篇原创文章都有抽奖活动的。&lt;/strong&gt;因为，&lt;strong&gt;如果这个公众号能够做起来，不仅是我一个人的功劳，也是所有阅读者的功劳。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这其实是一个非常简单的道理。国外已经有一些社区，从社区底层功能的搭建上，考虑到这一点了。有时间，我也会写一写，和大家分享一下国外“创新”的模式。但是，微信公众号这个平台本身没有考虑这个因素，我决定先自掏腰包，做这件事情。&lt;/p&gt;
&lt;p&gt;我的目的只有一个，希望有更多人能读到我的文章。毕竟，篇篇原创并不容易。能够被更多的人看到，不管你是赞同还是反对，我都是开心的。&lt;strong&gt;如果你赞同我的观点，我收获了你的认可；如果你反对我的观点，我收获了你的认知。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当然了，我还是希望大家如果觉得我的文章对你有启发，能够帮我转发，或者点一下“在看”的。&lt;/p&gt;
&lt;p&gt;美国是一个小费制国家。出门吃饭，通常都是要给一笔小费的。我经常去的一家印度餐馆，却不强制要求顾客给小费，而是写了一句话：a tip brings good karma.（小费带来好运）。每次看到，我都会会心一笑，给的小费更多点儿。&lt;/p&gt;
&lt;p&gt;在我的公众号里，我决定效仿。所以，从上一篇文章&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-04-29/"&gt;《不能白板编程红黑树就是基础差？别扯了。》&lt;/a&gt;开始，我写的是：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果你喜欢我的文章，希望能多多转发，或者点击”在看“。相信会给你带来好运哦：）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;7.&lt;/p&gt;
&lt;p&gt;絮絮叨叨说了一堆，又打扰大家了。&lt;/p&gt;
&lt;p&gt;今天是每个人的节日，大家快乐。&lt;/p&gt;
&lt;p&gt;明天是新的工作日。大家加油！&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-05-03/readme.md" rel="alternate"/></entry><entry><id>2019/2019-04-29/readme.md</id><title>不能白板编程红黑树就是基础差？别扯了。</title><updated>2019-04-29T00:00:00-07:00</updated><content>&lt;h2&gt;不能白板编程红黑树就是基础差？别扯了。&lt;/h2&gt;
&lt;p&gt;前一阵子，有同学在一个群里发了这样一个帖子：&lt;/p&gt;
&lt;p&gt;&lt;img alt="comment" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-04-29/comment.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;看完以后，我一口老血就吐在了手机屏幕上。&lt;/p&gt;
&lt;p&gt;虽然白板编程是计算机行业的一个通用的面试手段，但是，什么样的问题适合在面试中进行白板编程，还是有讲究的。&lt;strong&gt;红黑树近乎是各大名企公认的，不适合白板编程的面试问题。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在这篇文章中，我会仔细和大家分析一下：&lt;/p&gt;
&lt;p&gt;1）为什么红黑树不适合做面试中的白板编程？&lt;/p&gt;
&lt;p&gt;2）为什么同样属于经典算法实现的归并排序和快速排序，适合做面试中的白板编程？&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;在我的课程&lt;a href="https://coding.imooc.com/class/207.html"&gt;《玩转数据结构》&lt;/a&gt;中，我带领大家详细实现了红黑树中的添加操作。但为了讲清楚这一个操作背后的原理，我们都做了什么铺垫呢？&lt;/p&gt;
&lt;p&gt;首先，我们仔细学习了二分搜索树。二分搜索树是所有平衡二叉树的基础，这一点不用多说。我们的红黑树的代码（包括AVL树代码），是在二分搜索树的基础上，添加自平衡操作，修改出来的。&lt;/p&gt;
&lt;p&gt;其次，我们仔细学习了AVL树。为什么要学习AVL树？&lt;/p&gt;
&lt;p&gt;其一，&lt;strong&gt;AVL树是历史上被发明出的第一个可以维护自平衡的树结构&lt;/strong&gt;，从历史意义的角度，值得学习；&lt;/p&gt;
&lt;p&gt;其二，AVL树维护自平衡的主要手段——旋转操作，也是近乎所有树结构维护自平衡的通用操作。学习AVL树的重点，其实是学习旋转操作。这样一来，我在后续讲解红黑树的时候，就不需要讲旋转操作了，直接讲红黑树独特的“红黑节点系统”和相应的平衡维护就好了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;你看，为了讲清楚红黑树，我们花了这么大的精力，铺垫了这么多东西，大家才能比较好地理解红黑树。但即使如此，真正学习红黑树的时候，我们还是需要处理很多红黑树特有的问题，它依然并不容易。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这就是红黑树最大的问题——背景知识过多，细节过多，整体操作过于复杂&lt;/strong&gt;，对于一个面试问题来说，它过于繁杂，答清楚一个红黑树操作背后的细节，需要的时间太多了。&lt;/p&gt;
&lt;p&gt;更重要的是，对于红黑树来说，它背后有这么多细节，&lt;strong&gt;却不具有延展性&lt;/strong&gt;。红黑树的“红黑节点”的定义，在我看来属于天才一般的独特思想。但是&lt;strong&gt;这个解决问题的方式，近乎根本无法应用于其它问题。&lt;/strong&gt;而且，具体实现上，其实是一种case by case的分析方式，对多种不同的情况进行分类讨论（AVL树也是如此）。&lt;strong&gt;这个实现背后，并无法提炼出一种通用的算法思想。&lt;/strong&gt;（所以，面试也很少考察AVL树的具体实现。）&lt;/p&gt;
&lt;p&gt;即使是左旋转右旋转这种操作，虽然是树结构维护自平衡的通用操作，但也只在维护树的自平衡的过程中才有意义。这些操作也属于非常专门的算法，不具备延展性。&lt;/p&gt;
&lt;p&gt;大家可以看到，&lt;strong&gt;考察红黑树的底层实现，是考察不出面试者的能力的。近乎等于是在考察，面试者有没有在面试前准备红黑树的知识而已。&lt;/strong&gt;一个能力高的面试者，如果没有提前准备红黑树，也近乎不可能现场推导出红黑树怎么维护自平衡；而一个能力低的人，可能因为在面试前准备了红黑树，“背出”红黑树的具体实现的代码——但这和基础好毫无关系。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;注意，我只是说考察红黑树的具体实现没有意义，&lt;strong&gt;但是对于红黑树的基本原理和基本性质，大家还是需要掌握的。&lt;/strong&gt;也就是对于红黑树，计算机专业的同学，至少要达到我在&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019/2019-04-11/"&gt;《什么叫学会了？自己到底有没有学会？知识掌握的七个境界》&lt;/a&gt;中所描写的原理境界。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;可能有些同学要问了，面试也会问很多其他经典算法问题的白板编程啊，他们为什么有意义？&lt;/p&gt;
&lt;p&gt;我们举最简单的例子——&lt;strong&gt;归并排序和快速排序，看他们的意义在哪里。&lt;/strong&gt;这两种排序算法，应该是会在面试中经常问到的经典算法的具体实现了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;首先，考察这两种算法，本质就是在考察递归。这两个算法都是标准的递归算法。所以，白板编程的过程，一眼就能看出来你理不理解递归。&lt;/p&gt;
&lt;p&gt;同时，这两种算法也是标准的分治算法，而不是简单的“尾递归”。在递归函数中，至少要进行两次递归调用（而不是一次）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;更重要的是，这两种排序算法，代表了分治算法的两种典型的“范式”。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于归并排序，简单来说，是先分别递归调用，最后将结果合并起来。可以看到，合并（merge）在递归调用的后面。如果从树的视角看（递归树），&lt;strong&gt;这是一个后序遍历的过程。&lt;/strong&gt;只不过，我们的那个“遍历当前节点”的操作，不是打印输出，而是合并操作。&lt;/p&gt;
&lt;p&gt;对于快速排序，简单来说，是先进行大名鼎鼎的partition，然后，根据partition的结果，对两部分分别进行递归调用。可以看到，partition在递归调用的前面。如果从树的视角看（递归树），&lt;strong&gt;这是一个前序遍历的过程&lt;/strong&gt;，只不过，我们的那个“遍历当前节点”的操作，不是打印输出，而是partition操作。&lt;/p&gt;
&lt;p&gt;如果深刻的理解了这两种范式，近乎就掌握了分治算法书写的精髓。（当然，书写是一回事儿，根据具体的问题做算法设计，其实是另外一回事儿。）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我们再来仔细看归并排序和快速排序中的这两个子过程：merge和partition。他们同时也都是非常好的线性算法的面试问题。&lt;/p&gt;
&lt;p&gt;merge是：给定两个有序数组，如何合并成一个有序数组？&lt;/p&gt;
&lt;p&gt;partition是：给定一个数组，选定其中一个值。如何把这个数组分成两部分，一部分小于这个值，一部分大于这个值？&lt;/p&gt;
&lt;p&gt;大家可以看到，对于这两个问题来说，都：表述足够简单；同时，其实就是在数组中做事情，所以逻辑不会太复杂。即使你没有特别准备，对于合格的计算机专业的同学来讲，也都应该能够在现场写出正确的算法。因为这两个算法问题，其实毫无设计可言。需求很明确，实现这个功能就好了。最终的实现结果，应该在10行代码以内。&lt;/p&gt;
&lt;p&gt;对了，根据需求对数组中的元素进行操作，绝对是算法面试的高频问题。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;最后，就是这两个算法有足够多的扩展性。&lt;/p&gt;
&lt;p&gt;对于归并排序，除了递归实现以外，我们还可以自底向上的非递归实现；归并排序可以引出稳定排序这个概念；归并排序的思路还可以用于完成诸如“快速计算数组中逆序对的数量“这样的问题；归并排序中的merge子过程，还用到了”双指针“的思想；&lt;/p&gt;
&lt;p&gt;再看快速排序。快速排序的partition操作就有很多实现方式，单路，双路，再到三路快排。如果能一路优化下来，并且明确每次优化的目的是什么，就已经很可以看出面试者的水平了；快排的思路还可以解决“快速查找第k大的数字”这个经典问题；同时，快速排序本质是一个随机算法，因为在partition的过程中，pivot选择需要随机。这样也可以引出一些和随机算法相关的问题。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;你看，归并排序和快速排序可以引出来这么多东西，但是，这两个算法，都是20行以内可以搞定的算法。一块儿白板，绰绰有余。&lt;strong&gt;这才是白板编程的好问题，代码量足够小，却能不断地深挖，最大限度的测试面试者的功力。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;而白板编程红黑树，则完全没有这些附加价值。这就是为什么，&lt;strong&gt;大厂近乎都不会考察红黑树的白板编程。&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;那么，什么是和红黑树相关的好的面试题呢？我在网上简单搜了搜，这些问题都不错：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;STL中的set底层用的什么数据结构？（或者STL中的map底层用的什么数据结构？或者Java标准库中的TreeSet, TreeMap，底层用什么数据结构？）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;红黑树的数据结构是怎么定义的？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;红黑树有哪些性质？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;红黑树的各种操作的时间复杂度是多少？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;红黑树相比于BST和AVL树有什么优点？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;什么场景应该使用红黑树？什么场景应该使用哈希表？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如何扩展红黑树，来获得比某个结点小的元素个数？（这个问题本质不是红黑树的问题，而是BST的问题。）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;同学们在面试前，应该多准备这类和红黑树的性质相关的问题。完全不需要特别准备红黑树添加删除节点的具体逻辑。如果面试的时候，面试官真的让你白板编程红黑树，我的建议是：&lt;/p&gt;
&lt;p&gt;1）承认自己很倒霉；&lt;/p&gt;
&lt;p&gt;2）安慰自己，这家公司不想真的招人，或者面试官太...，不值得去；&lt;/p&gt;
&lt;p&gt;3）直接起身走人。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;所以，比起文初那位面试官的吐槽，这位面试官的吐槽更合理 &lt;/p&gt;
&lt;p&gt;&lt;img alt="comment2" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-04-29/comment2.png" /&gt;&lt;/p&gt;
&lt;p&gt;大家加油！：）&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-04-29/readme.md" rel="alternate"/></entry><entry><id>2019/2019-04-23/readme.md</id><title>还有没有机会逆袭？谈成功者的困境。</title><updated>2019-04-23T00:00:00-07:00</updated><content>&lt;h2&gt;还有没有机会逆袭？谈成功者的困境。&lt;/h2&gt;
&lt;p&gt;&lt;img alt="painting" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-04-23/painting.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;题图：油画《自由领导人民》&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;草根逆袭，是这个时代的热词。所有人都想逆袭。但很多时候，看着那些“成功者”，大家心里又不免犯嘀咕：人家那么强大，怎么可能被我逆袭呢？&lt;/p&gt;
&lt;p&gt;实际上，仔细想想，在我们这个时代，从来不缺逆袭者的故事。虽然“阶级固化”被越来越多的人提起，但其实，当下，是一个最容易逆袭的时代。&lt;/p&gt;
&lt;p&gt;这一点，我们从这个世界企业的变迁就已经可以看出来。在我的上一篇推文&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-04-18/"&gt;《从巴黎圣母院的大火，到消逝的IT巨头》&lt;/a&gt;中，我提及了一个统计数据：如今，美国标普500强的企业，平均寿命只有15岁。换句话说，每隔15年，近乎就有一半企业会死掉，另一半企业光荣上榜。这另一半企业，都是逆袭者。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;就算从中国看，也是如此。BAT早早地打下了互联网的江山，别的公司还有机会吗？&lt;/p&gt;
&lt;p&gt;当然有。&lt;/p&gt;
&lt;p&gt;美团，2010年上线；&lt;/p&gt;
&lt;p&gt;快手，2011年上线；&lt;/p&gt;
&lt;p&gt;滴滴，2012年上线；&lt;/p&gt;
&lt;p&gt;今日头条，2012年上线；&lt;/p&gt;
&lt;p&gt;拼多多，2015年上线......&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;这样的例子太多太多。他们都是顶着BAT的光环发展起来的成功企业，他们都是逆袭者。&lt;/p&gt;
&lt;p&gt;如果把眼光放到国外，那就更多了。多到数不过来。&lt;/p&gt;
&lt;p&gt;站在创业的视角看，正是因为逆袭的机会一大把，才有动力选择创业的。否则，还创什么业？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为什么会出现逆袭？逆袭者有本事，肯定是毋庸置疑的。可是，如果从静止的角度看，逆袭者本事再大，当前的成功者掌握着那么多优势资源，怎么会输掉？或者将自己的利益拱手相让？&lt;/p&gt;
&lt;p&gt;另外一个很重要的原因，是大多数成功者，都有着共同的局限性。这就是这篇推文的重点。&lt;/p&gt;
&lt;p&gt;这个困境是什么？我来讲一讲上世纪70年代到90年代，硬盘，这个计算机重要部件的一小段发展史。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;在20世纪70年代中期，主流的硬盘规格，都是14寸的。这是什么概念？现在大家的笔记本电脑，可能都是13寸或者15寸的。那个时候，一个硬盘就像现在的笔记本电脑那么大。但是笔记本电脑毕竟薄啊。那个时候的硬盘，还厚，所以，一块硬盘，基本上就是像现在的微波炉一样的家伙。&lt;/p&gt;
&lt;p&gt;到了20世纪70年代末，一种体积更小的硬盘出现了——8寸硬盘。8寸硬盘虽然体积小，但是也有缺点，就是容量也小一些，速度也慢一些。&lt;/p&gt;
&lt;p&gt;现在，我们站在21世纪回头望，都知道，计算机势必向着“微”机的方向发展。什么是微机？就是要小。但那时的厂商不知道。14寸硬盘厂商问他们的客户，你们需要8寸硬盘吗？他们都说不需要。因为他们的客户，需要更大的容量和更快的速度。所以，14寸硬盘厂商大多不会投入研制8寸的硬盘技术。&lt;/p&gt;
&lt;p&gt;至于研制8寸硬盘的厂商，都是那时的小厂。他们在14寸硬盘领域无法和大厂抗衡，只能另辟蹊径，尝试这种新的，谁也不知道结果的技术。而他们的用户群，也就是那些使用更小型计算机的中小企业，也在当时少得可怜。可以想见，8寸硬盘厂商赚的钱，比起14寸硬盘大厂，要少太多。&lt;/p&gt;
&lt;p&gt;但是，你猜怎样？随着时代的发展，8寸硬盘的容量和速度都在提升，同时，计算机小型化的潮流也愈演愈烈。终于有一天，那些曾经的14寸硬盘厂的客户，都渐渐顺应时代的发展，换上了小型机，开始需要8寸硬盘了。但此时，8寸硬盘的市场份额，已经完全是一片新天地，和之前的14寸硬盘厂商没有半毛钱关系了。&lt;/p&gt;
&lt;p&gt;就这样，一大批14寸硬盘厂退出了历史舞台，新的一批8寸硬盘商完成了逆袭。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这段历史有意思的地方还在后面。&lt;/p&gt;
&lt;p&gt;这批8寸硬盘商虽然赶走了14寸硬盘商，却自己走入了同样的历史循环，重蹈覆辙，被一批5.25寸硬盘商干倒了；&lt;/p&gt;
&lt;p&gt;而这批5.25寸硬盘商，虽然赶走了8寸硬盘商，完成了逆袭，随后，又被一批3.5寸硬盘商干倒了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;1985年，希捷公司率先研制出了3.5寸硬盘。当时的微机大厂是IBM。于是，希捷的市场营销人员拿着3.5寸的硬盘，去问IBM的意见。IBM没有表示出任何兴趣。因为IBM的机器已经为5.25寸硬盘留好了接口。为了这个更小的硬盘，改变整机设计，在当时看是不划算的。而整个PC市场，如果IBM不感兴趣的话，剩下的厂商，市场份额就太小了。所以，希捷公司只好将3.5寸硬盘技术束之高阁，继续投入到5.25寸硬盘的研发升级上。&lt;/p&gt;
&lt;p&gt;不久，市场上出现了另一家公司——康诺公司。这家公司专门提供3.5寸的硬盘。而这家公司的主要客户，也是一颗冉冉新星——康柏公司。康柏公司在当时，主要产品锁定为同样是新生事物的笔记本电脑。正因为如此，康柏公司需要更小的硬盘，康诺公司则可以提供这种产品。现在我们都知道了，笔记本电脑也是一个巨大的趋势。康诺公司借着这个契机，大赚特赚，甚至一度威胁到了希捷公司在硬盘领域的地位。当然，在这场战斗中，希捷公司没有倒下，但康诺公司在希捷公司手中，抢下了一片市场，完成了属于自己的逆袭。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;不知道大家看懂没有，在这段硬盘发展史中，是什么让新的硬盘企业不断逆袭？其实，恰恰是当时已经占据硬盘市场的大企业自身的局限性。那些大厂，已经拥有了稳定的客户和现金流，面对新事物的出现，他们的第一反应绝不会是丢弃现有的业务。毕竟，新事物有风险，结果未知。这就给新企业以机会，完成逆袭。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可能很多同学会有疑问，难道那些硬盘大厂，不能既占据着大尺寸硬盘市场，同时顾及小尺寸硬盘市场吗？&lt;/p&gt;
&lt;p&gt;能。但很难。企业和人一样，需要方向。全面发展不是不可能，但是太难，甚至可能最终导致全面不发展。亚马逊已经稳稳坐上了世界头号电商的交椅，坐拥那么多资源，人力，和经验，还是不能在发展欧美市场的同时，顾及好中国市场，就是这个原因。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;把这个道理，放到个人身上，大家会看的更清楚。&lt;/p&gt;
&lt;p&gt;我在北航读研的时候，实验室里有一个已经读了5年的博士师兄。他和我讲了他在5年前，也就是大概2003年，他本科毕业时候的故事。&lt;/p&gt;
&lt;p&gt;在我的这名博士师兄本科毕业的时候，他的选择是找工作，或者继续深造，读博读研。他虽然选择了读博，但是他看到了他的其他本科同学，毕业时找工作的情景。&lt;/p&gt;
&lt;p&gt;什么情景呢？基本上能找到工作的人，都是去微软，雅虎等大企业。那个时代，互联网企业还不多。少有的几个互联网企业，都是这样的巨头。&lt;/p&gt;
&lt;p&gt;那会儿BAT呢？&lt;/p&gt;
&lt;p&gt;阿里和腾讯，师兄都不了解。我估计是因为地理原因，阿里在杭州，腾讯在深圳。但是，百度就在北京，那时刚刚成立三年，距离上市，还有两年的时间。此时，正是百度的扩张期。但那时的百度，还毫无名气，不要说一流的学生，二流的学生都不愿意去。因为压根儿都没听说过。&lt;/p&gt;
&lt;p&gt;所以，百度扩张需要人才，怎么玩儿呢？据我的师兄说，像北航这种学校的学生，要是没有找到工作，百度统统接盘。&lt;/p&gt;
&lt;p&gt;5年后，大概是2008年，我的这名博士师兄，再回首看他的那群本科同学，结果是怎样的呢？百度已经上市。当年那群找不到工作的末流学生，各个身价不菲，远超当年那群一二流，进了微软雅虎的同学，成功完成了人生的逆袭。&lt;/p&gt;
&lt;p&gt;这段故事让我唏嘘。请大家设身处地的想一想，如果你是一个一流的学生，Google和众里科技两个企业的Offer摆在你面前，你会怎么选？不要问我众里科技是什么企业。你没听说过就对了，我瞎编的，对标当时的百度用。众里寻她千百度嘛。&lt;/p&gt;
&lt;p&gt;这两个选择，就像在当时，一流学子们面对微软和百度两个选择一样。一个是没人听说过的“民营小企业”；另一个——微软，则是世界首富比尔盖茨所率领的软件帝国，你怎么选？&lt;/p&gt;
&lt;p&gt;我估计除了极少数人，大多数一流的学生，还是会选微软。毕竟，百度发达是万一的事儿。万分之九九九九，百度会倒闭，那我这个一流人才，就被埋没了。&lt;/p&gt;
&lt;p&gt;这其实和当下，一流名校的顶尖学生，都去大厂，完全一样。我没有说这些顶尖学生的选择不对。一点儿毛病都没有，要是我，十有八九也会这么选。但我只是说，10年后回头看，那些顶尖学生可能会发现，自己没有做出最优的选择。但这不能怪他们，因为谁都不能预测未来。&lt;/p&gt;
&lt;p&gt;这其实和我之前讲的硬盘的故事一模一样。14寸硬盘商，面对新的8寸硬盘技术，不会把8寸硬盘技术作为专攻方向。因为彼时，14寸硬盘可以带给他们巨大的收益和现金流，放弃才是傻子。谁当CEO都不会放弃，放弃分分钟被董事会炒掉。至于8寸硬盘，万一它不是趋势呢？为什么要为了一个万一，损失当下有稳定收益的生意？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这就是我所说的成功者的困境。他们虽是当下的成功者，但是，很少有成功者，敢于舍弃当下的成功所带来的稳定收益，而去在尚不稳定的领域发展。因为当下的成功，是一块太难割舍的肉。反倒是那些在当下不成功的人，他们没有什么可顾虑的，放手一搏，去那些还没有稳定下来的领域闯一闯，搞不好就成了风口上的猪，赢得了未来。&lt;/p&gt;
&lt;p&gt;于是，这样的逆袭不断上演。于公司，于个人，都是如此。&lt;/p&gt;
&lt;p&gt;所以，要问我，到底能不能逆袭？太能了。每个细分领域，都充斥着这样的机会。&lt;/p&gt;
&lt;p&gt;我有一个习惯，面对一个所谓的成功人士，我都会问一下自己：这个人十年前在哪里？二十年前在哪里？三十年前又在哪里？这个人是曾经一众竞争者中，最优秀的那个人吗？&lt;/p&gt;
&lt;p&gt;看多了，我就明白了，大部分成功者，其实都是逆袭者。从歌坛王子周杰伦，到学界神话爱因斯坦。&lt;/p&gt;
&lt;p&gt;没有一个领域的成功者是永久的。成功的机会也多的是。&lt;/p&gt;
&lt;p&gt;我们可以毫不费力地想见，100年后，没有人还会提起王思聪。这就像我们现在，也根本不记得，100年前，200年前，300年前，世界首富是谁，他的儿子又是谁。一样的道理。&lt;/p&gt;
&lt;p&gt;剩下的，就看你&lt;strong&gt;想不想&lt;/strong&gt;当一个逆袭者；&lt;strong&gt;敢不敢&lt;/strong&gt;当一个逆袭者；&lt;strong&gt;愿不愿意&lt;/strong&gt;努力去当一个逆袭者了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;逆袭从来不是什么神话，而是一种常态。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;大家加油！：）&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-04-23/readme.md" rel="alternate"/></entry><entry><id>2019/2019-04-18/readme.md</id><title>从巴黎圣母院的大火，到消逝的IT巨头</title><updated>2019-04-18T00:00:00-07:00</updated><content>&lt;h2&gt;从巴黎圣母院的大火，到消逝的IT巨头&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;巴黎圣母院着火了。拥有着850余年历史的哥特式教堂的主尖顶，在一瞬间轰然倒塌。&lt;/p&gt;
&lt;p&gt;&lt;img alt="dame" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-04-18/dame.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;很多人拿出了《爱在日落黄昏时》（Before Sunset）这部影片中的一个截图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="movie1" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-04-18/movie1.png" /&gt;&lt;/p&gt;
&lt;p&gt;在我看来，这句台词其实翻译的不是很准确。这个翻译，把这句台词变成了一个问句。可能译者也对巴黎圣母院有一天会消失抱有疑问吧。但其实，这句台词，是女主在听完男主所讲的关于巴黎圣母院的故事以后，很肯定地表示：巴黎圣母院总有一天会消失的。&lt;/p&gt;
&lt;p&gt;所以，我的翻译是：但是，你不得不承认，巴黎圣母院总有一天会消失的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;But you have to think that Notre Dame will be gone one day.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;巴黎圣母院着火以后，媒体采访一个法国人，一名普通的巴黎民众说的话，让我动容：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我出生的时候，巴黎圣母院就在那里；&lt;/p&gt;
&lt;p&gt;我一直以为，我去世的时候，巴黎圣母院还会在那里；&lt;/p&gt;
&lt;p&gt;但是，现在，我不知道在我有生之年，还能不能再走进巴黎圣母院去看一看了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;很多时候，我们都觉得我们身边习以为常的事情是那么平凡，甚至坚信它肯定可以永远下去，但事情的真相，往往会很残酷。&lt;/p&gt;
&lt;p&gt;比如中国自改革开发以来，就没有经历任何真正意义上的经济危机。经济一直蓬勃向上发展。这是不是意味着中国不可能爆发经济危机？很多人都这么认为。&lt;/p&gt;
&lt;p&gt;若果真如此，我一定要大声疾呼，让所有国家都来学习中国的经济模式。但其实，如果真是如此，根本不需要我呼吁什么，其他国家早就主动跑来学习我们的经济模式了。我是一个悲观主义者，我不认为中国不会爆发经济危机，问题只是什么时候，以何种形式到来而已。&lt;/p&gt;
&lt;p&gt;不要误会，我衷心希望新中国是世界上第一个，甚至是唯一一个不会爆发经济危机的国家。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我们还是说技术世界的事情吧。&lt;/p&gt;
&lt;p&gt;互联网刚刚在中国兴起的时候，我开开心心地注册了我的第一个电子邮箱：雅虎中国邮箱。那时的雅虎，绝对是互联网界的霸主。现在互联网，还有三分天下的局面，国内有BAT（百度，阿里，腾讯），国外有FAAMG（Facebook, Apple, Amazon, Microsoft, Google），不输一线大厂的各种准一线大厂更是不胜枚举。但在那时，国内国外，都是雅虎一家独大。我一直觉得，我可能会一直使用这个雅虎邮箱。&lt;/p&gt;
&lt;p&gt;结果呢？2013年，雅虎中国邮箱停止服务。随之而来的，是雅虎背后更大的变动：整个雅虎中国关闭，雅虎从中国市场上消失了。之后，雅虎经历了一系列的转让，解体。2019年4月3日，以前雅虎公司为主要资产的Altaba公司，正式宣布清算和解散。一个时代彻底落幕。&lt;/p&gt;
&lt;p&gt;雅虎中国邮箱的关闭，曾带给我巨大的麻烦，因为有一系列互联网服务，我都是使用雅虎邮箱注册的。但是，很快我就发现，事情好像也没有那么糟糕，因为大多数曾经注册的互联网服务，那些曾经我觉得好有用，我会一直用下去的互联网服务，似乎，也不是那么好用了。比如印象笔记。&lt;/p&gt;
&lt;p&gt;至于邮箱，我早就使用Google旗下的Gmail邮箱作为主力邮箱了，直至今日也是如此。但是，我仍然会不停地，像《Before Sunset》中的那个女主一样想到：&lt;strong&gt;我们不得不承认，Google总有一天，也会消失的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;说到消逝的巨头，雅虎是一个绕不过的典型案例。有太多媒体，书籍，作者，写过雅虎的故事。但是，每次我看到雅虎的故事，依然心潮澎湃。是的，一点都没有夸张，心潮澎湃。&lt;/p&gt;
&lt;p&gt;我太喜欢雅虎的故事了。有时间，我一定从我的角度，再好好写一写雅虎的故事。&lt;/p&gt;
&lt;p&gt;嗯，我就是这么奇怪，不喜欢成功者的故事，偏偏喜欢失败者的故事。在大多数文学作品，影视作品中，我都无法体会成功者的喜悦，但是我却能深刻地体会失败者的苦楚。可能因为我并不是一个成功者。同时，在我的眼里，成功的故事通常不能让我学到什么东西，但是，失败的故事往往可以让我学到很多。&lt;/p&gt;
&lt;p&gt;唐骏有一本书，叫《我的成功可以复制》。我不知道谁看了唐骏的书，复制了他的成功；&lt;/p&gt;
&lt;p&gt;李笑来在得到有一个专栏，叫《通往财富的自由之路》。我也不知道有多少人通过这个专栏，实现了财富自由。&lt;/p&gt;
&lt;p&gt;就是这个道理。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;雅虎是IT界唯一消逝的巨头吗？当然不是。&lt;/p&gt;
&lt;p&gt;大家可能都知道，IBM是推出第一台个人计算机的公司。但在此之前，计算机产品一直是被一家叫做DEC的公司主导的。这是1970-1980年的事情。如果你问那个年代的人们，90%的人会认为计算机只有在机构才有用武之地，大众是不会使用它的；他们也不会相信DEC会倒下，因为DEC在当时已经彻底控制了计算机市场。但是，现如今，这个品牌在我们这代人的眼里，连一丁点记忆的留存都没有。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;那么问题来了，IBM能永远存活吗？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;另外一个例子是美国半导体设计公司——仙童（Fair Child）。这家半导体公司，曾开发出了世界第一款商用集成电路，在硅谷的发展史上，占有举足轻重的地位。但如今，在这个行业，INTEL 和 AMD 楚汉争霸，仙童早就已经是纪录片中才能出现的企业了，而且是黑白纪录片。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;那么问题来了，INTEL 和 AMD，能永远存活吗？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;另一个例子是Sun，大家可能熟知它是因为Sun是Java的亲爸爸。我在本科参加ACM比赛的时候，比赛完全不支持Java语言。有一场比赛，我印象深刻，就是Sun公司赞助的，每个选手都能收到Sun公司发的一本比《算法导论》还厚的Java手册。那时，Sun公司还在推广Java语言。&lt;/p&gt;
&lt;p&gt;那时候的Java语言，在我看来像弱智一样，连泛型都不支持（大概Java 5）。Java语言在之后的很长一段时间，也并没有特别大的发展。但后来，我才知道，虽然曾经Java那么弱智，但Sun公司来头不小，这是一家1992年上市，1993年挤入美国财富500强的企业。&lt;/p&gt;
&lt;p&gt;讽刺的是，现如今，Java语言确实大红大紫了，但Sun公司早已人去楼空，卖给了甲骨文（Oracle），这也为后来甲骨文和Google之间的大战揭开了序幕。这段故事暂且不表。&lt;strong&gt;问题来了：甲骨文能永远存活吗？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这些都是美国的例子。那我们把视线移出美国，可能最著名的例子，就是大名鼎鼎的诺基亚了。这家来自芬兰的科技公司，一直到2012年，都在蝉联世界第一大手机厂商的宝座，毫不夸张的说，在那个时代，10台手机，8台诺基亚。但是随着苹果的出现，诺基亚溃不成军。现如今，10台手机，有几台诺基亚呢？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;但是，问题来了：苹果能永远存活吗？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这些还都是国外的例子，看看国内。虽然我们的互联网历史还比较短，但我也能随口说几个名词：开心农场，饭否，ChinaRen，快书包，超级课程表，飞信....&lt;/p&gt;
&lt;p&gt;这个列表可以无穷无尽。&lt;/p&gt;
&lt;p&gt;在这里，我还特别想提一个品牌——凡客。为什么？因为当时，凡客太火了。凡客的广告，近乎遍布北京地铁的每一站。凡客体也是各大媒体竞相学习的榜样。韩寒——这个曾经说不会做广告的男人，都给凡客做起了广告。&lt;/p&gt;
&lt;p&gt;但现在呢？&lt;/p&gt;
&lt;p&gt;&lt;img alt="vancl" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-04-18/vancl.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;BBC曾在2012年，发表过一篇振聋发聩的文章，叫《Can a company live forever?》（一家公司可能永远活着吗？）其中列举了一个统计数字。据统计，随着时代的变迁，美国标普500指数里的公司，平均寿命大幅度下降。在1920年左右，美国标普500指数的公司，平均寿命是67年；而现如今，美国标普500指数的公司，平均寿命竟然只有15年。换句话说，15年后，大部分现在耳熟能详的大企业，都会被新的公司替换掉。&lt;/p&gt;
&lt;p&gt;我觉得，这个统计数字可以很好的解释代沟。毕竟，如今是商业社会，我们的生活，是被无数的商品服务所包围的。但是，每隔15年，人们所接受的商品服务，就完全不同了。&lt;/p&gt;
&lt;p&gt;至于中国，这个数字更加夸张。但是鉴于我国自改革开放到现如今，只有短短的40余年，商业环境还没有完全稳定下来，所以，这个数字可能也不能太说明问题。但是，一个很显然的事实是：企业的寿命，是抵不上一个自然人的寿命的。远远抵不上。&lt;/p&gt;
&lt;p&gt;所以，如果不出意外，我们这帮“幸运儿”，将不仅仅见证百度，腾讯，阿里巴巴，苹果，google，微软，Facebook，Amazon的崛起，我们还终将见证他们的消亡。不管我们愿不愿意。&lt;/p&gt;
&lt;p&gt;别觉得不可思议，Facebook，Google，Amazon和Apple的日子，现在都不好过。尤其是Facebook。有时间我要专门写一写。&lt;/p&gt;
&lt;p&gt;很多同学都给我留言，让我谈谈大龄程序员的困境，找到合适的机会，我也一定要写一写这个话题。但是，在我看来，&lt;strong&gt;大家需要担心的，不仅仅是我们的年龄大了的问题；还有我们所在的企业年龄大了，突然就倒塌了。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;昨天，互联网上刷屏的新闻，是早前指控刘强东性侵的明尼苏达州立大学女大学生，正式向刘强东和京东提起民事诉讼。我刚刚在&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-04-14/"&gt;《大佬们都是这么不讲道理》&lt;/a&gt;中号召刘强东聊聊美国的故事，结果就出了这么个新闻，事主正儿八经地要聊聊和刘强东的美国故事。&lt;/p&gt;
&lt;p&gt;这件事之后会怎么发展，不好说，还有待观望。但这个事情的关键根本不是刘强东，人家愿意喝什么味道的奶茶跟我们没关系。问题的关键是京东这个企业。因为这个企业，承载了18万名员工，这就近乎意味着18万个家庭。&lt;/p&gt;
&lt;p&gt;我更关注的，其实是刘强东4月15日凌晨发布的一封所谓的“内部邮件”，这封邮件在解释，为什么京东物流取消了员工的底薪？因为不这么做，京东物流就完蛋了。京东物流已经连续12年亏损，2018年全年亏损23个亿。这样下去，京东物流只够撑两年。&lt;/p&gt;
&lt;p&gt;所以，不是刘强东不认兄弟，是刘强东不能认这个兄弟。真认这个兄弟，大家就都死了。我没有为刘强东洗白，刘强东是洗不白的。我只是说：市场就是这么残酷。&lt;/p&gt;
&lt;p&gt;与此同时，新的新闻又来了，亚马逊也将关闭中国的电商业务。&lt;/p&gt;
&lt;p&gt;这事儿有解吗？其实，人类发展至今，无数先哲大家，一直在致力于解决这个问题，但很可惜，一直没有解决。&lt;/p&gt;
&lt;p&gt;所以，才有乌托邦这么一个词儿。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;7.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;《Before Sunset》是一个豆瓣评分8.8分的高分文艺片。在我看来，就这一句台词，就值这个分数了。我这么长一篇文章，絮絮叨叨，说了一堆，想说的道理，回头一看，其实就包含在女主那一句台词里了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;But you have to think that Notre Dame will be gone one day.&lt;/p&gt;
&lt;p&gt;但是，你不得不承认，巴黎圣母院总有一天，也会消失的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="movie2" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-04-18/movie2.png" /&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-04-18/readme.md" rel="alternate"/></entry><entry><id>2019/2019-04-14/readme.md</id><title>大佬们都是这么不讲道理</title><updated>2019-04-14T00:00:00-07:00</updated><content>&lt;h2&gt;大佬们都是这么不讲道理&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;马云谈996，说996是福报，被刷屏了。&lt;/p&gt;
&lt;p&gt;然后马云可能觉得不合适，也可能是觉得不过瘾，不管怎么样，再谈了一次996。题目我看不太懂，叫《理性讨论比结论重要》。&lt;/p&gt;
&lt;p&gt;理性讨论重要我明白；结论不重要，我不明白。&lt;/p&gt;
&lt;p&gt;讲真，这次关于996的讨论，是我见过的网上对中国社会问题讨论中，最理性的一次。可能是因为参与讨论的人都是高学历群体吧，加上码农群体本来就是靠逻辑吃饭的，讲起道理都是逻辑严谨，一丝不苟，条理清晰，有始有终的。对于这个问题的讨论，我没有看到任何无端谩骂。结合最近的《西安奔驰维权事件，读书人总以为是能讲道理的... 》，唉，一声叹息。&lt;/p&gt;
&lt;p&gt;马云在谈996的文章中，有这么一段话：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;关于“996对不对”，法律自有规定摆在那里，这个问题并不是关键，...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我就不懂了，996对不对不关键？&lt;/p&gt;
&lt;p&gt;至于刘强东强势发声，讲了一个根本没有起因经过结果的故事，叫《地板闹钟的故事》。虽然刘强东讲故事的水平不太高，但我还是希望他能强势发声，谈谈去年在美国的故事。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;无论是马云，还是刘强东，谈到996，都在偷换概念，将996和奋斗划等号。&lt;/p&gt;
&lt;p&gt;你说奋斗就得996，甚至007，要忘我地付出，这个我没意见；&lt;/p&gt;
&lt;p&gt;但是996就等于奋斗？&lt;/p&gt;
&lt;p&gt;这篇推文，我本来想科普一下逻辑学的基础知识。毕竟这个公众号的文章，我都想和一些知识性的内容扯点儿关系，争取让大家在阅读的时候，也能学到些东西。但越写越不是滋味，越写越生气。写了几千字，硬是被我给删掉了。所以请原谅我，这篇文章更偏情绪化一些。因为大佬们的逻辑漏洞也太明显了。&lt;/p&gt;
&lt;p&gt;奋斗确实需要996；但是996不等于奋斗！&lt;/p&gt;
&lt;p&gt;这很难理解吗？小学生应该就能理解：狗有四条腿，但四条腿的不一定是狗。&lt;/p&gt;
&lt;p&gt;按照大佬们的逻辑，19世纪末，无论是美国，还是英国，流水线上每天干12小时的工人，都是了不起的“奋斗者”。历史上根本就不存在“被剥削者”。&lt;/p&gt;
&lt;p&gt;这样看来，福特真是个大坏蛋。他竟然带领福特汽车厂，实现了一周5天，每天8个小时的工作制。这才是赤裸裸的剥削啊！他剥削了工人们的奋斗权！凭什么工人不能奋斗！？凭什么工人不能享受996的福报！？&lt;/p&gt;
&lt;p&gt;至于之后，各个发达国家，包括我们伟大的祖国，不停地完善劳动法，保障劳工权益，那简直是倒行逆施啊。制定最低工时？每周超出最低工时还要增加工资？员工还可以提出劳动仲裁？这分明是不想让普通人通过奋斗，成为大佬嘛！&lt;/p&gt;
&lt;p&gt;所以，为什么会有阶级固化？原来在大佬们的眼里，劳动法就是阶级固化的根源啊！如果没有劳动法，不对劳工权益进行保障，过劳才不仅仅只是落个“过劳死”，阶级才能流动起来啊！&lt;/p&gt;
&lt;p&gt;如此这般看来，奴隶制度真是好啊。奴隶制度才是阶级最不固化的制度哦。所有的奴隶们都疯了，竟然起来推翻奴隶制？&lt;/p&gt;
&lt;p&gt;哦，对了，我们伟大的中华人民共和国国歌，第一句话，竟然就是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;起来，不愿做奴隶的人们&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果在维基搜索“马云”，你会看到他毕业后的就业经历大概是这样的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1988年毕业于杭州师范学院（现杭州师范大学）外语系英语专业，获英语学士学位，8月分配到之后于杭州电子工业学院（现杭州电子科技大学）基础部从事英语教学工作，1994年10月调任党政办公室所属外事办公室主任，1995年6月1日辞职。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;简单来说，就是1988年8月在杭州电子工业学院任教职，1995年6月辞职。&lt;/p&gt;
&lt;p&gt;但是，创业经历却是这样的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1991年，马云初次接触商业活动，集资3,000人民币创办海博翻译社。头一个月，收入人民币700元，但房租高达人民币1,500元。他于是利用转手小商品交易的方式，从广州、义乌等地进货，成功养活了翻译社，还组织了杭州第一个英语角。1995年，马云在出访美国时首次接触到因特网，回国后和他的妻子，还有同为老师的何一兵于1995年4月创办网站“中国黄页”，专为中国公司制作网页...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;哦？好奇怪，怎么1991年不好好工作，开始接触商业活动了呢？不仅如此，入不敷出以后，还不甘心，玩儿起了小商品贸易？1995年四月，也就是辞职前，就搞起了互联网？你的教育事业呢？你的学生们呢？说好的996呢？&lt;/p&gt;
&lt;p&gt;这份经历看来看去，合着马云老师提倡的奋斗，就是拿着别人家的工资，干自己的事儿啊？！&lt;/p&gt;
&lt;p&gt;这段经历我就不深入分析了，大家都不傻，一看就能懂，马云到底是怎么奋斗，逃避996，才走向成功的。996不等于奋斗这样一个简单的逻辑命题，在这段经历中，也一清二楚。&lt;/p&gt;
&lt;p&gt;只是，我真的很想知道，马云如果能够知行合一，当年像现在坚信的那样，在自己的杭州电子工业学院996的坚守本职工作，坚信自己可以在学校当一名光荣的人民教师，已经是上苍对自己最好的福报，那么现在会是怎样。&lt;/p&gt;
&lt;p&gt;至于刘强东说的8116 + 8，我坚信他把自己写《地板闹钟的故事》的时间，算成自己的工作时间了。这是多么重要的工作啊！管理啊！至于员工到网上发表自己对996看法的时间，我不知道东哥会不会觉得他的员工在偷懒，这样的员工，东哥会不会嫌弃，不是兄弟。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这帮大佬真的傻吗？当然不是。这么简单的逻辑关系能想不清楚？这就是典型的屁股决定脑袋。&lt;/p&gt;
&lt;p&gt;不仅如此，他们还站上了道德制高点，对员工实施道德绑架。996不重要，重要的是你是不是奋斗者。&lt;/p&gt;
&lt;p&gt;咦？&lt;/p&gt;
&lt;p&gt;一个乞丐在街上乞讨，别人不给他钱，还质疑他明明有工作能力，竟然还要乞讨。你猜乞丐怎么说：你给不给我钱不重要。重要的是，你有没有同情心，是不是一个善良的人。给我钱，那是缘分，那是你行善的机会，那是福报啊。&lt;/p&gt;
&lt;p&gt;不对不对。大佬们怎么能是乞丐呢？&lt;/p&gt;
&lt;p&gt;换个故事。&lt;/p&gt;
&lt;p&gt;一个房屋的主人，请了个小时工打扫卫生。一个小时打扫不完。小时工表示，还需要多一个小时的工作量，所以还需要加一个小时的钱。你猜主人怎么说？咱们不提钱的事儿，咱们说说奋斗。你是不是奋斗者啊？你有没有进取心啊？你这样以后谁还会请你打扫卫生啊？能在我这里打扫卫生赚钱，已经是你的福报了啊。&lt;/p&gt;
&lt;p&gt;这不是耍流氓吗？&lt;/p&gt;
&lt;p&gt;哎呀，抱歉，一不小心，又提起了东哥在美国的故事。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所以，对于996这个问题，我觉得理性的讨论太多了。多得大佬们已经失去理性了。咱们干脆别讨论虚的了，就提法律好了。&lt;/p&gt;
&lt;p&gt;996是不是违法？马云原文说：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;没有人喜欢在一个强制996的企业里工作，既不人道，也不健康，更难以持久，而且员工、家人、法律都不允许...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;你看，马云把法律摆在了最后的位置。但不管怎么说，也算是承认996违法了。那么咱能不能就别那么多“但是”了，能不能谈谈，既然它是违法的，咱们怎么改善，怎么行动，别再干违法的事儿了。&lt;/p&gt;
&lt;p&gt;讲真，你们这帮大佬，老是这样为违法行为做辩护，官媒都看不下去了。人民网，人民日报，官微都回应好几篇文章了。毕竟我们生活在社会主义新时代啊。&lt;/p&gt;
&lt;p&gt;&lt;img alt="news1" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-04-14/news1.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="news2" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-04-14/news2.png" /&gt;&lt;/p&gt;
&lt;p&gt;给各位大佬普及一段小学生都会背的政治学内容：全面依法治国是我党治理国家的基本方略；是发展社会主义市场经济的客观需要；是社会文明进步的显著标志；还是国家长治久安的必要保障！&lt;/p&gt;
&lt;p&gt;呀，忘记了，其实大佬们的政治学修养应该都不错。&lt;/p&gt;
&lt;p&gt;马云曾经是浙江省政协委员；&lt;/p&gt;
&lt;p&gt;刘强东曾担任上海市政协委员和第十三届的全国政协委员。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这篇文章写完，回顾了一下。我觉得这可能是我近十年写的最情绪化的文章了。如果有同学对此不适，我深表歉意。文末红包抽奖，算是我对大家的补偿。我在最近，也会再写至少一篇，从知识的角度，谈论996的文章的。&lt;/p&gt;
&lt;p&gt;可是，我就是气不过。天底下怎么会有这么滑稽的事呢？明明不合法，还振振有词？&lt;/p&gt;
&lt;p&gt;最后，补充几点：&lt;/p&gt;
&lt;p&gt;1）自愿996，甚至007，是你的个人自由，别人无权干涉。但是，&lt;strong&gt;企业强制所有员工996，是违法的&lt;/strong&gt;；&lt;/p&gt;
&lt;p&gt;2）我没有不鼓励坚守岗位。在正常工作时间，坚守岗位是必须；在需要的时候，额外奉献是美德；如果你是一个无比高尚的人，无时不刻都自愿奉献，我敬重你，向你学习。但是，这不代表所有人都必须这样做。&lt;strong&gt;企业强制所有员工996，是违法的&lt;/strong&gt;；&lt;/p&gt;
&lt;p&gt;3）重要的事情说三遍：&lt;strong&gt;企业强制所有员工996，是违法的&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;所以，这篇文章的题图，是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="labour-law" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-04-14/labour-law.png" /&gt;&lt;/p&gt;
&lt;p&gt;哎。这么简单的事情，搞得我这么义愤填膺。&lt;/p&gt;
&lt;p&gt;这次，我觉得自己一点儿也不酷。&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-04-14/readme.md" rel="alternate"/></entry><entry><id>2019/2019-04-12/readme.md</id><title>答读者问 | 作为一个前端，花时间精力去学习webGL，靠谱吗？</title><updated>2019-04-12T00:00:00-07:00</updated><content>&lt;h2&gt;答读者问 | 作为一个前端，花时间精力去学习webGL，靠谱吗？&lt;/h2&gt;
&lt;p&gt;近乎每天，在我的课程上，或者是这个公众号的后台，我都能收到大量同学的提问。很多同学的提问很有意思，也有很多同学的提问，非常有共性；还有一些同学的提问，挠到了我的痒处，是我很想聊一聊的话题。所以，我决定在我的公众号上，开辟一个专门的栏目，叫“答读者问”，把我觉得有意思的问题，分享出来。本栏目不定期出现，敬请大家留意：）&lt;/p&gt;
&lt;p&gt;非常可惜的是，过去，这个公众号的后台，有很多有价值的提问，但是由于微信只保留20天的聊天记录，很多历史记录丢失了。从今天开始，我会有意识地保存这些资料的：）&lt;/p&gt;
&lt;p&gt;从什么时候开始都不晚：）&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;今天的“答读者问”，来自我在慕课网上&lt;a href="https://coding.imooc.com/class/260.html"&gt;《专给程序员设计的线性代数》&lt;/a&gt;课程的问答区。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;波波老师：&lt;/p&gt;
&lt;p&gt;有没有计划出一门webgl的课程？&lt;/p&gt;
&lt;p&gt;另外想讨教下，作为一个前端，接近阿里p6水平，打算花主要的精力去学习webGL，这样靠谱吗？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;bobo老师的回答：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;短期内，抱歉，没有这个打算。&lt;/p&gt;
&lt;p&gt;长期看：有。毕竟图形学是我的老本行。&lt;/p&gt;
&lt;p&gt;但具体时间几何，怎么切入，都没有定。短期，我的课程还是会以 通用算法+数学 为主，暂时不切入某个特定领域。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我不确定你说的靠谱是什么意思。从我的角度，大概分析是这样的：&lt;/p&gt;
&lt;p&gt;如果你有浓厚的兴趣，那就去学，这个没什么可说的。&lt;strong&gt;有兴趣本身是一件很难得，甚至是可遇不可求的事情。别想别的。&lt;/strong&gt;下面的内容不要读了，快去学习！&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;以下都是建立在你的兴趣一般，所以很“功利”的分析上：&lt;/p&gt;
&lt;p&gt;如果你问webGL以后会不会很主流，成为市场上招聘前端的必备技能？我暂时觉得不会。因为webGL太底层了。对于大多数人来说，学习webGL的教育意义大于实践意义。&lt;/p&gt;
&lt;p&gt;webGL能让你更深刻的理解Graphics领域底层的一些理念，但真要做东西，直接上three.js，这还是在有交互逻辑的基础上。如果是纯粹的模型或者动画，有太多工具可以更加直观的创造出来，然后直接导出代码。如果3D交互真的这么繁荣，势必会产生更多更加简单方便的工具直接满足业务需求。&lt;/p&gt;
&lt;p&gt;当然，创造这些工具的职位需要你有深厚的底层基础，但是，这些职位太少了。&lt;/p&gt;
&lt;p&gt;可以参考我的文章：&lt;a href="../2019-03-18/"&gt;《学算法有什么用，对你来说可能真没用》&lt;/a&gt;和&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-03-25/"&gt;《编程语言发展趋势》&lt;/a&gt;，其实都是这个意思。&lt;/p&gt;
&lt;p&gt;当然，这不代表它没用，它太有用了，但关键是你在哪个位置。&lt;/p&gt;
&lt;p&gt;另一方面，在交互的世界中，我也暂时不认为会全面3D化，甚至能否成为主流我都不敢肯定。&lt;strong&gt;3D不是2D的进化，而是和2D平行的，适用于不同场景的一种表现方式而已。&lt;/strong&gt;更何况，&lt;strong&gt;普通人的空间能力其实是极其有限的&lt;/strong&gt;，至少从现在的角度看，很多时候引入3D是糟糕的。不时地正确出现是锦上添花，到处都是，绝对是灾难。所以，我很怀疑它会是必备的技能。&lt;/p&gt;
&lt;p&gt;整体来讲，如果是我：&lt;/p&gt;
&lt;p&gt;因为我有兴趣，我会去学习。并且坚信没坏处，会有用，搞不好有大用。&lt;strong&gt;所谓行行出状元，这和主流不主流没关系。&lt;/strong&gt;有人自己在家剪纸能剪成世界大艺术家。&lt;/p&gt;
&lt;p&gt;但如果我有一个小孩儿，他对此没兴趣，我不会逼他学；&lt;strong&gt;但我会逼他学数学和英语。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;希望对你有启发。加油！：)&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;好啦，本期答读者问结束！&lt;/p&gt;
&lt;p&gt;大家加油！&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-04-12/readme.md" rel="alternate"/></entry><entry><id>2019/2019-04-11/readme.md</id><title>什么叫学会了？自己到底有没有学会？知识掌握的七个境界</title><updated>2019-04-11T00:00:00-07:00</updated><content>&lt;h2&gt;什么叫学会了？自己到底有没有学会？知识掌握的七个境界&lt;/h2&gt;
&lt;p&gt;最近，遇到了两个来自同学的提问，我觉得都挺典型的。&lt;/p&gt;
&lt;p&gt;一个同学问我，&lt;strong&gt;“学习的过程中，到底怎么样才叫学会了？掌握了？”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;还有两个同学，不约而同的问我，&lt;strong&gt;“学习算法，是不是掌握了基本原理，面试的时候，能说出个大概就好了？”&lt;/strong&gt;——对于这个问题，其实不止这两个同学，在过去的两年时间里，我也已经遇到很多次了。&lt;/p&gt;
&lt;p&gt;今天这篇推文，就借这些问题，聊一聊我眼里的，知识掌握的七个境界。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;第一重境界：撸串境界&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;知识掌握的第一重境界，我管它叫“撸串境界”。什么意思？就是，对于这个知识，你只有在撸串的时候，才能“无障碍”地提起。比如：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A：你知道吗？昨天人类首张黑洞照片公布了！&lt;/p&gt;
&lt;p&gt;B：是啊是啊，人类离宇宙的真相又近了一步。听说黑洞和时间的奥秘也有深刻的联系，可能我们离时空旅行又近了一步呢。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;撸串的时候，我们可能会不自觉地聊起这种话题。但是，八成，A和B对黑洞的了解，都是在“撸串境界”，真的正儿八经地说说：黑洞到底是怎么回事儿，黑洞照片的历史意义是怎样的，对未来有可能有什么影响，黑洞和时间又有什么联系，可能都不太清楚。对于黑洞，也就是在撸串的时候随便聊聊。&lt;/p&gt;
&lt;p&gt;&lt;img alt="chuan" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-04-11/chuan.png" /&gt;&lt;/p&gt;
&lt;p&gt;大家都放黑洞照片，我偏放羊肉串儿照片！是不是很酷？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;再比如：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A：听说XXX自己做人工智能，预测股票走势，赚了一大笔钱！&lt;/p&gt;
&lt;p&gt;B：我也听说了，就是用现在最火的深度学习。Alpha Go已经战胜人类最强的围棋选手了，Alpha Go用的就是深度学习算法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在这段对话里，A和B对人工智能和深度学习的理解，八成也是“撸串境界”。&lt;/p&gt;
&lt;p&gt;通常，看新闻就能帮助你进入撸串境界。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;第二重境界：关键词境界&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;知识掌握的第二重境界，我管他叫做“关键词境界”。就是，对于这个知识，你掌握了非常重要的几个关键词。比如：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A：听说XXX自己做人工智能，预测股票走势，赚了一大笔钱！&lt;/p&gt;
&lt;p&gt;B：我也听说了，就是用现在最火的深度学习。好像是建立了一个叫LSTM的模型就好了。我也想找时间学习学习呢，搞不好就能赚1个亿呢。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在这段对话里，B对深度学习的理解，进入了“关键词境界”。当然，在这里我只是举例子，毕竟LSTM只是深度学习的一种方式，深度学习领域也有很多其他重要关键词。在这里，我想强调的是：关键词境界和撸串境界，是截然不同的。&lt;/p&gt;
&lt;p&gt;为什么？因为如果你处于关键词境界，这个知识对你来说，就不仅仅是只有在撸串的时候可以提及的一个缥缈的概念了。你可以利用这个关键词，在网上查询，进而深入学习。换句话说，这个关键词已经可以指导你行动了——你已经可以开始具体的学习了。&lt;/p&gt;
&lt;p&gt;很多时候，我们解决问题，就是缺少一两个关键词而已。比如，我本科的时候，做一个项目，其中一个子功能，要对用户输入的邮箱字符串是否合法做验证。当时我花了很长时间自己设计“所谓的算法”去处理，其实就是一堆if-else。到后来，我明白了，这事儿其实用正则表达式，一句话就搞定了。真要说其中的算法，也是一个专门的领域，叫模式匹配。“正则表达式”，“模式匹配”，就是正确的关键词。如果我早一些知道这些关键词，我就可以直接去学习正则表达式的使用，或者直接去学习“模式匹配”算法，就会少走很多弯路。&lt;/p&gt;
&lt;p&gt;在这里，我要强调，从学习的角度，我觉得这个弯路，也是值得的。因为通过我的思考和尝试，再去看成熟的解决方案，我就能看到差距，总结自己思维上的缺陷，对知识的理解也会更深刻。我经常说，&lt;strong&gt;在大多数情况下，走一些弯路绝不是坏事，走弯路是进步的源泉，所谓失败是成功之母。&lt;/strong&gt;只不过，对于很多时间紧任务急的业务场景，可能现实不允许你走弯路。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;第三重境界：原理境界&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;第三重境界，就是你不但知道了这个关键词，你还知道了原理。&lt;/p&gt;
&lt;p&gt;归并排序对你来说不仅仅是一个名词，你知道归并排序是每次将整个数组分成两部分，将这两部分排好序以后，再合并起来；&lt;/p&gt;
&lt;p&gt;快速排序对你来说不仅仅是一个名词，你知道快速排序是每次以一个元素为标定点，把数组分成小于这个元素和大于这个元素两部分，对这两部分再去递归地进行排序；&lt;/p&gt;
&lt;p&gt;二分搜索对你来说也不是一个名词，你知道，二分搜索就是对一个有序数组，先检查中间的元素，如果正好是你要查找的内容，就ok了；如果不是，你要查找的内容比它小，继续到左边找；你要查找的内容比它大，继续到右边找。&lt;/p&gt;
&lt;p&gt;大部分同学通过在学校的专业学习，应该是至少能达到原理境界的。也就是，你知道这个名词，了解这个名词在解决什么问题，同时，也能用自然语言表述他的原理。&lt;/p&gt;
&lt;p&gt;但是，在这里，我必须提醒大家，&lt;strong&gt;对于计算机专业的学习，必须要把基础知识的掌握上升到第四重境界。&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;第四重境界：实践境界&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所谓的“实践境界”，在计算机领域，其实就是，你不仅仅能说出原理，还能用代码将他们正确实现出来。换句话说，你不仅仅知道“归并排序”，“快速排序”，“二分搜索”，你还能写出正确的代码。&lt;/p&gt;
&lt;p&gt;我在这篇推文开篇，两个同学，不约而同的问我，“学习算法，是不是掌握了基本原理，面试的时候，能说出个大概就好了？”他们的问题，本质就是：对于算法知识的掌握，有没有必要进入实践境界？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我的答案是：太有必要了。因为，这是计算机专业跟非计算机专业的本质区别。也是你能吃这碗饭，别人不能吃这碗饭的关键。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;计算机专业要做的，就是把抽象的逻辑转换成可以正确实现这个逻辑的代码。如果能顾及代码的效率，可维护性，甚至是简洁优雅，那就更好了。但如果你只是懂原理，能扯淡的话，恕我直言，别说数学系物理性能碾压你，连文学系历史系，甚至是一个素质高点儿的高中生乃至初中生，随便看两眼，可能都能碾压你。但是让他们转行程序员，还是会费一番功夫的，为什么？&lt;strong&gt;正确，优雅，高效的代码实现能力，不是一日之功。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果到达原理境界就ok的话，我的所有算法课程，长度都可以直接缩减到1/5。但是，能用代码正确的实现出来，完全是另一回事儿。很多同学说得清楚原理，但是实现不出正确的代码。这就是编程基础不够。由于你实现不出正确的代码，我也不敢保证你的理解是完全正确的。&lt;/p&gt;
&lt;p&gt;你跟我扯再多永动机的原理，要想让我不质疑你，请实现出一个永动机证明给我看。你跟我扯再多炼金术的原理，要让不怀疑你，请把这个易拉罐变成金子给我看（广告插入，推荐阅读我的文章：清明时节雨纷纷。科技，死亡，和永生。）。&lt;/p&gt;
&lt;p&gt;同理，你说你懂快速排序，不要废话，实现一个快速排序给我看。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Linus Torvalds说：talk is cheap, show me the code.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="linus" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-04-11/linus.png" /&gt;&lt;/p&gt;
&lt;p&gt;大家一定要明白，计算机是工科，工科是靠东西说话的。我相信这也是很多同学选择计算机专业的一个原因——它没那么多虚的。你专业水平高，你就能用实现出来，时间短，效率高，代码整洁优雅，让所有人都闭嘴。从某一个维度看，这确实是更公平的，不像在有一些行业或者领域，单靠嘴皮子，人和人能拉开很大的差距。（当然，一切都是相对的，公平这个话题太大了，有时间单聊。）&lt;/p&gt;
&lt;p&gt;所以，大家在具体学习的时候，一定要明白：&lt;strong&gt;我是计算机专业的，能实现出来，才是我的立身之本。&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;第五重境界：灵活应用境界&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;第五重境界，就是灵活运用。知识是死的，能灵活地运用这些知识解决实际问题，甚至是解释生活中的现象，对这个知识点，就达到了这重境界。&lt;/p&gt;
&lt;p&gt;随便举几个例子。&lt;/p&gt;
&lt;p&gt;Leetcode上1011号问题，大家可以看一看。在这里，我把中文版本的问题也截了一个图（没时间看具体问题直接跳过去，在这里只是举个例子）：&lt;/p&gt;
&lt;p&gt;&lt;img alt="1011" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-04-11/1011.png" /&gt;&lt;/p&gt;
&lt;p&gt;对于这个问题，如果你能很快地反应出，应该使用二分查找法来解决的话，你对二分查找的理解，就已经进入了灵活运用的境界。相较而言，写出正确的二分搜索代码，是简单的，但是，能快速反映出这类问题可以使用二分查找的思路去解决，还需要一定的专业训练才能达到。实际上，类似这样的使用二分查找法解决的问题，是算法竞赛里常见的问题套路。二分查找本身，也绝不仅仅局限在在一个有序数组中找一个数而已。对这个问题的深入解析，我在文章中不具体分析了，有兴趣的同学，可以自行搜索学习。&lt;/p&gt;
&lt;p&gt;再比如，经典的“智力”题，过河问题：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;农夫需要把狼、羊、菜和自己运到河对岸去，只有农夫能够划船，而且船比较小，除农夫之外每次只能运一种东西，还有一个棘手问题，就是如果没有农夫看着，羊会偷吃菜，狼会吃羊。请考虑一种方法，让农夫能够安全地安排这些东西和他自己过河。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以及经典的“装水问题”，版本众多，我随便取一个：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;有两个水桶一个装5升一个装3升怎么利用水桶得到4升水？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果你看见这类问题，能很快地想到，他们的本质，是图论中的一个路径搜索问题，那么你对路径搜索算法的掌握，就进入了灵活应用境界。给你一个图，让你找到从s到t的一个路径，是简单的；但是对于这类问题，可以使用图论去建模，将其转化成一个图中的路径搜索问题，是需要一定的专业训练的。&lt;/p&gt;
&lt;p&gt;再举一个Google的面试问题：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一个硬币，抛了1000次，结果有560次是正面，请问，你觉得这枚硬币是不是“公平”的？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果学过概率论的同学，可能都能说出什么是中心极限定理，都知道假设检验。但是，遇到这样一个问题，能不能联系已经掌握的知识，有理有据的说明白你得出结论的依据？需要你对相应的知识，达到灵活运用的境界。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;第六重境界：发明创造境界&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;上面的几重境界，都是对已有知识的掌握逐渐深入。但是，这个世界上尚未解决的问题还很多，能不能根据已有的知识，发明创造出新知识，进而解决新的问题？这就是发明创造的境界。所有的诺贝尔奖，图灵奖的获奖者，对相关领域的知识掌握，都在发明创造的境界。&lt;/p&gt;
&lt;p&gt;首先，必须承认，对于任何知识，我都达不到发明创造的境界。&lt;/p&gt;
&lt;p&gt;事实上，对于大多数人来说，对某个领域的知识，能整体进入灵活应用的境界，就已经足够了。因为能够灵活运用，已经意味着你可以使用这些知识，解决大量实际问题了。这已经对整个社会有相当大的价值了。能否进入发明创造的境界，一方面看你是否有这方面的追求；另一方面，也看机缘和天赋，很多时候，是可遇不可求的。&lt;/p&gt;
&lt;p&gt;不过，在这里，我想强调，所有的新知识，近乎都不是凭空出现的。都是靠大量的对前人知识的积累，理解，甚至是灵活运用之后，才出现的。所以，不断学习前人的知识和思想，是根本。没有积累，突然发明了新知识，尤其是在当下这个知识爆炸的时代，近乎是不可能的。&lt;/p&gt;
&lt;p&gt;所以，不要妄想把自己关起来，就能解决黎曼猜想。不要觉得自己是张无忌，找几本世界经典教材，在“洞里”与世隔绝，苦读三年五载，就能一鸣惊人。金庸的小说是成年人的童话。所谓的童话，就是骗人的。相较而言，不断地去积累，甚至是跨领域的积累知识，从其他领域的知识中汲取灵感，才有可能更大概率地发明出新的知识，解决更难的问题。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;第七重境界：遗忘境界&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;第七重境界，我称之为遗忘境界。在这里，首先要说明，前六重境界，是层层递进的关系。但是，在这里，我说的第七重境界，不是第六重境界的一个递进，而只是一种状态——遗忘，而已。&lt;/p&gt;
&lt;p&gt;相信很多同学都有这样的苦恼：学了很多知识，很快就忘掉了。即使曾经达到灵活运用的境界，但是可能各种原因，几年甚至十几年没有碰，最后也会遗忘。&lt;/p&gt;
&lt;p&gt;在这里，我想强调的是：这是极其正常的。如果你不会遗忘的话，你就是一个超人了。或者你拥有机器猫中的记忆面包，你应该已经是全球首富了。&lt;/p&gt;
&lt;p&gt;&lt;img alt="bread" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-04-11/bread.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;关键在于，如何抵抗遗忘？首先，对一个知识的掌握，你的境界越高，越不容易遗忘。相较于已经达到灵活运用境界里的知识，只在原理境界的知识，更容易被遗忘。&lt;/p&gt;
&lt;p&gt;另外，使用的次数越多的知识，越不容易遗忘。其实在我国，大多数初等教育，都是在采用“重复使用”这种方法，来帮助你记忆知识的。你根本没有具体应用过这些知识，但就是忘不了how are you后面，接的是fine, thank you. and you? 对于这种机械式地使用，我的评价是中性的。有好有坏，有机会可以单独写文。&lt;/p&gt;
&lt;p&gt;其实，遗忘并不可怕。遗忘境界是一种境界，如果你的遗忘境界中存在着某种知识，基本就意味着你能迅速地把它捡起来，重新回到原来的境界。这是很重要的。所谓的经验，不过是遗忘境界的存储。比如，红黑树的内部原理，很容易遗忘。但是，如果你跟着我的课程，认认真真学习了红黑树的原理，实现了红黑树的代码，那么，即使你遗忘了，我相信，对于正常智力水平的同学，在需要的时候，比如面试前，一两个小时的时间，足以让你回到原有的水平。&lt;/p&gt;
&lt;p&gt;最后，我想说的，虽然学习的目的不是遗忘，但&lt;strong&gt;学习的目的也绝不仅仅是记住。&lt;/strong&gt;其实，“记住”，是学习的一个太低层级的收获。关键是，在学习的过程中，你的大脑在消化、吸收知识的过程中，会连带有很多附加的收获。这些附加的收获，在很多时候，都是更加重要的。&lt;/p&gt;
&lt;p&gt;比如，对数学的学习，会逐渐让你对数字更敏感，同时，形成如何用数学模型解决问题的思维方式（所谓的数学思维和数学素养）；&lt;/p&gt;
&lt;p&gt;对算法的学习，会逐渐培养你理清逻辑的习惯，对每一个变量作用的深刻理解，也能让你写出越来越优雅的代码；&lt;/p&gt;
&lt;p&gt;更不用提，在学习的过程中，你会逐渐总结出适合自己的学习方法，把他们应用在更多领域的学习上；&lt;/p&gt;
&lt;p&gt;你会慢慢体会到如何能够更加高效的查找资料，如何归纳，总结知识体系，帮助你更好的理解；&lt;/p&gt;
&lt;p&gt;你会去提问，在提问的过程中，你会越来越多地理解：怎样提问更加有效？什么是一个好的问题？；&lt;/p&gt;
&lt;p&gt;你会给别人讲解，在给别人讲解的过程中，你也能锻炼自己的表达能力；&lt;/p&gt;
&lt;p&gt;你甚至能在学习过程中，逐渐找到自己的兴趣，自己的天赋，自己的理想；&lt;/p&gt;
&lt;p&gt;通过学习越来越多的东西，你也会越来越有自信，你能感受到天地之大，也能感知到自己之小；&lt;/p&gt;
&lt;p&gt;所有的这些，都比学习某一个具体的知识点，重要太多了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;爱因斯坦说：所谓的教育，就是忘记了在学校所学的一切之后，剩下的东西。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;大家加油！：）&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-04-11/readme.md" rel="alternate"/></entry><entry><id>2019/2019-04-05/readme.md</id><title>清明时节雨纷纷。科技，死亡，和永生。</title><updated>2019-04-05T00:00:00-07:00</updated><content>&lt;h2&gt;清明时节雨纷纷。科技，死亡，和永生。&lt;/h2&gt;
&lt;p&gt;&lt;img alt="painting" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-04-05/painting.png" /&gt;&lt;/p&gt;
&lt;p&gt;题图：宗教油画《诸神的聚集》&lt;/p&gt;
&lt;p&gt;（the assembly of gods）&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;人类对于战胜死亡的尝试，从没有停止过。至今为止，也尚没有成功过。&lt;/p&gt;
&lt;p&gt;秦始皇一统六国之后，便开始了追求长生不老之路。这位中国历史上第一位称为“皇帝”的人，也揭开了华夏大地炼丹术的篇章。从此，历代帝王将相，达官显贵，少不了对“成仙”和“不死”的热衷。就连曾经嘲笑始皇帝的唐太宗，也在晚年开始修炼“不死之药”，最终死在了自己的“仙丹”手上。&lt;/p&gt;
&lt;p&gt;大名鼎鼎的雍正皇帝，仅在位十三年。如果你去查维基百科，上面写的是：1735年，雍正因工作过度劳累，在批阅奏章时去世。但是，200年后，历史学家在圆明园中发现了大量雍正在位时期炼丹的证据。开始有人怀疑，雍正的真实死因，是药物中毒。&lt;/p&gt;
&lt;p&gt;这样的故事，在中国历史上，数也数不完。得到的越多，欲望就越大；得到了天下，就想永远。但是，永远和死亡，就是硬币的两面，追求永远的过程，一直和追求死亡联系在一起。&lt;/p&gt;
&lt;p&gt;至少，至今为止，是这样的。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;面对死亡，西方的世界也并不淡然。人性本是如此。&lt;/p&gt;
&lt;p&gt;从希腊神话，到圣经故事，充满着不死，或者复生的故事。和中国的炼丹术接近，在西方，炼金术则一度盛行。听名字，炼金术似乎和长生不老无关，但这只是一个中文翻译而已。如果你在维基百科中去查询alchemy（炼金术的英文），就会知道，炼金术从来都是和长生不老联系在一起的。炼金术的一大目的，就是制作长生不老药（the creation of an elixir of immortality）。日本著名动漫《钢之炼金术师》，就是以那个时代人类真实的社会观为背景虚构出来的故事。借炼金术，来探讨诸如：什么是生，什么是死，什么是人，什么是灵魂；能否长生，可否不死；我为什么是我，你为什么是你，你我有何不同，又何去何从，等等一系列的哲学问题。&lt;/p&gt;
&lt;p&gt;&lt;img alt="fullmetal" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-04-05/fullmetal.png" /&gt;&lt;/p&gt;
&lt;p&gt;即使到了航海技术极度发展的15-16世纪，哥伦布发现了新大陆，人类开始跃跃欲试，企图了解整个世界的全貌，绘制出世界地图。可此时，仍有一批野心勃勃的航海家，他们远渡重洋，征服大海的真实目的，是寻找传说中的“不老泉”。《加勒比海盗4》，便是以此为背景，虚构出的故事。&lt;/p&gt;
&lt;p&gt;&lt;img alt="caribbean" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-04-05/caribbean.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;到了17，18世纪，科学已经逐渐深入人心，但是，不老却仍然是神话。大名鼎鼎的牛顿公爵——举世公认的人类历史上最伟大的科学家之一，却在晚年，一直苦苦追寻长生不老的方法。&lt;/p&gt;
&lt;p&gt;大多数人认为，这是牛顿一生的污点。有些人评论说，牛顿的这段历史告诉了我们：伟大的人物，也是凡人，也有荒诞的一面。牛顿晚年的研究，就证明了这一点。&lt;/p&gt;
&lt;p&gt;&lt;img alt="newton" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-04-05/newton.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;但其实，我却不这么认为。科学终归是要发现未知的。牛顿的研究，之所以被人们看做荒诞，只是因为人们还没有做到而已。&lt;/p&gt;
&lt;p&gt;曾经有一名中国人，自制了两个大风筝，拴在椅子两旁，同时用47支巨大的炮竹绑在椅子背后。他要飞行。当他命令仆人点燃炮竹的瞬间，他消失在了火海之中。这件事发生在15世纪，他没有飞起来。在之后的很长一段时间，他的举动在世人看来，都是极度荒唐的。是啊，人又没有翅膀，怎么能飞呢？直到今天，我们已经可以一边喝着可乐，看着电影，一边坐在一种叫做“飞机”的“怪物”中，翱翔在近乎世界的任何一个角落上空。我们可以“飞”起来了。此时，再回头看这名中国人的行为，真的那么荒诞吗？&lt;/p&gt;
&lt;p&gt;1945年，美国火箭学家Herber S. Zin，将这名中国人，定义为世界上第一个尝试飞行的人。据他记载，这个人叫Wan Hoo。&lt;/p&gt;
&lt;p&gt;牛顿的研究亦是如此。如果说他的研究荒诞，那么就意味着，硅谷里有一票公司都是荒诞的，一票投资人都是荒诞的，一票科学家都是荒诞的。因为，直至今日，我们还在追逐着长生不死。&lt;/p&gt;
&lt;p&gt;当然，我们可能本来，就是荒诞的。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;科学的发展进入了近代。很多人觉得，人类已经清醒了，不再追求长生不老了。我不这么认为。只是，人类对长生不老的追求更理性了，更严谨了，更加小心翼翼了。并且，人类为其扣上了一个更加不玄幻的，科学的，严谨的，大气的名字——医学。&lt;/p&gt;
&lt;p&gt;现代医学的起源，是从文艺复兴时期开始的。随着人体解剖学的建立，人类对自己的身体有了更加深刻的理解。尤其是到了20世纪，医学技术突飞猛进。保守估计，得益于医学的发展，人类的平均寿命，至少在一百年的时间里，延长了30岁。据英国人的统计，1841年，英国女性的平均年龄是42岁，男性的平均年龄是40岁；2016年，英国女性的平均年龄是83岁，男性则是79岁。不仅如此，可以预见的，在未来，人类的平均寿命还会继续延长。&lt;/p&gt;
&lt;p&gt;虽还不是“不死”，但我们已然正在“长生”。而这长生的势头，在如今科技疯狂发展的势头下，也被诸多科技巨头们推向了巅峰。&lt;/p&gt;
&lt;p&gt;2017年3月，一个阳光明媚的午后，数百名当代精英，聚集在洛杉矶的一间小房子里，其中包括诺贝尔奖得主，好莱坞明星，一掷千金的著名投资人，和不断创造神话，改变世界的硅谷CEO们。他们正在参加一个小型的研讨会，课题就是：长生不死。研讨会的主持在一开场，就面对诸多大咖，提出了一个问题：有谁，希望自己能够活200年？请举手。在场的世界顶级名人，突然都好像成为了小学生。所有的人，都举起了自己的手。&lt;/p&gt;
&lt;p&gt;形形色色的生物科技公司犹如雨后春笋般出现。连大名鼎鼎的Google，都进行了大刀阔斧的企业改革，成立Alphabet，作为现在Google的母公司，和一系列其他子公司成平行关系。如果仔细看Alphabet的组成，就会赫然看到Calico的名字，这家和Google平行的公司，使命就是研究如何抵抗衰老，攻克和衰老相关的所有疾病。而在业界最为神秘的Google X，其项目全部保密，但很多人都认为，其中有大量生物医学相关项目。至于Google Ventures，Alphabet旗下的风投，也将大把资金投入了生物医学相关的项目中。&lt;/p&gt;
&lt;p&gt;&lt;img alt="alphabet" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-04-05/alphabet.png" /&gt;&lt;/p&gt;
&lt;p&gt;能不能做到长生不死，还不知道。但是，资源要到位。万一做到了呢，那绝对是花多少钱都值得的事情。乔布斯再伟大，说死也就死了。纵有再多人怀念，对于仍然在世的人而言，只有活着，才是最重要的。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于长生不死，科学界主流探讨的方法，大抵有两种。&lt;/p&gt;
&lt;p&gt;第一种，非常科幻，即所谓的“意识电子化”。这是我的翻译，如果用英文硬翻，就是意识上传（mind uploading）。&lt;/p&gt;
&lt;p&gt;所谓的意识电子化，是指，我们的大脑活动，本质是脑细胞中一系列生物电信号的结果。只不过，这些电信号，是产生自大脑这样一个有机体中的。那么，我们有没有可能在无机体上，比如硅片中（当下芯片的主要原材料），来模拟出这一系列电信号呢？要知道，“活着”这样的一个意识，只是一种大脑活动而已。&lt;/p&gt;
&lt;p&gt;对于大多数人来说，大脑其实是被身体的其他脏器所拖累的。很多人在死亡时，大脑是完全没有问题的，只不过由于其他重要脏器出了问题，导致全身系统也被波及，进而走向了死亡。如果科技能够模拟出每一个人的大脑，那么，我们就真正脱离了肉身的束缚。这是至今公认的，最靠谱的永生形式。虽然离真正实现它，还有很长的距离。但是，大多数科学家已经承认，要想靠维持肉身的方式实现永生，似乎并不现实。在有形的世界中，一切终将消亡。但是，笛卡尔说：我思故我在。即使脱离了肉身，只要我的意识还在那里，那么，我就可以说，我是活着的。&lt;/p&gt;
&lt;p&gt;&lt;img alt="descartes" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-04-05/descartes.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;但是，这个方案，至今，还完全没有靠谱的实施路径。甚至，可能永远无法实现。这个方案最大的问题在于，要想使用电子的方式复制人类的大脑，我们就必须首先对大脑有极其完整，清晰的认识。虽然现代医学已经对人的很多脏器有了非常清晰的认识，甚至都能做出人造心脏。但是，对于大脑，我们还知之甚少。甚至连皮毛都不到。有一派哲学观点甚至认为：人类自身，是不可能理解大脑的。有机会，我们可以再详细讨论这派观点。不管怎样，我们离“意识电子化”这项技术，还很遥远。&lt;/p&gt;
&lt;p&gt;即使，假想，我们真的可以将一个人的意识电子化。一个巨大的问题又会摆上来。一个可以电子化的意识，意味着可以被无限制的复制。毕竟，将意识电子化的目的，就是永生。如果把你放在了一块硬盘上，这块硬盘却坏掉了，于是你消失了，那就太得不偿失了。和当下我们对所有重要资料所进行的措施一样，备份是必须的。但这样的话，哪个备份又是真实的你呢？&lt;/p&gt;
&lt;p&gt;你当然也可以说，每个备份都是真实的你。但是，这些备份慢慢可能因为各种原因，产生思维的不同。那么，有无数个真实的你，和没有你，又有什么区别呢。毕竟，至今为止，让“你”是“你”的关键，就在于，这个世界上，“你”是独一无二的。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们可以先将这些哲学思辨放到一边，毕竟，这个技术本身，还不见踪影呢。但是对于长生不死，第二种方法则现实的多。甚至，已经有人开始行动了。&lt;/p&gt;
&lt;p&gt;第二种方法，说白了：就是换血。用更年轻的血液，去替换成年人或者老年人身体里正在衰老的血液。当然，“换血”只是一种不专业的，大众化的表述，专业一些的表述，就是在细胞层面抵抗衰老。对于细胞层面抵抗衰老，还有很多方法，但是换血是当下，实施起来最简单的方法。&lt;/p&gt;
&lt;p&gt;换血到底有没有用。科学界还在争论。但越来越多的研究成果表明，是有用的。2015年，斯坦福大学的研究表示：有证据表明，在小白鼠身上实行换血实验，将年轻小白鼠的血液输给老年小白鼠后，老年的小白鼠，明显在认知，行动等各方面，都有所增强。老年的小白鼠不会说话，研究者替它们说：这就是返老还童。&lt;/p&gt;
&lt;p&gt;这项研究的结论太过惊人，对其背后确切的科学依据，科学家们慎之又慎，不敢断下结论。如果这一切有了更加明显的生物学证据的话，势必将极大地影响我们的社会。可能带来的改变，我觉得轮不到科幻小说家，每个人都能想象得到。为此，我将这篇推文的“阅读原文”链接，送给了nature网站上和这个“换血”研究相关的一篇报道。&lt;/p&gt;
&lt;p&gt;尽管科学的证据还并不充分，但是，已经有人等不及了。硅谷著名风投人Peter Thiel，已经开始往自己的身体里，注入年轻人的血液。Peter Thiel的行为，是其所投资的一家硅谷著名创业公司Ambrosia的一项实验。这项实验，为600名年纪大于35岁的，诸如Peter Thiel这样有钱有势的“志愿者”，进行换血服务，并且长期跟踪，观察“换血”在人体上的效果如何。这些血液，都来自于25岁以下的健康年轻人，标价是每1.5L 8000美金。而这家公司的名字：Ambrosia，就是“神仙的食物”的意思。这个词源于希腊神话，希腊神话中，诸神都是不死的。其根源，就在于他们的食物：Ambrosia。&lt;/p&gt;
&lt;p&gt;美剧《硅谷》第四季中的角色 Gravin Belson，就与另外一位金发小哥，实践着这种“换血”，技术术语被称为“异种共生”（parabiosis）。在剧中，这位科技界大佬解释道：定期将较为年轻健壮的捐献人的血液输入体内，可以显著地延缓衰老。&lt;/p&gt;
&lt;p&gt;&lt;img alt="blood" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-04-05/blood.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;7.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;很多科学家都非常自信地表示：在2030年左右，人类就有可能实现永生了。这是因为，到2030年左右，科学技术的发展，将可以做到：每过一年，就让人的平均寿命延长一岁。所以，到了这个时间点，大家只需要稳稳地跟着最新医学技术前进就好了。&lt;/p&gt;
&lt;p&gt;能够让科学家有如此信心的技术，是纳米机器人。还记得我之前说的，在细胞层面抵抗衰老，还有很多其他方法吗？换血太过简单粗暴，纳米机器人相对就有针对性的多。科学家正在探索使用纳米级别的机器人，将他们注入血液，这些机器人可以摧毁病原体，清除杂物，血栓，以及肿瘤，纠正DNA的错误，从而达到延缓衰老的目的。最终，他们也会被排出体外，不会成为你身体的负担。&lt;/p&gt;
&lt;p&gt;当然了，一直使用最新的技术，将会是非常昂贵的。只有世界上的顶级富人和政要，才能负担得起。但是，所有的技术，都会逐渐平民化。互联网，无线通讯，飞机旅行，医疗，无一例外。我们每个人现在手握的金钱和权力，比古时任何一个帝王将相都要小，但是，我们可以支付得起的生活，却远超任何一个帝王将相。从道理上，抵抗衰老的技术也将如此。&lt;/p&gt;
&lt;p&gt;经济学家认为，如果2030年，科技真的可以达到每过一年，就让人的平均寿命延长一岁；那么大概在2050年，正常工作的中产阶级，就完全可以有条件支付得起永生的开销。&lt;/p&gt;
&lt;p&gt;可是，如果“永生”真的成真，这个世界的运行方式是否还和现在一样？这，才是一个更大的问题。&lt;/p&gt;
&lt;p&gt;技术终将以他特有的方式，改变整个人类社会。过去，技术一直在这样做。一整部人类文明的变迁史，就是一整部技术发展史。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;8.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;圣经旧约中，有一段话：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;神造万物，各按其时成为美好。&lt;/p&gt;
&lt;p&gt;又将永生安置在世人心里。&lt;/p&gt;
&lt;p&gt;然而神从始至终的作为，人不能参透。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;或许，因为我们一直摆脱不了对永生的执念，所以，我们才是人，不是神。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;liuyubobobo&lt;/p&gt;
&lt;p&gt;2019.4.5 凌晨，于Mountain View&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-04-05/readme.md" rel="alternate"/></entry><entry><id>2019/2019-04-03/readme.md</id><title>如何胜任真实的机器学习任务</title><updated>2019-04-03T00:00:00-07:00</updated><content>&lt;h2&gt;如何胜任真实的机器学习任务&lt;/h2&gt;
&lt;p&gt;我在慕课网上有一个机器学习算法课程&lt;a href="https://coding.imooc.com/class/169.html"&gt;《Python3入门机器学习 经典算法与应用》&lt;/a&gt;，广受好评。甚至有人表示，比吴恩达的机器学习课程还要好。。。&lt;/p&gt;
&lt;p&gt;&lt;img alt="comment" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-04-03/comment.png" /&gt;&lt;/p&gt;
&lt;p&gt;这个。。。好意我心领了，但实在愧不敢当。我还要继续努力：）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;但是，对于这个课程的售前，我见到的最多的问题，大概是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="ask" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-04-03/ask.png" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“弱弱问一下，学了这门课能找到ai相关的工作吗？”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;咳咳。&lt;/p&gt;
&lt;p&gt;&lt;img alt="keke" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-04-03/keke.png" /&gt;&lt;/p&gt;
&lt;p&gt;虽然有一些同学在学完我的课程后，确实成功地转入了人工智能领域，但我知道，这背后，绝不仅仅是我的课程的功劳。&lt;/p&gt;
&lt;p&gt;他们有的是由于企业内部转岗，所以有不可多得的机会；&lt;/p&gt;
&lt;p&gt;有的本身是数学或者物理专业，有极好的数学背景，用人单位更看重的是其自身的数学素养，而不仅仅是掌握的那些机器学习知识；&lt;/p&gt;
&lt;p&gt;有的除了上我的课程，更是花了成百上千个小时，在其他教程，书籍上，并且辅以了大量的实践。&lt;/p&gt;
&lt;p&gt;如果只是学习我的课程，我的回复基本都是这样的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这门课程是机器学习的入门课程，以机器学习监督学习算法为主线，辅以介绍一些诸如算法的评价，方法的选择，模型的优化，参数的调整，等等内容。学习本门课程是您进入机器学习世界的第一步。但是离真正从事机器学习相关的工作还有距离。不过相信这门课程可以为您后续更为深入的学习研究工作打下基础！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;嗯，看上去是不是特别彬彬有礼，特别职业？请叫我金牌客服bobobo！哈哈哈。&lt;/p&gt;
&lt;p&gt;但是，我的内心其实是这样的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;亲，这门课程只有25个小时，500块钱。如果上完这节课，就能找到机器学习工作了，我觉得这门课至少值10万。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;哈哈哈，只是开玩笑。我只是想说明，机器学习真的是一个很大的专有领域。要是想找到人工智能相关的工作，只上我的这个课程，是远远不够的。&lt;/p&gt;
&lt;p&gt;在我的课程最后，我向大家具体介绍了，要想胜任真实的机器学习任务，还需要怎样继续深入学习。整体来讲，有两大部分内容：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;深度学习。这个不用说了，大红大紫。我的课程并不涉及神经网络和深度学习算法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;特征工程。这一点，我在课程中多次强调了。当机器学习的方法大家大致理解以后，在一个具体的任务中，很多时候，都在拼特征工程。&lt;/p&gt;
&lt;p&gt;从某种程度讲，各个专业领域研究的一个很重要的方向，都可以理解成在做特征工程。&lt;/p&gt;
&lt;p&gt;比如医学：研究到底哪些基因和哪些疾病相关；&lt;/p&gt;
&lt;p&gt;心理学，研究哪些大脑活动和哪些情绪相关；&lt;/p&gt;
&lt;p&gt;经济学，研究哪些社会现象，和哪些经济表现结果相关；&lt;/p&gt;
&lt;p&gt;等等等等。&lt;/p&gt;
&lt;p&gt;很早之前，我看过一期Kaggle的冠军采访，印象深刻。问他获得冠军的秘诀，他的秘诀就是，把精力放在了查找那个领域的文献上，从而使用了更靠谱的特征。（印象里那一期是和医学相关的数据）&lt;/p&gt;
&lt;p&gt;对于特征工程，当下，我没有见过特别好的教程。这也是非常合理的，因为特征工程整体是领域相关的。&lt;/p&gt;
&lt;p&gt;如果你拿起一本自然语言处理的书，你会发现这本书其实就是在讲执行自然语言处理任务时，可以使用或者生成哪些特征；&lt;/p&gt;
&lt;p&gt;拿起一本图像处理的书，你会发现这本书其实就是在讲执行图像任务时，可以使用或者生成哪些特征，&lt;/p&gt;
&lt;p&gt;等等等等。&lt;/p&gt;
&lt;p&gt;当然，特征工程有一些通用方法，但并不多。而且通用方法效果有限，有时间我可以再写文简单总结一下。最直接的方式，还是根据具体的应用场景（图像？自然语言处理？医学？认知神经科学？），去学习具体的领域知识。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;(本文最初是一篇推广文，下有广告商的广告，在这里省略广告)&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-04-03/readme.md" rel="alternate"/></entry><entry><id>2019/2019-04-01/readme.md</id><title>1 + 2 + 3 + ⋯ + ∞ = -1/12？这不是一个愚人节玩笑。</title><updated>2019-04-01T00:00:00-07:00</updated><content>&lt;h2&gt;1 + 2 + 3 + ⋯ + ∞ = -1/12？这不是一个愚人节玩笑。&lt;/h2&gt;
&lt;p&gt;1 + 2 + 3 + ⋯ + ∞，结果是多少？当然是正无穷了！嗯。这个答案显然没毛病。不过，在这篇文章中，我将严谨的证明出：1 + 2 + 3 + ⋯ + ∞也可以等于-1/12。你没有看错，无穷多的连续自然数的“和”，也可以是一个负数；不仅如此，还是一个负分数。这并不是一愚人节的玩笑：）&lt;/p&gt;
&lt;p&gt;和所有的数学证明一样，如果对于一个命题，通过不同的计算或者思路，我们可以求解出两个不同的答案，或者相互矛盾的结论的话，通常，我们对此一定能找到一个合理的解释。或者是其中的一个证明是错的，或者是讨论问题的角度是完全不同的。&lt;/p&gt;
&lt;p&gt;最简单的例子：初中认真学习数学的同学一定知道：初中数学的一大重点是一元二次方程，对应在解析几何中，就是大名鼎鼎的二次函数：抛物线。在初中，我们经常会说，一个一元二次方程没有解。但是，当我们将数字范围扩充到复数域的时候，我们就会明白，任何一个一元二次方程，一定是有解的。只不过，一个一元二次方程在实数范围内，可能是无解的；但在复数范围内，一定有解。你看，当我们讨论问题的范围改变了，定义改变了，就会得到截然不同，甚至是完全相反的结论。&lt;/p&gt;
&lt;p&gt;要看懂这篇文章，你只需要有初中水平的数学知识就够了；在文章最后，我会简单阐述为什么会有这样反直觉的结论，这部分内容，需要你有本科高等数学的基础知识，大一上的高等数学就够了。但是，如果有些同学在本科或者研究生学习过复变函数的话，就会明白，这个问题背后，隐藏着更加深刻的内容，结论和应用。对于这些内容，由于篇幅原因和定位原因，这篇文章不会涉及。所以，如果你系统学习过复变函数，这篇文章毫无价值，至此结束：）&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;下面，为了证明出 1 + 2 + 3 + ⋯ + ∞ = -1/12，我们先来证明另外两个结论。&lt;/p&gt;
&lt;p&gt;第一个结论：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1 - 1 + 1 - 1 + ⋯ = 1/2&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;即1，-1这两个数字交替出现的无穷序列，其和为1/2。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我们假设这个和存在，记为A，则：&lt;/p&gt;
&lt;p&gt;A = 1 – 1 + 1 – 1 + 1 – 1 + ...&lt;/p&gt;
&lt;p&gt;所以，1 - A = 1 - (1 - 1 + 1 - 1 + 1  ...)&lt;/p&gt;
&lt;p&gt;如果我们把小括号去掉：&lt;/p&gt;
&lt;p&gt;1 - A = 1 - 1 + 1 - 1 + 1 - 1 + ...&lt;/p&gt;
&lt;p&gt;前两项 1 - 1 的结果显然为0，我们的式子就变成了：&lt;/p&gt;
&lt;p&gt;1 - A = 0 + 1 - 1 + 1 - 1 + ...&lt;/p&gt;
&lt;p&gt;等等，0后面那一串是什么？1，-1这两个数字交替出现，就是 A 啊！所以，我们得到了：&lt;/p&gt;
&lt;p&gt;1 - A = 0 + A&lt;/p&gt;
&lt;p&gt;所以：2A = 1，A = 1/2。得证：）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;看，根据我们的推导，一连串整数的和（1和-1），结果竟然是一个分数。&lt;/p&gt;
&lt;p&gt;下面，我们来证明出另外一个结论：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1 - 2 + 3 - 4 + 5 - 6 + ⋯ = 1/4&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;即，自然数序列，但是符号是正负交替的，这一系列整数的和为 1/4。&lt;/p&gt;
&lt;p&gt;我们假设这个和存在，记为B，则：&lt;/p&gt;
&lt;p&gt;B = 1 – 2 + 3 – 4 + 5 – 6 + ...&lt;/p&gt;
&lt;p&gt;下面，我们要使用一下上面我们证明的A序列。我们用A减去B，则有：&lt;/p&gt;
&lt;p&gt;A - B = (1 - 1 + 1 - 1 + 1 - 1 + ...) - (1 - 2 + 3 - 4 + 5 - 6 + ...)&lt;/p&gt;
&lt;p&gt;如果将小括号去掉，并且让A的每一项都和B的对应项配对，就有：&lt;/p&gt;
&lt;p&gt;A - B = (1 - 1) + (-1 + 2) + (1 - 3) + (-1 + 4) + (1 - 5) + (-1 + 6) + ...&lt;/p&gt;
&lt;p&gt;我们计算出每个小括号的结果，他们是有规律的：&lt;/p&gt;
&lt;p&gt;A - B = 0 + 1 - 2 + 3 - 4 + 5 + ...&lt;/p&gt;
&lt;p&gt;发现了什么？A - B 的结果，就是 0 再加上B这个序列和！&lt;/p&gt;
&lt;p&gt;A - B = 0 + B&lt;/p&gt;
&lt;p&gt;所以： 2B = A&lt;/p&gt;
&lt;p&gt;又因为，我们上面已经证明出了，A = 1/2，所以：&lt;/p&gt;
&lt;p&gt;B = 1/4&lt;/p&gt;
&lt;p&gt;WOW！我们离我们的目标已经很接近了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;下面，我们就来证明：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1 + 2 + 3 + 4 + 5 + 6 + ... = -1/12&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们假设这个和存在，记为C，则：&lt;/p&gt;
&lt;p&gt;C = 1 + 2 + 3 + 4 + 5 + 6 + ...&lt;/p&gt;
&lt;p&gt;下面，我们要使用一下上面我们证明的B序列的和。我们用B减去C，则有：&lt;/p&gt;
&lt;p&gt;B - C = (1 - 2 + 3 - 4 + 5 - 6 + ...) - (1 + 2 + 3 + 4 + 5 + 6 + ...)&lt;/p&gt;
&lt;p&gt;依然是，我们将小括号去掉，并且让B的每一项都和C的对应项配对，就有：&lt;/p&gt;
&lt;p&gt;B - C = (1 - 1) + (-2 - 2) + (3 - 3) + (-4 - 4) + (5 - 5) + (-6 - 6) + ...&lt;/p&gt;
&lt;p&gt;发现规律了吗？B-C 的所有奇数项都为0，偶数项则是: -2-2=-4, -4-4=-8, -6-6=-12, ...&lt;/p&gt;
&lt;p&gt;所以，我们有：&lt;/p&gt;
&lt;p&gt;B - C = 0 - 4 + 0 - 8 + 0 - 12 + ...&lt;/p&gt;
&lt;p&gt;B - C = - 4 - 8 - 12 - 16 - 20 - ...&lt;/p&gt;
&lt;p&gt;B - C = -4(1 + 2 + 3 + 4 + 5 + 6 + ...)&lt;/p&gt;
&lt;p&gt;看看小括号里是谁？就是C啊！所以：&lt;/p&gt;
&lt;p&gt;B - C = -4C&lt;/p&gt;
&lt;p&gt;我们得到：-3C = B&lt;/p&gt;
&lt;p&gt;再将之前证明得到的B = 1/4 带进去。得到：&lt;/p&gt;
&lt;p&gt;C = -1/12。得证：）&lt;/p&gt;
&lt;p&gt;其实，为了证明出这个结果，还有其他的方法。但我觉得这个方法最简单，小学生都能看懂：）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“问题”出在哪里？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;好了，我们已经非常“严谨地”证明出了：1 + 2 + 3 + ⋯ + ∞ = -1/12。但这显然和常识不符合。无穷的正整数的和，怎么可能是个负数？还是个分数？问题出在哪里？&lt;/p&gt;
&lt;p&gt;如果同学们仔细看我上面求解A, B, C三个无穷序列的和的过程，就会发现，我一直再说这样一句话：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我们假设这个和存在，记为A(或B, 或C)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;问题的关键就在于。这个和真的存在吗？&lt;/p&gt;
&lt;p&gt;答案是，在我们通常的研究范畴中，这个和是不存在的。熟悉高等数学的同学会知道，我一直在做的事情，其实就是在计算一个无穷数列的和，即在高等数学中的无穷级数求和问题。一个无穷数列的和可以被计算出来，其前提条件是，这个无穷序列是收敛的。但是，上面A, B, C这三个序列都是发散的（具体证明在这里省略，有兴趣的同学可以复习/学习一下，如何判断无穷级数的敛散性）。所以，&lt;strong&gt;“假设这个和存在”中的假设根本不成立，把他们记为A, B, C也就没有意义，后面的推导都没有意义。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;但是！所有的事情，似乎都有“但是”：）&lt;/p&gt;
&lt;p&gt;和前面举的一元二次方程的例子一样。x^2 + 1 = 0，这个方程有解吗？如果我们站在实数的视角看。本质就是在问我们：根号-1的解是多少？答案是，这个数字没有意义，所以这个方程式无解的。&lt;/p&gt;
&lt;p&gt;但是，如果一旦我们定义：根号-1是i，砰！这个方程有解了！不仅这个方程有解了，我们还发明出了数学领域的一个重要的工具——复数。这个工具，可以帮助我们解决大量的其他数学问题。&lt;/p&gt;
&lt;p&gt;对于这个问题，是同样的。虽然通常来看，1 + 2 + 3 + ⋯ + ∞ 结果肯定不是一个值，而是无穷大。但是一旦我们将其想成一个值，却能推导出这个值是-1/12。自然数还是那些自然数，于是，数学家们说，其实，在这个式子中，我们用的加法，不是通常意义的加法，而是一种特殊的加法（具体这种加法为什么不能看做通常意义的加法？因为他不满足很多通常意义的加法性质。具体不满足哪些性质？要都写出来太繁琐了。如果大家有兴趣，有时间可以单独成文。），叫做拉马努金加法；这个和，也可以称为拉马努金和（Ramanujan Summation）。顾名思义，这一切是一个叫做拉马努金的数学家提出来的。&lt;/p&gt;
&lt;p&gt;所以，严格意义上讲，我们应该这样表示上面的结果。&lt;/p&gt;
&lt;p&gt;&lt;img alt="equation" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-04-01/equation.png" /&gt;&lt;/p&gt;
&lt;p&gt;看到后面的花体大R了吗？他就表示，我们的这个结果，是拉马努金加法的结果。英文是Ramanujan Summation，取首字母R表示。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;拉马努金是何许人？两个字：天才；四个字：空前绝后。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;拉马努金是一名来自印度的数学家，没有任何家庭背景，也没有受过专业的数学训练，一路自学成才，依靠其对数学强大的直觉，不仅解决了很多数学难题，更提出了很多前无古人的大胆数学结论。他一生提出了3900多条新的数学公式和命题，这之中的很多成果，后来被证实，可以被完美地应用在量子物理学中，解决量子力学，量子场论等领域中遇到的无穷大问题。近年来，一些宇宙学家在研究黑洞的时候，也用到了拉马努金的一些研究成果。直至今日，人们还能从其研究中挖掘出宝藏。甚至，有人称拉马努金是从未来穿越回来的数学家。以后有时间，我们可以更多地介绍这个人：）&lt;/p&gt;
&lt;p&gt;&lt;img alt="r" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-04-01/r.png" /&gt;&lt;/p&gt;
&lt;p&gt;比起计算机科学家，其实我是更向往数学家的。因为数学家更纯粹。在他们解决一个个问题的时候，并不知道这些问题有什么用，或者有什么意义。&lt;strong&gt;大多数数学成果，都要经过几十年后，才会在实际的科学技术中扮演应有的重要角色。预测正在进行的某些数学成果在未来会有什么重要意义或者应用，几乎是不可能的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所以，数学家们或许只是觉得：&lt;strong&gt;这一切很美，很好玩。&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-04-01/readme.md" rel="alternate"/></entry><entry><id>2019/2019-03-31/readme.md</id><title>一个坏消息，但也有可能是一个好消息</title><updated>2019-03-31T00:00:00-07:00</updated><content>&lt;h2&gt;一个坏消息，但也有可能是一个好消息&lt;/h2&gt;
&lt;p&gt;在三月的一个阳光明媚的清晨，我突然决定，好好做公众号，保持周更。这个决定背后，有我的很多思考，有时间我会专门写文总结一下。但整体而言，我希望分享更多的内容给大家：）&lt;/p&gt;
&lt;p&gt;我的公众号之前聚集的关注者虽然并不多，但这些”种子用户“，给与了我很大的支持。在我决定周更以后发布的第一篇文章，&lt;a href="../2019-03-18/"&gt;《学算法有什么用？唉，对你来说，可能真没用》&lt;/a&gt;，看到大家热情的留言，真的让我很感动：）我知道我的文字水平还有太多需要提高的地方，还要经过很多努力，才能带给大家更好的内容。但我这样的一个”二流写手“，能得到这么多的认可，心里真的暖暖的。请大家相信我，我虽不聪明（可以参考我的文章&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2018/2018-07-18/"&gt;《天生不聪明》&lt;/a&gt;，但最懂得”坚持“的意义，也最擅长坚持。我会努力下去，持续为大家提供有质量的原创内容：）&lt;/p&gt;
&lt;p&gt;更让我惊讶的是，这么小流量的一个公众号，已经有广告主跟我谈广告合作了。我把我的流量摆给他们，且给出了一个超出平均水平的报价，他们竟然毫不嫌弃。因为，他们觉得这个公众号很有潜力，就当做另一种形式的投资了，也是对我的支持。对此，我也很感动。如果你曾经创过业，拉过投资，就会明白，如果有人愿意在你什么都没有的时候，拿真金白银支持你，意味着什么。&lt;/p&gt;
&lt;p&gt;对于广告，我的心情是很复杂的，我完全理解，一定会有很多同学是厌恶广告的。所以我纠结了很久要不要接下来。说实话，以我的公众号现在的流量，就算超出平均水平，广告也没多少收入，金钱完全不是我考虑的因素。&lt;/p&gt;
&lt;p&gt;但是经过慎重考虑，&lt;strong&gt;我还是决定接下来。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为什么？&lt;strong&gt;因为我是一个好奇宝宝：）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;除了在这里发表原创文章，给大家带来更多分享之外，我想知道，尝试一定程度商业化运营这个公众号，会发生什么？我想感受这一切会带给我，带给这个公众号什么变化。我也想知道我能不能应付他们。我希望积累更多的经验，拥有更多的经历。将来聊起公众号这样一个东西，我的体会不仅仅是”换了一个平台，写了一些东西“，还有更多别的感悟，关于这个世界，这个社会，是如何运转的。&lt;/p&gt;
&lt;p&gt;这是我的一己之私。就像我在&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2018/2018-07-18/"&gt;《天生不聪明》&lt;/a&gt;中写的，”所有的科学家都是好奇宝宝，像小孩子一样，...，一定要用手捅捅自己的研究对象。“我也想捅一捅我的这个公众号。&lt;/p&gt;
&lt;p&gt;如果真谈金钱，我完全可以做更多风险更低，收益却更高的推广活动。比如无论是慕课网，还是极客时间，都有分享赚钱的活动，模式成熟，方法简单，产品有保障，还直接可以提现。慕课网的运营部门也多次跟我说，让我宣传一下自己的课程，还能顺便赚推广佣金。但我从来不想这么做。&lt;strong&gt;因为，我觉得，这个推广佣金是给同学们的福利。&lt;/strong&gt;我已经从课程中拿到了制作课程内容应有的分成，就不应该来抢本来是属于同学们的福利。更重要的是，这个过程，在我看来，就是吆喝而已，或许能赚点儿钱，但于我而言没什么收获。但在公众号投放广告稍有不同，我要去和广告主沟通，要去思考怎么投放合适，要去平衡关注者和广告主之间的利益。这对我来说都是全新的挑战，更是全新的体验。希望大家能够理解我。&lt;/p&gt;
&lt;p&gt;当然，我明白，我这样做，一定会带给一些同学困扰，毕竟，没有人是为了看广告来关注公众号的。为此，我将采取以下的”措施“，来弥补大家。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在我的公众号上，所有的广告推文，文章标题一定是《推广 | XXXXXX》的形式。文章标题首的”推广“二字，直接告诉你，这是一个广告。我不想骗点击。所以，对广告极度不适的同学，请不要点击这样的标题的文章。放心，短期内也不会太多的。一年搞不好也就这一单：）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从本周开始，我的所有原创推文，都将发出去一个红包。红包金额会随着公众号的关注者逐渐增多，而逐渐变大的。公众号上能有广告，和读者是分不开的。这不仅仅是号主的功劳，更是读者的功劳。我希望用这种方式，回馈我的读者。经过我的简单估算，在这个活动中我花出去的钱，会多于我通过广告赚到的钱：）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对于我接受的广告，我会尽最大努力体验他们的产品，为大家排雷的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;了解我的同学可能会知道，我从研究生没毕业，就开始注册了第一家公司，尝试创业。至今，已经13个年头了。这个过程，我不敢说自己对商业的理解有多深，但我确实深刻地理解了商业对当今世界的意义。如果熟悉苹果公司的同学，可能知道，乔布斯有一个重要的原则：不做慈善。这个原则一直贯彻至今，在”后乔布斯“时代，苹果也并没有重启任何慈善活动。&lt;/p&gt;
&lt;p&gt;为什么？因为，乔布斯认为：公司的意义不是做慈善。公司的意义，是做好自己的产品，为员工，为股东，为自己的客户负责。如果一个公司，能够做好自己的产品，就能带动员工致富；给股东更多回报；让投资者对投资抱有希望，进而去投资更多有前景的项目；带动就业；促进创新；引领行业成长；让整个世界更好。这，就是最大的慈善。&lt;/p&gt;
&lt;p&gt;我深以为然。&lt;/p&gt;
&lt;p&gt;所以，我的公众号中将出现广告，这或许是个坏消息。但也许，这也是一个好消息。谁也不知道这一切将引领这个公众号走向哪里。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;而这大大的”不知道“，才是最让人兴奋，最酷的地方。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;难道不是吗？&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-03-31/readme.md" rel="alternate"/></entry><entry><id>2019/2019-03-28/readme.md</id><title>我们每个人都是囚徒。996.ICU与囚徒困境。</title><updated>2019-03-28T00:00:00-07:00</updated><content>&lt;h2&gt;我们每个人都是囚徒。996.ICU与囚徒困境。&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;996.ICU这个项目彻底火了。在我写这篇文章的时候，这个项目已经获得了6.8万多的star。&lt;/p&gt;
&lt;p&gt;我估计看到这篇推文的时候，应该已经不会有互联网人不了解这个项目了。简单说，就是有位大佬，注册了一个域名 &lt;a href="https://996.icu"&gt;https://996.icu&lt;/a&gt;，控诉国内互联网企业蔚然成风的996工作制，同时，将这个项目放到了程序员专属社区——github上。&lt;/p&gt;
&lt;p&gt;如果打开996.icu的网站，你会看到，这份控诉包括：&lt;/p&gt;
&lt;p&gt;1）对996工作制的解读；&lt;/p&gt;
&lt;p&gt;2）对996工作制所违反的中华人民共和国《劳动法》的列举；&lt;/p&gt;
&lt;p&gt;3）以及最后，对三个典型企业实施996工作制的描述。&lt;/p&gt;
&lt;p&gt;这个网站最后，还为大家算了一笔经济账：按照劳动法规定，996 工作制下，只有拿到当前工资的 2.275 倍，才是正常的。&lt;/p&gt;
&lt;p&gt;最后，是一个响亮的口号：什么是 996.ICU？工作 996，生病 ICU。&lt;/p&gt;
&lt;p&gt;如果你还没有访问过这个网站，可以直接点击&lt;a href="https://996.icu"&gt;这里：https://996.icu&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先，我是非常赞赏这位大佬的做法的。同时，也是非常支持大家为这个项目点赞的。我个人也在第一时间，为这个项目点了赞。为自己遭遇的不公发声，或者为周围人遭遇的不公发声，这本身在中国，就是一个很稀缺的品质。我们在文化上，就有一股“多一事不如少一事”，“能忍则忍，小不忍则乱大谋”的基因。即使吃了亏，也会安慰自己“吃亏是福”，“塞翁失马”。社会上，我们更不在一个有不断发声传统的政治氛围里。现在，突然有人站出来，发起这样的一个项目，大家一起用点赞的形式表达一下心声，没有一点毛病。&lt;/p&gt;
&lt;p&gt;但是，对于这个项目，在我点赞以后，却又有些失落。点了赞，又怎样呢？我不知道我还能做什么，可以改变现状。我完全可以想象，很多义愤填膺的程序员朋友们，点赞，在issue中留言，表达自己的观点，阐述自己的境遇，之后，可能就在同一天，依旧晚上九点，拖着疲惫的身躯回家，没有X生活。而自己的直接领导，搞不好，他们也偷偷在996.ICU项目上点了赞。只是面对自己的下属不声张。但同样在晚上九点，甚至更晚，和你一样，拖着疲惫的身躯回家，没有X生活。大家都没有财富自由，大家都是打工讨生活，大家都是一样的。&lt;/p&gt;
&lt;p&gt;点赞无法让企业有任何改变，因为企业吃不到点赞的苦头。这就是为什么，国外的各个行业，一旦遇到看似无法调和的问题，都会组织罢工。因为，罢工，将导致企业利益的损失，才能让企业真正的重视起大家的诉求。&lt;/p&gt;
&lt;p&gt;当然，我并不是特别赞同罢工，&lt;strong&gt;更好的方式还是拿起法律的武器&lt;/strong&gt;。毕竟，工作时长和超出工作时长如何做出经济补偿，是被《劳动法》明确规定的。如果确定自己所在的企业违反了《劳动法》，为什么不能拿起法律的武器？中国法律真的只是txt，不是exe？&lt;strong&gt;我们不是一直在强调：要依法治国？！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;但是，无论是组织一场罢工，还是拿起法律的武器，都是有难度的。我很理解。因为其实，大家都陷入在一个囚徒困境的局面中。&lt;/p&gt;
&lt;p&gt;为了更清晰的解释：为什么大家在这个事件中，都陷入了囚徒困境，我先简单的解释一下，什么是囚徒困境（虽然我相信，很多同学都了解囚徒困境）。&lt;/p&gt;
&lt;p&gt;囚徒困境是一个经典的博弈论模型。&lt;/p&gt;
&lt;p&gt;假想有两个罪犯合作犯罪，被警察逮捕了。但是警察证据不足，无法直接给他们定罪。因此，警察将这两个罪犯分隔开，分别劝说他们指认对方。&lt;/p&gt;
&lt;p&gt;警察制定了这样一个规则：&lt;/p&gt;
&lt;p&gt;对于每一个罪犯，如果和警察合作，指认对方，但是对方却拒不合作，保持沉默的话，那么和警察合作的罪犯将无罪释放，但是，另一个罪犯，要被判10年；&lt;/p&gt;
&lt;p&gt;如果两个罪犯都指认了对方，对不起，你们犯罪事实确定，鉴于和警察合作，少判一点儿，两个人各判8年；&lt;/p&gt;
&lt;p&gt;但如果两个人都不合作，互相不指认对方，警察没办法给他们定重罪，但可以让两个人各被判1年。&lt;/p&gt;
&lt;p&gt;这个规则说出来好像很复杂，但用一个表格表示，非常简单清晰：&lt;/p&gt;
&lt;p&gt;&lt;img alt="table1" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-03-28/table1.png" /&gt;&lt;/p&gt;
&lt;p&gt;现在，假设你是某一名囚犯A，你会选择指认，还是沉默？&lt;/p&gt;
&lt;p&gt;由于，你不知道另一名囚犯B的决策，所以，你会分情况讨论。&lt;/p&gt;
&lt;p&gt;假设囚犯B会指认你的话。那么此时，如果你选择指认，你将被判8年。但是，如果你选择沉默的话，你将被判10年。显然，选择指认，对你更好。&lt;/p&gt;
&lt;p&gt;&lt;img alt="table2" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-03-28/table2.png" /&gt;&lt;/p&gt;
&lt;p&gt;假设囚犯B会选择沉默的话。那么此时，如果你选择指认，你将无罪释放。但是，如果你选择沉默的话，你将被判1年。显然，依然是，选择指认，对你更好。&lt;/p&gt;
&lt;p&gt;&lt;img alt="table3" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-03-28/table3.png" /&gt;&lt;/p&gt;
&lt;p&gt;因此，不管B怎么选，对于你来说，都是选择指认更好。&lt;/p&gt;
&lt;p&gt;由于这个表格是完全对称的，所以，对于B来说，也将得到完全一样的结论。不管你怎么选，B都是选择指认最好。&lt;/p&gt;
&lt;p&gt;这样一来，一个奇怪的事情发生了。对每一个人而言，都是选择指认最好，最终的结果，将必然导致两个人各判8年。这比两个人都选择沉默，付出的代价要高得多。可是，每个人都是从个体利益最大化的角度做出的选择，怎么分析，怎么没毛病，但最终的结果，却陷入了于整体而言，最差的结果。&lt;/p&gt;
&lt;p&gt;这就是囚徒困境——这个经典数学模型，向我们展示的一个非常重要的社会学，经济学上的现象：&lt;strong&gt;局部的最优化决策，不一定指向整体最优化，相反的，甚至可能指向对整体而言，最差的结果。&lt;/strong&gt;（专业术语是，达到了纳什均衡，或者是达到了非合作博弈均衡。这个均衡点的位置，和结果的”好坏“，没有必然联系。）&lt;/p&gt;
&lt;p&gt;当然，囚徒困境本身，还可以有更多可以更深入讨论的地方。条件的改变，假设的改变，都会影响最终结论。同时，这个模型也有更多的应用，帮助我们揭示很多社会上，生活中的现象。在这里，我们就不过多地去讨论了。如果理解了上面这个最基础的模型，就已经足够来看下面的问题了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;现在，我们来看一看，为什么在企业用工996这件事情上，大家陷入了同样的囚徒困境。&lt;/p&gt;
&lt;p&gt;此时，每一个人都被996的工作制度压迫着。每一个人都有选择：或者拿起法律的武器维护权利；或者沉默，等待其他人拿起法律的武器维护权利。此时，上文中的A和B，变成了”自己“和”其他人“；“指认”和“沉默”两个动作，我给修改为“维权”和“沉默”两个动作。那么，我就可以得到下面的表格：&lt;/p&gt;
&lt;p&gt;&lt;img alt="table4" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-03-28/table4.png" /&gt;&lt;/p&gt;
&lt;p&gt;简单解释一下，从左到右，从上到下，介绍这四个格子的数值：&lt;/p&gt;
&lt;p&gt;如果你选择维权，其他人也选择维权，那么所有人都联合起来，维权就会成功，那么大家都有收益。我将这个收益记做5。所以，左上角的格子是5 / 5；&lt;/p&gt;
&lt;p&gt;如果你选择维权，但其他所有人都沉默。那么你将承受巨大的成本和压力，而且由于一个人力量太渺小，维权近乎一定不会成功，你可能产生巨大的损失，我记为-10。同时，由于你的维权不会成功，其他人的境遇也不会发生改变，我记为0。所以，右上角的格子是-10 / 0；&lt;/p&gt;
&lt;p&gt;如果你选择沉默，其他人一起维权，那么这个维权活动，不会因为少你一个人有什么改变，也是会成功的。所以，大家都有收益，我记为5。但是要注意，于你而言，由于你没有参与，所以你没有付出时间成本，也没有承担风险，但维权成功后，你的工作状况也变好了。换句话说，你没有参加维权，却能享受到维权成功后的好处。因此，你的收益是更高的（因为没有支出）。我记为10（比5高）。所以，左下角的格子是10 / 5；&lt;/p&gt;
&lt;p&gt;最后，如果你和其他所有人都沉默，那么什么都不会改变。大家都是0。右下角的格子是0 / 0。&lt;/p&gt;
&lt;p&gt;现在，我们就分情况来分析，对于你来说，到底要不要站出来维权？&lt;/p&gt;
&lt;p&gt;如果其他人决定维权。那么对于你来说，加入维权，收益为5，选择沉默，收益却是10。你会选择沉默。&lt;/p&gt;
&lt;p&gt;&lt;img alt="table5" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-03-28/table5.png" /&gt;&lt;/p&gt;
&lt;p&gt;如果其他人都沉默。那么对于你来说，加入维权，收益为-10，选择沉默，收益是0。你还是会选择沉默。&lt;/p&gt;
&lt;p&gt;&lt;img alt="table6" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-03-28/table6.png" /&gt;&lt;/p&gt;
&lt;p&gt;这个模型，对所有人都是成立的。所有人在思考自己和其他人的行为关系的时候，都会不自觉地倾向于沉默——不作为。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我们每个人都是囚徒。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当然了，对于这样一个复杂的社会问题，使用这样一个简单的博弈论模型，去下定论，是片面的。但是，使用这样一个简单的模型，确实也能展现出问题的一个侧面：为什么很少有人会激进地拿起法律武器，或者鼓动大家一起罢工。因为大家都是理性的。自觉不自觉地，大家都意识到了，沉默，是更好的选择。毕竟，程序员朋友们有吃有穿，工资不低。和大多数行业比起来，虽然辛苦点儿，但整体生活还是不差的。揭竿起义值不值？每个人心里都有自己的结论。&lt;/p&gt;
&lt;p&gt;其实，曾有过很多朋友，跟我吃饭闲聊，抱怨公司的996制度。面对这个话题，通常我都是很有人情味儿地先同情一番，之后又很不近人情地指出：为什么不去使用法律的武器保护自己。嗯。这样做一阵子以后，我的朋友们都再也不跟我探讨996的问题了。&lt;/p&gt;
&lt;p&gt;在这里，我完全没有指责我的这些朋友的意思。我真的非常非常理解他们。囚徒困境向我们展现了，人性就是如此。如果是我，恐怕也不会那么轻易，就拿起法律的武器和企业死磕。&lt;strong&gt;我想，我会从告诉领导，”对不起，家里有事儿，我不能加班“开始。其实，如果所有人都能这么做，事情也会得到很大的改善。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;但是显然，事情不是这样的，要明白，对于很多人来说，996其实是一个机会。&lt;strong&gt;相比起用业绩来说话，用加班来展现出自己对公司的贡献，实在是太简单的一种方式。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果所有人都不加班，就你加班，你肯定有好处；&lt;/p&gt;
&lt;p&gt;如果所有人都加班，你也只能继续加班，否则，你很可能有坏果子吃。&lt;/p&gt;
&lt;p&gt;里外里，选择加班都是对自己更好的决策。所有人都这么想。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;瞧，我们又陷入了囚徒困境。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;P.S.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这篇文章最后的&lt;a href="https://996.icu"&gt;阅读原文&lt;/a&gt;链接，我送给996.ICU这个项目的官方网站，表达我的支持。&lt;/p&gt;
&lt;p&gt;虽然我们都是囚徒，但我依然相信，一切都在向着更好的方向前进。这个项目的出现，就是证明。&lt;/p&gt;
&lt;p&gt;大家加油！：）&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-03-28/readme.md" rel="alternate"/></entry><entry><id>2019/2019-03-27/readme.md</id><title>哈哈哈！晦涩难懂的码农段子，和。。。拥抱未来：）</title><updated>2019-03-27T00:00:00-07:00</updated><content>&lt;h2&gt;哈哈哈！晦涩难懂的码农段子，和。。。拥抱未来：）&lt;/h2&gt;
&lt;p&gt;今日最佳码农段子。来自Twitter @Delton Ding&lt;/p&gt;
&lt;p&gt;&lt;img alt="tweet1" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-03-27/tweet1.png" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;小王是某 C++ 大型项目工程师，今天他上班触发了全量编译便回家了，明天再来。 &lt;/p&gt;
&lt;p&gt;小张是深度神经网络 Python 工程师，今天他上班改了一个参数开始训练便回家了，三天后再来。 &lt;/p&gt;
&lt;p&gt;小李是资深 Rust 工程师，今天他上班只花一小时就完成了需求。  &lt;/p&gt;
&lt;p&gt;然后加班了三个晚上才使得编译通过。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;哈哈哈哈哈，玩儿推的同学，快去关注他！&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;虽然这个段子主要是黑rust的。但是，仔细体会，其实也顺便把C++和深度学习黑了一下。&lt;/p&gt;
&lt;p&gt;黑rust的这个点，我有时间想单独写篇文章，今天轻松一些，就不谈这么深入了。其实，不仅仅是rust，很多语言都有着令人发指的语言特性。本周我的文章&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-03-25/"&gt;《编程语言的发展趋势：从没有分号，到DSL》&lt;/a&gt;里，我一直在说：&lt;strong&gt;编程语言的一大发展趋势，就是越来越是给人看的，而不是给机器看的。&lt;/strong&gt;但现代编程语言中，依然有很多语法特性，是在惨绝人寰地违背这个原则。不仅仅是rust，从我的角度看，就算大红大紫的Python, JS, Swift，也有很多类似这样的语言特性。这是一个很有意思的话题，我慢慢写，或许能写成一系列文章：）&lt;/p&gt;
&lt;p&gt;另一方面，这个段子本身，蛮有时代的印记的。如果放在十年前，不要说看懂这个段子了，其实，这个段子里小张和小李上班用的技术（深度学习和rust），还没出现呢（更准确的说，还不可能是普通上班的码农掌握的技术呢）。但是，十年后，这些技术已经可以成为段子，在码农圈儿被津津乐道了。可以想象，十年后的笑话，我们今天还看不懂呢。但是，我却已经迫不及待地想看十年后的笑话了。&lt;/p&gt;
&lt;p&gt;今天，我又看了一篇关于医学的技术报道。在最近几年里，关注技术越多，我越倾向于相信：&lt;strong&gt;21世纪是生物医学的世纪。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先，人类有足够大的动力去研究生物医学——延长生命，对抗疾病。不仅仅每一个个体有这样的需求，人类整体作为一个生物物种，也有着这样的目标。我们不难想象，一个个大富豪们，会在晚年（或者中年），将大量的钱财，都投入到生物医学领域。实际上，现在，已经有很多人这么做了。&lt;/p&gt;
&lt;p&gt;其次，计算机的发展，已经为生物医学的发展奠定了相当的基础。由于人类基因组测序工作已经基本完成，海量的数据就静静地躺在那里，等待人类挖掘。同时，摩尔定律已然见顶，量子计算呼之欲出。算力本身越来越不是问题。&lt;strong&gt;很多生物医学问题，本质已经被转换成了一个个计算问题。国外一些算法课程的课后大作业，已经是设计一个算法，解决一个生物学或者医学的问题了。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当然，还有更多生物医学技术的问题，还远远不是计算问题，需要生物医学的专业知识，才能创新性地解决。这些问题的答案还躺在黑暗中，等待人类去发现。所以，生物医学技术工程师会被越来越多的需要。至于计算机专业？嗯，生物医学技术工程师们也需要各种软件工具，来完成他们的研究；就好比我们软件工程师也需要硬件工程师们发明的各种硬件，来执行我们的程序一样。又回到了&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-03-18/"&gt;《学算法有什么用？唉，对你来说，可能真没用》&lt;/a&gt;中的观点：&lt;strong&gt;“分工”本身就是经济学的基础概念之一，是我们这个世界能够良性运转逐渐发展的诸多核心规则之一。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;今天科技界的一大新闻，是深度学习三巨头斩获图灵奖。仔细思考，其实&lt;strong&gt;深度学习，或者深度学习的底层架构——神经网络本身，也是计算机和生物科学的一种融合——用计算机去模拟大脑的神经元&lt;/strong&gt;。如果去看神经网络之父Geoffrey Hinton的背景，就会发现，他有着非常坚实的认知神经科学的背景。认知神经科学已经渐渐成为了一个单独的分支，横跨生物学，医学，心理学。主要研究的，就是大脑认知的机制。虽然，我们现阶段对大脑认知的机制，理解的还相当浅薄，但是这些浅薄的认知，已经能够帮助我们产生出像深度学习这样的技术，让我们看到人工智能的曙光（虽然离强人工智能还很远很远）。未来，更加的前沿的研究工作，和突破性进展，近乎将离不开生物科学的影子。&lt;/p&gt;
&lt;p&gt;&lt;img alt="deeplearning" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-03-27/deeplearning.png" /&gt;&lt;/p&gt;
&lt;p&gt;最近科研圈的另一个大新闻，是一名年轻的华人博士后的一作论文，登上了nature杂志的封面。他的研究成果——仿细胞集群机器人系统，又和生物学相关。是机器人领域和生物学的结合。&lt;/p&gt;
&lt;p&gt;&lt;img alt="nature" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-03-27/nature.png" /&gt;&lt;/p&gt;
&lt;p&gt;一想到软件行业和所有行业一样，逃不出行业周期的“大势”，也会没落，不禁黯然神伤。但是，&lt;strong&gt;人类毕竟要向前，我们能做的，只能是去拥抱未来。&lt;/strong&gt;而且，短时间内，互联网行业的红利期还远不会结束。相信每一个学习计算机的同学都能感受到这一点。不信，去和那些其他理工科专业的同学，比如材料，化学，电控，等等，比比看。&lt;strong&gt;在绝大多数情况下，我们必须承认，我们付出的努力更少，收到的回报更大。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;哎，本来想轻松一些，结果越写越沉重。那最后，再给大家奉献一个段子吧。同样来自Twitter @Delton Ding&lt;/p&gt;
&lt;p&gt;&lt;img alt="tweet2" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-03-27/tweet2.png" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;小王写代码前会仔细思考，如果一个方法会被复用或对性能有很大影响，他会提前设计好架构，然后简洁优雅地实现出来。 &lt;/p&gt;
&lt;p&gt;小张会事后思考，擅长分析性能瓶颈，根据工程规模进行重构，代码仓库保持得很干净。 &lt;/p&gt;
&lt;p&gt;小李想到哪里写到哪里。 &lt;/p&gt;
&lt;p&gt;但因为 git commit 数量比较多，小李被升职了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;哈哈哈。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;新的一天，拥抱未来。大家加油！：）&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-03-27/readme.md" rel="alternate"/></entry><entry><id>2019/2019-03-25/readme.md</id><title>编程语言的发展趋势：从没有分号，到DSL</title><updated>2019-03-25T00:00:00-07:00</updated><content>&lt;h2&gt;编程语言的发展趋势：从没有分号，到DSL&lt;/h2&gt;
&lt;p&gt;在上一周的推文&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-03-18/"&gt;《学算法有什么用？唉，对你来说，可能真没用》&lt;/a&gt;中，我阐述了一个观点：&lt;strong&gt;随着软件行业的逐渐成熟，算法将慢慢不再成为软件行业工作者必备的知识&lt;/strong&gt;（但一定是信息学相关专业必学的知识）。因为算法将被越来越多的封装，被直接使用。这就好比数据库，近乎是每一个软件项目都必备的需求，但是，近乎每一个软件项目都不会选择重新实现一个数据库。太多现成的数据库工具唾手可得。我们只需要学会怎么使用他们就好了。而怎么使用他们，比重新实现一个数据库，简单不止100倍。&lt;/p&gt;
&lt;p&gt;事实上，计算机行业的任何一个细分领域，都在上演着这样的“进化过程”：&lt;strong&gt;很多在以前看来是必学的知识，从现代开发的角度看，不一定是必备的。所以，大家会觉得“面试造核弹，上班拧螺丝”。&lt;/strong&gt;如果你曾经在十五年前，就尝试做一个网页；做一个桌面app（那时还根本没有移动app）；做一个游戏；你就会明白我在说什么。一个非常显然的事实是，在十五年前，做一个网页，做一个桌面app，做一个游戏，相应的成本，都是现在的100倍以上，而最终得到的结果，搞不好不足现在的百分之一。这一万倍的差距，不是因为今天的我们更聪明了，而是因为，行业在发展。今天的我们，不仅仅是“站在巨人的肩膀上”，更是“站在了几百万个巨人的肩膀上”。&lt;/p&gt;
&lt;p&gt;所以，我经常提醒自己，我能实现这么多复杂的功能，不是因为我有多聪明，而是因为编程在现如今竟是如此的简单。&lt;strong&gt;任何一个技术，如果他能被大规模的应用，除了它足够有用之外，还必须具备一个必要的因素——它足够简单。计算机技术在我们这个时代被越来越多，越来越广泛的使用，是因为，计算机技术越来越简单。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在这篇文章中，我想从计算机语言的角度，聊聊编程语言的“演化”。这本身是一个很大的话题，甚至，有很多学者做专门的相关研究。因此，这篇文章的讨论的角度也是极其有限的。大家通过文章的标题就可以看出来，这篇文章将聊到DSL为止。但除了DSL，我们确实还有很多维度去探讨这个话题。以后有机会，我会再逐渐补充我的观点：）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 从没有分号，到给人看的编程语言&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;学习计算机的同学一定了解：分号在计算机编程语言中，有着举足轻重的地位。如果你学习的第一门语言是C，或者C++，或者Java，那么你一定曾经犯过忘记写分号的错误。&lt;/p&gt;
&lt;p&gt;但是，如果多接触几门编程语言，就会发现，大多数“现代”编程语言，是完全不需要写分号的。比如Python，比如Swift，比如Go。为什么？原因很简单，在大多数情况下，分号是给机器看的，而不是给人看的。&lt;strong&gt;写分号，本质是我们人类在迁就编译器&lt;/strong&gt;，毕竟，机器是很傻的。&lt;/p&gt;
&lt;p&gt;有意思的是，即使是同样一定需要分号的语言，Java也比更底层的C++需要的分号少。比如，下面的例子中，我们同样声明一个学生类。&lt;/p&gt;
&lt;p&gt;C++语言：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;class Student{
public:
    string name;
}; // 注意，在C++语言中，这里必须有一个分号&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Java语言：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;public class Student{
    public String name;
} // 注意，对于Java语言，这里不需要分号！&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;可以看到，在类声明结束的时候，C++语言这个老古董，还需要加上一个分号，但是Java语言不需要。显然，Java语言的语法规则更加合理。在这里，大括号的结束已经完全可以表示类声明的结束了，多一个分号，对人类来说，是一个额外的“语法负担”。&lt;/p&gt;
&lt;p&gt;随着编程语言的逐渐演化，这样的语法负担都将被剔除。如果你学习过Python语言，就会知道，何止是分号消失了，连大括号都消失了。为什么？就是因为大括号也是给机器看的。告诉机器，类声明结束了。从Python的角度看，“旧式语言”有太多的语法规则，使用了过多的字符，来告诉机器如何解析程序。比如分号，比如大括号。这使得这些语言猛地看上去，包含一大堆和程序本身所表达的逻辑完全无关的字符。所以，Python在努力减少这样的语法。&lt;/p&gt;
&lt;p&gt;但与此同时，Python在另一些语法中，却在添加更多的字符。最典型的就是三目运算符&lt;code&gt;?:&lt;/code&gt;，在Python中没有了。为什么？三目运算符虽然形式更简单，但是这个“简单的形式”也是给机器看的，不是给人看的。&lt;/p&gt;
&lt;p&gt;比如我们要根据score这样一个变量的值，返回“Perfect”或者“Not Perfect”这样的字符串，在C++或者Java这样的语言中，我们写出的逻辑大概是这样的：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;return score == 100 ? "Perfect" : "Not Perfect";&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;但是，在Python语言中，是这样的：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;return "Perfect" if score == 100 else "Not Perfect"&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;显然，三目运算符比if-else的形式更简洁，但是在逻辑表意上，更加复杂，不够直观。而Python的写法，更接近自然语言，任何人，即使没有计算机背景，也能一眼看懂这句话的意思。所以，三目运算符被Python直接摒弃了。类似的，++, --这类所谓更“简洁”的语法，也被Python摒弃了，也是这个原因。&lt;/p&gt;
&lt;p&gt;这类语法的弃用，绝不仅仅是Python一门语言的选择，比如苹果几年前刚发布的新语言Swift，也是如此。&lt;strong&gt;编程语言的发展趋势之一，就是越来越向着给人看的方向发展，而不是给机器看。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 去除和逻辑无关的语法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;编程语言的另一个发展趋势，就是摒弃和业务逻辑无关的语法规则。最典型的例子，就是现代大多数语言都不再有显示声明指针的语法。&lt;/p&gt;
&lt;p&gt;相信对于大多数同学，如果学习过C或者C++语言，在学习&lt;code&gt;int*&lt;/code&gt;, &lt;code&gt;int**&lt;/code&gt;, &lt;code&gt;int&amp;amp;&lt;/code&gt;, 等等这些语法规则的时候，都是一团浆糊。甚至可能很多同学毕了业，都没有特别搞清楚C/C++语言中的指针和引用到底是怎么回事。&lt;/p&gt;
&lt;p&gt;相信对于绝大多数同学（至少对于我是如此），在刚接触C语言的时候，连使用&lt;code&gt;scanf&lt;/code&gt;，都是一场噩梦。&lt;/p&gt;
&lt;p&gt;```
int a;
scanf("%d", &amp;amp;a); 
// 我们先不提%d是怎么回事，a前面为什么一定要有个&amp;amp;？？？？&lt;/p&gt;
&lt;p&gt;// 但是，如果a是一个char[]的话...
char s[80];
scanf("%s", s);
// 咦？怎么s前又不需要&amp;amp;了？
```&lt;/p&gt;
&lt;p&gt;这段代码中，这个&lt;code&gt;&amp;amp;&lt;/code&gt;(C/C++中是地址符)，就是和业务逻辑无关的语法规则。在这里，我不详细的介绍C/C++中的这个语法规则了。其实，如果你不使用C/C++，对于现代编程语言，你完全不需要理解这其中有什么区别，在什么时候应该使用哪个语法。&lt;/p&gt;
&lt;p&gt;相较而言，比如Java语言的控制台输入，是使用Scanner类，写出来大概是这样的。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Scanner myScanner = new Scanner(System.in); 
int a = myScanner.nextInt();
String s = myScanner.nextLine();&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;同样，对于C++语言，写出来大概是这样的：&lt;/p&gt;
&lt;p&gt;```
int a;
cin &amp;gt;&amp;gt; a;&lt;/p&gt;
&lt;p&gt;string s;
cin &amp;gt;&amp;gt; s;
```&lt;/p&gt;
&lt;p&gt;虽然，对于Java和C++的IO部分的语法设计（或者说类设计），还是有很多吐槽和更好的建议，但是，很明显的，高级语言在努力摒弃掉诸如&lt;code&gt;%d&lt;/code&gt;, &lt;code&gt;%s&lt;/code&gt;, &lt;code&gt;&amp;amp;&lt;/code&gt;, 等等语法规则。因为，这些语法规则和具体逻辑无关。&lt;/p&gt;
&lt;p&gt;对于指针这个概念同理。对于大多数高级语言，和指针相关的语法都被隐藏起来了。当然，现阶段，对于程序员，还是必须要理解清楚指针这个概念的（在Java，Python等语言中，其实就是引用）。但是，从语法的角度，这个概念“消失”了。这显然对初学者更友好。初学者不需要纠结，什么时候用&lt;code&gt;*&lt;/code&gt;，什么时候用&lt;code&gt;&amp;amp;&lt;/code&gt;。&lt;strong&gt;语言的使用者，将更多地精力，集中在逻辑表达上，而非语法细节上。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. 自动垃圾回收&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;说到剔除逻辑无关的规则，最为典型的，就是现代语言在大多数情况下，不再需要程序编写者处理垃圾回收相关的逻辑了。很多语言，即使本来需要手动处理垃圾回收逻辑，在版本升级的过程中，也改为了自动垃圾回收机制。这也是因为，垃圾回收是和我们要表达的逻辑无关的，是关于机器怎么执行逻辑的。这里，最典型的例子，就是OC语言。&lt;/p&gt;
&lt;p&gt;我是iOS 4的时代开始接触iOS开发的。那个时候，OC语言是需要进行手动垃圾回收的（和C/C++语言一样）。但是从iOS 5开始，OC语言引入了自动垃圾回收机制，被称为ARC。虽然严格意义上，ARC和Java的GC还不一样（这是因为这两种语言本身的内存管理模型有所不同），但是他们的目的都是相同的：&lt;strong&gt;让程序员更多的专注于业务逻辑代码的编写，而不是诸如垃圾回收这样的只有机器才关注的问题上。&lt;/strong&gt;如果你尝试使用过需要手动处理垃圾回收机制的语言编写较大的项目，如C/C++/OC，就会明白：&lt;strong&gt;你很有可能会花费50%的时间，来保证整个系统的垃圾回收是没有问题的。但是，使用“现代”编程语言，这些时间都可以用来精进你所要实际表达的代码逻辑。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于现代编程语言，自动垃圾回收机制，近乎是标配。这也使得，越来越多的程序员，根本不了解内存管理，也不需要了解内存管理，就可以胜任大多数工作。在这方面，我一直喜欢举发生在我身边的一个iOS程序员的例子。我的这位朋友，文科生出身，在iOS 5的时代开始接触iOS开发。他接触iOS开发，完全是因为在那个时代对于苹果产品的疯狂着迷，爱屋及乌，也想要开发属于自己的iOS App。结果，竟然在那个大多数程序员都还不太接触iOS开发的年代，无意中转行进入了IT行业，并且抓住了风口，在短短一年的时间里，成为了国内某著名品牌的iOS事业部负责人。在那个年代，大多数硕士毕业的研究生，在大厂的工资，也就是10万每年。他一个文科生，本科学历转行进计算机，借助iOS开发的契机，竟在那时就达到了30万每年的薪水。&lt;/p&gt;
&lt;p&gt;对于这个案例，除了佩服他的兴趣，感叹时代和机遇的力量，以及佩服他的执着和努力之外，我也常常想：或许，这和OC语言本身在iOS 5开始，开发者不再需要处理内存管理，也是分不开的。否则，对于文科生来说，理解内存管理，学习曲线真的太陡峭了。&lt;/p&gt;
&lt;p&gt;苹果每年都会在自己的发布会上声称，iOS开发生态中，有多么多么小的开发者，或者多么多么老的开发者。&lt;strong&gt;是因为突然这个年代的人们都是天才了吗？不是。因为开发真的越来越简单。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="developer" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-03-25/developer.png" /&gt;&lt;/p&gt;
&lt;p&gt;九岁的苹果开发者 Anvitha Vijay &lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. DSL&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;上面举的例子，不论是分号，大括号，三目运算符，指针，地址符，垃圾回收，等等等等，这些功能在编程语言中的演化，本质，其实都是：编程语言在逐渐剔除和业务逻辑无关的语法，从而让开发者更多的关注在业务逻辑自身上，而不是机器怎么执行这些逻辑上。&lt;strong&gt;简单的总结，可以理解成：现代语言的发展趋势是：编程的主要任务越来越多的是告诉机器要做什么（what），而不是怎么做（how）。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;正是因为这个方向的指引，越来越多的DSL语言被发展出来。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DSL，是Domain Specific Language的缩写，翻译成中文，就是“特定领域语言”。&lt;/strong&gt;其实，对于DSL语言，我们都不陌生，最典型的DSL，就是SQL。大家体会一下下面的这段SQL代码：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;SELECT name FROM Student WHERE score = 100&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;大家想想，这段代码所表示的逻辑，用其他语言怎么写？在大多数语言中，大概是这样的：（伪码）&lt;/p&gt;
&lt;p&gt;```
names = []
for student in students:  &lt;br /&gt;
    if student.score == 100:      &lt;br /&gt;
        names.append(student.name)    &lt;/p&gt;
&lt;p&gt;return names
```&lt;/p&gt;
&lt;p&gt;看了这两段代码，不知道大家是不是能够理解，什么叫告诉机器what，而不是how。对于SQL语言来说，我们的代码近乎就是用自然语言说：我们要把分数是100分的学生姓名拿出来；而对于其他大多数语言（C++, Java等等），我们还需要循环(for)，需要条件判断(if)，需要考虑拿回来的学生姓名怎么存储（数组？集合？），还要手动把一个一个符合条件的学生姓名添加进去（append）。显然，这段代码更多的涉及how，而不仅仅是what。&lt;/p&gt;
&lt;p&gt;当然了，SQL语言这种“简洁性”是有代价的，这个代价就是DSL中所谓的Domain Specific, 即领域相关。使用SQL，我们只能处理和数据存储相关的内容（通常所说的增添改查），但是，我们不能用SQL做移动app，不能用SQL做后端业务逻辑，不能用SQL做前端，也不能用SQL做动画，做游戏，做人工智能。但是，只要是和存储相关的东西，掌握SQL这么一个简单的工具就够了。&lt;/p&gt;
&lt;p&gt;DSL还有很多，在现代的环境下，近乎每一个程序员都一定会接触那么几个DSL。再比如说，正则表达式也是一种DSL，正则表达式只可以进行模式匹配。但是，对于模式匹配，再复杂，使用正则表达式解决，也比自己写模式匹配算法或者模式匹配工具要强。&lt;/p&gt;
&lt;p&gt;HTML和CSS也属于DSL，虽然，这两种语言本质上处理的不是逻辑（CSS越来越强大，也已经有了“逻辑引擎”），但是，如果学习过HTML和CSS的同学一定了解，这两种语言都是上手极快的（当然，上手和精通是两回事儿）。我们可以很快的就使用这两种语言来做出页面，而且，看上去还不错。&lt;strong&gt;这就是DSL的意义——可以更快地，更简洁地，去让哪怕是“计算机科学的外行”，用编程的方式，去做特定领域的事情，而不用去纠结过多“计算机科学”相关的内容。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在这个年代，做科研工作，近乎一定要编程，并且，大多数科研相关的编程工作，是和数据相关的。因为各个领域的前沿研究，都需要在领域相关的大量数据中，寻找新的突破和发现。可能有很多同学知道，Python和R是现今最主流的两种用于数据处理的语言。如果你身边有非计算机领域的博士同学，或者研究工作者，去问问他们。你会惊讶的发现，大多数非计算机专业的研究工作者，更常用R语言，而非Python语言。为什么？因为，相较Python语言，R语言更像一个DSL。当然，R语言本身也很强大，但是远没有Python强大。R语言本身近乎就是为数据科学设计的语言，大多数数据科学所需要的功能，R语言或者本身从语法层面支持，或者在标准库中内置好了。所以，对于非计算机专业的人士而言，R语言是更加友好，上手更快的。使用R语言，可以尽量少的去接触和“计算机科学”相关的知识，就能上手复杂的数据处理任务。&lt;/p&gt;
&lt;p&gt;相较于SQL，正则表达式，CSS，HTML，R等等这些DSL，计算机专业的同学通常需要努力学习的，诸如C++, Java, Python等语言，被称为&lt;strong&gt;GPPL。是General Purpose Programming Language的简称。也就是所谓的“通用目标语言”。&lt;/strong&gt;顾名思义，通用目标语言没有把功能限制在特定领域中，相较DSL更灵活，可以完成更多的事情，甚至可以说是任意逻辑（嗯，这句话细究起来，又可以写一篇新文章了），但代价就是：语言本身操作起来更灵活，也更复杂。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;整体而言，越来越多的DSL的出现，也是编程语言发展的一大趋势。&lt;/strong&gt;比如，在现在大火的人工智能界，很多人就认为，使用现有的语言做人工智能算法，太麻烦了。人工智能专家要花很多时间，来处理和人工智能算法无关的逻辑上。发明一个人工智能领域专有的DSL，近乎是必然。很有可能，我们在未来，还将看到医学领域特定的DSL，生物学领域特定的DSL，化工领域特定的DSL，物理学领域特定的DSL，等等等等。&lt;/p&gt;
&lt;p&gt;另一方面，在未来，使用GPPL的工程师们——也就是真正计算机专业的同学们，一个很重要的任务，就是开发DSL。开发出的这些DSL，是给其他领域的专家，或者业务专员使用的。还记得我在&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-03-18/"&gt;《学算法有什么用？唉，对你来说，可能真没用》&lt;/a&gt;所说的吗？&lt;strong&gt;“分工”本身就是经济学的基础概念之一，是我们这个世界能够良性运转逐渐发展的诸多核心规则之一。&lt;/strong&gt;这种GPPL和DSL越来越清晰的分层，也是“分工”这一经济学概念在编程语言界的体现：）&lt;/p&gt;
&lt;p&gt;当然，对于GPPL，也有很多发展趋势。比如动态性，比如对函数式编程的支持，比如对并发的支持，等等等等。有机会，我再向大家总结：）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;对于计算机专业的同学来说，语言只是一种工具而已。学习语言的目的，不是对细微的语言特性和语法糖如数家珍，关键还是要应用语言，解决实际的场景问题。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;很多同学会问，十年后，什么语言最火？&lt;strong&gt;很有可能，十年后最火的语言，现在还没出现呢：）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;大家加油！：）&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-03-25/readme.md" rel="alternate"/></entry><entry><id>2019/2019-03-21/readme.md</id><title>新西兰恐袭，疯狂删帖的小编，背锅的算法工程师，以及“技术优越主义”</title><updated>2019-03-21T00:00:00-07:00</updated><content>&lt;h2&gt;新西兰恐袭，疯狂删帖的小编，背锅的算法工程师，以及“技术优越主义”&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当地时间2019年3月15日下午1点40分左右，新西兰基督城发生恐怖袭击。已确认有50人遇难，另有50人严重受伤。遇难者不乏儿童，妇女和老人。&lt;/p&gt;
&lt;p&gt;相信这个新闻，大多数人都已经知晓了。在这里再简述一下大致经过。3月15日下午，新西兰的两座著名清真寺，先后遭到枪手袭击。枪手对手无寸铁的民众进行扫射，包括对街道的来往车辆进行扫射。随后，基督城医院也发生了枪击。同时，警察在嫌犯的两辆汽车上发现了大量汽车炸弹，所幸没有引爆。奥克兰火车站和商场附近也发现了疑似爆炸包裹，但没有相关伤亡报告。至今，警察已经抓捕了4名嫌犯。&lt;/p&gt;
&lt;p&gt;或许是新西兰这个国家本身离国际政治的漩涡较远；或许是中国民众对新西兰的熟悉程度远没有美国强烈。不管怎样，我发现这个事件在中文媒体上，并没有引发太大的讨论。但是，目测，站在国际历史的角度，这个事件将产生深远影响。事件本身已经再次带动很多国家对“白人优越主义”这一极端思想的讨论和控制。恐袭后，新西兰的枪支卖到脱销，但与此同时，就在当地时间3月21日，新西兰政府改写了法律，实施了“禁枪令”。这些事情不仅对新西兰产生了巨大影响，更进一步将对世界范围对枪支控制问题的态度产生影响。另外，由于一名嫌犯已确认是澳洲国籍，这也使得新西兰和澳洲这两个看似不太介入国际事务，在一般民众看来是super safe的国家，产生了微妙的变化。&lt;/p&gt;
&lt;p&gt;但是，作为一个技术向的公众号，这些政治，经济，世界格局变化相关的问题，不是我想讨论的重点。整个事件有一个更加与众不同的地方，和技术息息相关，甚至，在我看来，有可能引发技术世界的震荡。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在这次恐袭事件中，一名嫌犯，头戴一个配备了go pro的头盔，在Facebook上直播了枪击过程，画面极其血腥残酷。待Facebook发现事态异常，做出反应，封禁了凶手的账号，整个视频已经在网上直播了17分钟。&lt;/p&gt;
&lt;p&gt;对于整个硅谷，这一切还只是一个开始。&lt;/p&gt;
&lt;p&gt;很多同学可能并不了解，即使是Facebook, Google这些国外平台，也是拥有着一个庞大（或者说是相对庞大）的审核队伍的。这些审核人员，每天处理的，就是对违反平台规范的内容进行“删帖”处理。通常，这些规范包括：色情内容；盗版内容；宣传仇恨或者极端思想的内容；极度反人性的内容，等等等等。&lt;/p&gt;
&lt;p&gt;我在这里列举的这些内容规范，看似很容易。实际上，每一个标准都蕴含着巨大的灰色空间。比如：什么是色情内容？露点就是色情内容？那断臂的维纳斯怎么算？而另一方面，很多不露点的视频，反而更具色情意味，对青少年拥有更强大的诱惑力和破坏力。这个问题本身就是一个很深刻的问题，甚至可以专门做成学术研究了。但在实践中，色情和非色情的分界线到底在哪儿？在这些审核人员的主观判断中。&lt;/p&gt;
&lt;p&gt;其实，在Google离开中国之前，由于中国的法律原因，Google中国就拥有一支庞大的“鉴黄师”团队。我曾经认识一个同学，还在本科时期在这个团队里实习过。嗯，是的，这个团队不做技术工作，天天观摩不良信息内容。有兴趣的同学，可以在网上搜索“鉴黄师”这个职位，这个职位现在依然存在。甚至，很多这些大企业大平台的工作人员，了解到了其中巨大的需求，辞职创业，提供这种“审查”服务。毕竟，这种“审查”工作所需要的人员素质，和这些IT巨头整体需要的人员素质，拥有着巨大的差异。外包，或许是最划算的。&lt;/p&gt;
&lt;p&gt;说回新西兰恐袭，在凶手在Facebook上直播了17分钟之后。这段视频在互联网上真真正正的火了。从某一个角度看，这近乎是人类历史上第一次从凶手的角度进行的相对完整的直播杀人视频。在Facebook这一个平台上，这段视频的上传量，在24小时内，就达到了150万次。注意，是上传量，不是播放量！同时，被Facebook拦截的这段视频的上传数，达120万次。这还仅仅是Facebook这一个平台。&lt;/p&gt;
&lt;p&gt;而实际上，这段视频传播最广的平台，是宇宙第一视频网站——Youtube。但是，Youtube官方至今都拒绝透露，他们究竟删除了多少相关的这段视频。可以肯定的是，这段视频上传的频率，是以毫秒为单位计算的。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;很多同学一定会想，难道不能使用人工智能技术自动鉴别这段视频吗？&lt;/p&gt;
&lt;p&gt;事实上，如果大家上传的视频都是原始版视频，使用自动化技术鉴别它是极其容易的，根本不需要动用人工智能。对视频文件计算一个哈希值，直接匹配就好。但问题的关键是，up主们知道这段原始视频一定被禁止上传，所以想出各种各样的方法“改编”视频。&lt;/p&gt;
&lt;p&gt;这其中的方法，包括：或者改变视频的分辨率；或者对视频进行剪辑，截取部分内容；或者为视频添加水印；或者在其中插放其他过场动面或者解说。“人道”一些的up主，会给视频中的部分内容打上马赛克 —— 但是，这无法改变这段视频宣扬暴力的实质，反而为视频的自动化审查添加了巨大的麻烦。甚至，有的up主，动用更加现代化的工具，将视频中的人物头像，都修改成了动物头像。整个视频看起来就是在打电子游戏。呵呵，是的，我们的人脸识别技术可以轻易做到这一点，但是，鉴别技术却无法识别，这到底是一段“宣扬暴力的真实杀人直播”，还是一个16岁小孩卧室中的电子游戏直播。&lt;/p&gt;
&lt;p&gt;由于这段视频上传量太大，Youtube团队还是采取了史无前例的措施。过早的启动了自动化人工智能工具，来自动识别这段视频。如果有机器学习背景的同学都明白，使用机器学习解决这个问题，是一个典型的分类任务，更进一步，是一个二分类任务。机器只需要识别每段视频，是或者不是新西兰枪击案直播，就好了。但是，这个识别过程并不容易。一方面，视频数据本身，相比图像数据，数据量高出了太多，整体数据处理规模上升了好几个台阶；另一方面，要想训练出一个性能优良，识别率高的模型，不是写一两行代码就能搞定的事情，需要算法工程师们夜以继日的调参，测试。这绝不是一个在24小时内可以搞定的任务。但Youtube团队在24小时内，决定使用机器接手。&lt;/p&gt;
&lt;p&gt;这么短的时间，上线的“智能”，一定有巨大的错误率。这个错误，或者是漏判，即本来是枪击视频，但是机器没有识别出来；或者是误判，即本来不是枪击视频，机器却误以为是枪击视频。了解机器学习的同学应该了解，这两类错误是互相牵制，此消彼长的。通过调节参数，减少了一方错误，就会增加另一方错误。在这个事件中，明智的选择，显然是要尽量降低漏判的几率，所以，得到的结果，就是产生了大量的误判。在一段时间中，Youtube很多无辜的up主受到了牵连，无法上传正常的视频。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这样的危机，在Youtube内部，也不是第一次发生了。近乎就在几个月前，就有很多家长投诉Youtube，有up主上传小猪佩奇的动画片，但看到一半的时候，会突然播放恐怖的，怂恿儿童自残甚至自杀的片段。这些片段可能只会持续几秒钟。现代的人工智能技术还完全无法检测到一段正常视频中间，是否夹杂了这样的片段。要想识别出含有这种片段的视频，近乎，只能靠举报，之后删除。可是，这样的事后弥补，伤害显然已经造成了。更可悲的是，即使我们知道了有这样的行为，我们依然无法自动化的事前预防。因为这种“极端思想的宣扬”，可以以任何一种画面形式表达出来。相较而言，大吹大擂的人工智能，真的是人工智障。&lt;/p&gt;
&lt;p&gt;要想事前预防，近乎只能进行人工事前审查。但对于Youtube这种规模的视频网站而言，这几乎是不可能的。2017年的数据，Youtube每分钟就有400小时的视频上传，这个数据还在逐年，甚至是逐日攀升。&lt;/p&gt;
&lt;p&gt;人工智能完全无法应付这项工作。至少现在不能，在短时间内，也很难完成。这是一个明显的“强人工智能”才能解决的例子。虽然机器只需要回答yes或者no，但是为了能够理想的回答好这个问题，机器需要拥有和人类一样的经验力，推导力，主观判断力，甚至是直觉。事实上，不要说视频了，即使是图片，现在我们还只是在为机器可以更好地识别图片中到底是什么动物，什么场景而庆祝。但这些任务，幼儿园的小朋友都能分分钟完胜那些上亿美元投资的项目。&lt;/p&gt;
&lt;p&gt;在新西兰枪击案发生三天之后，新西兰总理更是直接把矛头对准了 Facebook，为什么枪手直播了长达17分钟之久之后，Facebook 才做出反应？&lt;/p&gt;
&lt;p&gt;Facebook 为此已经忙作一团。甚至，已经开始探讨是否要停止“直播”业务。毕竟，开展直播这样一个服务容易。但要能即时，准确的辨别直播内容是否合法，是否在宣扬极端思想，这已经不是技术水平上难了几个数量级的问题了。而是，人类现代的科技，根本做不到。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;让整件事情朝着更坏的方向发展的，则是所谓的推荐系统。事件发生初始，这段直播视频只是产生了一定的热度。毕竟，这是一个国际关注的事件，与此同时，人总会有一定的猎奇心理。但是，推荐系统则直接起到了推波助澜的作用。&lt;/p&gt;
&lt;p&gt;如果你去学习专业的推荐系统的知识，你会遭遇大量宛如天书一般的公式。但是，如果用人话把推荐系统的原理说出来，那么非常简单 —— 别人喜欢的东西，特别是你的朋友，你的亲戚，或者和你相似的人喜欢的东西，那么八成也就是你喜欢的东西，推荐系统就推荐给你。在整个事件中，推荐系统收集到了越来越多的人对于这件事情关注的热度，之后推波助澜的又将这些视频推荐给了更多的人。推荐系统忠实地履行着自己的算法，但是，很多人开始指责系统为什么会被设计成推荐这样的视频？算法工程师们莫名奇妙地背了一口大锅。&lt;/p&gt;
&lt;p&gt;可是，推荐系统在运行过程中有一个基本假设，就是内容本身，应该是安全的。这就好比在我们讨论吃什么的时候，不会思考我们所选择的食材，可能有一部分有毒一样。然而，在互联网的世界中，这个假设其实根本就不成立。之前文章已经分析了，实时准确地辨别视频内容是否安全，还不是人类在当下这个时代所掌握的科技。&lt;/p&gt;
&lt;p&gt;如今，很多媒体在报道新西兰事件中，需要小心的使用关键词，才能不被推荐系统带歪，把自己的新闻和有可能再次卷土重来，或者本身就没处理干净的枪击案直播视频联系起来。虽然有些夸张，但我已经隐隐看到了人类无法控制机器，畏惧机器，小心翼翼的在机器指定的规则下苟活的影子了。&lt;/p&gt;
&lt;p&gt;从另外一个角度看，整个社交网络，突然变得和“核弹”一样。人类制造了它，却无法驾驭它。恐怖主义正在以一种新的方式，将社交网络武器化。这种武器的伤害，直指人类的精神世界。但是，貌似，现如今，我们还不能控制这种武器带来的伤害；而关闭所有的社交网络，显然也不可行。社交网络好像另一个“潘多拉的魔盒”，已经被打开了，却再也关不上。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;实际上，在技术的世界中，早就有一派人士，一直在大声疾呼：很多技术并没有经过有效的“安全”验证，就已经被极大规模地运用在了各个领域。诚然，这些技术一定极大的方便了我们的生活，但是这样的方便背后，究竟牺牲了什么，我们还不知道。或者我们知道，但暂时选择了无视。&lt;/p&gt;
&lt;p&gt;对于很多“传统”行业，比如实施一个建筑工程，或者设计一款新的车型，或者对一片新的矿区进行勘探，我们所需要付出的事前准备工作和安全验证工作，都是巨大的，繁琐的。连带一系列安全问责机制，已经在事前被建立明确了。相较而言，上马一个互联网项目，事前的安全准备工作近乎为0。我们甚至完全没有与之匹配的标准，流程，和心理准备。与此同时，公认的，大多数已有的互联网项目中，对安全的控制，都是远远不足以承载这个项目本身的重要程度。这是一个很残酷的事实。&lt;/p&gt;
&lt;p&gt;人类发展技术，却忽视技术本身在人类社会中应用可能产生的安全风险，我将之称为“技术优越主义”。新西兰枪击案的凶手大力鼓吹“白人优越主义”，是在宣扬白色人种族裔优于其他人种；那么我们当今世界很多人所追求的技术发展，如果稍微深思一下，确是隐含着技术优于人类的思想。&lt;/p&gt;
&lt;p&gt;我热爱技术，并一直关注着技术的发展。但我不希望，技术，在我，和我们的关注下，一步一步变成魔鬼。&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-03-21/readme.md" rel="alternate"/></entry><entry><id>2019/2019-03-18/readme.md</id><title>学算法有什么用？唉，对你来说，可能真没用</title><updated>2019-03-18T00:00:00-07:00</updated><content>&lt;h2&gt;学算法有什么用？唉，对你来说，可能真没用&lt;/h2&gt;
&lt;p&gt;我以前一直认为，学习计算机，必须要懂算法，不仅要懂算法，还应该要“精通”算法。在我大一的时候，曾看过李开复老师的一篇著名的文章——《算法为魂》。这篇文章对我影响深远，甚至说改变了我的人生选择都不为过。因为这篇文章，我开始有意识地去接触算法，学习算法，打算法比赛，直到现在，还在关注最新的算法发展。我做这些事情，真的并不完全是功利的。当然，这些对算法的学习过程，极大的为我自己的简历贴了金，但更重要的是，我确实想搞明白，对于我所热爱的信息技术，这个被称为“魂”的东西——算法，到底是怎么回事儿。&lt;/p&gt;
&lt;p&gt;十多年过去了，直至今日，我依然坚信算法为魂。我经常说，计算机领域里，到处都是算法。算法的运用是如此常见，如此自然，如此平凡，乃至像空气一样，会被绝大多数人，甚至是计算机专业的人忽视。从我们打开计算机（或者手机，平板电脑）开始，一系列算法就开始运转起来。从操作系统的调度算法，帮助我们顺畅地使用操作系统；到网络连接过程中各种协议的运转，帮助我们畅游信息世界；从我们使用搜索引擎，一个简单的关键字就可以在毫秒级别的时间返回数以亿计的信息，按照优先级排列展现到我们眼前；到浏览器将枯燥的html, css和js文本转换成直观的网页，供我们轻松阅读浏览；从看似平凡的文字处理工具帮助我们排版，修订；到图像工具中各种神奇的滤镜帮助我们磨皮修片；从游戏，影视作品中炫酷的特效；到最新的交互科技——无论是AR还是VR，越来越普遍的应用。算法无处不在。&lt;/p&gt;
&lt;p&gt;但是，说实话，现在，我的这个“学习计算机，必须要懂算法”的观点在逐渐转变。这是因为，计算机的软件行业也在渐渐走向成熟。软件行业已经慢慢成熟到了：如果不会算法，也完全可以有所作为的程度。&lt;/p&gt;
&lt;p&gt;打一个可能不是那么恰当的比方。在乔布斯的时代，如果搞计算机，那是必须会设计线路板，焊线路板的。因为在那时，芯片还不是标准化产品，大家拼的，就是谁的线路板设计的更好。可是现在，大家搞计算机，谁还用焊板子呢？&lt;/p&gt;
&lt;p&gt;再随便举两个例子，IBM大家应该都知道，曾经也是IT界举足轻重的企业。他家的一个很重要的业务是技术咨询。曾经，IBM的一大杀手锏，竟然就是二分查找法！是的，查找是信息世界中最重要的操作之一，这个世界上近乎有一半算法，都是在处理提高查找速度这件事儿。曾几何时，企业的信息查找速度不行了，来咨询IBM，IBM就教他们使用二分查找法，赚得满盆金钵。&lt;/p&gt;
&lt;p&gt;另外一个例子就是数据库。现在大家学习数据库，都是直接学习SQL语言了，可能很少有同学会去想，一条SQL语言在计算机内部到底是怎样执行的。要知道，曾几何时，数据库可不是一个标准化产品。所有的企业做任何软件系统，都要自己做一套数据库！那么自己做的数据库，性能怎么样，就是核心竞争力之一！你家的系统只能处理万级别的数据，我家的系统却能处理千万级别的数据，那我家的产品就领先整个市场。&lt;/p&gt;
&lt;p&gt;其实，老牌的很多技术企业，都是靠这种“底层产品”起家的，比如Oracle的数据库，微软的windows（还有更早的MS-DOS）；adobe的PS等一系列产品；苹果的macOS，iOS；包括google的搜索引擎，等等等等。现在，我们在大多数时候，更多的只是使用这些产品，但如果真要深入下去，思考一下，怎么做这些产品？大家将面对的，是一系列算法问题。&lt;/p&gt;
&lt;p&gt;但是，怎么做这些产品，确实已经渐渐不是技术世界的唯一出路了。业务场景变得越来越重要。这就是我说的，其实，在计算机的世界中，如果不会算法，也完全可以有所作为。&lt;/p&gt;
&lt;p&gt;做一个PhotoShop，要学习很多算法，但是用PhotoShop做出一张优美的图片，不需要接触算法；制作一款游戏引擎，要学习很多算法，但是用游戏引擎打造一款成功的游戏，不一定需要接触算法；制作一个iOS系统，制作一个XCode，需要学习很多算法，但是用XCode制作一款优秀的App，不一定需要使用什么算法；制作一个数据库，或者一个框架，需要学习很多算法，但是使用这些框架和数据库，打造一个网站，一个软件，一个服务，不一定需要接触很多算法。&lt;/p&gt;
&lt;p&gt;或许这就是很多同学觉得算法没用的原因。因为，大多数同学所面临的任务，不是做PhotoShop，不是做游戏引擎，不是做操作系统或者编译软件；不是做数据库或者底层框架；而是应用他们打造具体的业务。算法已经被封装起来了，很多时候，我们不需要接触算法的原理，就能很好的完成业务需求。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;为什么很多同学觉得算法没有用？一个很“可能”的答案是：因为你所接触的工作就是用不到算法。&lt;/strong&gt;你所接触的工作只需要合理的使用各种工具框架就够了。我经常遇到同学们这样的疑问：我在具体工作中如何能够运用我所学习的这些算法知识？大概率的，答案是，可能不太能运用。因为，如果你觉得自己的算法水平一般，但是在做当前的工作，并不觉得有问题，那么就已经说明了，你现在的工作内容，并不需要太多的算法知识的运用。&lt;strong&gt;虽然在计算机的世界里，算法无处不在，但这并不代表我们一定要掌握他们。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这有点儿像数学。数学有没有用？当然有用。人类文明发展至今，数学的发展有着举足轻重的地位。但是我们在生活中，却越来越不容易感知到数学的重要意义了。&lt;/p&gt;
&lt;p&gt;这种业务上的“分级”，其实是一种很常见的现象。一个航空公司并不需要了解怎么造飞机，那是飞机制造商的事情；开一个饭馆也并一定是一个顶级厨师，怎么做饭是厨子的事情；一个成功的游戏设计师不一定了解游戏引擎底层的诸多原理，那是游戏引擎开发商的事情；一个顶级电竞高手也绝不一定是一个游戏设计师。这就好比一个设计人员不需要理解photoshop背后诸多滤镜所隐含的图像学知识一样，那些是adobe的开发人员需要关心的问题；一个赛车手也不需要学会制造一辆赛车。这样的例子太多太多，怎么举都举不完。&lt;strong&gt;“分工”本身就是经济学的基础概念之一，是我们这个世界能够良性运转逐渐发展的诸多核心规则之一。&lt;/strong&gt;回到计算机领域中来，成功的打造一款网站，不代表你需要开发出浏览器，开发出运行在浏览器上的各种语言，以及一个底层的网络模型；成功打造一款app，也不意味着你必须先学会开发出一个iOS或者Android系统。&lt;/p&gt;
&lt;p&gt;这些操作系统，编译环境，网络基础，框架，语言，都是现成的，我们可以直接使用。现如今，随着计算机逐渐发展，我们使用这些工具打造出一款成功的网站，服务，app，软件，游戏，在绝大多数情况下，确实不需要什么算法。即使需要，也真的很简单。所以，学算法到底有什么用？嗯，对你来说，可能还真的没有用。&lt;/p&gt;
&lt;p&gt;可是，一旦你的工作是开发新的语言，新的数据库，新的编译器，新的游戏引擎，新的搜索引擎，新的语音识别系统，新的操作系统，新的底层框架，等等等等，你就一定会开始大量的使用算法。如果你的算法功底不够，你就会意识到，自己是无法胜任这样的工作的。所以，有很多同学问我，学习了算法，怎么能够运用到工作中？我的回答是：去接触那些真正使用算法的工作。&lt;/p&gt;
&lt;p&gt;这也解释了为什么大场面是会更多的侧重算法。因为大厂的产品服务大多更底层，或者需要解决尚没有被完美解决的问题。这些问题不是业务场景的问题，是需要更多的算法功底做支撑才能胜任的。但是，在我创业的过程中，见识了各种各样的在计算机领域的大牛，他们很多人算法水平极其一般，也能在计算机世界的“应用领域”大有成就。就是因为，他们所创造的产品和服务，没有这么底层。&lt;/p&gt;
&lt;p&gt;但是，大家一定要提醒自己。虽然我说学习算法对你来说不一定有用，但与此相对应的，要想取得成功，就一定有别的什么，是有用的。&lt;/p&gt;
&lt;p&gt;一个航空公司并不需要了解怎么造飞机，那是飞机制造商的事情：但是，航空公司要做航线的规划，客户的争取，服务的升级，安全的管理......&lt;/p&gt;
&lt;p&gt;成功运作一个餐饮品牌不一定是一个顶级厨师，但是，需要你理解餐饮行业，从品牌定位，到地址选择，从食材采购运输加工，到服务人员的管理培训，从卫生保障，到库存管理，餐厅的环境布置，这些都是学问，都是厨师不懂的；&lt;/p&gt;
&lt;p&gt;一个成功的游戏设计师不一定了解游戏引擎底层的诸多原理，但是，游戏设计师要理解游戏的设计理念，从美术风格，到游戏机制，从数值策划，到运营维护；&lt;/p&gt;
&lt;p&gt;一个顶级电竞高手不一定是一个游戏设计师，但是打好一个游戏也并不容易，也需要日以继夜的练习和思考；&lt;/p&gt;
&lt;p&gt;一个设计人员不需要理解photoshop背后诸多滤镜所隐含的图像学知识一样，但是，他要理解设计，理解美，理解客户的需求，并且勇于创新，大胆尝试；&lt;/p&gt;
&lt;p&gt;回到计算机领域中来，成功的打造一款网站，不代表你需要开发出浏览器，开发出运行在浏览器上的各种语言，以及一个底层的网络模型；成功打造一款app，也不意味着你必须先学会开发出一个iOS或者Android系统。但是，从产品的角度，你要有清晰的定位，提供稳定的性能和服务，满足用户的需求甚至超出他们的预期；从技术的角度，你要有灵活的扩展性和安全性，可以高效满足业务场景的快速变化和各种意外。&lt;/p&gt;
&lt;p&gt;算法不是技术领域的唯一的核心竞争力，但无论是一个人，一个企业，还是做一份事业，都需要有核心竞争力。什么都没有，肯定是不行的。很多同学问我，去大厂工作，一定要有算法比赛的成绩吗？答案当然不是。我认识太多大佬，没有参加过任何算法比赛，轻轻松松进大厂。有的大佬在面试时直接说：算法我不太懂，但是设计模式软件架构随便问；有的大佬则本科三年就做出一个简易的操作系统内核，面试时聊os把面试官聊晕；有的大佬在iPhone 3的年代就自学iOS开发，一年时间直接进大厂iOS部门当负责人；有的大佬只有高中学历，考不上大学，自学外挂技术竟然成才，如今成为知名游戏厂商的安全部门技术大拿。&lt;/p&gt;
&lt;p&gt;所以，“没有什么”从来不是问题。关键问题，从来都是：“你有什么”。&lt;/p&gt;
&lt;p&gt;大家加油！：）&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;这篇文章是我之前接受慕课网访谈的时候表述的一个观点。现将其整理成文。发表在我的个人公众号上。同时，借这篇文章，我正式宣布，本人的公众号复活。保证周更。争取周二更。谢谢大家的支持。&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-03-18/readme.md" rel="alternate"/></entry><entry><id>2019/2019-02-21/readme.md</id><title>慕课网邀约网络访谈</title><updated>2019-02-21T00:00:00-07:00</updated><content>&lt;h2&gt;慕课网邀约网络访谈&lt;/h2&gt;
&lt;p&gt;以下为慕课网在2019年邀请我做的一份网络访谈。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;1、波波老师好，在今天采访开始前，我个人特别想问您个问题，您觉得自己的人格魅力怎么样？因为通过一些了解，感觉您是一个特别，怎么说呢，特别“丰盛”的人，您觉得呢？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;bobo老师：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个，我自己点评自己的人格魅力是不是不太好：）但要说“丰富”，我一直觉得，一个人最重要，就是经历。一个人的全部经历，不管是好的，还是不好的，都是铸就一个人的一部分，而且是不可或缺的一部分。经历不一定是去过多少地方，认识多少人，创过多少业，或者做过什么改变世界的大事。很多时候，自己身边经历的小事儿，都能演变成自己重要的人生经历，或者丰富自己的认识。&lt;/p&gt;
&lt;p&gt;比如我本科的时候，甚至直到研究生的时候，一直给高中生做家教，勤工俭学，还有一阵子在机构给小学生讲奥数。可能这个过程一直在帮助我思考如何把一个事情讲明白，到现在才能在慕课网讲课讲的得心应手。&lt;/p&gt;
&lt;p&gt;我本科还给别人做外包勤工俭学，也在师兄的一个创业公司实习，现在很多同学都看不起外包，但是我却一直觉得这个过程给我的影响挺大。我通过外包，接触了很多传统企业的老板，什么做家具的，搞建筑人力的，化学分析仪器的，环保材料的，这个过程极大的开拓了我的眼界，让我知道了原来世界上还有做这样或者那样的生意的人，用这样或者那样的模式来赚钱（笑），并且，他们都需要计算机技术。&lt;/p&gt;
&lt;p&gt;必须承认，做外包也是一个痛苦的过程，就是需求的衔接，也就是大家经常调侃的，我给你八千，做个淘宝出来就行了（笑），不过，这个过程也让我更深刻的理解了很多具体技术以外的事情，比如外行人到底是怎么认识计算机技术的，作为内行人，又要怎么和他们打交道。其实，到现在我依然认为，中国的外包市场是有巨大的机会的：）&lt;/p&gt;
&lt;p&gt;研究生以后，和高中同学一拍即合，选择了创业。这个过程的收获更大了。接触的形形色色的人和事情就更多了。在ios最火的时候做ios开发者；还和传媒公司合作做新一代的街头广告；后来有幸拿到了一小笔投资，和北京大学光华管理学院合作做垂直社交，这个过程还有幸见到了王石先生，采访过褚时健。真要细说，就凭我的话痨程度，已经可以写本书了：）&lt;/p&gt;
&lt;p&gt;再后来，由于家庭的原因，又辗转旅居在新加坡和美国，见识多种族移民国家带给我的文化冲击。了解了这个世界上更多不同文化不同经历背景的人们的所思所想。这一切，都在逐渐丰富我的看待世界，看待问题的视角。&lt;/p&gt;
&lt;p&gt;有很多同学问过我类似于“该考研还是工作？”“该在国内读书还是国外读书？”“出国应该去美国还是欧洲？”“实习要去小公司还是大公司？”等等“两难”的问题。在我看来，其实，每个选择都是好的。选择之所以成为选择，就是因为各有利弊，哪个也不比另一个绝对的好。不管怎么选择自己的人生，只要认真去做，总会有回报的，这个回报不一定是经济上的，或者物质上的，但你所经历的一切，才让你成为了这个世界上独一无二的你：）&lt;/p&gt;
&lt;p&gt;当然，其实我在慕课网上认识的同学们，也有很多有着非常独特的经历，有当过火锅店老板的；业余时间给足球比赛当职业裁判的；从文科转行计算机最终成功应聘游戏大厂的；物理专业出国拿到google offer的。在慕课网上认识的同学越多，我越觉得自己的经历还不够丰富。我一直觉得在慕课网上讲课是一个教学相长的过程。这个过程也在丰富我的人生。讲真，我向大家学到很多：）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、您是哪里人呢？能用一两个词形容下您的家乡吗？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;bobo老师：&lt;/strong&gt;我就是北京人。姥爷姥姥辈儿进的京。至于让我形容一下北京，这个课本上就有的。北京是中国的首都，全国的政治中心，经济中心，文化中心：）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、您入这行多久了？是大学毕业前就有了做程序员的规划，还是有什么特别的经历驱使？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;bobo老师：&lt;/strong&gt;我在同龄人中，算是拥有个人计算机比较早的了。我是小学六年级有的自己的第一台计算机。这个年纪可能现在看不算什么，但如果说年份的话，我是97年有的自己的第一台计算机。这应该算是在家用计算机中，比较早的了。那会儿的计算机大概一万元，那会儿北京三环的房价是2000元：）&lt;/p&gt;
&lt;p&gt;从那时起，我就决定要学计算机了。可惜，我们家里人没有搞计算机的，在具体技术学习上没有人指路。至于网上，那会儿别说网络上的资源不丰富了，连上网的人都是少数。小猫上网，几k的速度，还要占住电话线，1M的流量就要三五块钱。百度google也都还没有，找资料是靠雅虎：）我写的第一行代码我自己知道在干什么的代码，应该是初中了，写HTML（笑），做自己的个人网站。那会儿个人网站很流行，但个人做基本都不是动态网站，只需要写静态页面。&lt;/p&gt;
&lt;p&gt;直到大学，如愿学习了计算机，从学C语言开始，才算是真正步入计算机的大门。到现在也有近15年了。所以我很羡慕现在的同学。慕课网我的课程中，我认识了几个高中生。能够在高中就依托网络，获得如此详实，有步骤的学习资料，加上自己的努力，相信以后一定能做出一番成就的：）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4、很多人都觉得编程很枯燥，或者说是大多数人，包括“门外汉”以及不少观望的人，那么在您眼里编程的形象是怎样的？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;bobo老师：&lt;/strong&gt;怎么会呢？我在慕课网上认识的同学，大多都觉得编程很有意思啊。觉得编程枯燥，我还真是第一次听说（笑）。编程和大多数自然科学最大的区别在于，可以脱离很多物理世界的限制。一切都是你自己从底层搭建起来的，你可以控制一切。在自然科学中，我们在大多数时候只能去“发现”，比如医学，我们只能去发现某些疾病和某些基因相关？或者物理学，我们只能去发现重力加速度是多少。要想制造飞机大炮，我们必须遵守这个真实物理世界的限制。&lt;/p&gt;
&lt;p&gt;但是在计算机的世界中，一切都是你一手建立起来的逻辑。程序运转的每一步，都是你的指令得到的结果。所以，看重力加速度不爽？你可以创造一个没有重力加速度的世界，甚至是反重力的世界。觉得真实世界的烟火不够“灿烂”，你可以用你能想到的方式，创造出任何烟火效果。当然，有利必有弊，那就是，如果你的程序运行出了问题，一定是你的问题。因为一切都是你编写的。这就很多人认为写程序痛苦的地方——debug。&lt;/p&gt;
&lt;p&gt;不过说实话，我是很“享受”debug的过程的。因为，每次程序遇到bug，我都会觉得不可思议。我的逻辑明明已经如此缜密了，我的想法明明已经如此成熟了，怎么会有bug？？？！！！（笑）所以每次debug，我其实都是在“我的程序怎么可能有错误，绝对没可能！”的心情中度过的。&lt;/p&gt;
&lt;p&gt;那为什么说这是享受呢？你想啊，告诉你这个世界上有向上流的瀑布，会飞的鱼，能跑的草，可以穿越时间的机器，你是不是很兴奋？怎么可能？可是，这些事物可能确实不存在，但我的程序真的有bug啊！所以，每次debug的过程，我都是在发现“不存在”（笑）。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5、您在慕课网上的实战课程以算法为主，您的个人资料也有一条，是“资深算法爱好者”，你对算法怎么看，能详细给我们说说吗？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;bobo老师：&lt;/strong&gt;不知道大家能不能理解，算法对我来说，就是游戏：）&lt;/p&gt;
&lt;p&gt;我本身是一个电子游戏爱好者。不过因为反应速度太慢，所以不太玩儿竞技类游戏。我最喜欢玩儿的是策略类游戏，或者解谜类游戏。在我看来，算法和这些游戏毫无区别。其实，打好一个游戏的成本也是很高的。你需要足够的熟悉游戏设计者为你提供的条件（各种设定，各种道具，各种技能，等等等等），最后解决一个问题。算法完全就是这样啊！只不过，你的技能库，道具库，是各种经典算法而已。&lt;/p&gt;
&lt;p&gt;什么搜索树字典树哈希表跳跃表；什么最大流最小割最短路最小树；什么递归分支贪心动态规划；什么数论图论群论集合论；统统是你的武器技能。你要足够熟悉自己的所有武器技能，知道他们的所长所短，适合什么场景，又有什么局限，灵活运用，就可以解决一个个看起来完全不可能的问题。这是多么有成就感的一件事情啊！这就是我说我是算法爱好者的原因。因为在我看来，做算法就像玩游戏。这也就是我为什么到现在，闲的没事儿还会去看看，各种算法比赛又想出什么新的“怪物”来刁难“玩家”了（笑）。&lt;/p&gt;
&lt;p&gt;当然，算法的作用绝不仅仅是“做题”或者“比赛”。我经常说，计算机的每一个领域，深入进去，其实都是算法。编译，操作系统，图形学，图像学，网络安全，密码学，数据库，虚拟现实，增强现实，机器学习，深度学习，增强学习……但其实，如果你翻开每一个领域的书本，都会看到，不同的领域都在界定自己要解决的核心问题，然后使用这样或那样的算法思想或者数学工具（这样或那样的武器和技能），去真正的解决他们（打败了大boss）。所以，看别人的经典解决方案，在我看来，和看游戏直播，也没有什么区别呢（笑）。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6、很多同学觉得在平时的工作中用不到算法，觉得算法没有用，对此，您怎么看呢？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;bobo老师：&lt;/strong&gt;我以前一直认为，学习计算机，必须要懂算法。说实话，现在，我的这个观点在逐渐转变。这是因为，计算机行业已经成熟到了一定程度，成熟到了，如果不会算法，也完全可以有所作为的程度。&lt;/p&gt;
&lt;p&gt;打一个可能不是那么恰当的比方。在乔布斯的时代，如果搞计算机，那是必须会设计线路板，焊线路板的。芯片还不是标准化产品，大家拼的，就是谁的线路板设计的更好。可是现在，大家搞计算机，谁还用焊板子呢？我的课程中的很多同学也有同感。曾经有一个做Android的同学告诉我，以前只是编写Android App的逻辑，不觉得算法有什么。但是开始研究Android的源码以后，才发现了算法的无处不在。&lt;/p&gt;
&lt;p&gt;再随便举两个例子，IBM大家应该都知道，曾经也是IT界举足轻重的企业。他家的一个很重要的业务是技术咨询。曾经，IBM的一大杀手锏，竟然就是二分查找法！是的，查找是信息世界中最重要的操作之一，这个世界上近乎有一半算法，都是在处理提高查找速度这件事儿。曾几何时（六七十年代），企业的信息查找速度不行了，来咨询IBM，IBM就教他们使用二分查找法，赚得满盆金钵。&lt;/p&gt;
&lt;p&gt;另外一个例子就是数据库。现在大家学习数据库，都是直接学习SQL语言了，可能很少有同学会去想，一条SQL语言在计算机内部到底是怎样执行了。要知道，曾几何时，数据库可不是一个标准化产品。所有的企业做任何软件系统，都要自己做一套数据库！那么自己做的数据库，性能怎么样，就是核心竞争力之一！你家的系统只能处理万级别的数据，我家的系统却能处理千万级别的数据，那我家的产品就领先整个市场。&lt;/p&gt;
&lt;p&gt;其实，老牌的很多技术企业，都是靠这种“底层产品”起家的，比如Oracle的数据库，微软的windows（还有更早的MS-DOS）；adobe的PS等一系列产品；苹果的macOS，iOS；包括google的搜索引擎等等。现在，我们更多的只是使用这些产品，但如果真要深入下去，思考一下，怎么做这些产品？大家将面对的，是一系列算法问题。&lt;/p&gt;
&lt;p&gt;但是，怎么做这些产品，确实已经渐渐不是技术世界的唯一出路了。业务场景变得越来越重要。这就是我说的，其实，在计算机的世界中，如果不会算法，也完全可以有所作为。&lt;/p&gt;
&lt;p&gt;做一个PhotoShop，要学习很多算法，但是用PhotoShop做出一张优美的图片，不需要接触算法；制作一款游戏引擎，要学习很多算法，但是用游戏引擎打造一款成功的游戏，不一定需要接触算法；制作一个iOS系统，制作一个XCode，需要学习很多算法，但是用XCode制作一款优秀的App，不一定需要使用什么算法；制作一个数据库，或者一个框架，需要学习很多算法，但是使用这些框架和数据库，打造一个网站，一个软件，一个服务，不一定需要接触很多算法。&lt;/p&gt;
&lt;p&gt;或许这就是很多同学觉得算法没用的原因。因为，大多数同学所面临的任务，不是做PhotoShop，不是做游戏引擎，不是做操作系统或者编译软件；不是做数据库或者底层框架；而是应用他们打造具体的业务。算法已经被封装起来了，很多时候，我们不需要接触算法，就能很好的完成业务需求。&lt;/p&gt;
&lt;p&gt;为什么很多同学觉得算法没有用？一个很“可能”的答案是：因为你所接触的工作就是用不到算法。你所接触的工作只需要合理的使用各种工具框架就够了。我经常遇到同学们这样的疑问，我在具体工作中如何能够运用我所学习的这些算法知识。大概率的，答案是，可能不太能运用。&lt;/p&gt;
&lt;p&gt;因为如果你觉得自己的算法水平一般，但是在做当前的工作，并不觉得有问题，那么就已经说明了，你现在的工作内容，并不需要太多的算法知识的运用。虽然在计算机的世界里，算法无处不在，从我们打开计算机，打开浏览器，随便编写一行软件，随便查找一个问题，都在使用算法，但我们慢慢的感知不到它的存在了。&lt;/p&gt;
&lt;p&gt;这有点儿像数学。数学有没有用？当然有用。人类文明发展至今，数学的发展有着举足轻重的地位。但是我们在生活中，却越来越不容易感知到数学的重要意义了。&lt;/p&gt;
&lt;p&gt;可是，一旦你的工作是开发新的语言，新的数据库，新的编译器，新的游戏引擎，新的搜索引擎，新的语音识别系统，等等等等，你就一定会开始大量的使用算法。你才会感知到自己的算法水平的不足。&lt;/p&gt;
&lt;p&gt;我见过很多大牛，他们的算法水平极其一般，但在计算机世界的“应用领域”大有成就。不过，所有的成就都是努力换来的。这些大牛虽然不需要研究复杂的算法了，但是他们需要研究学习别的东西，才能更好的带领他们的应用走向成功。技术水平不一定是唯一的核心竞争力，但无论是一个人，一个企业，还是做一份事业，都需要有核心竞争力。我只能说，成功都不容易。&lt;/p&gt;
&lt;p&gt;在短时间内，我依然认为，在计算机的技术领域有所成就，是绕不开算法的。（在这里，要注意，我强调的是“技术领域”，如果你想成为应用领域的大牛，已经不在这个问题的探讨范围了）因为，你要解决别人没有解决的问题；或者更好的去解决已经解决的那些问题，就要学习算法，创造新的算法。这也就是为什么大公司重视算法的原因。因为大公司大多在提供底层的产品和服务，在不断的接触前人还没有很好解决的问题，他们需要他们的员工更深入的理解底层原理，才能在需要的时候更快的想出更好的解决方案：）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;7、“波总出品，必属精品”这是很多学员学习您的课后给出的评价，包括我平常也会收到很多关于您授课的好评，您是怎么“笼络人心”的？或者说,您觉得您的课最与众不同的地方在哪里？您对于自己的课程，最大的自信在哪里？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;bobo老师：&lt;/strong&gt;很简单。就是写代码。&lt;/p&gt;
&lt;p&gt;我在慕课网上的课程，以在大学课堂上偏理论的课程为主。这类课程，在很多大学，都不强调具体的编程，导致很多同学学的云里雾里。没有实践，肯定印象不深刻。我做的一个很重要的事情，就是带领大家，把这些“抽象”的知识，具体的用代码实现了出来。&lt;/p&gt;
&lt;p&gt;我的最新的课程《专给程序员设计的线性代数课》，甚至使用这种方式，把数学知识也给代码化，目前从同学们的反馈来看，大家还是很接受，同时也很喜欢这种形式的。更多的《专给程序员设计的XXX课》还在计划和设计当中，还请大家期待：）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;8、您现在在慕课网已上线了6门课，您能分别说说他们都针对什么样的人群吗？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;bobo老师：&lt;/strong&gt;&lt;a href="https://coding.imooc.com/class/207.html"&gt;《玩转数据结构》&lt;/a&gt;和&lt;a href="https://coding.imooc.com/class/71.html"&gt;《算法与数据结构》&lt;/a&gt;两门课程，以经典的算法和数据结构的底层实现为主。&lt;a href="https://coding.imooc.com/class/82.html"&gt;《玩转算法面试》&lt;/a&gt;则以面试题为主，带领大家分门别类的去探索“Leetcode”这个全球最“权威”的面试题库。通常计算机专业的同学，以准备算法面试为目的的话，学习这三门课程就足够了：）&lt;/p&gt;
&lt;p&gt;我在慕课网上的另一门课程&lt;a href="https://coding.imooc.com/class/138.html"&gt;《看得见的算法》&lt;/a&gt;，是一门“另类”的课程：）如果你想用Java语言和自己的算法知识，做一些有意思的，可以“看得见”的小程序，不妨关注一下我的&lt;a href="https://coding.imooc.com/class/138.html"&gt;《看得见的算法》&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;如何生成一个随机迷宫？如何实现一个扫雷游戏？如果用算法自动求解谜题类游戏？如果用计算机绘制大自然中的树？在课程主页，你就可以看到这门课程可以做出来的全部demo：）&lt;/p&gt;
&lt;p&gt;除了在慕课网上做“传统算法”课程，我还在慕课网上有&lt;a href="https://coding.imooc.com/class/169.html"&gt;机器学习的基础入门课程&lt;/a&gt;。自卖自夸一下，近乎所有听过这门课程的同学，都一致认为我的机器学习课程是市面上讲解最详实，同时也是性价比最高的课程：）对机器学习，人工智能感兴趣的同学，强烈推荐一下，千万不要错过：）&lt;/p&gt;
&lt;p&gt;虽然人工智能很热，“连小学生都开始学了”。不过机器学习在现阶段依然不是计算机专业的必修课程，也并没有在各大公司的用人体系中成为计算机面试的必考内容（但算法和数据结构是！）。现阶段，机器学习依然属于专有领域的知识，所以并不是每个人都要学习的。也请大家根据自己的需要进行选择：）&lt;/p&gt;
&lt;p&gt;最后就是我之前说的&lt;a href="https://coding.imooc.com/class/260.html"&gt;《专给程序员设计的线性代数课》&lt;/a&gt;，由于在讲完机器学习后，很多同学想把自己的数学基础打得更扎实一些，所以这门课程孕育而生。线性代数不仅在机器学习领域有重要的应用，在图形学，图像学，推荐系统，搜索引擎，语音识别，等等领域，都有着非常重要的应用。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;9、我们知道在技术这个行业，是特别需要去不断学习的，那么对于学习方法，波波老师能否给我们慕课网的众多粉丝、学员指点一二？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我个人公众号《是不是很酷 ID:gh_1dc790386e10？（绝非广告，笑~）中&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2018/2018-04-18/"&gt;《高效学习的秘密》&lt;/a&gt;一文，就是在回答这个问题，看过的同学都收藏了：）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;10、最后，波波老师请用一两句话，自荐一下您的课程吧。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;买吧。你不会后悔的（笑）&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-02-21/readme.md" rel="alternate"/></entry><entry><id>2018/2018-08-17/readme.md</id><title>七夕节，给他这样一张贺卡，让他秀一下智商：）</title><updated>2018-08-17T00:00:00-07:00</updated><content>&lt;h2&gt;七夕节，给他这样一张贺卡，让他秀一下智商：）&lt;/h2&gt;
&lt;p&gt;七夕节到了！各位理工男的女朋友们，是不是到时候让你们的另一半秀一下他一直引以为傲的智商了？嘿嘿，怎么让他秀？来来来，这次七夕节，我给各位理工男的女朋友们推荐一套专门寄给理工男的情人节卡片。&lt;/p&gt;
&lt;p&gt;这是国外的一个小有名气的小众组织：Evil Mad Scientist设计的一套情人节表白卡片。专门用来寄给极客群体，顺便具有测智商的奇效：）（其实是测数学有没有好好学...）&lt;/p&gt;
&lt;p&gt;这套卡片数目不少，我挑出来了七张给大家分享。（我才不会告诉你是因为我只看懂了这七张呢）&lt;/p&gt;
&lt;p&gt;那为什么是专门给理工男的女朋友们推荐的呢？理工女的男朋友们呢？&lt;/p&gt;
&lt;p&gt;根据很（wo）多（ji）人（ji）的经验，咳咳咳（前方重要提醒）：请各位男士准备好荷包，大大方方的买买买！寄送以下卡片会死的很惨。&lt;/p&gt;
&lt;p&gt;好啦，各位ladies，It's show time！&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;首先，来一组很直白的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="card1" src="https://github.com/liuyubobobo/my-blog/raw/master/2018/2018-08-17/card1.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="card2" src="https://github.com/liuyubobobo/my-blog/raw/master/2018/2018-08-17/card2.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="card3" src="https://github.com/liuyubobobo/my-blog/raw/master/2018/2018-08-17/card3.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;下面的晦涩一些：）&lt;/p&gt;
&lt;p&gt;&lt;img alt="card4" src="https://github.com/liuyubobobo/my-blog/raw/master/2018/2018-08-17/card4.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="card5" src="https://github.com/liuyubobobo/my-blog/raw/master/2018/2018-08-17/card5.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="card6" src="https://github.com/liuyubobobo/my-blog/raw/master/2018/2018-08-17/card6.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;最后，是我最喜欢的，但或许，是最不严谨的：）&lt;/p&gt;
&lt;p&gt;&lt;img alt="card7" src="https://github.com/liuyubobobo/my-blog/raw/master/2018/2018-08-17/card7.png" /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;如果留言区的留言不能覆盖这七张贺卡的正确解释的话，下周我将单独发文公布正确答案。&lt;/p&gt;
&lt;p&gt;祝天下有情人终成眷属：）&lt;/p&gt;
&lt;p&gt;七夕快乐。&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2018/2018-08-17/readme.md" rel="alternate"/></entry><entry><id>2018/2018-07-18/readme.md</id><title>天生不聪明</title><updated>2018-07-18T00:00:00-07:00</updated><content>&lt;h2&gt;天生不聪明&lt;/h2&gt;
&lt;p&gt;因为我在慕课网上讲了几门算法课程，所以经常收到一些同学的提问。除了技术性的问题，一个很常见的问题就是：老师，我觉得算法好难，自己不够聪明，要花好长时间才能理解一个算法，刷题效率也很低，半天能过一道题就不错了，我该怎么办？&lt;/p&gt;
&lt;p&gt;关于如何学习算法，如何刷题，或者到底要不要刷题，有时间我再写更多的文章总结。有兴趣的同学，可以先参考我之前的文章&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2018/2018-04-18/"&gt;《如果高效学习有什么秘诀的话，那就都在这里了》&lt;/a&gt;，相信也会有不小的收获。这篇文章，我想探讨一下“聪明”这个话题 ：）&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;和大多数人一样，我也是一个从小渴望聪明的孩纸。可是，依然和大多数人一样，我的身边有着无数比我聪明，让我无时无刻不意识到，自己是如此之笨的孩纸。那些聪明的别人家的孩子，或者反应更快，或者理解力强；奥数不用学就将近满分，英语课文读一遍就能背下来；更重要的是，在大家都情窦初开的年纪，他们把起妹来还花样百出，妙语连珠，见多识广，这实在是太！让！人！懊！恼！了！&lt;/p&gt;
&lt;p&gt;于是，我在初中下决心好好学习一下怎么变聪明——通过这个举动，你可以看出我是多么不聪明的孩纸。我到家门口的新华书店，用可以买5本机器猫漫画的“巨款”，买了一本类似叫做《如何变聪明》的书。然后，就没有然后了。那本书讲的是什么，我现在已经完全忘记了。但是我敢肯定的是，我没有看完它。因为，我意识到了，这本告诉我如何变聪明的书，是无论如何都不能让我变聪明的。或许那时，我是绝望的，坚信自己只能这么不聪明下去了。但是现在回头看，我发现自己很可能在那时，就接近了一个真理。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;随着年龄的长大，我慢慢发现了一个现象。那些小时候我认为极度聪明的小伙伴们，长大以后，似乎并没有像我曾经坚信的那样，干出一番大成就。当然，我这么说为时过早。我的那些小伙伴们都还年轻，人家可能10年后20年后就会干出一番大成就，甚至拯救全人类。只不过，在现阶段，大多数人的成就，在我看来，和他们的聪明程度是不成正比的。&lt;/p&gt;
&lt;p&gt;有一天，我和老婆闲聊，说起了这个话题。老婆是心理学博士。而“聪明”这个话题，其实是心理学领域一直在研究的话题。可能一般人对心理学的认识都是《无间道》里的陈慧琳那个角色，洋气的称呼叫shrink，坐在那里倾听人的烦恼，缓解别人的情绪，而已。&lt;/p&gt;
&lt;p&gt;但其实，心理学所包含的内容比“心理疾病”或者“情绪失调”要广袤的多。简单来说，只要和你的大脑的思考有关，就是心理学家感兴趣的话题。而“学习”这个事情，是所有人都必然会经历的一种大脑活动，自然也是心理学家的研究重点。在心理学，更专业的术语叫“认知能力”。我们是如何认知的？什么在影响我们的认知？怎么提高我们的认知？这些统统是心理学研究的范畴。而对于“聪明”这个因素，早就被一票野心勃勃想解开人类大脑之谜的心理学家们关注多年了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在心理学界，最经典的和聪明相关的研究，应该是属于斯坦福大学的心理学教授Carol S. Dweck的。&lt;/p&gt;
&lt;p&gt;Dweck教授对聪明的研究，首先从一个很简单的问题开始，&lt;strong&gt;聪明到底来源于哪里？&lt;/strong&gt;有的人认为聪明是天生的；有的认为聪明是后天的。这两种说法都有道理，但我们却无法实际去检验。我们很难对一个人为定义的抽象概念——聪明，去客观地探讨它的来源。所以，Dweck教授将关注点放到了另一个地方：&lt;strong&gt;不同的人认为聪明源自哪里？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;于是，Dweck教授找来了57个三岁的孩子，用尽一切手段，尽量客观的来获得这些小孩子对聪明的看法：&lt;strong&gt;聪明到底是天生的？还是后天学习来的？&lt;/strong&gt;当有了这个样本以后，Dweck教授的团队跟踪这些小孩子直至小学四年级——整整七年。结果发现：&lt;strong&gt;认为聪明是后天学习来的孩子，学习成绩明显的高于相信聪明是天生的孩子。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可能有的同学会质疑。毕竟三岁的孩子，在表达对如此抽象的问题上，会有不小的偏差。尽管Dweck教授在研究过程中已经使用各种手段，想尽办法获得孩子们的真实想法了，但还是会显得说服力不够强。所以，Dweck教授进行了新的一轮实验。这次，实验对象是美国的初中生。&lt;/p&gt;
&lt;p&gt;和中国一样，大多数美国学生，在进入初中阶段，数学成绩会产生大幅度下降。这其中的原因很多，有学习内容产生巨大变化的原因，也有学生进入青春期的原因。这些原因不是Dweck教授关注的重点。Dweck教授关注的是，&lt;strong&gt;不同学生对聪明的看法不同，是否会在这个阶段造成他们数学成绩的差异？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;于是Dweck教授找来了373名美国刚上初一的学生，询问他们对聪明的看法。初一的学生已经可以完全清楚地表达自己的观点了，甚至很多学生已经有了相当成熟的体系性思考。Dweck教授拿到这373名学生对聪明的看法之后，跟踪他们直至初二结束。结果发现：&lt;strong&gt;相信聪明是天生的学生，数学成绩持续下降；而那些相信聪明是后天的学习可以弥补的学生，数学成绩是不降反升的！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;上述实验，只是Dweck教授观察得到的结论。只是观察，是无法满足科学家们的好奇心的。所有的科学家都是好奇宝宝，像小孩子一样，观察完以后，一定要用手捅捅自己的研究对象。Dweck教授开始了她的下一个实验。&lt;/p&gt;
&lt;p&gt;这次，Dweck教授找来了99个数学成绩在初一有所下滑的学生，把他们分成两组，分别给他们“开小灶”。不过，对于这两组学生，开小灶的内容是截然不同的。&lt;/p&gt;
&lt;p&gt;对于第一组同学，Dweck教授给他们上“补习班”——讲解具体的数学知识点。数学考不好？来来来，课后我们多做点儿练习。&lt;/p&gt;
&lt;p&gt;对于第二组同学，Dweck教授则给他们用近八周的时间，开展了一场别开生面的“认知神经科学”基础课。课程的内容，主要就是向大家传授当前认知神经科学的最新研究成果：&lt;strong&gt;人类的大脑是如何学习到知识的？答案是通过不断的思考。在不断地学习和思考的过程中，人的大脑内部产生着剧烈的神经活动，迫使脑神经之间建立了更多的连接。随着神经元之间连接越来越多，我们对问题的认识也就越来越深刻，遇到类似问题反应也会越来越快。不仅如此，甚至还能触类旁通，举一反三，乃至和其他的领域结合，产生创新性的想法。这表现出来，就是你更聪明了。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;换句话说，Dweck教授在想尽办法，用科学的事实，告诉第二组学生：聪明是可以靠不断的学习，思考获得的。至于你们学什么，怎么学，我不管，你们看着办！&lt;/p&gt;
&lt;p&gt;在给这两组学生加完“小灶”之后，Dweck教授又跟踪了一年这两组学生的成绩，第一组学生的成绩继续持续下降；而第二组学生的数学成绩停止了下降，甚至有所提升。&lt;/p&gt;
&lt;p&gt;Dweck的实验告诉了我们，&lt;strong&gt;我们对聪明的看法，会影响，甚至是严重影响我们的表现！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为了凿实这个实验结论，Dweck教授做了一组最为经典的实验。&lt;/p&gt;
&lt;p&gt;他找来了400个五年级的小学生，让他们做一套智力测验。之后，Dweck教授把这400个学生分成两组。不管他们的成绩如何，Dweck教授都对第一组的同学说：&lt;strong&gt;这个测试非常难，你能拿到这个成绩，说明你特别聪明；&lt;/strong&gt;而对第二组的同学说：&lt;strong&gt;这个测试非常难，你能拿到这个成绩，说明你特别努力。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;然后，Dweck教授让这400个学生再做一次智力测试。这次，所有的同学有了选择：他们可以选择做一套和上次一样难的测试；也可以选择做一套更难，更具有挑战，但被Dweck教授形容为也是更有趣的测试。结果，&lt;strong&gt;被夸努力的学生，有92%选择了比上次更难的挑战；而被夸聪明的学生，则只有33%选择了比上次更难的挑战。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为什么？或许是因为“偶像包袱”。被夸聪明的同学，怕自己做了更难的问题，错误太多，就显得自己不是那么聪明了。&lt;/p&gt;
&lt;p&gt;最后，Dweck教授让这400名学生做第三次智力测试。这次测试的问题，和第一次的难度相同。结果，&lt;strong&gt;被夸努力的学生，整体成绩上升了近30%，而被夸聪明的同学，整体成绩下降了20%&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;为什么？被夸努力的学生，大部分同学都接受了更难得挑战。做过难的问题，再做普通的题，普通的题就变得简单了。至于被夸聪明的同学，或许是因为患得患失，生怕自己做错了被别人说其实你不聪明，结果，成绩反而下降了。&lt;/p&gt;
&lt;p&gt;Dweck教授因为这一系列著名的实验，极大地改变和完善了人们对学习，自我认知，教育等领域的看法。她获得了美国心理学界的至高荣誉——心理学杰出科学贡献奖；同时获得了教育研究领域的“诺贝尔奖”——一丹奖。她现在是美国文理学院的院士。虽然她的研究也有不小的争议，但现在，她仍然坚持在自己的领域为世界做着贡献。&lt;/p&gt;
&lt;p&gt;&lt;img alt="dweck" src="https://github.com/liuyubobobo/my-blog/raw/master/2018/2018-07-18/dweck.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;相信大多数同学都看懂了，Dweck教授的实验，告诉了我们一个血淋淋的事实——&lt;strong&gt;人们对聪明的看法，会极大地影响人们的行为&lt;/strong&gt;。聪明有没有天生的成分？大多数心理学家，认知科学家和脑科学家还在研究。但是，Dweck教授告诉我们的是：&lt;strong&gt;聪明不是固定的。只要你相信聪明是靠努力可以弥补的，并且努力下去，你就会变聪明。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们现在可以回到文章开头的问题了：觉得算法好难，自己不够聪明，要花好长时间才能理解一个算法，刷题效率也很低，半天能过一道题就不错了，我该怎么办？&lt;/p&gt;
&lt;p&gt;对此，我的回答是：对不起，我没有更好的方法。并且，我坚信，不仅我没有，这个世界上根本不存在这样的一个方法。我经常使用反证法来阐述这个问题：假设这个世界存在一个简单、可行、快速、高效的学会算法的方法，那么，所有的人早就使用这个方法学习算法了，所有的人也早就成为算法大神了，算法也就不是什么让人头疼的事情了。可这是和现实不相符的。所以，这个方法不存在：）&lt;/p&gt;
&lt;p&gt;以上证明不仅适用于算法学习，对各个领域的学习都适用。&lt;/p&gt;
&lt;p&gt;但是，如果能给你一点安慰的话，我想实话告诉你：在我刚开始接触算法的时候，我也觉得算法好难，自己不够聪明，要花很长时间才能理解一个算法，刷题效率也特别低，别说半天一道题了，一个礼拜死磕一道题都是家常便饭。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;或许，你我都是天生不聪明的人。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;不过，好在，天生不聪明似乎并没有什么关系。因为，只要你相信聪明是靠努力可以弥补的，并且努力下去，你终将变得很“聪明”。甚至，你会超越这种“聪明”，理解一个很嘻哈又很深刻的道理：聪明不是什么大不了不起的事儿：）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;据统计，无论是诺贝尔奖的获奖者，还是美国总统，平均智商都和普通人没有有显著差距。而和普通人智商有巨大差异的群体，门萨高智商俱乐部应该是典型了。可惜，很少听说门萨高智商俱乐部的成员，在任何领域，是的，任何领域，对世界，对社会有重大的贡献。&lt;/p&gt;
&lt;p&gt;除了一堆稀奇古怪的智力题。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;7&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我用了这么长的文章，回答了一个问题。其实最后答案是一句废话：要努力。换句文绉绉的表示法，就是：&lt;strong&gt;万事无他，唯手熟尔&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;当然，我也承认，只是努力，可能并不够。或者说，至少，还有改进的余地。人生是一个维度极其丰富的过程，用任何一个单一维度去解释它，都是极其幼稚可笑的。比如，我就认为，另外一个非常重要的维度，叫做“选择”。我们经常听到互联网上的一种声音：选择大于努力。对于这个观点怎么看？大家可以期待一下我的一篇文章，我会聊聊我对于“选择”的看法。&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2018/2018-07-18/readme.md" rel="alternate"/></entry><entry><id>2018/2018-04-18/readme.md</id><title>如果高效学习有什么秘诀的话，那就都在这里了：）</title><updated>2018-04-18T00:00:00-07:00</updated><content>&lt;h2&gt;如果高效学习有什么秘诀的话，那就都在这里了：）&lt;/h2&gt;
&lt;p&gt;这篇文章我写了很长时间。起因是一个同学在我的课程问答区的提问。这个问题激起了我很多思考。最后形成了这篇文章。文章可能会比较长，我也没有花太多心思找什么配图。但如果你对“学习方法”这个问题有困扰的话，相信，这篇文章会给你一些启迪：）&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;在慕课网做了这么多实战课，时间长了，收到了越来越多的同学的问题。除了专业知识上的问题，遇到的最多的问题，就是学习方法方面的问题了。由于我本人不是学习方法的专家，所以不敢轻易说自己的学习方法多么先进。更重要的是，我不认为有一种固定的“好”的学习方法是适合所有同学。如果存在那样的方法的话，学习这件让人头疼的事儿，就不头疼了：）由于每个人的背景不同，擅长不同，每个人都有适合自己的不同的学习方法；与此同时，不同的领域，由于其本质不同，学习方法也应该是不同的。我坚信：每个人去寻找适合于自己的学习方法，是每个人一生的话题。别人叙述的所谓的“学习方法”，只能作为参考用。&lt;/p&gt;
&lt;p&gt;不过我在慕课网做答疑的过程中，确实看到了很多同学的学习方法，有改进的空间。在这里，我想简单总结一些我见过的，认为可能不是那么得当的学习方法，仅供参考。这篇文章不是一套“如何学习”的理论，而是一些零碎的个人见解，更像是在总结“学习中的那些坑”，不过，在我写完这篇文章之后，回头看，我觉得，我自己的高效学习的秘诀，其实都在这篇文章里了：）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1）不要完美主义！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我观察到的大多数同学犯得最最最最大的“错误”，就是在学习上“完美主义”。乃至后续很多其他的问题，在我看来都和这个问题是直接相关的。不要完美主义！不要完美主义！不要完美主义！重要的事情说三遍。&lt;/p&gt;
&lt;p&gt;举个最经典的例子，也是我经常举的例子，背英语单词（在这里我们先不聊背英语单词是不是好的英语学习方法，我们只看如果我们想要背英语单词的话，应该怎么背）我发现很多同学拿着红宝书，第一个list都没翻过去就放弃了。这是因为每天背完第一个list以后，第二天会发现：第一个list还是有很多单词没掌握，然后就继续背第一个list。然后一周后，发现自己第一个list都搞不定，觉得英语好难，彻底放弃了。这就是“完美主义”：不把第一个list“彻底”掌握不肯继续前进。这样是不对的。背了一个list，能多记一个词，就是进步。就算一个词都没记住，模糊有了印象，也是一种进步。我们不应该过度着眼于我们还不够完美。学习不是要么0分，要么100分的。80分是收获；60分是收获；20分也是收获。有收获最重要。但是因为着眼于自己的不完美，最终放弃了，那就是彻底的0分了。&lt;/p&gt;
&lt;p&gt;仔细想，这种“完美主义害死人”的例子特别多。我看到过很多同学，其实是在学习的路上，被自己的“完美主义”逼得“放弃了”——由于学习中有一点没有做好，遭受到了一点点挫折，最终就放弃了整个学习计划。每个人都一定要接受自己的不完美。想开一点：我们都不是小升初考了满分，才能上初中的；也不是中考考了满分，才能读高中的；更不是高考考了满分，才能念大学的；将来也不会是大学所有科目都是满分，才能出来工作。不完美其实是常态，根本不会影响我们学习更多更深入的内容。但是在自学过程中，很多同学却要求自己在自己制定的每一步计划中都达到“完美”，才进行下一步。最终结果，通常都是“放弃”。&lt;/p&gt;
&lt;p&gt;可能有的同学会跳出来反驳我：学习当然要认真啊！在这里，我必须强调，我所说的“不要完美主义”，和“学习认真”是不冲突的。什么是“完美主义”，什么又是“囫囵吞枣”，这是一个“度”，每个人其实不一样。不要“完美主义”，不代表学习可以草率前行。每个人都必须要找到适合自己的学习节奏。我的经验是：在自己又因为自己的学习进度而沮丧的时候，问自己一句：是不是自己又犯“完美主义”的毛病了：）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2）不要过度“学习路径依赖”，学习要冲着自己的目标去。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;现在信息太发达了，对于大多数领域的知识，网上会有很多所谓的“学习路径”。我不是说这些学习路径没有用，但是不能“过度”依赖这些所谓的学习路径。&lt;/p&gt;
&lt;p&gt;比如，很多同学想学机器学习，大多数学习路径都会告诉你，机器学习需要数学基础。于是，很多同学就转而学习数学去了，非要先把数学学好再去学机器学习。可是发现数学怎么也学不好（在这里，可能完美主义的毛病又犯了），而机器学习却一点儿都没学。最终放弃了机器学习，非常可惜。其实，如果真正去接触机器学习，就会发现，至少在入门阶段，机器学习对数学的要求没有那么高。正因为如此，我一直建议：只要你在本科接触过高数，线数，概率这些科目的基础概念，想学机器学习，就去直接学习机器学习。学习过程中发现自己的数学不够用，再回头补数学。在这种情况下，数学学习得也更有目标性，其实效果更好。在这里，我忍不住要打一个我的课程广告，入门机器学习不妨尝试我在慕课网的《Python3入门机器学习》，学过的同学都说好：）&lt;/p&gt;
&lt;p&gt;类似这样的例子还有很多，很多同学想学习做ios app，就先去精通swift语言，或者想做android app，就先去精通java语言。在我看来大可不必。以我的经验，只要你有一门编译型语言基础，大概看一下这些语言的基础语法，就可以直接上手ios或者android app的开发了。先能做出一个最基本的app，在这个过程中，就会意识到语言特性的意义，再回头深入研究语言也不迟。此时还能结合真实的开发任务去理解语言特性，比没有上手app开发，抽象地理解语言特性，有意义的多。&lt;/p&gt;
&lt;p&gt;再比如，我的《算法与数据结构》课程和《玩转算法面试》课程，在视频中都是使用C++进行编码的。虽然我一再强调对于算法的学习，语言不重要，但还是有很多同学表示，要先把C++学透，再回来把课程中的算法学好。这是完全没必要的。事实上，在我的这两门课程中，我看到的收获最大的同学，是那些能够把课程中的算法思想理解清楚，然后用自己熟悉的语言去实现的同学：）&lt;/p&gt;
&lt;p&gt;依然是：不要“过度”学习路径依赖，什么叫“过度”，每个人的标准不一样。每个人都需要寻找自己的那个“度”。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3） 不要迷信权威的“好”教材。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不是说权威教材不好，而是每一本教材都有其预设的读者群，如果你不在这个预设的读者群的范畴里，教材再好也没用。最简单的例子：再好的高数教材，对于小学生来说，都是一堆废纸。&lt;/p&gt;
&lt;p&gt;我经常举的一个例子是《算法导论》。我个人建议如果你是研究生或者博士生，已经有了一定的算法底子，才应该去阅读《算法导论》。但是对大多数本科同学，尤其是第一次接触算法的同学，《算法导论》实在不是一个好的教材。但很可惜，很多同学在学习中有上面的两个毛病，既过度路径依赖，别人说《算法导论》好，学习算法要走学《算法导论》这个路径，自己就不探索其他更适合自己的学习路径了，一头扎进《算法导论》里；同时还“完美主义”的倾向，对于《算法导论》的前几章，学习的事无巨细，但其实接触了很多在初学算法时没必要学习的内容。最后终于觉得自己学不下去了，放弃了对“算法”整个学科的学习。认为算法太难了。&lt;/p&gt;
&lt;p&gt;诚然，算法不容易，但是，一上来就抱着《算法导论》啃，实在是选择了一条完全没必要的，更难的，甚至可能是根本走不通的路。对于一个领域的学习，了解市面上有什么好的教材是必要的，单也不能迷信权威教材。每个人必须要去探索学习如何寻找适合自己的学习材料。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4）不要看不起“薄薄”的“傻”教材，这些你看不起的学习材料，可能是你入门某个领域的关键。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;很多同学问我最初学习算法的是什么教材，我告诉他们是这本教材：《算法设计与分析基础》。在这里，我完全没有推荐这本教材的意思。事实上，现在我有点儿“鄙视”这本教材。因为我在学习它的过程中，发现这本教材有很多错误（帮助它纠正错误其实也提高了我的水平：）当然，现在这本书的版本可能也和我当时学习的版本不同了，大部分错误应该已经纠正了。）但它确实是我的一本很重要的算法启蒙教材。关键原因是，它够薄。&lt;/p&gt;
&lt;p&gt;在大多数时候，如果有人问我教材推荐，基本上我的回答都是，如果是入门水平：随便找一本在京东，亚马逊，豆瓣上，评分不太差的“薄”的教材，就ok了。在这里，关键字是够“薄”。因为“薄”的教材能让你以最快的速度看完，对整个学科有一个全盘的认识：这个领域是做什么的？解决什么问题了？整体解决问题的思路是怎样？解决问题的方法大致是怎样划分的？一些最基础的方法具体是怎样的。这些在初学阶段是至关重要！是让你全盘把握整个领域脉络的。虽然通过这么一本薄薄的教材，你的脉络把握肯定不够全面细致，但比没有强太多！我看过不少同学，一上来学习《算法导论》，关于复杂度分析的笔记做了好几页，然后就放弃了，可是连什么是动态规划都不知道。这样完全没有对“算法”这个领域有全面的认识，甚至可以说根本没有学过“算法”！先用薄教材入门，再找“厚”教材，细细体会其中的细节，是我百试不爽的学习方法。&lt;/p&gt;
&lt;p&gt;另外，在这里，我还要强调“入门教材”，很多教材虽然够“薄”，但不是“入门教材”。大家要注意。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5）不要迷信单一教材。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;很多同学非要我推荐一本具体的“薄”教材入门，说实话，很多时候让我有点儿哭笑不得。因为我随便推荐一本，我确实不敢保证它是“最好的”，“最适合你的”，但是各个领域那么多教材，我又不可能都一一看过，一一比较过。最最重要的是，我的学习经验告诉我，在大多数情况下，学习不是一本固定教材可以搞定的。非要找到一本“最适合自己的”教材，然后就一头扎进去，其实是不科学的。我印象很深刻，我读本科的时候，那会儿申请了一个项目，要做一个网站（那时候服务端都用ASP.NET），我一口气从图书馆借了10本ASP.NET的教材，然后以一本最薄的书为主干去看，发现这本书介绍不清楚的概念，马上就从其他书里找答案。通常不同的作者对同一个事物从不同的角度做解读，是能够帮助你更深刻的认识一个概念的。基本上一个月的时间，我就从一个完全的网站搭建小白，做出了这个项目需要的那个网站。这个习惯我一直延续，研究生的时候，对什么领域感兴趣了，第一件事就是到图书馆，借十本相关书籍回来翻看。&lt;/p&gt;
&lt;p&gt;但是，大多数同学喜欢仅仅扎进一本书里，一旦选定了自己的学习材料，就对其他材料充耳不闻，甚至是排斥的心理。这种做法，一方面又是“完美主义”的表现——非要把这本教材学透；另一方面，其实也是“犯懒”的表现，不愿意多翻翻，多看看，自己多比较比较，自己去寻找最适合自己的材料，一味地盲目相信所谓“大神”的推荐，殊不知，这些推荐，不一定是更适合自己的材料；更何况，还有很多大神，明明是靠不出名的“薄”教材入的门，但给别人做推荐的时候，就突然变成自己是算法奇才，自幼阅读《算法导论》而所成的神话了：）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6）实践！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;前面说了很多和教材选择相关的话题，但对于计算机领域的学习来说，教材的意义其实远远小于实践的意义。如果仅仅是看学习材料就是学习的话，那么教学网站的视频后期处理人员就是水平最高的工程师了。因为每段视频，他们都需要看一遍。但是，很显然，仅仅是看视频，是无法学到知识的。对于计算机领域的学习来说，真正动手实践去编程是异常重要的。怎么夸大其中的作用都不过分。这就好比学游泳，必须下水去游泳；或者学开车，必须亲自上路。否则你说的再头头是道，一个小学生文化水平的人，只要他开过车，游过泳，都能在这两个领域瞬间秒杀你。&lt;/p&gt;
&lt;p&gt;很多同学都说我的算法讲得好，其实，我一直认为，这其中的一个最简单的秘诀就是：我带领大家把大多数算法都非常细致的实现了一遍；或者对其中的应用进行了非常具体的实践。反观大多数高校教育，对于算法或者机器学习这种一定程度偏理论的学习，通常非常不强调实践。最终的结果是学习者只是接受了很多抽象的概念，但对其中具体的实现细节，却是云里雾里。我见过太多同学，都明白什么是O(n^2)复杂度，什么是O(nlogn)的复杂度，却问我对于100万的数据规模，为什么自己的选择排序运行起来就没反应了。答案很简单：O(n^2)的复杂度太慢了，100万的数据规模太大了，一般家用计算机转选择排序一时半会儿是转不完的。这些同学一定理解O(n^2)的算法比O(nlogn)的算法慢，却没有真正实践过，不知道这个差距到底是多少。&lt;/p&gt;
&lt;p&gt;在我的课程中，经常遇到有些同学提出这样的问题：这个算法的某句话（或者某段逻辑），为什么要写成A的样子，而不是B的样子？这种问题其实很好，但我觉得解决方法也很简单，实际的去把算法改写成B的样子，实际的运行试试看，看会发生什么。如果发生了错误，仔细分析一下，为什么会有错误？如果没有错误，具体比较一下：A和B两种不同的写法，为什么都正确？又有什么区别？真正的学习上的提高，就发生在这个过程中。我当然可以告诉给同学们一个结果，但是自己亲自实践一遍，相比阅读我给出的一个答案，自己对其中问题理解的深刻程度，是完全不可比拟的。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;7）debug非常非常重要。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我看到的另一类“经典”问题就是：老师，这个代码为什么错了，然后贴一大段代码。这种问题背后，依然是，透露着学习方法的不对劲：提问的同学懒得debug。在计算机领域，debug近乎和实践是一个意思。如果只是把材料上的代码“抄”一遍，这不叫实践，这叫抄代码。小学生也能做。但是“抄”一遍，不小心没抄对，发生了错误，然后自己一点一点调试，找到错误的根源，这叫真的实践。小学生不能做。（当然，自己理解了算法的逻辑，按照自己的理解，把算法写出来，才是终极目的：）&lt;/p&gt;
&lt;p&gt;不过很多同学不喜欢debug，我当然理解。其实谁都不喜欢debug，但是，debug才是最重要的能力。通常在一个领域里，你最不喜欢做的事情，就是这个领域的核心竞争力！我见过的所有计算机领域的“高手”，不管是在哪个细分领域，都无一例外，是个debug好手。我经常告诉大家，在实际工作中，其实debug的时间要占你真正编程时间的70%。如果你做一个项目，根本不需要debug，要么是你的项目对你来说太简单了，要么是你根本没有接触到这个项目的核心。&lt;/p&gt;
&lt;p&gt;debug不仅仅是找到代码错误，解决错误的手段，其实更是一个重要的学习手段。通过debug，看看自己写的程序执行逻辑，哪里和自己设想的不一致？再回头看自己哪里想错了，或者想漏了，分析一下自己为什么想错了，或者想漏了，等等等等，依然是，进步就是发生在这个过程的。&lt;/p&gt;
&lt;p&gt;在我的算法课程中，很多同学对递归想不明白，我的建议都是：用一个小数据量，一步步跟踪程序，看看程序到底是怎么运行的。通常这么做，1个小时的时间，就足以让你深刻理解递归程序的运转逻辑。可是，很多同学懒得花这1个小时的时间，最终的结果是，花了一个下午，对着代码生看，硬想，最终还是没有理解程序的运转逻辑。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;8）量变到质变。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;还有很多同学，对于算法的一些问题，会问：老师，你是怎么想到用这样的方法的？对于这类问题，我的回答一般都是：你见的还不够多。&lt;/p&gt;
&lt;p&gt;不知道是不是受高中阶段学习的影响，有一些同学特别执着于就着一个单一的问题，寻找其中的“解题路径”。当然，我不是说这是完全错误的，但也有一个“度”。我的经验是：与其把时间花在这里，不如去见更多问题。比如动态规划，是算法学习的一个难点，很多同学在学会了背包问题的解法之后，总是执着于去追寻：是怎么想到这种状态定义的方法的。可能是我个人水平有限，我无法清楚地解释是如何想到这种状态定义的方法的。但是我的经验告诉我：再去看，去实践100个动态规划相关的问题，然后回头看背包问题，你会发现这种状态定义的方式非常自然。仅仅对着一个问题思考，很多时候都是死胡同。你见识的还不够多，就不足以帮助你总结出更加“普遍”的问题解决的规律。当你见得足够多的时候，一切就都变得很自然，所谓的“量变到质变”。&lt;/p&gt;
&lt;p&gt;不过，大多数同学在这个环节都会“犯懒”，企图通过一个问题就理解问题的本质，这其实和企图通过一本教材就精通一个领域的想法是一样的，是不现实的，不可能的。同时，这里又包含着学习过程中的“完美主义”的思想，遇到一个问题一定要把它想的无比透彻。但是我的经验告诉我：大多数问题，其实都是需要“回头看”的。随着你对一个领域理解的越深入，回头再去看那些曾经的问题，都会产生新的视角，对于很多曾经想不明白的问题也豁然开朗。这也是“进步”的根源。如果卡在一个问题上不前进，不给自己“回头看”的机会，甚至最后是放弃了，就什么也没有学会了。&lt;/p&gt;
&lt;p&gt;所以，很多时候，你发现对一些问题“百思不得其解”，或许不是因为自己“笨”，而是因为“还不够努力”：）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;9）最后，一定要相信时间的力量。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;有一天，在我的一个算法课程群里，有个滴滴的后端大神发招聘，结果大家七嘴八舌的就议论开了，大致主题思想就是：自己什么时候能够成为滴滴的后端大神。这位滴滴的后端大神今年32岁；大多数议论的同学，其实连22岁都不到。我告诉他们，其实10年后，你们就是大神。&lt;/p&gt;
&lt;p&gt;这其实很好理解，回想十年前，也就是12岁的你，和现在的你比较，是不是天壤之别？如果把你扔到一堆12岁的小朋友中间，22岁的你是不是就是个大神？同理，32岁的人，已经在业界摸爬滚打了那么多年，扔回到22岁的大学生中间，当然是大神：）&lt;/p&gt;
&lt;p&gt;很多时候，所谓的“大神”并不神秘，仔细观察他们的经历，会发现时间有着不可磨灭的作用。只要你没有虚度时间，每天都在进步，通常结果都不会太差的。如果再加上一点点机遇，就是大神。&lt;/p&gt;
&lt;p&gt;愿大家也早日成为大神。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;大家加油！&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2018/2018-04-18/readme.md" rel="alternate"/></entry><entry><id>2018/2018-02-06/readme.md</id><title>据说是世界上第一门探讨“强人工智能”的公开课，开课了！</title><updated>2018-02-06T00:00:00-07:00</updated><content>&lt;h2&gt;据说是世界上第一门探讨“强人工智能”的公开课，开课了！&lt;/h2&gt;
&lt;p&gt;强人工智能一直是人工智能领域追求的终极目标，也是各路科幻作品一直以来探讨的主要问题。&lt;/p&gt;
&lt;p&gt;所谓的强人工智能，是相对弱人工智能而言的。弱人工智能，是指只可以完成特定任务的智能。无论是已经发展相对成熟的语音识别，数字识别，文字识别；还是仍然在发展中的自动翻译，图像识别；无论是大红大紫的AlphaGo，还是万众瞩目的无人驾驶，其实都是弱人工智能。他们都只解决一个特定问题。很显然，这和我们人类拥有的智能极其不同。人类不仅可以在极短的时间内，通过极小的样本学习，掌握极其复杂的知识（甚至人类自己都不自知）；还能够同时处理多个极度复杂的任务。我们可以一边安全的过马路，一边构思一个文学作品；或者一边驾驶汽车，一边盘算到达了目的地以后要如何行动；更不用说一边欣赏艺术作品，一边将艺术作品中的情境融合进自己的生活经验中，产生出属于每个人不同的主观体验这样的高级的“认知加工”。上述举的例子，随便拿出一个，当下的弱人工智能完成起来都是极度费劲的，更不用提强人工智能了——可以将这些任务综合起来，把所谓的“意识”，“感性”，“知识”，“自觉”，“创造”等人类的特征连接起来，表现出具有一般智慧行为的能力。&lt;/p&gt;
&lt;p&gt;如果上述的解释太晦涩，那么一言以蔽之，强人工智能，就是制造一个和人类拥有同样智慧能力的机器人。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;通常我们说的强人工智能，英文可以叫Strong AI，这个名字很直白，但是它有另外一个名字：Artificial General Intelligence，简称AGI，一般中文翻译成“通用人工智能”。这个翻译虽然是对的，但我总觉得有些生硬。这里的General，其实就是和Specific相对应的。是指这种人工智能不仅仅是用来完成特定任务的，而是拥有”通用“的智慧，可以处理任何一般性的任务。像人类一样。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;一般认为现代人工智能起源于1950年代中期，最早的一批研究者不仅相信强人工智能是可以实现的，而且是在20年内就能实现的。现在看来，那批人图样图森破。事实上，1970年，大部分人工智能领域的研究者已经意识到了之前自己或者先驱者们的乐观，强人工智能的难度超乎大家的想象。不要说强人工智能了，很多对人类简单至极的任务，做成弱人工智能似乎都存在着巨大的瓶颈。到了八九十年代，甚至迎来了人工智能市场崩塌的日子。科学家们承诺的智能根本没有出现，而且看上去遥遥无期，很多人甚至将人工智能领域的研究者和骗子划上了等号。大众不再幻想强人工智能降临的日子，虽然科幻小说家们依然孜孜不倦地探讨着强人工智能来临之时，人类社会可能面临的诸多问题。而且，不少作品成为了传世名作。&lt;/p&gt;
&lt;p&gt;在最近的几年，随着计算机性能的突飞猛进，深度学习方法的出现，以及深度学习在几个领域上的应用都被证明”有效“，人工智能领域又被注入了新的活力。社会上普遍又开始关注起了人工智能。这轮关注，甚至让很多人工智能研究者都害怕。毕竟，希望越大，失望越大。大多数人工智能从业者都坦言：我们离强人工智能还远，还很远很远。我想，这也是一个行业的成熟标志：知道自己能力的局限性。50年代人工智能研究者的豪言壮语，现在看来就像没接触过世界的小孩子，扬言要拯救宇宙一样。我们都是这么过来的：）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;但尽管如此，仍然有很多人不很理解当下人工智能发展的边界。于是，MIT推出了一个新的公开课程，被称为是：世界上第一门探讨“强人工智能”的公开课。当然了，如前所述，我们离强人工智能还很远，所以这个课程探讨的不是具体技术，而是从各个方面各个角度来说明一个问题：&lt;strong&gt;我们离强人工智能到底还有多远。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;现在，课程的第一节已经放出来了，一个约50分钟的视频，对课程主要探讨的内容进行了一个综述，展望了一下后续每一节课要探讨的具体内容。后续每一节课的内容，都会请来一位业界大咖，从自己的研究领域的角度，讲述一下”强人工智能“这个话题。整体提纲还是很激动人心的，目前来看演讲的主题都是比较前沿的领域。而且课程肯定不涉及具体技术，主要是概念性的介绍，但又肯定不会像科技媒体的报道那么浮夸。聊到科技媒体，在第一节的视频里，主讲人黑了一下现在的媒体：&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;Google的实习生写一个loop：&lt;/p&gt;
&lt;p&gt;&lt;img alt="google-intern" src="https://github.com/liuyubobobo/my-blog/raw/master/2018/2018-02-06/google-intern.png" /&gt;&lt;/p&gt;
&lt;p&gt;媒体表示，Google的AI自主创造出了新的AI！&lt;/p&gt;
&lt;p&gt;&lt;img alt="media" src="https://github.com/liuyubobobo/my-blog/raw/master/2018/2018-02-06/media.png" /&gt;&lt;/p&gt;
&lt;p&gt;黑得非常形象生动：）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;Anyway，最后，我们来看一下课程大纲包含的内容：&lt;/p&gt;
&lt;p&gt;&lt;img alt="1" src="https://github.com/liuyubobobo/my-blog/raw/master/2018/2018-02-06/1.png" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Josh Tenenbaum: Computational Cognitive Science&lt;/p&gt;
&lt;p&gt;计算神经科学&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="2" src="https://github.com/liuyubobobo/my-blog/raw/master/2018/2018-02-06/2.png" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Ray Kurzweil: How to Create a Mind&lt;/p&gt;
&lt;p&gt;如何创建思维&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="3" src="https://github.com/liuyubobobo/my-blog/raw/master/2018/2018-02-06/3.png" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Lisa Feldman Barrett: Emotion Creation&lt;/p&gt;
&lt;p&gt;情感创造&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="4" src="https://github.com/liuyubobobo/my-blog/raw/master/2018/2018-02-06/4.png" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Nate Derbinsky: Cognitive Modeling&lt;/p&gt;
&lt;p&gt;认知建模&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="5" src="https://github.com/liuyubobobo/my-blog/raw/master/2018/2018-02-06/5.png" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Andrej Karpathy: Deep Learning&lt;/p&gt;
&lt;p&gt;深度学习&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="6" src="https://github.com/liuyubobobo/my-blog/raw/master/2018/2018-02-06/6.png" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Stephen Wolfram: Knowledge-Based Programming&lt;/p&gt;
&lt;p&gt;基于知识的编程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="7" src="https://github.com/liuyubobobo/my-blog/raw/master/2018/2018-02-06/7.png" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Richard Moyes: AI Safety and Autonomous Weapon Systems&lt;/p&gt;
&lt;p&gt;智能安全且自治的武器系统&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="8" src="https://github.com/liuyubobobo/my-blog/raw/master/2018/2018-02-06/8.png" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Marc Raibert: Robotics&lt;/p&gt;
&lt;p&gt;机器人学&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="9" src="https://github.com/liuyubobobo/my-blog/raw/master/2018/2018-02-06/9.png" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Ilya Sutskever: Deep Reinforcement Learning&lt;/p&gt;
&lt;p&gt;深度增强学习&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="10" src="https://github.com/liuyubobobo/my-blog/raw/master/2018/2018-02-06/10.png" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Human-Centered Artificial Intelligence&lt;/p&gt;
&lt;p&gt;以人为中心的人工智能&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;是不是觉得非常酷？最后附上课程链接：&lt;a href="https://agi.mit.edu/"&gt;https://agi.mit.edu/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这个时代真好，轻松接触到世界上最前沿的内容。&lt;/p&gt;
&lt;p&gt;大家加油！&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2018/2018-02-06/readme.md" rel="alternate"/></entry><entry><id>2018/2018-02-03/readme.md</id><title>为什么别人比你早那么多知道比特币？洞悉未来的科技媒体——《连线》</title><updated>2018-02-03T00:00:00-07:00</updated><content>&lt;h2&gt;为什么别人比你早那么多知道比特币？洞悉未来的科技媒体——《连线》&lt;/h2&gt;
&lt;p&gt;很多同学可能都有感触，或者叫困惑。对于一些科技上的热点趋势，热点技术，为什么别人比你早这么多了解到？这些人是通过什么渠道洞见这些未来的趋势的？&lt;/p&gt;
&lt;p&gt;今天，我就为大家推荐一家著名的科技媒体，一家洞悉未来的科技媒体——&lt;strong&gt;Wired。中文翻译成《连线》&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;和一般科技媒体报道各种创业公司的八卦新闻不同，在我看来，&lt;strong&gt;Wired是一个面向未来的科技媒体&lt;/strong&gt;。关注科技新闻的同学，应该很熟悉著名的未来学家凯文.凯利吧？他就是《连线》杂志的主编出身。他出版的几本书，《失控》，《科技想要什么》，《必然》，虽然在市面上的评价褒贬不一。但是我是很推崇的。不管批评家怎么说，至少从我的角度看，阅读的过程确实充满了思维的乐趣，让我看到了很多未曾思考的问题，脑子中多了许多不曾有过的角度。我想，这就足够了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;说Wired是一个面向未来的科技媒体，还有一个例子。或许大家都知道中国的比特币第一人李笑来先生。他是怎么知道的比特币这个东西的？答案就是《连线》。他曾经这样叙述这个过程：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2011年年初，《连线》杂志上刊登了一篇文章，讲述的是某种电子货币兑换美元的比率超过了1:1，而且该电子货币还是个开源软件！&lt;/p&gt;
&lt;p&gt;如果说有人发布了一个开源电子货币系统，那只能被称为“试验”，可一旦这个东西真的开始流通，并且居然可以与美元相互兑换甚至比率超过1:1的时候，它就应该升级为“实验”了。&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;我从网上下载了比特币发明者中本聪的论文，从头至尾反复研读了若干遍。&lt;/p&gt;
&lt;p&gt;在我一点点搞清楚的过程中，比特币的价格早就超过了3美元。我突然意识到这是一场越早参与就越划算的实验，因为它本身就是钱。时间就是比特币。于是，我卖掉了一部分当时被整个市场看好的苹果公司股票，在Mt. Gox上开了个账户，以每个平均6美元的价格，购入了2100个比特币。&lt;/p&gt;
&lt;p&gt;当时，我的想法非常简单，如果这场实验成功了，我自己将拥有一个经济规模的万分之一，那一定是很酷的事情！&lt;/p&gt;
&lt;p&gt;一切来得太快，在我购入2100个比特币之后两周之内，也就是2011年6月初前后，比特币价格上涨到每个22美元……我的1.2万美元已经变成了4万多美元！我相信所有商品的价格背后都有心理因素存在。我有点儿害怕了，害怕失去几天之内“赚到”的3万美元。于是，我开始着手一点一点地卖出。等我卖掉1 500个的时候，其价格已经达到每个28美元！也就是说，我只是点了点鼠标，手里就多出了3万美元，而且我还有600个比特币！&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当然，李笑来先生的成功不能完全归功于《连线》。毕竟应该还有很多人看到这篇报道，但是不以为然；还有很多人注意到了，但是没有认真研究一下中本聪的论文；还有很多人研究了中本聪的论文，但是没有去买币；还有很多人买币了，但是手头资金不充裕，买的很少... 等等等等。后续的这一系列行动，都是李笑来先生走到今天的关键步骤。但是，我在这里注重的是这一系列行动的源头：《连线》。毕竟，没有这个源头，就没有后续的一系列。&lt;/p&gt;
&lt;p&gt;倒不是说《连线》提及比特币有多么伟大，我很感兴趣的是《连线》选择提及比特币这个事物的时间点：在比特币和美元的汇率是1:1的时候。如同李笑来先生所说，这个时间点是一个临界点，它意味着点儿什么。这点儿意味，被《连线》捕捉到了。它没有那么激进，在比特币刚刚出现的时候（2008年中本聪发布的白皮书）就大肆宣扬；也没有那么后知后觉，在别人都大谈特谈比特币的时候再跟风报道（一般媒体是在2013年大肆报道比特币的，那一年比特币突破了1000美元。）个人认为，《连线》杂志是一家拥有自己独到思考的科技媒体。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;他本身就是那个风，别人在跟它。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我也不是神话《连线》。《连线》有他的局限性。通常探讨的内容比较“虚”，探讨概念性的，方向性的内容比较多。如果你想看一些具体的技术，或者业内动态，还是需要有其他媒体的补充。而且，探讨这些比较“虚”的内容，难免会有模糊的的论述和观点。在事后，可能被证实是错误的。但是，私以为，《连线》一定能给你带来不少惊喜，提前看看大家对未来的猜想：）&lt;/p&gt;
&lt;p&gt;当然了，对于同样的信息，看到以后怎么理解，怎么诠释，又要怎么行动，这是另外一个话题了。而且，这个问题比“什么IT咨询网站最好”这个问题，要有意义得多：）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;最后，附《连线》网站网址：&lt;a href="https://www.wired.com/"&gt;https://www.wired.com/&lt;/a&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2018/2018-02-03/readme.md" rel="alternate"/></entry><entry><id>2018/2018-01-30/readme.md</id><title>随便聊聊比特币和区块链</title><updated>2018-01-30T00:00:00-07:00</updated><content>&lt;h2&gt;随便聊聊比特币和区块链&lt;/h2&gt;
&lt;p&gt;最近，关于比特币和区块链终于有点儿风平浪静的意思了，朋友圈和公众号里似乎不再有各种区块链入门指南了。所以，我来凑热闹了：）&lt;/p&gt;
&lt;p&gt;这篇文章不是一个系统地发表我对比特币和区块链的思考的文章，也不是介绍技术的文章。更多的是杂乱无章的思考。所以不想看碎碎念的同学，已经可以关闭了：）&lt;/p&gt;
&lt;p&gt;1）&lt;/p&gt;
&lt;p&gt;我是在2013年第一次接触比特币的。这个时间点其实很尴尬，不早也不晚。所以在新人面前，我不敢说自己是老人；在老人面前，我对这个新事物的嗅觉，和他们差了5年。2008年，中本聪发布的比特币白皮书。有意思的是，不知道是历史的巧合还是中本聪有意为之，2008年恰恰是美国金融危机爆发的年头。而如果区块链技术在那时就可以得到应用，这场金融危机完全可以避免。&lt;/p&gt;
&lt;p&gt;2）&lt;/p&gt;
&lt;p&gt;对于比特币，我不是一个炒币者，也不是一个区块链技术痴迷者。我介乎于在这二者之间。这是好听的说法，不好听的说法就是：我既不精通币圈炒币之术；又不精通区块链技术。这么多年有买有卖，手里还剩点存货。不过我认识的朋友里有币圈”精英“，我认为他在2017年的收益绝对是1000万这个级别的。&lt;/p&gt;
&lt;p&gt;3）&lt;/p&gt;
&lt;p&gt;在过去的一个月，以比特币为首的各路电子货币一路下跌，跌幅近乎都达到了50%。很多人欢欣鼓舞。我当然很理解这种欢欣鼓舞。我也是很”仇富“的人：）不过，我在这个公众号，4个月以前就发表过一个观点：&lt;/p&gt;
&lt;p&gt;&lt;img alt="ico" src="https://github.com/liuyubobobo/my-blog/raw/master/2018/2018-01-30/ico.png" /&gt;&lt;/p&gt;
&lt;p&gt;再用文字版转一下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;最近一个大新闻是国家对ICO定性为非法融资，我的朋友圈里大部分声音都是叫好，但原因似乎是因为他们觉得投资了电子货币的人马上就要倾家荡产了。且不说ICO和电子货币完全是两回事儿，但真正让我感慨的是：接受新事物到底有多难。或许此刻的我们，和曾经因为抵制uber罢工的出租车司机没有什么不同。对这个事情，我也“叫好”，不过是因为我认为这意味着电子货币在继续融入新秩序的过程中。所有新事物在发展过程中要想获得整个社会的认可，都需要逐步被规范，无论是电，汽车，还是互联网，均是如此。对ICO定性为非法融资，可以理解成是国家对电子货币发行的一种规范。至于这个规范的意义，我想不是“电子货币要玩儿完”，而更多的是“这个事儿大家不要自己搞了，国家队接手了”。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;现在看来，这个说法有欠妥的地方，不够精准。但是我的核心观点没有改变。”电子货币“这个新事物，这个当下看来是区块链技术最大的承载者，让它的价值回归为0，近乎已经是不可能了。这就好比出租车公司再怎么不愿意，uber和滴滴已经在这个市场上站稳了脚跟。就算退一百万步，出现了极度不可思议的事情，这两家公司突然在一夜之间都倒闭了，这种商业形式本身依然会存在下去，直到下一次被另外一个什么玩意儿革命掉。历史很难发生倒退。&lt;/p&gt;
&lt;p&gt;4）&lt;/p&gt;
&lt;p&gt;有意思的是，我发现，和人类世界的革命不同。技术的革命，其实比我们想象的慢。人类的革命，一夜之间，政权变迁。但技术的革命不同。互联网这么多年了，可以说现在计算机毕业的童鞋还在或多或少地享受互联网技术的红利，虽然比10年前少了太多。区块链亦是如此。虽然比特币已经有十年的时间，但我坚信，站在历史的角度，现在还是区块链技术本身太早期的时间。这点值得庆幸，也值得警惕。值得庆幸的是：还有机会，而且是很大的机会；值得警惕的是：温水就是这么煮青蛙的。尤其是现在流行的佛性蛙。&lt;/p&gt;
&lt;p&gt;5）&lt;/p&gt;
&lt;p&gt;有很多同学问过我，要不要投资比特币，我的回答都是：即使是投资保守的人，拿出流动总财产的1%-5%进行比特币投资，没有什么不合适。有的同学问我投资的时机，我的回答都是：短线投资，什么时候都有风险；长线投资，近乎是稳赚不赔。注意，这里我说的是比特币，至于现在世界上存在的这么多不同的电子货币，如果没有深入研究，不建议轻易入坑。&lt;/p&gt;
&lt;p&gt;6）&lt;/p&gt;
&lt;p&gt;很多人可能正在坐看2018年电子货币彻底垮掉。依然是，如3）所述，这近乎不可能发生。历史总是惊人的相似。2000年的互联网泡沫，很多当时所谓的”互联网巨头“轰然倒闭了，到现在连个名字都没有留下。但是18年后回头看，那场泡沫似乎在预示着此后20年互联网行业的蓬勃健康理性的发展。2017年电子货币的走势俨然存在巨大的泡沫，那这个泡沫什么时候破？是现在吗？我不知道。但是我相信，在此之后，”电子货币“也将经历风风雨雨，慢慢走向蓬勃健康理性的发展之路。&lt;/p&gt;
&lt;p&gt;7）&lt;/p&gt;
&lt;p&gt;通过前面的文字，相信大家也知道了，我是比特币的拥护者，区块链技术的支持者。当然，我可能是错的。如果我是错的，前面的话都是废话。这是我的免责声明。如果你看了这篇文章，决定购买比特币，结果在你购买完的那一刹那，全球电子货币市场轰然倒塌... 相信我，我也希望这是我干的，但这真的不是我干的。听上去...更像是你干的：）&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2018/2018-01-30/readme.md" rel="alternate"/></entry><entry><id>2018/2018-01-29/readme.md</id><title>竞赛网站“终于”纷纷做起了教育</title><updated>2018-01-29T00:00:00-07:00</updated><content>&lt;h2&gt;竞赛网站“终于”纷纷做起了教育&lt;/h2&gt;
&lt;p&gt;由于本科是玩儿竞赛的，所以对竞赛网站格外关注。研究生以后虽然不再玩儿竞赛了，但是竞赛网站却越来越多。现在流行的口碑很好的一些竞赛网站，其实大多是后起之秀。不过在观察这些竞赛网站的时候，我一直有一个疑惑：这些竞赛网站为什么不顺便做教育？&lt;/p&gt;
&lt;p&gt;当然了，大多数竞赛网站都有很完善的社区功能，可以让参与者自由的讨论。一般竞赛网站也会在每次竞赛以后，给出一些官方的解题指南。在我印象里，Codeforces，Codechef，Topcoder等网站，每次算法比赛以后，都有较为详实的赛题解析。这些解析非常有帮助，这是无可厚非的。但是，它们的问题是不够“系统”。参与者只能片面地获得某几道题的解题思路。由于缺乏系统的学习和训练，参与者其实很难将这种思路举一反三，用到其他的问题上；甚至由于一些基础知识的缺失，对于很多用户来说，解题指南也是“天书”。怎么才能看懂这些解题指南，这些解题指南是不会说的。这和我说的“教育”还相差甚远。&lt;/p&gt;
&lt;p&gt;我说的“教育”，是指：通过某种方式（视频，文字，以及在线编程）系统地介绍某个领域的知识。在这一点上，竞赛网站和教育网站似乎一直是分离的。所有网站中，我觉得做的尚可的，是非常老牌的竞赛网站UVa。国内玩儿ACM竞赛的童鞋应该一定购买过刘汝佳的《算法竞赛入门经典》，这套书一共两本，其中全部练习题，都可以在UVa的一个专区中找到并进行编程实践。&lt;/p&gt;
&lt;p&gt;&lt;img alt="book" src="https://github.com/liuyubobobo/my-blog/raw/master/2018/2018-01-29/book.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;不过大家可能有所不知的是：国外也有一本超经典的算法竞赛书籍，叫《Competitive Programming 3: The New Lower Bound of Programming Contests (Steven &amp;amp; Felix Halim)》。这本书目标更明确，就是给参加ACM竞赛的童鞋准备的。书中包含海量的习题（真的是海量。。。），这些问题也全都可以在UVa的网站上找到并进行实践。但是，这种教育和竞赛网站结合的方式，一方面是依靠发布实体书籍实现的，不完全是“在线教育”；另外，教学内容也主要是算法竞赛，难度偏大。&lt;/p&gt;
&lt;p&gt;下图为 Competitive Programming 3 这本书的封面。这里的3不是这套书有三本，而是这是这本书的第三版。我也不知道为什么这么起名...：）&lt;/p&gt;
&lt;p&gt;&lt;img alt="book2" src="https://github.com/liuyubobobo/my-blog/raw/master/2018/2018-01-29/book2.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;今年，刚进入2018年，就听到了两个“好”消息。这两个消息在IT圈儿内看都是“小消息”，但不知道为什么，我却觉得很激动。就是两大竞赛网站，终于开始做教育了。&lt;/p&gt;
&lt;p&gt;第一个网站是大名鼎鼎的Leetcode。相信Leetcode我不用太为大家介绍了——算法面试刷题必去的网站。基本上把Leetcode上Medium级别的题目都刷了，不管是哪个公司的算法面试，都小菜一碟。不过这一年半，Leetcode特别“努力”，题目量直接飙到了近800。两年前刷通Leetcode还是一个合理的目标（只有200多道题），但是现在，由于题目太多，刷通Leetcode已经有些太耽误时间，甚至是不切实际，没有必要的了。尽管如此，Leetcode中的早期经典问题还是非常值得参考的。&lt;/p&gt;
&lt;p&gt;现在，Leetcode网站多了一个新的"Explore"的标签。点击后，就可以看见Leetcode全新的“教育板块”。这里分两部分内容。第一部分内容是以公司命名的Interview版块儿，基本上就是把Leetcode上各家不同公司的面试题做一个集结。&lt;/p&gt;
&lt;p&gt;&lt;img alt="leetcode-explore" src="https://github.com/liuyubobobo/my-blog/raw/master/2018/2018-01-29/leetcode-explore.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;以Google版块儿为例，打开就是这个样子的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="leetcode-google" src="https://github.com/liuyubobobo/my-blog/raw/master/2018/2018-01-29/leetcode-google.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;大家可以看到，这个版块儿本质其实还是在线编程问题的一个“分类汇总”，“教育味儿”不够浓。但是另外一个板块就明显很教育了，叫做Learn。现在暂时只有三个专题，是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="leetcode-learn" src="https://github.com/liuyubobobo/my-blog/raw/master/2018/2018-01-29/leetcode-learn.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;很明显，每个专题是讲解一个具体的数据结构的。打开其中一个Binary Tree瞅瞅，是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="leetcode-binary-tree" src="https://github.com/liuyubobobo/my-blog/raw/master/2018/2018-01-29/leetcode-binary-tree.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;虽然，这个教育形式其实比较“粗糙”，和教育网站不能比，但我依然很欣喜。因为竞赛网站终于开始“做教育”了。我一直认为，参加竞赛是必须严密地和学习结合起来的。可惜大多数时候，我们学习和竞赛的平台是分离的。现在二者如果能够有机的合二为一，将大大降低用户的学习成本。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;如果说Leetcode的“教育”还比较初级，另外一个重量级的竞赛网站Kaggle，在今年推出的Learn模块儿，在我看来就有更浓厚的“教育味儿”了。现在Kaggle的Learn模块儿，一共有4个专题，分别是Machine Learning, R, Data Visualization和Deep Learning，如下：&lt;/p&gt;
&lt;p&gt;&lt;img alt="kaggle-learn" src="https://github.com/liuyubobobo/my-blog/raw/master/2018/2018-01-29/kaggle-learn.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;和Leetcode的只是简单的把题目按照专题汇总，配以一定的文字说明不同，Kaggle的每个专题，都含有大量的解释性文字，甚至还有视频。相比之下，更加像是“小型教材”。同时，一些章节还有小型的练习，充分发挥了竞赛网站的优势。由于时间关系，我还没来得及具体看内容，不能向大家汇报具体“质量如何”，但是“看起来”还是很不错的：）&lt;/p&gt;
&lt;p&gt;&lt;img alt="kaggle-ml" src="https://github.com/liuyubobobo/my-blog/raw/master/2018/2018-01-29/kaggle-ml.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;虽然，这两个网站现在做“教育”的方式，在我看来都很初级，和老牌的教育网站，诸如Coursera, Edx, Udemy，（还有慕课网）一类的没法比。但是，这是一个好苗头。竞赛网站深入介入教育领域，可以更加方便的将教学和实践结合起来，个人认为有极大的潜力，会适合一大批同学，更是很多竞赛选手备战竞赛的福音：）&lt;/p&gt;
&lt;p&gt;在这里和大家推荐一下，建议有兴趣的同学，不妨试试看：）&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;好了，写这篇文章的真实目的来了。&lt;/p&gt;
&lt;p&gt;在这里，我为大家介绍的两个竞赛+教育的网站，都是英文网站。相应的，他们的教学内容也是全英文的。其实，相信很多同学都了解，大量的非常棒的教学资源，都是英文形式的。至于中文翻译，通常都存在或者翻译的太慢，或者干脆没有翻译，或者由于翻译者的水平原因，使得阅读者会产生不必要的理解障碍。在这个信息爆炸，教育资源丰富的年代，可以说，英语优秀的同学，将拥有极大的学习优势。&lt;/p&gt;
&lt;p&gt;我在和很多同学交流的过程中，发现很多同学都清醒地了解这一点，也有很强的学习好英语的意愿，但是就是不知道如何学好英语，或者畏惧学习英语，或者一直在使用非常错误的英语学习方法（最典型的就是只是非常机械的背单词。。。）&lt;/p&gt;
&lt;p&gt;对此，我一直非常想帮助大家，提供给大家一些英语上的学习指导。同时，我还希望能够结合程序员这个群体，让大家在学习英语的过程中，有一定的专业提升。其实，国内英语学习的一个最大的误区，就是把英语当做一个学科来学习，而不是把英语当做一种语言工具去应用。这导致了大家摸索出了很多“阅读理解的技巧”，却不能真正理解阅读的内容；背了很多单词，但是在具体的语境中出现这些单词，却又不认识 :-(&lt;/p&gt;
&lt;p&gt;不过，我现在不是很确定如何为大家提供英语上的帮助更好。英语不像计算机，有很多“知识点”可以讲解（其实有很多知识点，但是我坚信大部分所谓的知识点的讲解，并不是大家当务之急所需要的英语学习内容。）英语更重要的是要大家投入时间，坚持不断的去“使用”。刚开始，我想聚焦在“阅读”上，以让大家能够相对无障碍的阅读原版技术书籍为目标。我可以为大家提供合适难度水平的材料，一些宏观的学习方法的介绍。但是更具体的，大家认为自己还需要什么样的指导，服务，或者组织形式？希望大家给我留言，在这个文章下留言或者在我公众号直接给我消息都可以，我希望听到更多大家学习英语的困惑或者希望，更好的帮助大家：）&lt;/p&gt;
&lt;p&gt;谢谢！&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2018/2018-01-29/readme.md" rel="alternate"/></entry><entry><id>2018/2018-01-22/readme.md</id><title>Javascript框架汇总，一次认清当下最流行的前端框架</title><updated>2018-01-22T00:00:00-07:00</updated><content>&lt;h2&gt;Javascript框架汇总，一次认清当下最流行的前端框架&lt;/h2&gt;
&lt;p&gt;前端童鞋，或者是想要进入前端领域的童鞋，可能最头疼的就是当下有辣么多Javascript的框架，要如何选择？2018年1月16日，国外前端大神John Hannah干了一件大事儿，把当下的前端框架进行了一次汇总。这个汇总清单里包含了近乎当下所有的Javascript框架（不包含已经弃用的框架），同时，他详细的列出了每一个框架的优缺点。目测John神还在维护这个工程，最近一次更新就是今天（2018年1月21日）。&lt;/p&gt;
&lt;p&gt;在其中，最引人注明的应该就是被John神称为The Big Three的三大Javascript框架了。他们分别是：React，Angular和Vue.js。现阶段的前端工作者，近乎一定要掌握这三者之一。同时，想要进军前端的同学，特别是想要找工作的同学，从这三个框架之一入手不会出啥错。当然了，技术的发展是动态的，明年就不一定了。&lt;/p&gt;
&lt;p&gt;至于这三者的比较，John神也给出了一幅图，以这三个框架的下载量作为流行度指标，看过去6个月这三个框架的流行度。结果是React遥遥领先；Angular次之；Vue.js最后。当然了，这个统计不一定适用于国内市场，仅供参考。&lt;/p&gt;
&lt;p&gt;下图蓝色为React；绿色为Angular；橙色为Vue.js：&lt;/p&gt;
&lt;p&gt;&lt;img alt="compare" src="https://github.com/liuyubobobo/my-blog/raw/master/2018/2018-01-22/compare.png" /&gt;&lt;/p&gt;
&lt;p&gt;至于这份完整的框架汇总，参见下图。由于时间有限，我没有将John神总结的每一个框架的优缺点翻译过来，感兴趣的同学可以点击&lt;a href="https://jsreport.io/the-ultimate-guide-to-javascript-frameworks/"&gt;阅读原文&lt;/a&gt;，跳转到John神的原文详细观摩。&lt;/p&gt;
&lt;p&gt;&lt;img alt="detail" src="https://github.com/liuyubobobo/my-blog/raw/master/2018/2018-01-22/detail.png" /&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2018/2018-01-22/readme.md" rel="alternate"/></entry><entry><id>2017/2017-12-24/readme.md</id><title>我给慕课网的讲师聚会出了四道算法题：）</title><updated>2017-12-24T00:00:00-07:00</updated><content>&lt;h2&gt;我给慕课网的讲师聚会出了四道算法题：）&lt;/h2&gt;
&lt;p&gt;慕课网今天举办了一个讲师Party，由于人在美国，各种原因（其实就是没钱），非常遗憾不能参加。慕课网的BD小姐姐跟我说，Party上有一个环节，抢答问题拿大奖。问我能不能出几道算法问题，作为抢答题。虽然我觉得这事儿特得罪人，但还是欣然答应了。一方面，谁让这是小姐姐的请求呢？另外一方面，谁让我不能参加呢？[手动斜眼笑]&lt;/p&gt;
&lt;p&gt;于是，我连抄带编，弄出了四道题。&lt;/p&gt;
&lt;p&gt;在这里，我将这四个问题发布在我的公众号上，有兴趣的同学可以看一看。也欢迎大家在我的公众号里留言答题。我会联系最先全部答对的几个同学，发个小红包，喜庆喜庆。当然了，由于出题的导向是抢答题，所以题目的计算难度都很低，属于小学生口算水平，难度主要在思维层面。这类题本身就难出，所以题目的原创性并不高。如果有一些同学以前见过类似或者同样的问题，求轻拍。大过节的，就是图个乐呵，别太认真：）&lt;/p&gt;
&lt;p&gt;当然，如果有些同学没有见过类似的问题，过一阵子，我会再发表所有问题的详细解答，希望大家也能学到一点点东西。不过这种偏智力的问题，在我看来其实属于雕虫小技，扎扎实实打好算法基本功，才是王道啊！&lt;/p&gt;
&lt;p&gt;好了，游戏开始！&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;慕课网筹办了一个消费积分抽大奖的活动，每使用250积分，就可以进行一次抽奖，有50%的概率获得iPhoneX大奖！bobo老师呕心沥血，在课程问答区回答问题，终于攒够了500积分，可以抽两次大奖。请问bobo老师获得iPhoneX的概率是多少？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;小慕有8枚硬币和一个天平。8枚硬币中有一个假币，假币比真币轻。请问至少需要使用天平称量多少次，才能够确定哪一枚是假币？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;小慕非常淘气。有一次他玩儿了这么一个游戏。楼道里有100盏灯，编号为1，2，3，...，99，100（即从1到100），相应有100个开关控制这些灯。&lt;/p&gt;
&lt;p&gt;灯最开始都是关着的。&lt;/p&gt;
&lt;p&gt;小慕首先把所有的灯都打开了；&lt;/p&gt;
&lt;p&gt;然后又按了一遍所有编号为2的倍数的灯的开关（2，4，6，8，...，100）；&lt;/p&gt;
&lt;p&gt;然后又按了一遍所有编号为3的倍数的灯的开关（3，6，9，12，...，99）；&lt;/p&gt;
&lt;p&gt;然后又按了一遍所有编号为4的倍数的灯的开关（4，8，12，16，...，100）；&lt;/p&gt;
&lt;p&gt;以此类推，&lt;/p&gt;
&lt;p&gt;最后按了一遍所有编号为100的倍数的灯的开关（只有100号灯一盏灯编号为100的倍数）&lt;/p&gt;
&lt;p&gt;问，最后楼道里还亮了几盏灯？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;小慕是一个计算机天才，在他眼里，所有的数字都是二进制的形式。比如3，在小慕看来是11；6，在小慕看来是110。&lt;/p&gt;
&lt;p&gt;小慕最近刚学习了加法，但是没有学会进位。所以他计算加法的时候，是将数字看做二进制，然后进行没有进位的加法。&lt;/p&gt;
&lt;p&gt;比如3+3，在小慕看来是11+11=0，因为没有进位，如下：&lt;/p&gt;
&lt;p&gt;```
   11
+  11&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;00
```&lt;/p&gt;
&lt;p&gt;再比如6+3，在小慕看来是110+11=5(二进制为101)。如下：&lt;/p&gt;
&lt;p&gt;```
  110
+  11 &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;101
```&lt;/p&gt;
&lt;p&gt;圣诞节，bobo老师拿到了八盒糖，分别有2盒装有1块儿糖；2盒装有2块儿糖；2盒装有4块儿糖；2盒装有8块儿糖。&lt;/p&gt;
&lt;p&gt;问，狡猾的bobo老师最少怎么分给小慕糖盒儿，小慕会得到最少的糖，但是在小慕眼里，还是公平的？&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2017/2017-12-24/readme.md" rel="alternate"/></entry><entry><id>2017/2017-11-28/readme.md</id><title>头疼链表？搞懂这18个斯坦福大学整理的和链表相关的问题，就再也不怕了</title><updated>2017-11-28T00:00:00-07:00</updated><content>&lt;h2&gt;头疼链表？搞懂这18个斯坦福大学整理的和链表相关的问题，就再也不怕了&lt;/h2&gt;
&lt;p&gt;链表属于极其经典的数据结构之一，大家在学习数据结构的时候，一定学习过链表这种数据结构。虽然在实际生产环境中手写链表的场景并不多，但是链表依然是非常有用的一种数据结构，在很多语言的底层有着不可替代的作用。&lt;/p&gt;
&lt;p&gt;最最重要的是，链表是笔试面试或者各种计算机水平考察中的常客。为什么？&lt;/p&gt;
&lt;p&gt;首先，因为链表拥有着极其简单的结构，但却能引申出相当复杂优美的算法思想。这是因为同二叉树一样，链表也拥有着天然的递归性质！每一个链表节点的next，链接的是一个更小的链表！这使得近乎所有对链表的操作，都可以使用递归的方式完成。只不过由于链表天然是线性的，非常方便迭代遍历，使得很多人忽视了链表的递归性质。我个人认为，同二叉树一样，对于所有的链表的问题，在学习阶段，都有必要使用递归和非递归两种方式完成。这个过程将大大加深对递归的理解。很多同学会问我很多和二叉树相关的递归问题，但这些问题其实在链表中也是同样成立的。究其根本，是从链表的学习开始，就对递归没有建立深刻的认识。&lt;/p&gt;
&lt;p&gt;另一方面，操作链表将不可避免的操作指针（C++中的指针，其他语言中的引用）。对指针或者引用这个概念的熟练掌握，是使用任何编程语言都逃不过的概念。而链表本身，提供了一个结构简单，却又能充分理解实验这个概念的最佳场所。&lt;/p&gt;
&lt;p&gt;怎么学习链表？大多数数据结构教材都会对链表进行充分的讲解，并且辅以相关的练习题。但是很多教材中和链表相关的练习稍显混乱，显得不成体系。斯坦福大学的计算机系整理了一份和链表相关的18个问题，充分编程实践这18个问题，基本就可以说把“链表”这个知识点打通关了。我个人建议，对于还处于基础学习阶段的同学，对下列问题中的大多数问题，都可以思考使用递归和非递归两种方式完成。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;这18个问题如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Count&lt;/strong&gt; 计算链表的节点个数；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;GetNth&lt;/strong&gt; 获得链表第n个节点的值；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;CreateList&lt;/strong&gt; 根据数组（或者标准输入）创建链表；&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;DeleteList&lt;/strong&gt; 释放一个链表的所有节点空间（C++）；&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Push&lt;/strong&gt; 向链表头插入一个新节点；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Pop&lt;/strong&gt; 删除链表的第一个节点并返回； &lt;/p&gt;
&lt;p&gt;注意：我们可以将链表看做是一个队列，此时，向链表的头或者尾插入或者删除元素，就可以衍生出两个Push实现和两个Pop实现。大家也可以显示地将这四个方法命名为addFirst, addLast, removeFirst, removeLast（参考Java中的命名方式），并据此封装底层基于链表的栈，队列，双向队列等等线性数据结构：）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;InsertNth&lt;/strong&gt; 在链表的第n个位置插入一个新节点；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;SortedInsert&lt;/strong&gt; 给定一个有序链表，将一个新节点插入到有序链表的正确位置；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;InsertSort&lt;/strong&gt; 使用插入排序法为链表排序；提示：之前实现的SortedInsert有用了：）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Append&lt;/strong&gt; 挂接两个链表；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;FrontBackSplit&lt;/strong&gt; 将一个链表分割成大小相等的两个链表（对于原链表大小为奇数的情况，分割为大小只相差1的两个链表）；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;RemoveDuplicates&lt;/strong&gt; 给定一个有序链表，其中含有重复节点，删除链表中的重复节点，使得每个不同值的节点只有一个；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;MoveNode&lt;/strong&gt; 给定两个链表，Pop出第二个链表的元素，Push进第一个链表；&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;注意：这里的Pop和Push可以根据实际场景使用4中的任意一组定义&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;AlternatingSplit&lt;/strong&gt; 给定一个链表，将他分割成两个链表，其中奇数位置的节点在一个链表，偶数位置的节点在另一个链表；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;提示：之前实现的MoveNode有用了：）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;ShuffleMerge&lt;/strong&gt; 给定两个链表，将这两个链表合并成一个链表，其中一个链表的元素在奇数位，另一个链表的元素在偶数位；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;提示：之前实现的MoveNode有用了：）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;SortedMerge&lt;/strong&gt; 给定两个有序链表，将他们合并成为一个有序链表；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;提示：之前实现的MoveNode有用了：）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;MergeSort&lt;/strong&gt; 对链表进行归并排序；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;提示：实现了FrontBackSplit和SortedMerge，是不是觉得很简单：）当然，也可以尝试一下自底向上的归并排序（非递归的归并排序）。另外，对MergeSort的一个经典优化，是递归到达小数据量的时候，转而使用插入排序法。此时，我们自己写的InsertSort也有用了：）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;SortedIntersect&lt;/strong&gt; 给定两个有序链表，返回一个新链表，新链表中的元素是给定两个链表的公共元素。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;提示：以这个方法为基础，可以封装基于链表的集合类。大家也可以思考一下如何实现其他集合操作，如Union(合并)，Diff(差集)等等。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Reverse&lt;/strong&gt; 反转一个链表&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;RecursiveReverse&lt;/strong&gt; 使用递归的方式反转一个链表&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;提示：最后特意将递归方式翻转链表列出来，是因为这个问题实在是太经典了，充分体现了和链表相关算法的美丽：）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;祝大家早日“链表通关”！&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2017/2017-11-28/readme.md" rel="alternate"/></entry><entry><id>2017/2017-10-24/readme.md</id><title>为什么是1024？</title><updated>2017-10-24T00:00:00-07:00</updated><content>&lt;h2&gt;为什么是1024？&lt;/h2&gt;
&lt;p&gt;10月24日，被中国广大程序员朋友们定为程序员节，据说是因为有一个广大码农都必去的论坛......哦，不不不，据说是因为2^10=1024。（剧透：下文开始一本正经，直到最后才会回归标题的主题）&lt;/p&gt;
&lt;p&gt;但其实，在国际上，被众多科技公司和软件企业真正承认的业内人士程序员节日，是在每年的第256天。这一天是平年的9月13日，闰年的9月12日。&lt;/p&gt;
&lt;p&gt;之所以定在每年的第256天，是因为2^8=256，而在计算机中，每8个比特是一个字节，而字节才是计算机最基本的存储单元。当然了，更重要的原因是2月56日是不存在的：）&lt;/p&gt;
&lt;p&gt;每年的第256天是程序员节，是俄罗斯官方承认的一个节日。这个节日最早是由瓦伦丁·巴尔特（Valentin Balt），并行技术网页设计公司（Parallel Technologies web design company）的一名职员提出的。2002年，他收集签名向俄罗斯联邦政府请愿，请求将这一天定为程序员节。直到2009年，俄罗斯才正式签署法案，通过了这个节日申请。&lt;/p&gt;
&lt;p&gt;有意思的是，在我搜索这家公司的时候，他们的主业已经变成了Data Center和Intelligent Building。好像突然又看到了一段历史的变迁，有种物是人非的感觉。&lt;/p&gt;
&lt;p&gt;&lt;img alt="logo" src="https://github.com/liuyubobobo/my-blog/raw/master/2017/2017-10-24/logo.png" /&gt;&lt;/p&gt;
&lt;p&gt;好了，关于节日介绍完了。因为今天不过节，大家可以放心的继续加班了。不过根据上文的介绍，我们可以再深入研究两个问题：&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;问题1：为什么一个字节是8个比特？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;答案是：&lt;strong&gt;历史原因，而非技术原因&lt;/strong&gt;。历史上，封装字节这个单位的根本原因，是为了对字符 (character) 进行编码。在存储资源很昂贵的年代，26个字母用5个bit就够了（2^4=16；2^5=32），所以，其实，在很长一段时间，计算机的一个字节是5个bit的。是的，顾不上区分大小写了。&lt;/p&gt;
&lt;p&gt;随着技术进步，存储资源慢慢不紧张了，同时，人们需要的字符集数量在扩大，曾经有一个时期，一个字节包含多少个bit是在逐渐上升，6个bit，7个bit，直到IBM在上个世纪80年代奠定了8个bit一个字节的经典PC架构，与之相应的字符编码方案，便是经典的ASC II码了。当然了，现在人们所需要的字符集更大了，不过相应的编码方式，采用在8 bit一个字节的基础上进行扩展。8 bit一个字节就这样约定俗成了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;问题2：某论坛为什么"俗称"1024？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;因为该论坛的新用户，每隔1024秒才能再发新帖。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;祝大家节日快乐!&lt;/p&gt;
&lt;p&gt;&lt;img alt="coding" src="https://github.com/liuyubobobo/my-blog/raw/master/2017/2017-10-24/coding.png" /&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2017/2017-10-24/readme.md" rel="alternate"/></entry><entry><id>2017/2017-10-20/readme.md</id><title>随便聊聊AlphaGo Zero</title><updated>2017-10-20T00:00:00-07:00</updated><content>&lt;h2&gt;随便聊聊AlphaGo Zero&lt;/h2&gt;
&lt;p&gt;AlphaGo Zero已经刷屏了。社会被科技新闻刷屏总归是好事情，比被娱乐八卦新闻刷屏有意义的多。看了很多媒体的评论，大多是在鼓吹“人类多余论”，直到周志华老师发声，觉得才算真正看到了有独到见解的评论。我将周志华老师的微博原文放在了本文最后。&lt;/p&gt;
&lt;p&gt;在这里，我认为最重要的就是：AlphaGo Zero进行的不是无监督学习！是有监督的学习，甚至可以说是非常强的监督学习。只不过监督信息不来自于数据，而来自于棋类任务天然具有的”强规则“属性。但是，要知道，我们的世界中大多数问题和棋类游戏相比，都不能叫弱规则了，说是没规则都不夸张。因为在真实的世界中，新规则随时会建立起来，旧规则也随时会废弃或者改变，各种规则以各种排列组合的形式被应用，有些规则甚至还能衍生出不同的解释。在这样的条件下，AlphaGo Zero的方式被真正有效地应用在我们的社会生活中还有多远的路要走？很难说。&lt;/p&gt;
&lt;p&gt;但我并不是说AlphaGo Zero没有意义。相反，过几年回头看，AlphaGo Zero的意义很有可能比现在人们想象的还要大。2001年微软研究院的一篇著名的论文向我们揭示了这样一个事实：对于不同的算法，他们虽然有优有劣，但当我们给它们输入越来越多的数据以后，它们的表现都非常好，甚至没有差别！这篇论文告诉我们：算法或许并不重要，数据才重要。也就是说：或许数据即算法。从此，大数据时代的帷幕轰轰烈烈地拉开了。&lt;/p&gt;
&lt;p&gt;但是Google的这篇AlphaGo Zero的文章重新告诉我们：算法依然是凌驾在数据之上的。只有高效的算法才能将数据的功效发挥出来。甚至对于棋类游戏这种规则属性很强的任务，没有数据都不是问题，算法才是最重要的。&lt;/p&gt;
&lt;p&gt;在我看来，这对大多数人来说都是好事。因为这个事实再一次强调了人的主观能动性的意义。人类绝不仅仅是机器的数据的提供源而已。人类更是算法的设计者，创造者和生产者。&lt;/p&gt;
&lt;p&gt;至于人类多余论，科技的发展总是在取代人类的工作的，但与此同时也在创建新的工作。如果说机器威胁人类的话，那人类承受这样的威胁已经有很长时间了。ATM取代了银行柜员的工作；自动贩售机取代了售货员的工作；电子邮件取代了邮局的工作；搜索引擎取代了图书馆的工作；自动化的农耕机械取代了农民的工作；现代化的车间设备取代了工人的工作...... 其实如果没有机器，现在的人类社会已经很难运转了。但是要注意，在我举的这些例子中，与其说是”取代“，不如说是”辅助“更合适。与此同时，由于这些机器的使用，大量新生的，更富创造力的，同时也能带来更多社会收益和财富的新工作和新方向源源不断地涌现了出来。&lt;/p&gt;
&lt;p&gt;现在问题来了，未来的新工作和新方向到底是怎样的？其实关于这方面的分析很多。笼统的，具体的，我觉得有道理的，没道理的，已经撒满了互联网。不过这篇AlphaGo Zero的论文告诉了我们一个更加具体的方向。&lt;/p&gt;
&lt;p&gt;我相信：增强学习在未来会越来越火的：）&lt;/p&gt;
&lt;p&gt;&lt;img alt="weibo" src="https://github.com/liuyubobobo/my-blog/raw/master/2017/2017-10-20/weibo.png" /&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2017/2017-10-20/readme.md" rel="alternate"/></entry><entry><id>2017/2017-09-20/readme.md</id><title>iPhoneX 刘海儿打理攻略</title><updated>2017-09-20T00:00:00-07:00</updated><content>&lt;h2&gt;iPhoneX 刘海儿打理攻略&lt;/h2&gt;
&lt;p&gt;iPhoneX已经公布一阵子了。对于iPhoneX的刘海设计，国内外一致的评论就是——丑。因为你的app显示效果将是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="iphone" src="https://github.com/liuyubobobo/my-blog/raw/master/2017/2017-09-20/iphone.png" /&gt;&lt;/p&gt;
&lt;p&gt;来自 Twitter 用户 CARROT&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;嗯，感觉屏幕上方被什么东西给啃了。。。不过app的显示效果可能习惯一阵子也就好了，但是每次全屏看美女，不不不，看艺术作品的时候，这个刘海。。。&lt;/p&gt;
&lt;p&gt;&lt;img alt="iphones" src="https://github.com/liuyubobobo/my-blog/raw/master/2017/2017-09-20/iphones.png" /&gt;&lt;/p&gt;
&lt;p&gt;嗯，以上效果来自苹果官方宣传。。。&lt;/p&gt;
&lt;p&gt;不过没关系，聪明的设计者们和开发者们早就在iPhoneX还没到来之前，研究如何为iPhoneX遮丑了。。。&lt;/p&gt;
&lt;p&gt;最一般的思路，就是在屏幕上方制作一个黑色的“任务栏”，让刘海儿和黑色的任务栏融为一体。&lt;/p&gt;
&lt;p&gt;&lt;img alt="showcase1" src="https://github.com/liuyubobobo/my-blog/raw/master/2017/2017-09-20/showcase1.png" /&gt;&lt;/p&gt;
&lt;p&gt;来自 Twitter 用户 Mike Rundle&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我们可以用同一个app的两个设计思路对比一下：&lt;/p&gt;
&lt;p&gt;&lt;img alt="showcase2" src="https://github.com/liuyubobobo/my-blog/raw/master/2017/2017-09-20/showcase2.png" /&gt;&lt;/p&gt;
&lt;p&gt;来自 Twitter 用户 Carlos Garvina&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;怎么样？是不是觉得右侧的设计方案明显比左侧好？&lt;/p&gt;
&lt;p&gt;但是你猜怎么着？这个方案似乎和新版的苹果交互设计指南冲突。更新后的苹果交互设计指南表示：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不要遮挡或者特别修饰显示特性来引起用户注意: 请勿尝试隐藏设备的圆角、传感器外壳，或者通过在屏幕顶部和底部放置控件来访问主屏幕的引导。也要特别注意不要试图使用像括号，边框或各种符号等视觉修饰这些特殊区域。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;嗯，虽然苹果自家的music设计，似乎是将这个传感器隐藏了。。。&lt;/p&gt;
&lt;p&gt;&lt;img alt="iphone-conf" src="https://github.com/liuyubobobo/my-blog/raw/master/2017/2017-09-20/iphone-conf.png" /&gt;&lt;/p&gt;
&lt;p&gt;好吧，不管怎么样，聪明的开发者么还是想出了很多解决方案的。比如，似乎对于一般的app，在竖屏状态下，这个刘海还可以忍受，但是在横屏状态下，就会极度影响操作。所以我们在横屏操作时，将它隐藏：&lt;/p&gt;
&lt;p&gt;&lt;img alt="showcase3" src="https://github.com/liuyubobobo/my-blog/raw/master/2017/2017-09-20/showcase3.gif" /&gt;&lt;/p&gt;
&lt;p&gt;来自 Twiiter 用户 Alex Devarty&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;一个更酷的思路是，在横屏操作时，显示中的文字自动躲开刘海。。。&lt;/p&gt;
&lt;p&gt;&lt;img alt="showcase4" src="https://github.com/liuyubobobo/my-blog/raw/master/2017/2017-09-20/showcase4.gif" /&gt;&lt;/p&gt;
&lt;p&gt;来自 Twitter 用户 Vojta Stavik&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;如果刘海在右侧，我们可以让滚动条和刘海作自适应！&lt;/p&gt;
&lt;p&gt;&lt;img alt="showcase5" src="https://github.com/liuyubobobo/my-blog/raw/master/2017/2017-09-20/showcase5.gif" /&gt;&lt;/p&gt;
&lt;p&gt;来自 Twitter 用户 Zev Eisenberg&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;不过到目前为止，我看过的最酷的设计，还是直接将刘海和界面融为一体！&lt;/p&gt;
&lt;p&gt;&lt;img alt="showcase6" src="https://github.com/liuyubobobo/my-blog/raw/master/2017/2017-09-20/showcase6.gif" /&gt;&lt;/p&gt;
&lt;p&gt;嗯，是不是觉得其实这个丑丑的刘海运用好了，也是机会？&lt;/p&gt;
&lt;p&gt;坐等以产品设计闻名的国内大厂，推出他们的刘海打理方案：）&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2017/2017-09-20/readme.md" rel="alternate"/></entry><entry><id>2017/2017-09-15/readme.md</id><title>吴恩达的创业公司每周工作80小时？聊聊人工智能背后的人工</title><updated>2017-09-15T00:00:00-07:00</updated><content>&lt;h2&gt;吴恩达的创业公司每周工作80小时？聊聊人工智能背后的人工&lt;/h2&gt;
&lt;p&gt;关注人工智能领域的人应该都知道吴恩达(Andrew Ng )。吴恩达离开百度首席科学家的职位以后，创建了属于自己的创业公司deeplearning.ai，迅速引起了硅谷上下的注意。他的“小”公司在17年刚成立不久就募集了1.5亿美元的人工智能风投资金，被戏称为：秒成为独角兽创业公司。也正因为如此，吴恩达公司的一举一动极其受媒体关注。&lt;/p&gt;
&lt;p&gt;&lt;img alt="ng" src="https://github.com/liuyubobobo/my-blog/raw/master/2017/2017-09-15/ng.png" /&gt;&lt;/p&gt;
&lt;p&gt;今天，deeperlearning.ai官网发布招聘启事，招募“机器学习工程师”和“全栈工程师”。这是这家秒成为独角兽的创业公司第一次发布招聘启事，有兴趣的同学可以去官网围观招。但引起全网热议的，是其中对工作时间的说明：我们大多每周工作70-90小时。（Many of us routinely work 70-90 hours a week.）&lt;/p&gt;
&lt;p&gt;这个工作时间在国外迅速引起了广泛讨论，现在看来，国内IT界搞不好因为这个新闻，再次掀起一轮对工作时间和加班的讨论。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;其实，看了这则新闻，我只能说Andrew Ng太实在了。他没有说要让大家每周坐班70-90小时。我相信Andrew Ng真正想强调的是：刻苦。当然，你可以把它理解成是“隐性加班”。说白了，你一周可以在办公室只坐40小时，但是在这40小时以外，你就把你的工作忘得一干二净了，那是不可以的。在这40小时以外，你还是要思考你的工作的：或者和同事做更多沟通；或者持续学习以保证自己的水平可以胜任工作；或者额外付出一些时间赶项目进度。当然了，如果你愿意在办公室来做这些额外的事情，办公室永远向你敞开大门，可能还有喝不尽的苏打水，吃不完的薯片和沙拉等小福利。&lt;/p&gt;
&lt;p&gt;我相信从这个角度出发的话，每周“工作”80小时真的是很正常的。即使是在劳动法被极其严格执行的美国加州。我曾经和某Google大佬一起去海边休小长假，然后，当我以为在海边躺下可以一边享受阳光一边数浪花一朵朵一边看美女的比基尼的时候，他！拿！出！了！论！文！开！始！读！&lt;/p&gt;
&lt;p&gt;或许Andrew Ng意识到了措辞的不妥，现在，官网的招聘启事措辞已经修改了，变为：我们大多每周工作或者学习70个小时以上（Many of us routinely work and study 70+ hours a week.）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;但其实，看了这个招聘启事后，我马上想到的另外一个问题，是人工智能这个高大上的领域背后隐藏的“人工”问题。众所周知，现在这轮火起来的人工智能，是以机器学习方法为主的。机器学习，顾名思义，是让机器去学习。机器怎么学习？其实和人一样，通过例子去学习。不过机器特别笨。要让一个人分清什么是猫什么是狗，举3个例子大概就够了；但是如果要让机器分清什么是猫什么是狗，可能要上万的例子。什么是例子？就是数据。&lt;/p&gt;
&lt;p&gt;人工智能需要数据。普遍大家可能只关注“大”数据中的这个“大”。人工智能确实需要大数据，甚至是海量数据；但人工智能还需要，或者叫更需要，高质量的数据。&lt;/p&gt;
&lt;p&gt;什么叫高质量的数据？举个简单的例子，大家可能都做过各种市场调研的问卷。每一份问卷都是一个数据。相信没什么人会认真做这种问卷。胡写，乱写，不写，省略着写，甚至成心反着写，都是常态。那么这些问卷产生的数据，就是低质量的数据。而一个人如果能够像答高考卷子答市场调研问卷，那么就会产生一个高质量的数据。只有这种高质量的数据，才能够真实地反映现状。但是相信到这里，大家也能看出来，一份高质量的数据成本是多么高昂，数量是多么少。&lt;/p&gt;
&lt;p&gt;获得高质量数据的一个有效方式，就是人为标记。举几个例子。人脸识别已经算是比较成熟的算法领域了。但是我们要想让计算机学会如何在一张掺和各种复杂背景的照片（甚至视频流）中定位人脸，首先要给计算机大量已经标识人脸的图片。比如这个样子：&lt;/p&gt;
&lt;p&gt;&lt;img alt="data1" src="https://github.com/liuyubobobo/my-blog/raw/master/2017/2017-09-15/data1.png" /&gt;&lt;/p&gt;
&lt;p&gt;看见了吗？照片中四个人，人脸都被方框用特殊颜色框起来了。这个可不是机器识别的结果。是机器在拥有识别能力前，所需要的高质量的学习数据。怎么来的？人工标识的。机器需要多少个这样的数据才能学到一个好的算法？数以万记。&lt;/p&gt;
&lt;p&gt;实际上，上面这个图片标注的工作还是比较简单的，把人脸画个方块儿就好，看下面这个数据的标记工作：&lt;/p&gt;
&lt;p&gt;&lt;img alt="data2" src="https://github.com/liuyubobobo/my-blog/raw/master/2017/2017-09-15/data2.png" /&gt;&lt;/p&gt;
&lt;p&gt;能看出来吗？为了让机器可以学习识别人的动作，需要大致画出人物在照片中的躯干轮廓以及关节点，哪里是躯体哪里是头哪里是四肢。显然，标识这种照片比画脸难很多。&lt;/p&gt;
&lt;p&gt;但其实，上面举得两个例子，还是在识别任务极其清晰的状况下设定的简单标记任务。我们只需要关注脸或者躯体就好了。但是更前沿的研究要让机器理解图像的“语意”。意思就是说，给机器一张照片，要机器能够描述出这张照片是怎么回事。这比上面的两个例子难得多。上面的例子把要识别的内容聚焦在了脸，躯体，或者是猫是狗这种固定的任务上，有点儿像是在做选择题；但是随便给你一张图片，机器要回答出这张图片里有什么是什么，这就像是简答题了。这样的训练数据怎么标注呢？大概是这样：&lt;/p&gt;
&lt;p&gt;&lt;img alt="data3" src="https://github.com/liuyubobobo/my-blog/raw/master/2017/2017-09-15/data3.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="data4" src="https://github.com/liuyubobobo/my-blog/raw/master/2017/2017-09-15/data4.png" /&gt;&lt;/p&gt;
&lt;p&gt;看到了吗？不同颜色大小的方框，配合不同的文字标识，人为地把一张图片中认为需要关注的信息标识出来。这个标识过程最好不要出错，不然机器学习的结果也不会好。&lt;/p&gt;
&lt;p&gt;可以这么说，高质量的标注数据，足以决定一家人工智能公司的竞争力。前阵子大热的华裔科学家李飞飞，加盟了Google。她的一大成就是参与建立了ImageNet。这是由167个国家的48940名工作者，用两年时间，过了近十亿张图片以后，形成的一个拥有1500万张标注图片的数据集。这是多大的工作量？&lt;/p&gt;
&lt;p&gt;可能，更重要的问题是，这到底是体力劳动还是智力劳动？嗯，反正我怎么看怎么都觉得，是人类在给机器打工。我的反乌托邦病又犯了。&lt;/p&gt;
&lt;p&gt;对于这种数据标注工作，简单的部分已经可以交给外包公司进行了。但是对于一些复杂的部分，或者还在探索的部分，还是需要“高级人员”自己动手来。一方面是对标注质量更放心，另一方面，可以一边标注一边实验结果，甚至要不断改进标注的方式。其实，标注数据只是人工智能领域底层的体力工作之一，只有从事人工智能领域的人才明白，看起来高大上的光环背后，是无尽的清洗数据和特征工程。其实一点也不高大上。&lt;/p&gt;
&lt;p&gt;但是，或许，或许，所有的高大上的背后，都有着这样的辛酸。&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2017/2017-09-15/readme.md" rel="alternate"/></entry><entry><id>2017/2017-09-11/readme.md</id><title>细思极恐。随便说说“AI看脸就知道性取向”这个事儿</title><updated>2017-09-11T00:00:00-07:00</updated><content>&lt;h2&gt;细思极恐。随便说说“AI看脸就知道性取向”这个事儿&lt;/h2&gt;
&lt;p&gt;来自斯坦福大学的最新研究成果。你给AI一张照片，AI可以判断出照片里的人的性取向（同性恋 or 异性恋）。简单扫了一遍论文原文。对男性识别准确率大约是81%；对女性识别准确率是74%。严谨的读者如果希望看论文原文，可以直接看这个地址：&lt;a href="https://osf.io/zn79k/"&gt;https://osf.io/zn79k/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在这里，我们不讨论这些数字的准确性。因为当下的机器学习模型，都是基于统计学的。但凡基于统计学的方法，所得到的结论都会受到样本量，样本质量，包括采样方式，等等的影响。当然了，所谓好的模型和好的方法，就是在对抗这些因素对最终结果的影响。而且统计学的目的本身就是给出一个方向性的结论。所以，我个人倾向于认为，就算这个数字不准确，有偏差，但是使用深度学习的方式去通过一个人的照片来判断其性取向，确实是可行的。&lt;/p&gt;
&lt;p&gt;我看到很多人对这个研究结果不以为然。一方面，是抓住“概率”这个事情。毕竟只有81%和74%的准确率，说明还有错误率。如果一个同性恋想隐藏自己的性取向，就算AI判断出他是同性恋，他大可表示自己被机器误判了。&lt;/p&gt;
&lt;p&gt;虽然理论上确实是这样，但是可能这些人低估了当今社会人类对概率的应用。在我们的实际生活中，很多社会机制的本质可以说就是“概率”，只不过目前这些机制作发挥作用的关键权力还不在机器手里而已。比如高考制度，大家都知道它有问题，但是它是一个基于目前中国国情的能够高概率筛选出优秀人才的方式。高考制度会不会误判，错过本来很优秀的人才？当然会。但是对于这个问题，我们暂时找不到完美的100%没有误判的解决方案，所以只能诉诸于一个“高概率不犯大错误”的方法。&lt;/p&gt;
&lt;p&gt;同理，大企业HR看简历为什么优先选则985；211大学毕业的学生？也大致是在潜意识里形成的一个概率算法：在名牌大学毕业的学生，整体能力强，基础好，学习速度快，给企业创造的价值更大。但是这样做会不会漏掉一些人才？在二本三本甚至没本的人群中，会不会其实有更适合企业发展的人才？当然会。但是从概率上，太低了，低的不值得HR们花费时间精力仔细去在二本三本大专生的简历中仔细筛查哪些是被教育体系误判的人。&lt;/p&gt;
&lt;p&gt;推而广之，大多数制度，最终都可以看做是对概率的妥协。所有的制度都会犯错误，关键是犯错误的概率。雅思托福GRE考试都是为了考察语言运用能力能否适应国外环境而设立的考试。但是有没有人通过了考试其实语言不过关？当然有，但是整体而言，通过这些考试的人群，英语能力确实比没有通过这些考试的人群强。至于是不是能适应国外的环境？如果要仔细考量这一点的话，可能关键方式是改进考核方式，而不是思考要不要取消这些考试。&lt;/p&gt;
&lt;p&gt;同理，美国大使馆在派发签证的时候，也有一套流程和标准。这套流程和标准会不会把签证发给不合适的人？当然会。但是大使馆真正要做的是：“尽量”不要把签证发给不合适的人。换句话说，就是要“大概率不犯错”。但这也终究无法避免在个别人身上误判犯错。在过去的半年里，有太多穆斯林国家的人因为美国大使馆派发签证的算法发生改变，而拿不到签证。但他们本来没什么问题，只是在美国政府眼里，有问题的概率比较高而已。&lt;/p&gt;
&lt;p&gt;这些个别人就是，就是“概率”的牺牲品。高考成绩不理想的人；没有考上名校的人；来自穆斯林国家的人，都要一定程度受到这个“概率”的困扰。虽然高考成绩不好，不代表自己不能学好高等知识；虽然没考上名校，不代表不能给企业创造更大价值；虽然来自穆斯林国家，不代表就要去世界各地搞事情。但是，你声称自己是被误判的那个人，是没有用的。&lt;/p&gt;
&lt;p&gt;可能你会觉得，这些太严肃了，这篇论文不就是同性恋的问题吗？那么好，举个例子，假设现在有一个app，拿摄像头扫一下照片就能给出一个“同性恋比率”。作为向往美好爱情的直男直女，打开app扫描了一下自己心仪的那个ta的照片，app显示，同性恋概率80%。你怎么想？你如何解读80%这个数字？这个数字会不会改变你对他的看法和交往方式？你还会和以前一样那样追求ta吗？&lt;/p&gt;
&lt;p&gt;可能有的人又会说了，这年头，性取向已经没那么严重了吧？国外各种LGBTQIA的运动已经那么轰轰烈烈了，社会早就给予他们应有的尊重了。在这里，我们暂时不讨论这个社会给予他们的尊重到底够不够。但更关键的是，这种技术真的只能应用在鉴别同性恋身上吗？&lt;/p&gt;
&lt;p&gt;如果扫一下脸，就能看出你的性取向，那么是不是扫一下脸，就能判断出你适不适合读清华北大？扫一下脸，是不是就能决定你可不可以去FLAG或者BAT；扫一下脸，是不是就能知道你是不是真的热爱祖国热爱党？扫一下脸，是不是就能看出你是“好人”还是“坏人”？&lt;/p&gt;
&lt;p&gt;有没有觉得背后有一阵寒意。这些还是“善”的应用。如果这种技术掌握在“不对”的人身上呢？美联航是不是扫一下脸，就能看出把哪个人撵下飞机不会造成太严重的抵抗，给出的赔偿成本最少？商家会不会扫一下脸，就了解了每个人心理的承受价位，进而产生更多“看人下菜碟”的产品？更严重一些，法院扫一下脸，是不是就能知道你有没有罪？宗教极端主义者是不是扫一下脸，就能看出你是否虔诚？对了，在一些宗教里，同性恋是有罪的。那么此时，扫一下脸，就能看出你的性取向，这个事情是不是就没味了。80%的同性恋倾向，在这些宗教里将意味着什么？&lt;/p&gt;
&lt;p&gt;想得更远一点：五岁的小孩儿是不是扫一下脸，是不是就能估算出这个孩子的“培养价值”？&lt;/p&gt;
&lt;p&gt;这个研究绝不是简单的判别性取向这么简单。它的关键是用一种“科学”的方式，简单粗暴的给人们贴上了标签。我们终于开始要被机器所定义了。&lt;/p&gt;
&lt;p&gt;更可怕的是，实现这种技术并不难。而且背后还有巨大的操作空间。比如朝鲜也可以实现一套系统，扫脸检验你是否热爱伟大领袖。你热爱伟大领袖程度是80%，这个80%你怎么看？&lt;/p&gt;
&lt;p&gt;细思极恐。&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2017/2017-09-11/readme.md" rel="alternate"/></entry><entry><id>2017/2017-09-08/readme.md</id><title>什么是Baseline Model？记和硅谷大佬的一次吃饭</title><updated>2017-09-08T00:00:00-07:00</updated><content>&lt;h2&gt;什么是Baseline Model？记和硅谷大佬的一次吃饭&lt;/h2&gt;
&lt;p&gt;在大概两周前，硅谷的一家普通中国餐厅。&lt;/p&gt;
&lt;p&gt;我正在和一位大公司的硅谷精英吃饭（A开头的公司，但不是Amazon，大家猜猜看是哪家：））。&lt;/p&gt;
&lt;p&gt;在美国的中国菜，只有硅谷一带还比较正宗，或许是因为华人工程师比例不低。但相比国内，还是差了一大截，尤其是在同等价位的情况下。吃不到地道的，丰富多样的中国菜，是每一名海外华人的痛。但此时，我们都无暇顾及这种小事儿（其实是天大的事儿！）。因为我们正在聊的，是价值几个亿的事情。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;“我们的项目组最近正在尝试使用一些高级的模型，来分析预测用户行为”，大佬说话了。&lt;/p&gt;
&lt;p&gt;“嗯”，我点头。其实，搞机器学习的都明白，在很多实际应用上，并不会使用太复杂的算法。很多时候，逻辑回归就能得到很好的结果。更重要的，其实是数据量，数据质量，特征工程，以及超参数的调整。这是因为即使是简单的模型，也会得到不错的结果；而复杂的模型，得到的结果或许更好，但到底好了多少？很可能好出来的程度，和使用它的成本比起来，是不值一提的。&lt;/p&gt;
&lt;p&gt;但是，尽管如此，当算法满足基本要求以后，大家也都会朝更高级的算法进军。有意思的是，在这家企业（很多企业其实也都是），大多数朝更高级算法进军的主力人员，是实习生。因为他们本身没有过大的业绩压力，承担得起风险，是做这种探索性工作的绝佳人选。更不用提他们刚从学界出来，离最新的理论更近，也充满了干劲，正着急把学到的理论用在实处呢。而企业此时，更多地是提供给他们平台，数据，算力，和做完整项目的流程经验，等等等等。&lt;/p&gt;
&lt;p&gt;毕竟，未来终归是属于他们的。（怪不得前浪总是被拍死在沙滩上，因为毫无探险精神啊！）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;“我的实习生现在遇到了一个问题。”大佬继续说道，“我们在尝试使用LSTM做分析，可是效果不太理想。我们做出来的结果，和Baseline Model比较，准确率提升地也不够。”&lt;/p&gt;
&lt;p&gt;“嗯”，我继续点头。&lt;/p&gt;
&lt;p&gt;Baseline Model是机器学习领域的一个术语，简单来说，就是使用最普遍的情况来做结果预测。比如一个猜硬币正反面游戏，最朴素的策略就是永远猜正（或者永远猜反），这样你至少有50%的准确率。再比如说，很多学习不好的同学，应该都做过这件事情：考试里选择题一率选C，这也是利用了Baseline Model来“预测”问题的结果。理论上，这样做至少能拿25%的分数。而之所以选择C，是发现，似乎选择C，能拿到比25%还多的分数。毕竟，选择题的答案不是真正的随机分布的。有意思的是，在极个别的情况下，这样做的考分比另一部分同学正儿八经地答题，得分还高。&lt;/p&gt;
&lt;p&gt;我之前曾经写了一篇文章&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2017/2017-09-02/"&gt;《网购有助脱单？我还实现了一个准确率99.9%的癌症预测算法呢！》&lt;/a&gt;，其中我所实现的准确率99.9%的癌症预测算法，本质也是一个Baseline Model。简单讲，就是我发现一个疾病的发病率只有0.1%，那么在这种情况下，我们的算法只需要永远预测健康，那么其准确率就是99.9%。Baseline Model的意义，是让我们了解这个问题的基线在哪里，从而让我们不再迷信一个绝对的数值。你告诉我你的预测准确度是99.9%，严格意义来讲是没有意义的。因为如果你的Baseline Model的准确率也是99.9%，你的算法等于没有做任何事情；而如果你的Baseline Model的准确度是99.99%，你的算法反而让结果变差了。但是如果你的Baseline Model的准确率是50%，你的算法结果准确率哪怕仅仅是60%，也是挺不错的一个改善。试想，如果你能以60%的准确度预测抛硬币游戏的正反的话，你应该不会来看这篇文章，而是去笑傲赌场了：） &lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;大佬继续发言了：“我作为supervisor，还是希望我的实习生做出点儿成绩的。”这位大佬是一个负责任的人，这是大家都知道的。我经常通过和这位大佬的交流，来反思：自己为什么不能如此为他人着想？嗯，看来今天这顿饭，要是我请客了。等等，我觉得不对。饭钱是小事儿，我们正在聊几个亿的大事儿！&lt;/p&gt;
&lt;p&gt;“所以，”大佬继续不紧不慢的说，“你看有没有可能，我们能让我们的Baseline Model的准确度更低一些？”&lt;/p&gt;
&lt;p&gt;大佬顿了一下，夹了口菜。&lt;/p&gt;
&lt;p&gt;“越低越好。”&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;P.S. 其实理解不理解Baseline Model可能不重要。反正很容易理解。更重要的是明白：很多时候，成功的关键不是你做得有多完美，而是你比对手好多少：）&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2017/2017-09-08/readme.md" rel="alternate"/></entry><entry><id>2017/2017-09-02/readme.md</id><title>网购有助"脱单"?我还实现了一个准确率99.9%的癌症预测系统呢</title><updated>2017-09-02T00:00:00-07:00</updated><content>&lt;h2&gt;网购有助"脱单"?我还实现了一个准确率99.9%的癌症预测系统呢&lt;/h2&gt;
&lt;p&gt;前天，一个朋友给我看了一篇文章，题目是《网购有助“脱单”？阿里的大数据证实了这一点》。&lt;/p&gt;
&lt;p&gt;文章的一个主要论据是，有近7成的淘宝、天猫用户已经找到伴侣，仅3成单身。所以，网购有助脱单，因为网购用户都7成告别单身狗啦！（当然，原文还有其他数据的逻辑链也有问题，但是这篇文章主要就怼这一条啦！）&lt;/p&gt;
&lt;p&gt;&lt;img alt="taobao" src="https://github.com/liuyubobobo/my-blog/raw/master/2017/2017-09-02/taobao.png" /&gt;&lt;/p&gt;
&lt;p&gt;嗯，在淘宝天猫上，有伴侣的用户是单身狗的两倍还要多啊！所以单身狗一定要在双11买买买，才更有可能脱单哇！&lt;/p&gt;
&lt;p&gt;嘿嘿嘿，是不是看到这个结论，已经觉得哪里不对劲了？&lt;/p&gt;
&lt;p&gt;如果你将这样一份报告扔给一个统计学家。哦，其实不用，随便扔给一位博士生，他们会连文章都不看完，就不屑地表示：一本正经地胡说八道！&lt;/p&gt;
&lt;p&gt;然后，再无奈地表示：流量怎么都被这些无知的人类赚走了呢？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;事实上，如果我们仔细分析这个结论的不合理，可以挖掘出一个大家在面对统计数字时非常容易犯的错误。我个人认为，对这个错误的认知，基本决定着你是否有统计学的思维（其实在我心目中，还有另外一点有同样的作用。双剑合璧，方为统计学思维初建立。这篇文章先只说一点。）&lt;/p&gt;
&lt;p&gt;是的，统计学绝不仅仅是推导公式，统计学更是一种看待世界的方式。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;随着机器学习的兴起，统计学越来越受到大众的重视。事实上，在现阶段，短期内，我认为已经没有一门理工类学科可以离开统计学了。嗯，曾经有一位常青藤名校博士生铿(wu)锵(bi)有(xin)力(suan)地对我说：所有的博士其实到头来都是做统计的。是的，我认为统计学已经成功地控制了地球！&lt;/p&gt;
&lt;p&gt;同时，这也造成了一个不好的结果，就是对统计学的滥用。或者是商家成心错误地使用统计学，带给大家利好商家的假象。（比如网购有助于脱单。。。）在这些“假象”背后，其中一点，学术一点儿称呼，就是&lt;strong&gt;基本比率谬误（base rate fallacy）&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;要讲清楚这个谬误，通常都用这么一个例子。&lt;strong&gt;有一个人，喜欢看书。你觉得这个人是一名图书管理员捏？还是一名销售员捏？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;大部分人都会不假思索的回答：是图书管理员啊！喜欢看书啊。可惜，如果用这个事情去打赌的话，大部分人都会输得精光。原因很简单，在大部分成熟的商业社会，图书管理员这一职位的总人数，比销售人员少得多。这使得这名爱看书的人是图书管理员的概率，比是销售人员的概率小得多。&lt;/p&gt;
&lt;p&gt;可是有的童鞋可能会跳出来喊，不对！我们考虑这个问题不能只简单地看这两个职业的总人数啊。这个问题本质是一个条件概率问题啊！其实，我们是在考虑，在爱看书的条件下，一个人是图书管理员的概率有多大？是销售人员的概率有多大啊？&lt;/p&gt;
&lt;p&gt;说得好有道理啊！所以，其实更准确的说，如果我们不知道图书管理员和销售人员的分布的话，是无法估计这个问题的。那我们就简单做一下调查吧。据悉，在美国，图书管理人员和销售人员的人数比是1:1000。（这似乎还是很久以前的数字，现在可能更低。不过我们这个文章的关注点不在这个具体数据，所以大家就先接受它吧！）&lt;/p&gt;
&lt;p&gt;嗯。也就是假设在美国社会有10名图书管理员，对应就有10000名销售人员。现在假设图书管理人员100%的爱看书，很符合这个人设吧？而销售人员，只有5%爱看书，嗯，我觉得我严重低估了销售人员对知识的追求和渴望，销售人员会不会组团来打我？但是为了说清楚这个问题，我就牺牲一下吧！（喂喂，明明是销售人员在做牺牲！）&lt;/p&gt;
&lt;p&gt;对于这样的数据，意味着我们有10*100%=10名爱看书的图书管理员；10000*5%=500名爱看书的销售人员。也就是说，此时，我们考虑了两个职业爱看书的程度的差异，甚至故意夸大了这个差异，可依然得出这个结论：一名爱看书的人，他是销售人员的概率是他是图书管理员的50倍！&lt;/p&gt;
&lt;p&gt;那么问题来了，为什么大多数人都会觉得：爱看书的人是图书管理员的可能性大？这就是因为我们忽略了图书管理员和销售员两者在整体人群里的基本分布，或者叫基本比率。这便是&lt;strong&gt;基本比率谬误（base rate fallacy）&lt;/strong&gt;。我们习惯用表面的现象代替全部，而忽略现象背后的基本比率。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;仔细想，这样的错误其实我们经常犯。我们经常不由自主地把爱看书的人想成是图书管理员；开宝马的人想成是富二代；技术大佬想成是六岁就开始编程；等等等等。但当我们了解了基本比率谬误，就可能会反思，正如同图书管理员是少数人；富二代也是少数人；六岁就开始编程的也是少数人。所以那个开宝马的人，或许更有可能是普通人自己奋斗的结果；那个技术大佬也更可能是本科才开始正式编程，多年努力的结果。&lt;/p&gt;
&lt;p&gt;嗯，这是一碗鸡汤，有没有觉得世界更美好了？所以大家不要放弃努力，要继续加油啊！&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;是时候回到我们阿里的大数据了：有近7成的淘宝、天猫用户已经找到伴侣，仅3成单身。了解了基本比率谬误，我们就能明白：这个数据显然忽略了单身和非单身的基本比率！&lt;/p&gt;
&lt;p&gt;我简单查了一下数据，国内的单身狗大概有2亿人，现中国的总人口大概13.8亿。换句话说，在中国，单身狗占15%左右；而非单身狗占85%。&lt;/p&gt;
&lt;p&gt;等等，可是在淘宝平台上，单身狗竟然高达30%。这说明了什么？显然对比基本比率，是有更多的单身狗在淘宝平台上啊！我们是不是可以得出一个完全相反的结论？越“网购”，越单身！而很多不是单身的人，恰恰不在淘宝天猫的魔掌中！&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;嗯，基本比率谬误除了能帮助我们认清商家的本质，还有别的作用吗？当然有了！还可以忽悠别人啊！记得这篇文章的题目吗？我们要实现了一个准确率99.9%的癌症预测系统啊！&lt;/p&gt;
&lt;p&gt;我曾经参与过一个医学项目（一本正经的胡说八道），这个项目要写一个算法，通过体检者的数据，预测ta将来是否有可能患有某种癌症。好高端有木有？！绝对是现在大热的机器学习啊！还结合了属于21世纪的魔法黑科技生物医疗工程啊有木有！&lt;/p&gt;
&lt;p&gt;我花了整整一个晚上思索，终于想到了完美的解答，很快完成了整个算法。又花了一个小时包装好接口。嗯，你们先测试吧。测试结果，准确率99.9%！哼哼，那是当然，像我这种高手，准确率下95%的识别算法根本就没有写过！你们来调用吧，我按照调用次数计费，调用一次10刀！真心白菜价！&lt;/p&gt;
&lt;p&gt;其实，那天晚上，我苦思冥想之后，只是简单在网上调查了一下，发现这种癌症的发病率仅有是0.1%。所以我的算法是这样的：对于任何检查者的数据，我都预测他不会患这种癌症。分分钟便得到了一个准确率高达99.9%的预测算法。&lt;/p&gt;
&lt;p&gt;是的，我之后将算法包装成方便调用的接口，再添加上支付功能，用的时间比写这个算法用的时间多多了。&lt;/p&gt;
&lt;p&gt;我就是这么机智。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;现在，你理解基本比率谬误的作用了吗？万一遇到不懂统计学的投资人，当上CEO，迎娶白富美，走上人生巅峰，是很简单的啊！&lt;/p&gt;
&lt;p&gt;现在，你学会如何实现了一个准确率99.9%的癌症预测系统了吗？&lt;/p&gt;
&lt;p&gt;是不是很酷？&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;P.S. 1：正因为在现实世界中存在着如文中所举的例子一样，基本比率极度偏斜的情况（其实仔细想一想，这样的“比率偏斜”可并不少），所以在机器学习领域，如何判断识别率也是需要专门探讨的。有时间再和大家聊一聊：）&lt;/p&gt;
&lt;p&gt;P.S. 2：若采用文中方式成功融资，请主动来缴纳给我15%融资额的创业咨询费。若采用文中方式融资被打，概不负责。&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2017/2017-09-02/readme.md" rel="alternate"/></entry><entry><id>2017/2017-08-28/readme.md</id><title>情人节，用C++画一个心：）</title><updated>2017-08-28T00:00:00-07:00</updated><content>&lt;h2&gt;情人节，用C++画一个心：）&lt;/h2&gt;
&lt;p&gt;情人节到啦，作为程序员开发者，应该送给男女朋友什么礼物呢？我们这次一起用C++语言画个心作为礼物吧！（被罚跪搓衣板儿什么的概不负责= =）&lt;/p&gt;
&lt;p&gt;在网上稍微查一查心形的曲线方程，会发现很多，最流行的曲线方程应该就是这个了：&lt;/p&gt;
&lt;p&gt;&lt;img alt="heart-1" src="https://github.com/liuyubobobo/my-blog/raw/master/2017/2017-08-28/heart-1.png" /&gt;&lt;/p&gt;
&lt;p&gt;嗯，方程看着复杂，我们不管这是怎么推导出来的（我真的不会啊= =，不过我会一个更丑的心形曲线的推导过程，大家有兴趣的话有时间给大家上一堂数学课：）），让我们使用拿来主义，直接使用吧！&lt;/p&gt;
&lt;p&gt;我们回忆一下圆的方程，比如：x^2+y^2=1，那么所有的点(x,y)，若使得x^2+y^2==1，则这个点在这个圆的边界线上；若使得x^2+y^2&amp;lt;1，则这个点在圆内；若使得x^2+y^2&amp;gt;1，则这个点在圆外。&lt;/p&gt;
&lt;p&gt;好了，同理，对于这个方程，若点 (x, y) 让方程左边等于0，则这个点在这个心形曲线上；若让方程左边小于0，则这个点在这个心形线内；若让方程左边大于0，则这个点在这个心形线外。&lt;/p&gt;
&lt;p&gt;嗯，我们要做的就是写一个双重循环，遍历x和y的值，将心形线以内的地方，涂上某一个字符，比如‘*’。&lt;/p&gt;
&lt;p&gt;那么我们首先要确定我们双重循环的边界。我们打印输出，肯定是要逐行输出，从上到下。所以我们的第一层循环要对y值做循环。观察一下，可以看到y的上界大概是1.3；下界大概是-1.1；所以，我们可以从1.3逐渐减少到-1.1，初始我们可以选取步长为0.1。同理，对于x，可以看出他的左右边界大概为-1.2和+1.2，我们就从-1.2遍历到1.2，步长也选择0.1。&lt;/p&gt;
&lt;p&gt;我们的第一个代码就是这样的：&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;h1&gt;include &lt;iostream&gt;&lt;/h1&gt;
&lt;h1&gt;include &lt;cmath&gt;&lt;/h1&gt;
&lt;p&gt;using namespace std;&lt;/p&gt;
&lt;p&gt;int main() {&lt;/p&gt;
&lt;p&gt;for( float y = 1.3 ; y &amp;gt;= -1.1 ; y -= 0.1 ){
       for( float x = -1.2 ; x &amp;lt;= 1.2 ; x += 0.1)
           if( pow((x&lt;em&gt;x+y&lt;/em&gt;y-1.0),3) - x&lt;em&gt;x&lt;/em&gt;y&lt;em&gt;y&lt;/em&gt;y &amp;lt;= 0.0 )
               cout&amp;lt;&amp;lt;'*';
           else
               cout&amp;lt;&amp;lt;' ';
       cout&amp;lt;&amp;lt;endl;
   }&lt;/p&gt;
&lt;p&gt;return 0;
}
```&lt;/p&gt;
&lt;p&gt;是不是清晰易懂？运行一下，结果是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="heart-res-1" src="https://github.com/liuyubobobo/my-blog/raw/master/2017/2017-08-28/heart-res-1.png" /&gt;&lt;/p&gt;
&lt;p&gt;咦？为什么这么瘦？看来x方向要拉伸一下。怎么拉伸？其实，我们让我们的步长稍微小一点儿就好了。因为第一层循环（y值）走了多少次，决定了图像的高度（每走一次，打印一个回车）；而第二层循环（x值）走了多少次，则决定了图像的宽度（每走一次，打印一个字符）。所以，我们把x的步长缩小，x的循环就会多走几次，相应的，整个图形就会宽一些。我们将x的步长改为0.05，代码是这样的：&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;h1&gt;include &lt;iostream&gt;&lt;/h1&gt;
&lt;h1&gt;include &lt;cmath&gt;&lt;/h1&gt;
&lt;p&gt;using namespace std;&lt;/p&gt;
&lt;p&gt;int main() {&lt;/p&gt;
&lt;p&gt;for( float y = 1.3 ; y &amp;gt;= -1.1 ; y -= 0.1 ){
       for( float x = -1.2 ; x &amp;lt;= 1.2 ; x += 0.05)
           if( pow((x&lt;em&gt;x+y&lt;/em&gt;y-1.0),3) - x&lt;em&gt;x&lt;/em&gt;y&lt;em&gt;y&lt;/em&gt;y &amp;lt;= 0.0 )
               cout&amp;lt;&amp;lt;'*';
           else
               cout&amp;lt;&amp;lt;' ';
       cout&amp;lt;&amp;lt;endl;
   }&lt;/p&gt;
&lt;p&gt;return 0;
}
```&lt;/p&gt;
&lt;p&gt;结果就变成这样啦：&lt;/p&gt;
&lt;p&gt;&lt;img alt="heart-res-2" src="https://github.com/liuyubobobo/my-blog/raw/master/2017/2017-08-28/heart-res-2.png" /&gt;&lt;/p&gt;
&lt;p&gt;是不是好看了许多？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;一旦我们掌握了这个技巧，就可以随易变换我们的这个心形的宽和高啦。比如，我让这个心形，宽和高更多一些，同时再稍微扁一点儿。y值的步长为0.06，x值的步长为0.025，就是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="heart-res-3" src="https://github.com/liuyubobobo/my-blog/raw/master/2017/2017-08-28/heart-res-3.png" /&gt;&lt;/p&gt;
&lt;p&gt;是不是很酷？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;当然啦，如果我们填入不同的字符，可能有不同的视觉效果哦~&lt;/p&gt;
&lt;p&gt;&lt;img alt="heart-res-4" src="https://github.com/liuyubobobo/my-blog/raw/master/2017/2017-08-28/heart-res-4.png" /&gt;&lt;/p&gt;
&lt;p&gt;我们也很容易做出类似的镂空效果哦~&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;不过，你以为心形曲线只有一个方程可以描述吗？在网上多做做功课，发现相关的方程多得很：）比如这个：&lt;/p&gt;
&lt;p&gt;&lt;img alt="heart-2" src="https://github.com/liuyubobobo/my-blog/raw/master/2017/2017-08-28/heart-2.png" /&gt;&lt;/p&gt;
&lt;p&gt;我们用同样的思路，就可以编出这样的代码：&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;h1&gt;include &lt;iostream&gt;&lt;/h1&gt;
&lt;h1&gt;include &lt;cmath&gt;&lt;/h1&gt;
&lt;p&gt;using namespace std;&lt;/p&gt;
&lt;p&gt;int main() {&lt;/p&gt;
&lt;p&gt;for( float y = 1.3 ; y &amp;gt;= -1.1 ; y -= 0.06 ){
       for( float x = -1.1 ; x &amp;lt;= 1.1 ; x += 0.025 )
           if( x&lt;em&gt;x + pow(5.0&lt;/em&gt;y/4.0-sqrt(fabs(x)),2) - 1 &amp;lt;= 0.0 )
               cout&amp;lt;&amp;lt;'*';
           else
               cout&amp;lt;&amp;lt;' ';
       cout&amp;lt;&amp;lt;endl;
   }&lt;/p&gt;
&lt;p&gt;return 0;
}
```&lt;/p&gt;
&lt;p&gt;得到的心形是这样的，是不是曲线很不一样：）&lt;/p&gt;
&lt;p&gt;&lt;img alt="heart-res-6" src="https://github.com/liuyubobobo/my-blog/raw/master/2017/2017-08-28/heart-res-6.png" /&gt;&lt;/p&gt;
&lt;p&gt;大家可以再在网上多搜索一下，看看有没有更符合你意的心形曲线：）&lt;/p&gt;
&lt;p&gt;熟悉其他语言，尤其是前端语言的同学，也可以利用这些方程，做出更绚丽的效果哦。尤其是使用canvas，大家不妨自己试试看，期待同学们更好的创意：）&lt;/p&gt;
&lt;p&gt;愿天下有情人终成眷属，大家加油！&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;本篇文章的所有代码可以参见这个github repo: &lt;a href="https://github.com/liuyubobobo/heart-curve-cplusplus"&gt;https://github.com/liuyubobobo/heart-curve-cplusplus&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;分享一下：我的课程群里有的同学看了这篇文章以后的创意~ 来自 @甲铁城的卡巴司机 ，他把自己的日文名字融合在了这个图案中，超赞啊！&lt;/p&gt;
&lt;p&gt;&lt;img alt="heart-res-7" src="https://github.com/liuyubobobo/my-blog/raw/master/2017/2017-08-28/heart-res-7.png" /&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2017/2017-08-28/readme.md" rel="alternate"/></entry><entry><id>2017/2017-02-04/readme.md</id><title>从一道面试题再看三路快排partition</title><updated>2017-02-04T00:00:00-07:00</updated><content>&lt;h2&gt;从一道面试题再看三路快排partition&lt;/h2&gt;
&lt;p&gt;在这次分享中，我将为大家回顾一下排序算法，同时，详细解析一下LeetCode中第75个问题：&lt;a href="https://leetcode.com/problems/sort-colors/"&gt;Sort Color&lt;/a&gt;。这个问题是Facebook，Microsoft和Pocket Gems的面试题。在LeetCode中难度标记为Medium：）&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;在我的课程&lt;a href="https://coding.imooc.com/class/71.html"&gt;《算法与数据结构》&lt;/a&gt;中，我向大家详细介绍了快速排序这个最经典的排序算法。在这里为大家简单复习一下，没有学习这门课程的同学，也可以简单看到一个轮廓。&lt;/p&gt;
&lt;p&gt;快速排序算法的思路是每次选择一个元素作为标的点（pivot），将整个数组的所有元素分为小于这个元素和大于这个元素两部分，之后再递归地对左右两部分分别进行这个过程，直至整个数组有序。&lt;/p&gt;
&lt;p&gt;&lt;img alt="quicksort" src="https://github.com/liuyubobobo/my-blog/raw/master/2017/2017-02-04/quicksort.png" /&gt;&lt;/p&gt;
&lt;p&gt;显然，在这个过程中，“选择一个元素作为标的点（pivot），将整个数组的所有元素分为小于这个元素和大于这个元素两部分”这步操作是最重要的，也是快速排序的核心所在。这个步骤被称为 Partition。&lt;/p&gt;
&lt;p&gt;如果使用一个辅助空间来实现Partition是一件非常简单的事情。但是如果不使用辅助空间，原地（in place）地进行partition，可能就稍微有些难度了。虽然有难度，但绝非高不可攀。有兴趣的同学，不妨把这个问题看作是一个面试题，自己实现一下看看：）（这是一个基础的需要大家能够进行白板编程的问题，请大家一定打好基础）&lt;/p&gt;
&lt;p&gt;我们在课程中首先介绍了Partition的一个经典实现，代码简单优雅的令人发指：&lt;/p&gt;
&lt;p&gt;（以下代码均使用C++代码，请其他语言的同学看懂逻辑以后尝试转换成自己熟悉的语言：））&lt;/p&gt;
&lt;p&gt;```
// v为pivot，初始存储在arr[l]的位置
int j = l; // 循环过程保持 arr[l+1...j] &amp;lt; v ; arr[j+1...i) &amp;gt; v
for( int i = l + 1 ; i &amp;lt;= r ; i ++ )
    if( arr[i] &amp;lt; v )
        swap( arr[++j] , arr[i] );&lt;/p&gt;
&lt;p&gt;swap( arr[l] , arr[j]);
// 此时，j指向pivot的正确位置
```&lt;/p&gt;
&lt;p&gt;关于这个算法的动画演示，课程中有详细介绍，不再赘述。有兴趣的同学或者印象不深的同学，强烈建议用自己的小的测试用例（6-10个数据即可），用纸笔自己走一遍这个程序，加深理解：）&lt;/p&gt;
&lt;p&gt;但我们很快就发现，这样的一个快排，在面临有序或者近乎有序的数组时，会退化成为一个O(n2)的算法。于是我们使用了一个很简单的随机选取pivot的方式来处理这个问题。这步随机化让快速排序的时间期望成为了O(nlogn)，并且只有极低的概率退化为O(n2)。关于这一点，背后的数学证明比较复杂，对背后的数学不感兴趣的同学，只要相信这个结论就好了。事实上，n不需要太大，在100这个量级，其退化成O(n^2)算法的概率就已经低于大家彩票中大奖的概率了：）&lt;/p&gt;
&lt;p&gt;但是，我们又会发现，这样的一个快排，面对有大量重复元素的数据时，还是有可能退化成O(n^2)级别的。于是我们介绍了双路快排的Partition思路。通过这个思路，我们可以进一步优化，提出三路快排的思想。三路快排要做的事情，其实就是将数组分成三部分：小于v，等于v和大于v，之后递归的对小于v和大于v部分进行排序就好了。&lt;/p&gt;
&lt;p&gt;&lt;img alt="quicksort-3-ways" src="https://github.com/liuyubobobo/my-blog/raw/master/2017/2017-02-04/quicksort-3-ways.png" /&gt;&lt;/p&gt;
&lt;p&gt;三路快排的Partition代码是这样的。依然是，这个算法的动画演示，课程中有详细介绍，不再赘述。有兴趣的同学或者印象不深的同学，强烈建议用自己的小的测试用例（6-10个数据即可），用纸笔自己走一遍这个程序，加深理解：）&lt;/p&gt;
&lt;p&gt;```
// v为pivot，初始存储在arr[l]的位置
int lt = l;        // 循环过程中保持 arr[l+1...lt] &amp;lt; v
int gt = r + 1;    // 循环过程中保持 arr[gt...r] &amp;gt; v
int i = l+1;       // 循环过程中保持 arr[lt+1...i) == v&lt;/p&gt;
&lt;p&gt;while( i &amp;lt; gt ){
    if( arr[i] &amp;lt; v ){
        swap( arr[i++], arr[lt+1]); lt ++;
    }
    else if( arr[i] &amp;gt; v ){
        swap( arr[i], arr[gt-1]); gt --;
    }
    else // arr[i] == v
        i ++;
}&lt;/p&gt;
&lt;p&gt;swap( arr[l] , arr[lt] );
// 此时 arr[lt...gt-1]部分为数组中元素等于v的部分
// 之后只需要递归地对arr[l...lt-1]和arr[gt...r]两部分进行三路快排即可
```&lt;/p&gt;
&lt;p&gt;三路快排如此好的解决了近乎有序的数组和有大量重复数组的元素排序问题，以至于在很多语言的标准库中，排序接口使用的就是三路快排的思路，比如Java语言：）&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;好了，我们非常快速地回顾了一遍快速排序算法。下面，我们来看LeetCode上编号为75的题目：&lt;a href="https://leetcode.com/problems/sort-colors/"&gt;Sort Color&lt;/a&gt;。请英文好，或者想练习英文的同学，直接点链接读题。只想阅读中文的同学，可以直接看下面的分析。&lt;/p&gt;
&lt;p&gt;这个问题，LeetCode告诉我们，是Facebook，Microsoft和Pocket Gems的面试题。在LeetCode中难度标记为Medium。怎么样，是不是觉得很高大上？&lt;/p&gt;
&lt;p&gt;题目大意是：有一个数组，其中的元素取值只有可能是0，1，2。为这样一个数组排序。&lt;/p&gt;
&lt;p&gt;当然了，面对这个问题，大多数同学已经会想，肯定不是用普通的排序算法完成这个任务吧？嗯，既然题目有特殊的条件，肯定有其他的思路，但是如果在真正的面试或者笔试或者机试中，如果你一时没有更好的解法，用最笨的方法也比没有方法强。这就好像在实际项目中，我们不一定一上来就采用最优的解法解决问题，我们首先要解决问题，再谈优化。所以，这样解决问题，我觉得不寒碜：）&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/// 解法一：直接使用排序接口，时间复杂度O(nlogn)
class Solution {
public:
    void sortColors(vector&amp;lt;int&amp;gt;&amp;amp; nums) {
        sort( nums.begin(), nums.end() );
        return;
    }
};&lt;/code&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;不过就像我们前面介绍的一样，这样的解法未免没有充分利用我们的数据的特殊性。要知道，我们的数据取值只有三种可能啊！那么，我们其实可以非常方便的使用一次扫面，计算出0，1，2三个元素的个数，然后直接把他们再按照0，1，2的顺序和个数，放回原数组不就好了！这样，我们只需要两次遍历：第一次统计元素个数，第二次放回原数组，就解决了问题！&lt;/p&gt;
&lt;p&gt;```
/// 解法二：基于计数排序的解法，时间复杂度O(n)，需要两遍遍历
class Solution {
public:
    void sortColors(vector&lt;int&gt;&amp;amp; nums) {&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    int count[3] = {0};  // count[i]表示元素i的个数
    for( int i = 0 ; i &amp;lt; nums.size() ; i ++ ){
        assert( nums[i] &amp;gt;= 0 &amp;amp;&amp;amp; nums[i] &amp;lt;= 2 );
        count[ nums[i] ] += 1;
    }

    int index = 0;
    for( int i = 0 ; i &amp;lt; count[0] ; i ++ ) // 安置count[0]个0
        nums[index++] = 0;
    for( int i = 0 ; i &amp;lt; count[1] ; i ++ ) // 安置count[1]个1
        nums[index++] = 1;
    for( int i = 0 ; i &amp;lt; count[2] ; i ++ ) // 安置count[2]个2
        nums[index++] = 2;

    return;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;};
```&lt;/p&gt;
&lt;p&gt;上面的代码很好理解，在这里提示大家两个小问题。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;大家可以看到，在第一遍遍历的时候，我添加了一个assert语句，来确保传入的nums中的每个元素，取值确实都是0，1，2的。这让我们的代码更严谨。当然了，对于错误处理，我们也可以抛异常或者走别的逻辑，在这里，我简单的使用assert。在面试过程中，表明我care这个问题了，点到即可。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;大家可以看到，后面我是用了三次循环，分别按照0, 1, 2三个元素。这在这个问题中是有效的，但是如果我们的nums的取值范围是0-100呢？0-1000呢？事实上，同样的思路依然有效。但是，我们在第二次遍历安置元素的时候，就不能使用这样的写法了。那要怎么写？在这里给大家留一个小练习：）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;事实上，这个算法的思路，就是&lt;strong&gt;计数排序（Counting Sort）&lt;/strong&gt;算法的思路。计数排序可以使用O(n)的时间，来解决元素取值范围固定且相对较小的一组数据的排序问题。怎么样？是不是非常有意思？如果我们为我们的待排序数组加上一些条件限制，就能突破O(nlogn)这个界限。&lt;/p&gt;
&lt;p&gt;实际上，我们经常说的排序算法复杂度至少为O(nlogn)，是有一个前提的，即我们的排序算法是基于元素间的比较的。换句话，严谨地说：&lt;strong&gt;基于比较的排序算法，其时间复杂度至少为O(nlogn)的。&lt;/strong&gt;仔细看看我们上面的计数排序的思路，元素之间根本没有进行比较，我们不需要在任何时候看诸如nums[i]和nums[j]之间的大小关系。&lt;/p&gt;
&lt;p&gt;非基于比较的排序算法还有一些，有兴趣以后再向大家介绍。在这里，希望大家通过这个问题，能够自学计数排序算法，完成一个更加灵活的计数排序算法的接口：）&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;算法有意思的地方就在于，我们总能问自己，是否可以做得更好？上面的解法将算法的时间复杂度降为了O(n)这个级别，但是需要进行两遍遍历。我们有没有可能使用一遍遍历完成这个问题？&lt;/p&gt;
&lt;p&gt;再看看这个问题：将只有0,1,2三种元素的数组排序。如果我们对这个数组进行三路快排的话，并且选择1是pivot，那么第一次partition的过程，就会把数组分成小于1的部分和大于1的部分，也就是所有的0在1的左边；所有的2在1的右边，就已经完成了排序！换句话说，我们对整个数组进行一次以1为pivot的三路快排的partition就完成了排序！而且，只进行了一次遍历！&lt;/p&gt;
&lt;p&gt;所以，我们只需要根据这个特殊的情况，改写三路快排的partition的思想就好了！在这里，我建议大家不要看之前的三路快排partition的代码，自己手写一下。我给出的参考答案如下：&lt;/p&gt;
&lt;p&gt;```
/// 解法三：基于三路快排的partition的解法，时间复杂度O(n)，只需要一边遍历
class Solution {
public:
    void sortColors(vector&lt;int&gt;&amp;amp; nums) {&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    int i = 0;  // nums[0..&amp;lt;i) == 0
    int j = 0;  // nums[i..&amp;lt;j) == 1
    int k = nums.size(); // nums[k..&amp;lt;n) == 2

    while( j &amp;lt; k ){
        if( nums[j] == 1 )
            j++;
        else if( nums[j] == 0 )
            swap( nums[i++] , nums[j++] );
        else{ // nums[j] == 2
            assert( nums[j] == 2 );
            swap( nums[j] , nums[k-1] );
            k --;
        }
    }

    return;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;};
```&lt;/p&gt;
&lt;p&gt;怎么样，是不是很酷？另外，我们的课程曾经提到过，swap操作背后其实有三个步骤。很多问题，我们可以用赋值操作替代swap操作，来进行常数级的优化。有兴趣的同学不妨试试看？对于这个问题，我们可以很容易的抛弃swap操作来完成：）&lt;/p&gt;
&lt;p&gt;到这里，这个问题就为大家讲解完了。有没有觉得很简单的一个问题，也能引申出好多有意思的东西？&lt;/p&gt;
&lt;p&gt;关于以上解析中，留的一些关于这道题目的更多优化解法，可以参考这个&lt;a href="https://github.com/liuyubobobo/Play-Leetcode/"&gt;repo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我们下一次分享见：）&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2017/2017-02-04/readme.md" rel="alternate"/></entry><entry><id>2017/2016-07-11/readme.md</id><title>聊聊swift语言中的“??”</title><updated>2016-07-11T00:00:00-07:00</updated><content>&lt;h2&gt;聊聊swift语言中的“??”&lt;/h2&gt;
&lt;p&gt;大家好，我是liuyubobobo :-)&lt;/p&gt;
&lt;p&gt;我在慕课网上发布了一系列的swift教学视频，称为&lt;a href="https://www.imooc.com/learn/635"&gt;&lt;strong&gt;《玩儿转Swift》&lt;/strong&gt;&lt;/a&gt;系列。这个系列系统地从头到尾讲解了swift的语法知识，夹杂了一部分代码书写规范、设计模式和语言范式方面的内容。但是，无论是计算机语言的学习，还是ios开发的学习，都是一个太大的话题。特别是swift语言这个新兴的语言，还是有很多细节，是我的系列课程无法顾及到的。为此，我尝试将一些有价值的内容以文字的形式呈现出来，希望大家有所收获：）&lt;/p&gt;
&lt;p&gt;这次，我试试更加深入地，和大家聊聊swift中的&lt;code&gt;??&lt;/code&gt; ：）&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;最近很多同学问我，swift语言中，&lt;code&gt;??&lt;/code&gt;是怎么回事。因为在微信交流中，问题不能被清晰表述，所以我很奇怪对于这么简单的一个运算符，会有这么多同学有疑问。后来随着对问题理解的深入，我渐渐意识到了大家遇到的&lt;code&gt;??&lt;/code&gt;的问题和我想象的是不一样的。正巧，对于&lt;code&gt;??&lt;/code&gt;，就算只是简单地把它当做运算符看待，也有很多值得挖掘的地方，为此，便有了这篇文章，绝对深入地来探讨一下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;为什么要有&lt;code&gt;??&lt;/code&gt; -- 空合运算符&lt;/li&gt;
&lt;li&gt;swift实现空合运算符的背后&lt;/li&gt;
&lt;li&gt;&lt;code&gt;??&lt;/code&gt;仅仅是一个运算符吗？&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;p&gt;众所周知，可选型（&lt;code&gt;Optional&lt;/code&gt;）是swift语言的一个很重要的语言特性。窃以为，从swift1到现在的swift2.2，很多改变都直接或者间接地和可选型相关。其中，在swift2中“偷偷”引入了一个看起来很稀疏平常的新运算符—— &lt;code&gt;??&lt;/code&gt;，英文名称为&lt;code&gt;Nil Coalescing Operator&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;在&lt;a href="https://github.com/numbbbbb/the-swift-programming-language-in-chinese"&gt;最新的swift文档的官方中文翻译&lt;/a&gt;中，&lt;code&gt;??&lt;/code&gt;被翻译成了&lt;strong&gt;&lt;em&gt;空合运算符&lt;/em&gt;&lt;/strong&gt;。如果我没有记错，在第一版的官方翻译中，将其翻译成&lt;strong&gt;&lt;em&gt;nil聚合运算符&lt;/em&gt;&lt;/strong&gt;。其实，“聚合”二字属于直译，正是&lt;strong&gt;coalesce&lt;/strong&gt;（读作/kəʊəˈlɛs/）一词的意义，现在的翻译“空合”，将nil的含义——“空”，也放在了其中。值得一提的是，空合运算并非swift语言的首创，&lt;code&gt;C#&lt;/code&gt;，&lt;code&gt;Perl&lt;/code&gt;，&lt;code&gt;PHP7.0.0&lt;/code&gt;等等均有这个运算符（或者叫&lt;code&gt;Null Coalescing Operator&lt;/code&gt;）&lt;/p&gt;
&lt;p&gt;空合运算符做的事情很简单。&lt;code&gt;x ?? y&lt;/code&gt;表示判断&lt;code&gt;x&lt;/code&gt;是否为&lt;code&gt;nil&lt;/code&gt;，若不为&lt;code&gt;nil&lt;/code&gt;，则将&lt;code&gt;x&lt;/code&gt;解包后返回，否则，取&lt;code&gt;y&lt;/code&gt;的值。比如下面的代码：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;swift
let username = loginName ?? "Guest"&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;假设有一个“系统”，用户可以实名登录，也可作为游客匿名登录，此时，用户的登录名&lt;code&gt;loginName&lt;/code&gt;则应该表示为可选型。而系统最终显示的用户名&lt;code&gt;username&lt;/code&gt;则需要根据&lt;code&gt;loginName&lt;/code&gt;的内容做一个判断，如果&lt;code&gt;loginName&lt;/code&gt;为空，则使用默认名称&lt;code&gt;"Guest"&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;好了，大多数教程讲到这里就已经讲完了空合运算符。但是对于我们这群超酷的swifter而言，这一切仅仅是开始：）&lt;/p&gt;
&lt;h3&gt;1. 为什么要有空合运算符？&lt;/h3&gt;
&lt;p&gt;首先，一个显而易见的问题是，这样写和下面两种写法，除了代码更简洁以外，还有其他区别吗？&lt;/p&gt;
&lt;p&gt;```
// 写法1，使用if-else
let username: String
if let loginName = loginName{
    username = loginName
}
else{
    username = "Guest"
}&lt;/p&gt;
&lt;p&gt;// 写法2，使用三目运算符(ternary operator)
let username = loginName != nil ? loginName! : "Guest" 
```&lt;/p&gt;
&lt;p&gt;恩，在我们的这个例子中，答案是&lt;strong&gt;没有区别&lt;/strong&gt;。&lt;code&gt;??&lt;/code&gt;在这里的使用就只是让代码更加简洁了。但要知道，如果我们只是因为代码的简洁就给语言添加各种奇怪的符号，这种语言势必可读性很差。那么多语言都引入空合运算符，绝不仅仅只是因为代码简化，难道空合运算还有功能作用？&lt;/p&gt;
&lt;p&gt;相信很多朋友早就感觉到了，空合运算&lt;code&gt;x ?? y&lt;/code&gt;像极了一种三目运算符使用的简化形式。三目运算符的使用是这样的：&lt;code&gt;condition ? x : y&lt;/code&gt;。我们需要判断表达式&lt;code&gt;condition&lt;/code&gt;的真假，若为真，则取&lt;code&gt;x&lt;/code&gt;，否则取&lt;code&gt;y&lt;/code&gt;。而空合运算就是在判断可选型是否为&lt;code&gt;nil&lt;/code&gt;的情况下，一种特殊的使用三目运算的形式：&lt;code&gt;x != nil ? x : y&lt;/code&gt;。因为在很多语言中，空可以和布尔值&lt;code&gt;False&lt;/code&gt;直接对应，所以我们抽象地将其称为&lt;code&gt;x ? x : y&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;为什么这种特殊的使用三目运算符的方式要被一个新的符号&lt;code&gt;??&lt;/code&gt;所取代？答案就蕴藏在&lt;code&gt;x ? x : y&lt;/code&gt;这个式子中。这里注意，&lt;code&gt;x&lt;/code&gt;被使用了两次！当我们的&lt;code&gt;x&lt;/code&gt;仅仅是一个变量的时候，这无关痛痒。但如果&lt;code&gt;x&lt;/code&gt;是一套复杂的逻辑呢？&lt;/p&gt;
&lt;p&gt;依然以我们引以为傲，宣称自由民主的可以匿名登录的系统为例。现在登录过程有一个函数&lt;code&gt;login()&lt;/code&gt;，返回&lt;code&gt;String?&lt;/code&gt;，登陆成功则返回登录用户名的&lt;code&gt;String&lt;/code&gt;，失败则返回&lt;code&gt;nil&lt;/code&gt;。那么此时，使用三目运算符获取系统显示的用户名就变成了这个样子：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;swift
let username = login() != nil ? login()! : "Guest"&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;有没有觉得整个人都不好了？为什么要登录（调用&lt;code&gt;login()&lt;/code&gt;）两次？在这里如果只是对效率有影响也就罢了（也！！就！！罢！！了！！你的年终奖应该泡汤了！）更关键的是，如果&lt;code&gt;login()&lt;/code&gt;函数带有副效果（side effect）怎么办？比如，用户登录成功的话，顺便给一个记录用户登陆次数的指示器+1，此时，逻辑都出问题了，用户的每次登录被记录了两次！&lt;/p&gt;
&lt;p&gt;空合运算符因此应运而生。相较于&lt;code&gt;x ? x : y&lt;/code&gt;，在&lt;code&gt;x ?? y&lt;/code&gt;中，保证了&lt;code&gt;x&lt;/code&gt;只被运算了一次。这便是空合运算符的功能作用。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;swift
let username = login() ?? "Guest"&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;当然了，很多同学都表示不会写出&lt;code&gt;login() != nil ? login()! : "Guest"&lt;/code&gt;这么傻的代码。但是，要知道，在这里我只是举一个例子。对于login这么重要的模块儿，我们当然不会这么做。但是，你真的敢保证，自己在庞大的工程深处，没有写出过类似性质的代码吗？哦，你敢保证？我的意思是，你敢保证你的队友，不是，对手公司派来的内奸，也不会写出这样的代码吗？：）&lt;/p&gt;
&lt;h3&gt;2. 空合运算符的背后&lt;/h3&gt;
&lt;p&gt;你以为空合运算背后真的这么简单吗？现在让我们在XCode中，按住&lt;code&gt;Command&lt;/code&gt;点击这对儿可爱的&lt;code&gt;??&lt;/code&gt;，看看这个运算符在swift标准库中是怎么声明的？答案是这样的：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;swift
public func ??&amp;lt;T&amp;gt;(optional: T?, @autoclosure defaultValue: () throws -&amp;gt; T) rethrows -&amp;gt; T&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;??&lt;/code&gt;左边的那个变量叫&lt;code&gt;optional&lt;/code&gt;，是一个&lt;code&gt;T?&lt;/code&gt;类型，右边那个变量叫&lt;code&gt;defaultValue&lt;/code&gt;，意思是默认值。恩，很好，非常可以理解，&lt;code&gt;optional&lt;/code&gt;是可选型，万一是&lt;code&gt;nil&lt;/code&gt;我们就用默认值（&lt;code&gt;defaultValue&lt;/code&gt;）。这和我们的理解完全一样，so far so good。但是，等等，&lt;code&gt;defaultValue&lt;/code&gt;的类型是什么鬼？&lt;code&gt;() throws -&amp;gt; T&lt;/code&gt;，这俨然是个函数啊？可我们在使用的时候一直在传入一个变量值甚至是硬编码的常量值啊？在&lt;code&gt;defalutValue&lt;/code&gt; 前的那个&lt;code&gt;@autoclosure&lt;/code&gt;又是什么鬼？&lt;/p&gt;
&lt;p&gt;&lt;img alt="让我静静" src="https://github.com/liuyubobobo/my-blog/raw/master/2017/2016-07-11/jingjing.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;事实上，之前，我们一直在探讨&lt;code&gt;x ?? y&lt;/code&gt;这个模型里的&lt;code&gt;x&lt;/code&gt;，但是&lt;code&gt;y&lt;/code&gt;呢？&lt;/p&gt;
&lt;p&gt;回到我们自由民主的伟大系统中，为了昭显这个系统的伟大，对于游客，我们的系统才不会使用千篇一律的&lt;code&gt;"Guest"&lt;/code&gt;这个名字呢，而是使用世界一流的智能算法，为每一名游客起一个好听到没朋友的名字。恩恩，这个功能被封装在了一个看起来很平庸的函数中——&lt;code&gt;generateGuestName()&lt;/code&gt;。我们就是要这么低调。虽然这个函数里面并不低调，它使用了最先进的智能算法，实时采集了全世界最酷的名字（包括狗的名字，当然，这属于机密，不能外泄），然后随机选择了一个...恩，总之很复杂，消耗计算资源很多就对了。&lt;/p&gt;
&lt;p&gt;现在，我们的系统为了显示用户名，就要这样：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;swift
let username = login() ?? generateGuestName()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这么写有什么问题？如果不经过特殊处理，编译器会先执行&lt;code&gt;login()&lt;/code&gt;，之后不管&lt;code&gt;login()&lt;/code&gt;返回值是不是&lt;code&gt;nil&lt;/code&gt;，都再调用一下&lt;code&gt;generateGuestName()&lt;/code&gt;！不信，我们自己试验一下。照着&lt;code&gt;??&lt;/code&gt;的声明，实现一个我们自己的空合运算符，管它叫&lt;code&gt;???&lt;/code&gt;吧：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;swift
infix operator ???{}
func ???&amp;lt;T&amp;gt;(optional: T? , defaultValue: T) -&amp;gt; T{   
    if let value = optional{ return value }
    return defaultValue
}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;之后，我们这样尝试使用一下我们自己的 &lt;code&gt;???&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;```swift
func A() -&amp;gt; String{
    print("A is called!!!")
    return "A"
}&lt;/p&gt;
&lt;p&gt;func B() -&amp;gt; String{
    print("B is called!!!")
    return "B"
}&lt;/p&gt;
&lt;p&gt;let AorB = A() ??? B()&lt;/p&gt;
&lt;p&gt;// 控制台打印出
// A is called!!!
// B is called!!!
```&lt;/p&gt;
&lt;p&gt;看看控制台！Oh My Gosh，&lt;code&gt;B is called&lt;/code&gt;被打印了出来！尽管&lt;code&gt;A()&lt;/code&gt;函数没有任何质疑的为我们返回了一个非可选型的字符串，&lt;code&gt;B()&lt;/code&gt;函数依然被执行了！&lt;/p&gt;
&lt;p&gt;回到我们的登录系统，如果我们不做些什么，&lt;code&gt;login() ?? generateGuestName()&lt;/code&gt; 这个式子将无视你是否有真实的名字，都要强行调用一下&lt;code&gt;generateGuestName()&lt;/code&gt;。我们的系统看起来不是那么自由民主了。（当然，其实我只是从效率角度思考问题。毕竟这关系到我的年终奖😅）&lt;/p&gt;
&lt;p&gt;怎么解决这个问题？答案是让&lt;code&gt;defaultValue&lt;/code&gt;不是一个值，而是一个函数，这样一来，我们可以在需要的时候再执行这个函数，而不需要的话，就不执行。我们把自己的&lt;code&gt;???&lt;/code&gt;这样改写：&lt;/p&gt;
&lt;p&gt;```swift
// 注意defaultValue的定义，传入的是一个函数参数！
func ???&lt;T&gt;(optional: T? , defaultValue: ()-&amp;gt;T) -&amp;gt; T{
    
    if let value = optional{ return value }
    return defaultValue() 
    //注意defaultValue后面的小括号，这是一次函数执行。
    //在此之前，defaultValue不会被计算！
}&lt;/p&gt;
&lt;p&gt;// A(), B()两个函数定义和前面一样，不再重复&lt;/p&gt;
&lt;p&gt;let AorB = A() ??? B&lt;br /&gt;
// 注意，此时，???的第二个参数是传入一个函数&lt;/p&gt;
&lt;p&gt;// 控制台打印出
// A is called!!!
// 并且只有A is called!!! 欧耶！
```&lt;/p&gt;
&lt;p&gt;非常棒！这样我们解决了一个很重要的世界难题。我没有夸张，听说过&lt;strong&gt;最短路原则&lt;/strong&gt;吗？我们为自己的&lt;code&gt;???&lt;/code&gt;符号添加上了执行&lt;strong&gt;最短路原则&lt;/strong&gt;的能力！像伟大的&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;运算符和&lt;code&gt;||&lt;/code&gt;运算符一样，只有在需要的时候，我们才会计算第二个操作符的值！&lt;/p&gt;
&lt;p&gt;不过，这样一来，缺点也很明显。一方面，&lt;code&gt;A() ??? B&lt;/code&gt;这个调用形式很奇怪（竟然不对称？这是要逼死处女座啊！？），另一方面，我们的&lt;code&gt;???&lt;/code&gt;的第二个参数只能传入函数型参数，为了传入一个值，我们必须手动将其封装成一个函数，当然，最简单的封装方式是做成一个闭包，像这样：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;swift
let AorX = A() ??? {return "X"}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这未免太不方便了:(&lt;/p&gt;
&lt;p&gt;为此，苹果向我们提供了一个新的关键字，&lt;code&gt;@autoclosure&lt;/code&gt;，看名字就知道了，这个关键字将一个类型自动转换成了一个闭包。如果你本身就是闭包（或者函数），非常好，你将享受这种延迟调用带来的优势；但如果你不是闭包，你将被自动封装成闭包，同时也享受了这种延迟调用带来的性能提升！比如&lt;code&gt;"X"&lt;/code&gt;，就会被封装成&lt;code&gt;{return "X"}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;试试看：
```swift
infix operator ???{}
func ???&lt;T&gt;(optional: T? , @autoclosure defaultValue: ()-&amp;gt;T) -&amp;gt; T{
    if let value = optional{ return value}
    return defaultValue()
}&lt;/p&gt;
&lt;p&gt;let AorB = A() ??? B()
let AorX = A() ??? "X"
```&lt;/p&gt;
&lt;p&gt;以上两个调用都是合法的，并且在第一个调用中，只有&lt;code&gt;A()&lt;/code&gt;被执行了，&lt;code&gt;B()&lt;/code&gt;不会被执行。使用&lt;code&gt;@autoclosure&lt;/code&gt;，你将之前的两个问题都解决了。又可以愉快地和处女座的同学做朋友了：）&lt;/p&gt;
&lt;p&gt;值得一提的是，此时，你已经可以扔掉自己定义的&lt;code&gt;???&lt;/code&gt;而更加自信地去使用系统提供给你的&lt;code&gt;??&lt;/code&gt;了。我们的&lt;code&gt;???&lt;/code&gt;和系统的&lt;code&gt;??&lt;/code&gt;逻辑上是一模一样的，只不过系统的&lt;code&gt;??&lt;/code&gt;还提供了错误处理的功能（&lt;code&gt;throws&lt;/code&gt; and &lt;code&gt;rethrows&lt;/code&gt;）。以后有机会，我再向大家介绍&lt;code&gt;throws&lt;/code&gt;和&lt;code&gt;rethrows&lt;/code&gt;里好玩儿的东东，包括&lt;code&gt;@autoclosure&lt;/code&gt;相关，还有很多值得我们探讨的内容。恩，最后的这句话是广告，不过你已经看完了：）&lt;/p&gt;
&lt;h3&gt;3. ?? 仅仅是一个运算符吗？&lt;/h3&gt;
&lt;p&gt;到目前为止，我们一直在分析空合运算符。但要注意，我的文章标题不是“聊聊空合运算符”，而是“聊聊&lt;code&gt;??&lt;/code&gt;”。在swift语言中，&lt;code&gt;??&lt;/code&gt;还能另作他用？&lt;/p&gt;
&lt;p&gt;随便创建一个ios的项目，然后随便找一个可以执行的地方写这么一行代码:&lt;code&gt;UIApplication.sharedApplication().delegate?.window&lt;/code&gt;，看看这个&lt;code&gt;window&lt;/code&gt;的类型，你发现了什么？&lt;/p&gt;
&lt;p&gt;&lt;img alt="我就是专门迷惑swift程序员的&amp;quot;??&amp;quot;类型" src="https://github.com/liuyubobobo/my-blog/raw/master/2017/2016-07-11/confuse.png" /&gt;&lt;/p&gt;
&lt;p&gt;怎么类型是&lt;code&gt;UIWindow??&lt;/code&gt;，两个问号是怎么个意思？空合？空在哪里？怎么合啊！？还能不能愉快地玩耍了？老子不干了！&lt;/p&gt;
&lt;p&gt;&lt;img alt="摔" src="https://github.com/liuyubobobo/my-blog/raw/master/2017/2016-07-11/shuai.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;别急，我们冷静下来，分析分析。在这里，&lt;code&gt;??&lt;/code&gt;显然是修饰&lt;code&gt;UIWindow&lt;/code&gt;的（咦？怎么像英语语法课？恩，语法课都差不多啦，这里是swift语法课...）就像&lt;code&gt;?&lt;/code&gt;用于修饰&lt;code&gt;UIWindow&lt;/code&gt;，就构成了&lt;code&gt;UIWindow&lt;/code&gt;的可选型&lt;code&gt;UIWindow?&lt;/code&gt;一样。为了方便，我们下面举例用大家都喜闻乐见的&lt;code&gt;Int&lt;/code&gt;，我们可以这么声明一个类型：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;swift
var x: Int??&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;编译器静悄悄地让这句声明通过了编译，连一丁点儿抵抗的意思都没有。这个神秘的&lt;code&gt;x&lt;/code&gt;是什么类型？&lt;/p&gt;
&lt;p&gt;不要想得太复杂，这里没有任何神秘的元素，既然&lt;code&gt;?&lt;/code&gt;表示可选型，这个&lt;code&gt;??&lt;/code&gt;表示的就是可选型的可选型。换句话说，我们的变量&lt;code&gt;x&lt;/code&gt;中，可以存放&lt;code&gt;nil&lt;/code&gt;，也可以存放一个整型的可选型&lt;code&gt;Int?&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这么理解是不是清晰了很多？也就是说，如果&lt;code&gt;x&lt;/code&gt;里要真的存放了一个整数的话，我们需要解包两次！比如这样：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;swift
var x: Int?? = 42
if let anotherX = x{
    // 此时，anotherX的类型是整型的可选型Int?
    // 要想使用其中的值，还是需要解包！
    if let value = anotherX{
        print(value)
    }
}
// 控制台打印出42&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;当然了，我们也可以这么解包。这里，希望你没有被太多的&lt;code&gt;x&lt;/code&gt;搞晕：
&lt;code&gt;swift
if let x = x, value = x{
    print(value)
}
// 控制台打印出42&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;不过看起来这么欠揍的&lt;code&gt;x&lt;/code&gt;，很多同学可能更愿意硬来...&lt;/p&gt;
&lt;p&gt;&lt;code&gt;swift
print(x!!)  // 注意，是两个叹号！！
// 控制台打印出42&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;恩，理解了这个可选型的可选型&lt;code&gt;??&lt;/code&gt;以后，相信脑洞大开的各位swifter一定会满心欢喜地写出这样的声明:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;swift
let realX: Int???????????????? = 42&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;编译器是不会报错的，一切都合法。下次迷惑对手的时候就这么干。&lt;/p&gt;
&lt;p&gt;&lt;img alt="let realX: Int???????????????? = 42" src="https://github.com/liuyubobobo/my-blog/raw/master/2017/2016-07-11/smirk.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;不过言归正传，&lt;code&gt;??&lt;/code&gt;除了迷惑对手以外，有什么实际意义？毕竟我们作为闷声发大财...哦，不对，闷声研究计算机科学的swifter来说，没有那么多对手啊...&lt;/p&gt;
&lt;p&gt;实际上，对于我们之前的例子而言，&lt;code&gt;UIApplication.sharedApplication().delegate&lt;/code&gt;下的&lt;code&gt;window&lt;/code&gt;类型是&lt;code&gt;UIWindow??&lt;/code&gt;，这背后是两个机制共同作用的结果。我们首先需要看一下这个&lt;code&gt;UIApplication.sharedApplication().delegate&lt;/code&gt;是什么东东？按住&lt;code&gt;Command&lt;/code&gt;点击&lt;code&gt;delegate&lt;/code&gt;，我们可以看到，这个&lt;code&gt;delegate&lt;/code&gt;是定义在&lt;code&gt;UIApplication&lt;/code&gt;下的一个&lt;code&gt;UIApplicationDelegate?&lt;/code&gt;类型的成员变量：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;swift
public class UIApplication : UIResponder {
    public class func sharedApplication() -&amp;gt; UIApplication
    unowned(unsafe) public var delegate: UIApplicationDelegate?
    // ...
    // 以下省略很多代码
}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;按住&lt;code&gt;Command&lt;/code&gt;看一下&lt;code&gt;UIApplicationDelegate&lt;/code&gt;的定义，就会发现，&lt;code&gt;UIApplicationDelegate&lt;/code&gt;是一个协议，里面的&lt;code&gt;window&lt;/code&gt;这个变量是这么定义的：&lt;/p&gt;
&lt;p&gt;```swift
public protocol UIApplicationDelegate : NSObjectProtocol {
    // ... 省略了很多代码 &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@available(iOS 5.0, *)
optional public var window: UIWindow? { get set }
// XCode7.3中，在UIApplication.h的395行

// ... 省略了很多代码
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;}
```&lt;/p&gt;
&lt;p&gt;&lt;code&gt;UIApplicationDelegate&lt;/code&gt;是一个协议。在swift中，协议中定义的属性或者方法如果想被表示为&lt;strong&gt;可选择被实现的&lt;/strong&gt;，需要加上&lt;code&gt;optional&lt;/code&gt;的关键字（还要声明成&lt;code&gt;@objc&lt;/code&gt;，有时间再深入介绍啦）。相应的，在协议的实现中，这个“可选择被实现的属性或者方法”，就会被解析成可选型。这是第一个&lt;code&gt;?&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;另一个层面，在这个协议的定义里，&lt;code&gt;window&lt;/code&gt;变量本身就被定义成一个可选型&lt;code&gt;UIWindow?&lt;/code&gt;，于是有了第二个&lt;code&gt;?&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;也就是说，第一个&lt;code&gt;?&lt;/code&gt;表示这个变量在协议中是可选择实现的；第二个&lt;code&gt;?&lt;/code&gt;，表示这个变量可以为&lt;code&gt;nil&lt;/code&gt;。这便是我们的例子里，最终实现出来供我们使用的&lt;code&gt;UIApplication.sharedApplication().delegate?.window&lt;/code&gt;，其类型是&lt;code&gt;UIWindow??&lt;/code&gt;的原因。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;但在我们实际编程中，会经常使用诸如&lt;code&gt;Int??&lt;/code&gt;这种类型吗？反正我还没有遇到过。如果大家发现了需要&lt;code&gt;Int??&lt;/code&gt;才能合理表意的场景，请一定和我分享：）&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2017/2016-07-11/readme.md" rel="alternate"/></entry></feed>