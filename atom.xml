<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh-CN"><id>https://github.com/liuyubobobo/my-blog</id><title>是不是很酷</title><updated>2020-01-03T01:26:06-08:00</updated><author><name>liuyubobobo</name><email>liuyubobobo@gmail.com</email></author><link href="https://github.com/liuyubobobo/my-blog" rel="alternate"/><generator uri="https://github.com/StdioA/bobobo-feed" version="0.0.1">bobobo-feed</generator><icon>https://www.gravatar.com/avatar/c4c67099540a54bd845d8e404fe8cc41</icon><subtitle>坚持有质量的技术原创，用技术人的视角看世界</subtitle><entry><id>2019/2019-12-21/readme.md</id><title>科技巨头和虚伪的左派</title><updated>2019-12-21T00:00:00-07:00</updated><content>&lt;h2&gt;科技巨头和虚伪的左派&lt;/h2&gt;
&lt;p&gt;美国众议院通过了川普的弹劾程序，相信大家都知道了。下一步，这个弹劾程序将走到参议院。&lt;/p&gt;
&lt;p&gt;至此，川普是美国历史上第三个被众议院弹劾的总统了。值得一提的是，前两次弹劾的总统——安德鲁.约翰逊总统和克林顿总统，最终都以失败告终。也就是说，美国还没有成功弹劾某个总统的先例。&lt;/p&gt;
&lt;p&gt;如果这次参议院真的破天荒地通过了弹劾案，那么川普将成为美国历史上第一位被成功弹劾的总统。这也将成为美国，乃至整个世界的一个里程碑的事件。&lt;/p&gt;
&lt;p&gt;但是有一说一，川普被弹劾成功的概率很低，因为弹劾案到参议院，需要 2/3 的票数通过才行。&lt;/p&gt;
&lt;p&gt;现在，参议院里，共和党人和民主党人的比例是多少呢？53：47。虽然基本持平，但是共和党人占优。&lt;/p&gt;
&lt;p&gt;算下来，需要有 20 名共和党人“叛变”，投票比例变成 33：67，才能成功弹劾川普。这个概率实在太低了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;为什么说共和党人叛变这么难？因为，在众议院投票的过程中，所有的共和党人，都表示川普无罪！&lt;/p&gt;
&lt;p&gt;在众议院的投票中，给川普的罪名是：“滥用权力”和“妨碍国会调查”两项指控。&lt;/p&gt;
&lt;p&gt;最终的投票结果，“滥用权力”的指控，以 230 票支持，197 票反对通过；&lt;/p&gt;
&lt;p&gt;“妨碍国会调查”的指控，以 229 票支持，198 票反对通过。&lt;/p&gt;
&lt;p&gt;但是，如果我们看投票人的党派划分，就很有意思了。对这两项指控，共和党人全部投反对票；而民主党人，只有两人反对川普滥用权力，三人反对川普妨碍国会调查，其他人统统投支持票。&lt;/p&gt;
&lt;p&gt;近乎可以理解成，&lt;strong&gt;所有共和党人都认为川普无罪，所有民主党人都认为川普有罪。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="vote" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-12-21/vote.png" /&gt;&lt;/p&gt;
&lt;p&gt;如此严肃的问题，投票结果却因为党派的不同有着如此清晰的界限，这让我觉得整个过程就像幼儿园小朋友吵架一样：反正我跟你不是一拨儿的。像极了一场闹剧。&lt;/p&gt;
&lt;p&gt;然而，这样的闹剧，在美国也不是第一次了。在我看来，去年卡瓦诺先生在接受川普的大法官提名以后，被左派人士指控 36 年前犯下了一场性侵案而闹得沸沸扬扬，也是一场闹剧。有机会再和大家分享一下。&lt;/p&gt;
&lt;p&gt;在这些事件中，我们都可以看到美国左右两派深深的裂痕。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;在启动川普的弹劾程序以后，川普在推特上，发布了这样一张图片。&lt;/p&gt;
&lt;p&gt;&lt;img alt="trump" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-12-21/trump.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;上面的文字是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In Realiity, They're not after me, they're after you. I'm just in the way.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我的翻译：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实际上，他们的目标不是我，而是你们。我只是挡了他们的路而已。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这里的“我”，显然是川普本人。&lt;/p&gt;
&lt;p&gt;“你们”是谁呢？就是川普的支持者们。按照媒体的画像：男性、白人、穷、受教育程度低、生活在“绣带”。&lt;/p&gt;
&lt;p&gt;而“他们”，则是美国社会精英聚集的左派人士。&lt;/p&gt;
&lt;p&gt;换句话说，川普在向他的支持者喊话：左派人士又要来“剥削”你们的生活啦。但是，为了更好地“剥削”你们，他们必须先要把我弹劾掉。&lt;/p&gt;
&lt;p&gt;川普的“喊话”有效吗？目前看来，挺有效的。现在，&lt;strong&gt;川普的支持率不降反升。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;左派人士的问题，是近些年，美国的热点话题。&lt;/p&gt;
&lt;p&gt;在英语里，有一个词，叫“liberal hypocrisy”，翻译过来，就是左派（自由派）的伪善。&lt;/p&gt;
&lt;p&gt;为什么总有人说左派人士伪善呢？川普曾经举过一个例子，虽然不完全合适，但是也挺妙的。&lt;/p&gt;
&lt;p&gt;川普想建一堵墙，以阻挡更多的非法移民进入美国。大多数左派人士都是极力反对这一设想的，认为不人道。无论是希拉里，还是奥巴马，都不支持。&lt;/p&gt;
&lt;p&gt;但关键是，无论是希拉里，还是奥巴马，自己的豪宅，都毫无例外地用高墙和外界隔绝。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;左派的伪善，另外一个极好的例子，就是硅谷的科技巨头。&lt;/p&gt;
&lt;p&gt;众所周知，硅谷的科技巨头们，都是在“合法避税”的。&lt;/p&gt;
&lt;p&gt;就在上周，vice 的一篇文章表示，硅谷的大企业们，在过去的十年，至少欠美国人民 1000 亿美元的税款。&lt;/p&gt;
&lt;p&gt;&lt;img alt="tax" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-12-21/tax.png" /&gt;&lt;/p&gt;
&lt;p&gt;硅谷大企业们避税的重要方式，是将公司注册在鸟不拉屎的小岛上，比如开曼群岛。这样一来，从法律和会计意义上，这些公司的很多账目，本质是这些小岛上的生意，就可以享受极低的税率了。&lt;/p&gt;
&lt;p&gt;这样做虽然合法，但明显不合理。&lt;/p&gt;
&lt;p&gt;而搞笑的时候，近乎所有的硅谷大企业，都是左倾的。换句话说，他们认为政府有更多的责任，补助穷人，救济难民。&lt;/p&gt;
&lt;p&gt;可是，你们这群大把赚钱的硅谷大企业疯狂地逃税，政府哪里有钱补助穷人，救济难民？如果所有的硅谷大企业都不逃税，每年政府的财政收入能多出好大一笔钱，很多问题都能有效解决。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;左派的伪善。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;但是，这个问题有解吗？&lt;/p&gt;
&lt;p&gt;其实是没有解的。至少短期内没有。&lt;/p&gt;
&lt;p&gt;为什么这么说呢？我们可以假想一下：如果某一个硅谷大企业，比如说 Google 吧，突然良心发现，要肩负起社会责任，开始不再避税，全额交税，会发生什么？&lt;/p&gt;
&lt;p&gt;首先，肯定是 Google 的员工开始喜气洋洋地宣布：看我们公司，多牛逼，不作恶。我们永远是 Google，永远是硅谷的道德标杆！&lt;/p&gt;
&lt;p&gt;但实际上呢？由于公司多交了税，这就意味着公司的盈利能力下降了！公司的盈利能力下降，反映到市场上，就是股价的下调。&lt;/p&gt;
&lt;p&gt;手里握有 Google 股票的员工，肯定第一时间得到消息，在互联网上嘚瑟一下自己公司的“不作恶”以后，扭头就去卖股票了。因为他们知道这股票肯定跌嘛！&lt;/p&gt;
&lt;p&gt;但是，自己的同事，搞不好不等到互联网嘚瑟一下，就已经去卖股票了。&lt;/p&gt;
&lt;p&gt;至于自己的上级，因为知道的消息比自己早，可能早就把股票已经给卖了。&lt;/p&gt;
&lt;p&gt;大家纷纷卖，股票一定下降。市场上的股东见势，也会开始卖掉手上的股票。因为整体市场看跌嘛。&lt;/p&gt;
&lt;p&gt;于是，就会引起恐慌性抛售。这样一来，搞不好瞬间冲垮整个 Google。&lt;/p&gt;
&lt;p&gt;讽刺的是：只因为 Google 决定带头不避税，就很有可能遭受这样的灭顶之灾。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;所以，现在，所有的科技巨头都避税，反而是大家都陷入了一个博弈论的平衡之中。宛如囚徒困境一般，对自己的最优解，竟然造成了全社会的最差解。&lt;/p&gt;
&lt;p&gt;看来，这件事儿还真是难。&lt;/p&gt;
&lt;p&gt;但反正我们在中国，我们不管美国人怎么折腾，我们自己只要加油就好了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-12-21/readme.md" rel="alternate"/></entry><entry><id>2019/2019-12-11/readme.md</id><title>随便聊聊认知和赚钱</title><updated>2019-12-11T00:00:00-07:00</updated><content>&lt;h2&gt;随便聊聊认知和赚钱&lt;/h2&gt;
&lt;p&gt;昨天，我的朋友圈里被这样一段话刷屏了：&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="renzhi" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-12-11/renzhi.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我其实很少聊“赚钱”这个话题的，借着这段话，忍不住随便说两句：&lt;/p&gt;
&lt;p&gt;这段文字说的没毛病，但是不知道为什么，我很厌烦这段话。&lt;/p&gt;
&lt;p&gt;我仔细思考了一下，可能是因为，这段话过度强调“认知”。似乎在说，对世界的认知足够高，就能赚到大钱一样。&lt;/p&gt;
&lt;p&gt;但实际不是这样的。&lt;/p&gt;
&lt;p&gt;认知重要吗？当然重要。但是，我以为，&lt;strong&gt;在信息相当发达的今天，大多数人对世界的认知，是超过自己实际赚到的钱的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为什么会这样？因为只有认知是不够的，必须要实干。&lt;/p&gt;
&lt;p&gt;更关键的是，提高认知最有效的方式，就是实干。&lt;/p&gt;
&lt;p&gt;找一个真正做电商的人，哪怕是失败了，没赚钱，甚至是赔钱的人，他对电商领域的认知，都会比普通人高出几百倍。这些实践过后对领域的透彻理解，即所谓的经验，才是真正能帮助这个人下次再次成功的关键。&lt;/p&gt;
&lt;p&gt;但是，很多人，偏偏只聊认知，不去实干。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;无独有偶，就在昨天，我的朋友圈里，一个上海复旦大学 EMBA 同学，分享了在他的课堂上的一个观点：&lt;/p&gt;
&lt;p&gt;课堂的教授分享了一个数据：从有想法创业的人，到真正开始创业的人，转化比例是 2.7%。&lt;/p&gt;
&lt;p&gt;所以很多时候，确实不怕外部竞争对手，只怕自己内部决策或执行错误，死在自己手上。&lt;/p&gt;
&lt;p&gt;那 97.3% 的人中，有非常多厉害的精英，如果他们真的敢开始自己干，会是很可怕的对手。幸运的是，他们不敢 ; &lt;/p&gt;
&lt;p&gt;而那些敢于开干的 2.7% 的人中，有一部分是有钱人的玩票，他们没有太大的压力与动力，也没有太多接地气的实战经验，所以也不足为惧。&lt;/p&gt;
&lt;p&gt;剩下真正有经验，有压力，有动力的创业者，可能能力不够、资源不够，其实也构不成威胁；&lt;/p&gt;
&lt;p&gt;最后剩下的，最有可能短兵相接的对手，很可能赛道不同，大家可以当合作伙伴，而不是竞争对手。&lt;/p&gt;
&lt;p&gt;所以，怕啥竞争？别把自己玩死就算赢了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;上面这段话的结论，落到了“竞争”的问题上，但我倒觉得，对于大多数人，可能更需要关注的是：&lt;strong&gt;实干的意义。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;其实，程序员应该最明白这个道理。毕竟。看再多的书，都不如自己实际实现一段代码提高得快。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;只是一味追求“提高认知”，而不去做事情，是永远都赚不到钱的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-12-11/readme.md" rel="alternate"/></entry><entry><id>2019/2019-12-04/readme.md</id><title>不要把鸡蛋放到一个篮子里</title><updated>2019-12-04T00:00:00-07:00</updated><content>&lt;h2&gt;不要把鸡蛋放到一个篮子里&lt;/h2&gt;
&lt;p&gt;今天说的话题可能有点儿沉重。&lt;/p&gt;
&lt;p&gt;先讲两个我在网上看到的故事。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;第一个故事的主人公叫 Grace，一个很普通的，流行于上个世纪的美国名字。实际上，Grace 是 1910 年生人，于 2010 年去世，享年整整 100 岁。&lt;/p&gt;
&lt;p&gt;Grace 一生主要做的职位是秘书。收入虽然不高，但也属于美国的中产阶级。Grace 一生未婚，无儿无女。在她去世以后，人们惊讶地发现，Grace 留有 700 万美元的遗产。在她的遗嘱中，这 700 万美元在她去世后，都捐助给了慈善机构。&lt;/p&gt;
&lt;p&gt;但人们更感兴趣的是，平凡无奇的 Grace，为什么会留有这么大的一笔遗产？&lt;/p&gt;
&lt;p&gt;后来的调查显示，这其中没有任何秘密。Grace 只不过是一个省吃俭用，开销极小的老人而已。她把她的大部分积蓄，都分散扔到了几个相对安全的基金中，不断地复利，滚大。虽然这 100 年间，美国的经济也几经动荡，但 Grace 的账户，却在这 100 年间，尤其是蓬勃发展的美国新经济时期，滚成了 700 万美金的巨款。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;另一个故事，主人公叫 Richard。这也是一个平凡的美国名字，但是，Richard 的职位比 Grace 不平凡得多。Richard 是美林证券拉丁美洲分部的副总裁。&lt;/p&gt;
&lt;p&gt;美林证券曾是世界最大的证券零售商之一，总部位于美国纽约，在世界超过40个国家经营。作为这样一个金融巨头的高管，Richard 自然过着优越的生活。他是哈佛大学的毕业生，在美国名下有两处房产，其中的一处超过了 2 万平方英尺。&lt;/p&gt;
&lt;p&gt;但是，同样是 2010 年，Grace 去世的那一年，Richard 不得不宣布破产。因为受金融危机的影响，Richard 的投资不但赔得精光，还因为杠杆，让他负债累累。他不得不变卖那栋面积超过 2 万平方英尺的豪宅。&lt;/p&gt;
&lt;p&gt;为什么？因为，Richard 的大部分投资，都在自己骄傲的美林证券内部，而这些投资，大部分都牵扯到了当时引发金融危机的元凶——次级贷款。&lt;/p&gt;
&lt;p&gt;实际上，因为受 2008 年金融危机的影响，美林集团也陷入了巨大的经济危机，蒙受了超过 500 亿美元的损失，不得不将自己出售给了美国银行，以避免破产的命运。至此，美林证券长达95年的独立公司经营的道路，画上了一个句号。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;Richard 当然可以把自己破产的原因全部抛给金融危机。但问题是，Grace 的财产并没有受到金融危机的影响。&lt;/p&gt;
&lt;p&gt;从专业角度看，Grace 不仅没有接受过哈佛大学专业的金融教育，更没有常年累月的金融行业从业经验。但是，在投资这件事上，Grace 这样一个平凡的老人，却打败了华尔街大亨 Richard。&lt;/p&gt;
&lt;p&gt;为什么会这样？在我看来，道理很简单。一方面，没有什么金融知识的 Grace，反而不会去接触那些复杂的，诸如次级贷款这样的理财产品，这让她免于灾难。&lt;/p&gt;
&lt;p&gt;另一方面，Grace 将她的财产，分散在了不同领域的低风险基金中，不仅保证安全，还保证分散。所谓的不把鸡蛋放在一个篮子里。相较而言，Richard 却将他的大部分资产，全都扔给了美林证券。&lt;/p&gt;
&lt;p&gt;不把鸡蛋放到一个篮子中。这是多么简单的一个道理。但是，在具体行动上，很多人却把这件事情给忘记了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;说回在中国的故事。上一周，在冯大的知识星球，发了这样一个帖子：&lt;/p&gt;
&lt;p&gt;&lt;img alt="feng" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-12-04/feng.JPG" /&gt;&lt;/p&gt;
&lt;p&gt;这个故事让我唏嘘不已。关于匹凸匹公司在近些年的政策风险，我不想多聊，其实，我也不是内部人士，不是相关行业从业者，也不很了解。&lt;/p&gt;
&lt;p&gt;但是，把自己所有的工资都扔到自己的平台里，这样做，真的不是“热爱公司”，而是缺乏基本的常识——不把鸡蛋放到一个篮子中。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;无独有偶，就在最近，就在我的身边，近乎发生了一个完全一样的故事。&lt;/p&gt;
&lt;p&gt;最近一个朋友跟我说，他的一个朋友，所在的匹凸匹公司，被查封了，因为涉嫌诈骗。整个公司近 200 多号人，都进去协助调查了。因为还在协助调查时期，所以还没有定性。也不知道后续会怎样。已经两个多星期了。&lt;/p&gt;
&lt;p&gt;其中的一个主管。把全家的钱，都投进自己的平台了。他的老婆现在还在怀着二胎。一边拉扯着老大，一边照顾自己的肚子，还要跑老公的这件事情。搞不好，自己的家底都要赔进去，老公还会被判几年。现在人憔悴的不得了。&lt;/p&gt;
&lt;p&gt;可也没办法。现在只能等着调查结果。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;讲真的，一个技术人，挺冤的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;不知道关注我的公号的同学，还有没有在相关行业的，包括区块链的同学。&lt;/p&gt;
&lt;p&gt;如果坚持做，一定要关注一下政策变化，包括周围的风吹草动。不是所有的企业都有问题，但是，自己身在这个政策风险较高的行业，要关注这方面的新闻，注意环境的变化。&lt;/p&gt;
&lt;p&gt;如果没有那么迷恋自己的公司，为了规避风险，最好还是着手找其他的工作。&lt;/p&gt;
&lt;p&gt;但不管怎样，就算是自己的公司，也不能把所有钱都扔进去。巴菲特也没这么干。&lt;/p&gt;
&lt;p&gt;all in 永远是最差的策略。不要把鸡蛋放到一个篮子里。这是一个如此简单而又朴素的思想，但是，在具体的决策面前，很多人就是会忘记。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;话说回来，只有在金钱上，在投资上，才有 all in 吗？&lt;/p&gt;
&lt;p&gt;网易的老员工，辛辛苦苦 996，工作量排名第二，把自己干出了绝症，何尝不是一种 all in？还有最近华为的事儿，嗯，不多说了。&lt;/p&gt;
&lt;p&gt;所以，又说回了那句老话，如果可以，不要 996；如果可以，适当地发展自己的兴趣，找到自己和这个世界相处的方式；适当发展自己的人脉，让自己尽可能多一条路，而不仅仅是一股脑地拼命“应付”自己的工作，把自己 all in。&lt;/p&gt;
&lt;p&gt;为什么呢？因为，其实，每个人也都是一筐鸡蛋。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;不能把鸡蛋都放到一个篮子里。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-12-04/readme.md" rel="alternate"/></entry><entry><id>2019/2019-12-03/readme.md</id><title>六词科幻</title><updated>2019-12-03T00:00:00-07:00</updated><content>&lt;h2&gt;六词科幻&lt;/h2&gt;
&lt;p&gt;曾经，在我的文章&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2018/2018-02-03/"&gt;《为什么别人比你早那么多知道比特币？洞悉未来的科技媒体》&lt;/a&gt;中，向大家介绍过一个我个人非常喜欢的美国技术杂志——wired，国内翻译成《连线》杂志。&lt;/p&gt;
&lt;p&gt;《连线》杂志里，有一个非常有意思的栏目，叫“六词科幻”，即只使用六个词，写一个超短的科幻小说。&lt;/p&gt;
&lt;p&gt;六个词怎么写科幻小说？&lt;/p&gt;
&lt;p&gt;比如这样：&lt;/p&gt;
&lt;p&gt;&lt;img alt="1" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-12-03/1.jpg" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Diver inflicts emotional distress; car sues&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我的翻译：&lt;strong&gt;司机遭受情绪不良；汽车起诉了司机。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;看来，未来，智能车不仅仅是可以自己自动到达目的地而已。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;关于智能车的六词科幻，还有一期是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="2" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-12-03/2.jpg" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The car has taken the kids.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我的翻译：&lt;strong&gt;汽车带走了孩子们。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;看下面的配图，父母们正在喝着红酒。看来，未来的智能车，可以自动带孩子。&lt;/p&gt;
&lt;p&gt;但是，这是不是意味着，智能车也有可能拐走孩子？&lt;/p&gt;
&lt;p&gt;这就是我很看好未来安全领域的原因...&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;说到安全问题，因为现在人们很重视隐私。所以，有一期的六词科幻是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="3" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-12-03/3.jpg" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;These headphones listen to your thoughs.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我的翻译：&lt;strong&gt;这些耳机正在倾听你的想法。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;其实，未来，物联网的世界，人们同时也将被越来越多的电子设备所监控。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;生物技术也将是未来的大热门，所以，有两期内容是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="4" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-12-03/4.jpg" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Phelps clone sweeps entire swimming events.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我的翻译：&lt;strong&gt;菲尔普斯的克隆体囊括了游泳比赛的所有奖牌。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所以，未来的体育比赛，其实是观看克隆人大战吗？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;再有：&lt;/p&gt;
&lt;p&gt;&lt;img alt="5" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-12-03/5.jpg" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;She died at 185. So young.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我的翻译：&lt;strong&gt;她只活到 185 岁。太年轻了。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对了，最近有一个新闻，有兴趣的同学可以关注一下：美国 Libella 公司的抗衰老基因疗法于 11 月 21 号获得哥伦比亚 IRB 的临床试验许可。这一疗法宣称可以逆转衰老达20年。&lt;/p&gt;
&lt;p&gt;Libella 公司正在美国招募受试者。受试者会前往哥伦比亚签署同意书并在合规的医院内进行基因疗法治疗。费用是：100 万美金。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;最后，随着虚拟现实越来越发达，未来可能会出现这样的事情：&lt;/p&gt;
&lt;p&gt;&lt;img alt="6" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-12-03/6.jpg" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Reads your emotions, adjusts the story.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我的翻译：&lt;strong&gt;读取你的思想，调整出适合你的故事。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所以未来，不是我们根据心情选择自己喜欢的故事，而是故事根据我们的心情，自动编辑出来。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;所以：&lt;/p&gt;
&lt;p&gt;&lt;img alt="7" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-12-03/7.jpg" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Virtual reality wasn't virtual after all.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我的翻译：&lt;strong&gt;虚拟现实一点儿也不虚拟。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;其实，就在当下，对于很多人来讲，虚拟的网络生活，也已经成为了人们现实生活中，不可分割的一部分了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;怎么样？是不是很酷？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-12-03/readme.md" rel="alternate"/></entry><entry><id>2019/2019-11-26/readme.md</id><title>软件工程师，工作效率，以及网易</title><updated>2019-11-26T00:00:00-07:00</updated><content>&lt;h2&gt;软件工程师，工作效率，以及网易&lt;/h2&gt;
&lt;p&gt;软件工程师的核心任务，就是写代码。如何提高代码质量，减少 bug，提高软件开发效率，是软件行业的老大难问题。为了解决这个问题，无数的技术方案或者工具被发明了出来。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;最典型的例子，就是各种编程范式的发明。比如面向对象，就是在使用抽象，封装，多态等多种形式，减少冗余代码，方便扩展，从而提高软件书写的效率，降低 bug 率。&lt;/p&gt;
&lt;p&gt;函数式编程亦是如此。函数式编程提出“不可变数据”，就是为了减少因为改变各种状态变量产生的 bug。同时，在程序运行高度并行化的今天，不可变也保证了并行过程中的安全。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;另一个出发点，就是语言。&lt;/p&gt;
&lt;p&gt;如果仔细看各个语言最新版本引入的新机制，或者各种新特性的初衷，很多时候，都是和减少 bug，提高代码质量，提升开发效率联系在一起的。&lt;/p&gt;
&lt;p&gt;比如对于现代编程语言的学习，要学习一块儿很大的内容，叫异常处理。但是，如果我们去看那些“上古语言”，FORTRAN，BASIC，甚至是 C，近乎完全没有专门的异常处理机制。异常处理是现代语言发明出的，专门“狙击” bug 的语言特性。&lt;/p&gt;
&lt;p&gt;再比如，Swift 有一个很有意思的数据类型，叫可选型（Optional）。所谓的可选型，是指可以存储空的类型。换句话说，非可选型不能存储“空”。可选型本质上，就是从数据类型的角度，提醒开发者，这个变量可能为空，所以使用前，请判空！为什么要有这个全新的类型？因为大量的 bug，都和空指针有关。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;再有，很多抽象的流程或者工具被发明了出来。&lt;/p&gt;
&lt;p&gt;如果你翻开一本软件工程的课本，大概就会接触到如下这些概念：&lt;/p&gt;
&lt;p&gt;系统流程图、数据流图、数据字典、实体联系图、状态转换图、层次方框图、Warnier 图、IPO 图、层次图、HIPO 图、结构图、程序流程图、盒图、PAD 图、判定表、判定树、Jackson 图、流图、甘特图、工程网络图......&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;上面这堆名词是我在网上找来复制粘贴上去的，很多我也不知道是什么意思。&lt;/p&gt;
&lt;p&gt;但是，我知道的是：尽管如此，在软件工程领域，bug 依然顽固地在那里。&lt;/p&gt;
&lt;p&gt;每个软件工程师，不管是用什么范式，什么语言，什么版本，什么工具，怎么提前构架，设计，近乎都不可避免地，会写出 bug。&lt;/p&gt;
&lt;p&gt;软件行业很多研究结果都表明：并没有明确的证据说明：使用了这些工具，软件工程中的 bug 就减少了。&lt;/p&gt;
&lt;p&gt;甚至，我在网上找到了一篇“奇怪”的论文，这篇论文的研究表示：强制员工遵循一些代码书写规范，可能导致项目工程中有更多的 bug。这篇论文的链接在这里：&lt;a href="https://repository.tudelft.nl/islandora/object/uuid:646de5ba-eee8-4ec8-8bbc-2c188e1847ea?collection=research"&gt;https://repository.tudelft.nl/islandora/object/uuid:646de5ba-eee8-4ec8-8bbc-2c188e1847ea?collection=research&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;提高代码质量的技术手段层出不穷，但似乎都效果有限。那么，还有什么方式，能够真正提高代码质量？&lt;/p&gt;
&lt;p&gt;国外技术专家 Hillel Wayne 有一个观点，让我拍案叫绝。&lt;/p&gt;
&lt;p&gt;他的核心思想很简单。既然代码都是人写的，那么 bug 也就是人写的。所以，除了改善工具以外，可能，另外一个非常重要的，被很多人忽视的方式是：改善写代码的人。&lt;/p&gt;
&lt;p&gt;怎么“改善写代码的人”？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;首当其冲的，就是&lt;strong&gt;睡眠&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;无数科学的研究，已经确定无疑地告诉了我们：睡眠将极大地影响正常人的工作水平，甚至是基础认知能力。&lt;/p&gt;
&lt;p&gt;2018 年，IEEE Transactions on Software Engineering 上的的一篇论文，用实验证明了，睡眠剥夺以后的程序员，将丧失大部分工作技能——别说想明白逻辑了，此时，他们可能连 &lt;code&gt;ls&lt;/code&gt; 是什么都不知道了，不经意间，就 &lt;code&gt;rm -rf/&lt;/code&gt; 了。&lt;/p&gt;
&lt;p&gt;至于长期缺乏睡眠，导致的工作能力的降低，相关研究不要太多。写一两本书是绝对没问题的。缺乏睡眠等于工作能力降低，这简直是常识。&lt;/p&gt;
&lt;p&gt;在很多行业，是禁止“疲劳工作”的。最典型的例子是，在运输行业，大部分正规运输公司，都会要求跑长途的司机，期间必须休息一定时间，以避免“疲劳驾驶”。&lt;/p&gt;
&lt;p&gt;而在美国，一些医院也规定，护士不得连续工作超过一定时间。因为，无数的研究都在表明，缺乏睡眠的护士，将犯更多错误。&lt;/p&gt;
&lt;p&gt;可能很多同学会说，司机和护士的工作，关乎人的性命。程序员不就是坐在办公室里写代码吗？哪里有那么严重？&lt;/p&gt;
&lt;p&gt;对于有这个疑问的同学，我建议读一读上周我的公众号文章：&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-11-21/"&gt;《浮点计算引发的血案》&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;这个年代，很多程序员的工作，也关乎人的性命。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;另外一点，就是&lt;strong&gt;工作时长&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;关于工作时长对工作效率的影响，也历史悠久。早在 1980 年，美国人就系统地研究过这个问题。&lt;/p&gt;
&lt;p&gt;其中，最有名的研究，是以建筑工人作为基础进行研究的。那个年代，也是美国经济最繁盛的时期，美国各地都在建建建，因此，也有大量的工人样本供研究。&lt;/p&gt;
&lt;p&gt;1980 年，美国的商业圆桌报告指出，如果建筑工人一周工作时间超过 50 个小时，那么在 8-10 周以后，他们的效率就会下降到原来的 76%。也就是说，8-10 周以后，即使这些工人继续每周工作 50 个小时，他们的实际效率，只等于原先的 38 个小时。&lt;/p&gt;
&lt;p&gt;如果每周工作 60 个小时，他们的效率会降低的更快。在两个月的时间里，这种极度的低效将表现出来。也就说&lt;strong&gt;同样两个月的时间，每周工作 60 个小时的工人，工作效率还不如每周只工作 40 个小时的工人。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;2004 年，美国疾病控制中心（CDC）的另一项研究，从疾病的角度出发，证实了：过长的工作时间，还将为工人们带来不可逆的健康隐患。&lt;/p&gt;
&lt;p&gt;既然如此，那为什么要每周多工作 20 个小时？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;最后一个重要的因素，就是&lt;strong&gt;压力&lt;/strong&gt;。压力也将急剧降低一个人的工作效率。&lt;/p&gt;
&lt;p&gt;全世界范围，关于压力的研究，也是在近十几二十年兴起的。越来越多的人，开始关注心理健康的问题。&lt;/p&gt;
&lt;p&gt;美国疾病控制中心使用护士群体作为研究对象，确凿地证明了：压力越大，越容易犯错，效率越低。&lt;/p&gt;
&lt;p&gt;由于关于压力的大多数研究，也就是近十年的事情，而近十年，全球软件行业工作者爆炸式地增长。所以，很多研究，可以直接使用软件工程师作为研究对象。&lt;/p&gt;
&lt;p&gt;结论呢？很简单：工程师越快乐，越幸福，压力越小，解决问题的能力越强。&lt;/p&gt;
&lt;p&gt;有兴趣的同学，可以直接搜索这篇论文：&lt;/p&gt;
&lt;p&gt;&lt;img alt="stress" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-11-26/stress.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;大家可以看到：无数的研究都在告诉我们，睡眠，工作时长，和压力，这些因素，都将极大地影响软件工程师的效率。&lt;/p&gt;
&lt;p&gt;那么问题来了。&lt;/p&gt;
&lt;p&gt;为什么在大多数情况下，一个软件工程师写了一个 bug，大多数人会说：&lt;/p&gt;
&lt;p&gt;如果你使用 XX 语言，就不会产生这个 bug；&lt;/p&gt;
&lt;p&gt;或者说，如果你多做一组单元测试，就能更早地发现这个 bug；&lt;/p&gt;
&lt;p&gt;或者说，如果引入 Pair Programming 的机制，发现这个 bug 的概率更大。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;为什么没有人说：&lt;/p&gt;
&lt;p&gt;如果你昨天多睡两个小时，就不会写出这个 bug？&lt;/p&gt;
&lt;p&gt;如果保持每周只工作 40 个小时，而不要过度劳累，就不会写出这个 bug？&lt;/p&gt;
&lt;p&gt;或者如果不要压力太大，应该使用 XX 或者 YY 的方式缓解压力，就不会写出这个 bug？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;这些问题初听起来，似乎非常好笑。但是仔细想想，不无道理。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;一直关注我的公众号的同学都知道，我从来不提倡 996。&lt;/p&gt;
&lt;p&gt;这个不提倡背后，还真不仅仅是在为每一个开发者着想。&lt;/p&gt;
&lt;p&gt;我也是在为资本家们着想啊！&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;最近的网易暴力裁员事件，想必大家都知道。&lt;/p&gt;
&lt;p&gt;对于这件事情，各路媒体的报道已经铺天盖地了，我不想赘述了。&lt;/p&gt;
&lt;p&gt;对于其中的劳动纠纷，我想后续就听法律的就好了。&lt;/p&gt;
&lt;p&gt;但是，HR 在处理整个事情过程中的不近人情，是有目共睹。尤其是还给员工扣上了有“反动倾向”的帽子，在今年上半年这样一个敏感时期做出这样的行为，简直可以说是恶毒了。&lt;/p&gt;
&lt;p&gt;不知道这样的做法，会不会让很多网易内部员工黯然心伤，压力倍增，从而大大降低工作效率？&lt;/p&gt;
&lt;p&gt;网易这种体量的公司，工作效率的些许降低，折算成人民币，应该也不是一个小数目。不知道这笔账，要不要计算到 HR 的 KPI 中？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;所以，如果看了这篇文章，有的同学正在创业，或者以后将要创业；有的同学正在带团队，或者以后将要带团队，在思考如何提高团队效率的问题上，可能，除了引入各种奇怪的技术工具和协同机制以外，也需要考虑一下维护团队成员的工作与生活的平衡。&lt;/p&gt;
&lt;p&gt;毕竟，&lt;strong&gt;作为管理者，管理的是人。所有的工作，都是人做出来的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;管理者的管理方案，至少要让团队能够感受到：人，是重要的。&lt;/p&gt;
&lt;p&gt;因为：&lt;strong&gt;人，真的是最重要的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;然后，今天的结尾多说一句：&lt;strong&gt;大家加油一天，晚上也好好休息！：）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;参考资料：&lt;a href="https://increment.com/teams/the-epistemology-of-software-quality"&gt;https://increment.com/teams/the-epistemology-of-software-quality&lt;/a&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-11-26/readme.md" rel="alternate"/></entry><entry><id>2019/2019-11-21/readme.md</id><title>浮点计算引发的血案</title><updated>2019-11-21T00:00:00-07:00</updated><content>&lt;h2&gt;浮点计算引发的血案&lt;/h2&gt;
&lt;p&gt;学习计算机的同学都知道，在计算机中，一切都是用 0 和 1 表示的，包括浮点数。&lt;/p&gt;
&lt;p&gt;国际标准 IEEE 754 规定，在计算机中，一个浮点数是使用如下的数学公式表示的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="chart.png" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-11-21/chart.png" /&gt;&lt;/p&gt;
&lt;p&gt;其中，s 表示 sign，即符号。如果 s == 0，则浮点数 V 为正；如果 s == 1，则浮点数 V 为负。&lt;/p&gt;
&lt;p&gt;M 表示有效数字，在 [1, 2) 之间。&lt;/p&gt;
&lt;p&gt;而 E 则是指数位。&lt;/p&gt;
&lt;p&gt;这种形式同学们应该很熟悉。其实就是我们在小学学习的科学计数法的二进制形式。&lt;/p&gt;
&lt;p&gt;对于任何一个数字，比如 666，我们可以基于十进制，将其写成 6.66 * 10 ^ 2 的形式。但是，因为计算机中每一个比特只能存储 0 或者 1，所以，我们转而使用二进制的表示方式。666 的二进制是 1010011010，一共 10 位，相应的，化成二进制的科学计数法，就是 1.010011010 * 2 ^ 9。&lt;/p&gt;
&lt;p&gt;套到上面的式子中，相当于 s == 0；M == 1.010011010；E == 9。注意，在这里，M 表示的 1.010011010，是二进制表示。&lt;/p&gt;
&lt;p&gt;IEEE 754 规定，对于 32 位的浮点数，最高的一位是符号位 s，之后的 8 位是指数 E，剩下的 23 位，是有效数字 M。&lt;/p&gt;
&lt;p&gt;&lt;img alt="float1" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-11-21/float1.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;而对于 64 位双精度浮点数，最高位依然是符号位 s，之后的 11 位是指数 E，剩下的 52 位为有效数字 M。&lt;/p&gt;
&lt;p&gt;&lt;img alt="float2" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-11-21/float2.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;在这里，IEEE 754 对于指数位 E 和有效数字位 M 的表示，还有一些特殊的规定。比如因为 M 肯定在 [1, 2) 之间，所以每个有效数字小数点前的数字一定是 1，这个 1 就可以省略掉，以节省一位的空间，等等。&lt;/p&gt;
&lt;p&gt;IEEE 754 标准具体是怎样的，不是这篇文章的重点。有兴趣的同学，可以在网上查阅这个标准。&lt;/p&gt;
&lt;p&gt;但关键是，同学们可以看到，因为有效数字 M 的位数是有限的，这就意味着，计算机表示的浮点数，精度是有限的。&lt;/p&gt;
&lt;p&gt;这个精度范围大概是多少呢？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;对于 32 位浮点数，可以准确表示的精度在 10^-6 这个量级。&lt;/strong&gt;换句话说，如果我们想要表示的小数，在小数点后 7 位还有有效数字的话，32 位的浮点数就不能精确表示了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;而对于 64 位浮点数，可以准确表示的精度在 10^-15 这个量级。&lt;/strong&gt;换句话说，如果我们想要表示的小数，在小数点后 16 位还有有效数字的话，64 位的浮点数就不能精确表示了。&lt;/p&gt;
&lt;p&gt;虽然，对于大多数情况，这个精度范围足够用了。但是，在很多应用领域，我们还是要小心：当使用计算机表示浮点数的时候，因为精度的限制，可能引发严重的问题，甚至是巨大的灾难。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;1991 年海湾战争中，伊拉克的一枚飞毛腿导弹，击中了美军驻扎在沙地阿拉伯 达兰市的一个兵营。这枚导弹造成了美军 28 人死亡，260 人受伤。这个死亡人数，近乎等于美军在整个海湾战争过程中牺牲人数的三分之一。&lt;/p&gt;
&lt;p&gt;问题是，美军已经在达兰市部署了大名鼎鼎的爱国者反导弹防御系统。但是，这个防御系统却没有对这枚飞毛腿导弹进行拦截。为什么？问题就出在浮点数上。&lt;/p&gt;
&lt;p&gt;事后的研究发现，爱国者防御系统在时间记录上，因为浮点数的精度问题，产生了 0.000000095 秒的误差。然而，就是这 0.000000095 秒的时间，面对飞速运行的导弹，转化成距离，误差被放大到了 573 米。也就是，爱国者防御系统误以为导弹还在 573 米外，尚未对军营造成威胁，因而没有进行拦截。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;并非所有的灾难都是因为精度问题。还有一些灾难，是因为错误地处理浮点数。&lt;/p&gt;
&lt;p&gt;最典型的例子，就是在程序中，很有可能会错把浮点数当做整型用。不管是浮点数也好，整型也好，字符也好，在计算机中，都是一串二进制。变量的类型，决定了计算机怎么解析这样一串二进制。不经意间，如果错误地让计算机把原本是浮点数的变量解析成整型，就会产生 bug。&lt;/p&gt;
&lt;p&gt;1996 年 6 月，欧洲宇航局发射了无人航天器 阿丽亚娜 5 号。阿丽亚娜 5 号在发射 39 秒后爆炸。&lt;/p&gt;
&lt;p&gt;这个航天器花费了 10 年时间进行研发，总投资额达 70 亿美元。与此同时，航天器上载有四个科学卫星，总价值达 5 亿美元。这一切，都在阿丽亚娜 5 号发射 39 秒钟以后，烟消云散。&lt;/p&gt;
&lt;p&gt;后续，在进行事故调查的时候，发现是程序中一个极其简单，但同时也是一个极其不易察觉的错误引发的问题：程序中的某一处，将表示航天器水平速度的变量——一个浮点数，错误地当做整型使用了。这使得航天器在升空的过程中，水平方向的速度虽然近乎为 0，却被计算机认为具有一个非常高的水平速度，从而，引发了不正确的自动措施，最终导致整个航天器的爆炸。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;还有一些关于浮点数的 bug，来自四舍五入的过程中。&lt;/p&gt;
&lt;p&gt;德国的选举法规定，一个选举人要获得至少 5% 的选票，才能在立法机构赢得一席之地。1992 年 4 月的德国选举过程中，绿党的一名候选人获得了整整 5% 的支持票数。&lt;/p&gt;
&lt;p&gt;然而，事后的调查发现，这名候选人的真正得票率不是 5%，而是 4.97%。统计选票程序使用了 round() 函数，对 4.97 进行了四舍五入，最终得到了 5% 的结果。&lt;/p&gt;
&lt;p&gt;但这和选举规则是不符合的。选举规则规定：4.97%，也是不足 5% 的。只不过在之前的选举中，没有出现过这种情况，使得人们一直忽视了这个 bug 的存在。&lt;/p&gt;
&lt;p&gt;后来，人们重新计算投票后，将这名候选人“踢出”了立法机构。这使得德国社会民主党多了一名候选人。而这一人之差，使得当届，德国的社会民主党赢得了议会上的多数席位。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;另一个故事，发生在 1980 年的加拿大温哥华。&lt;/p&gt;
&lt;p&gt;当年，温哥华的股票交易所发现，某个指数基金的总价值在奇怪地不断蒸发。事后调查显示，这是因为这个指数基金的交易程序中，对于金钱，使用 floor() 函数的方式，抹去了“分”之后的所有价值。&lt;/p&gt;
&lt;p&gt;所以，如果你花了 1234.567 元购买这个基金，最后的 0.007 元，即 0.7 分就被抹去了，相当于交易所少收了 7 厘。&lt;/p&gt;
&lt;p&gt;这 7 厘的价值，对于个人来说并不重要。但是，对于整个交易所来说，每天数百万次的交易，在积累一段时间以后，就变成了一个不得了的数字。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;随着计算机系统深入到我们生活的方方面面，很多 bug 真的不仅仅是一个小 bug 那么简单了。它们可能对人类的生活产生真实的影响，甚至是生命的代价。&lt;/p&gt;
&lt;p&gt;所以...&lt;/p&gt;
&lt;p&gt;对于大多数程序员的日常，可能还是这样子的吧。&lt;/p&gt;
&lt;p&gt;&lt;img alt="comic" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-11-21/comic.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-11-21/readme.md" rel="alternate"/></entry><entry><id>2019/2019-11-18/readme.md</id><title>i ++ 和 ++ i，性能有区别吗？</title><updated>2019-11-18T00:00:00-07:00</updated><content>&lt;h2&gt;i ++ 和 ++ i，性能有区别吗？&lt;/h2&gt;
&lt;p&gt;这是一个同学问的问题，据说是一个面试问题。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;for(int i = 0; i &amp;lt; n; i ++) ...&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;和&lt;/p&gt;
&lt;p&gt;&lt;code&gt;for(int i = 0; i &amp;lt; n; ++ i) ...&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;两个循环，在循环变量的更新上，一个是 &lt;code&gt;i ++&lt;/code&gt;，一个是 &lt;code&gt;++ i&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;性能有区别吗？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;首先，我要说，我很不赞同这类“谭浩强式的问题”。在我看来，对这类问题如数家珍，和编程能力一点儿关系都没有。&lt;/p&gt;
&lt;p&gt;但是，对于一个对计算机感兴趣的孩纸，时不时地研究一下这类“犄角旮旯”的问题，还是一件很有意思的事情。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;对于 &lt;code&gt;i ++&lt;/code&gt; 和 &lt;code&gt;++ i&lt;/code&gt; 在语法上的区别，相信大家都了解。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;i ++&lt;/code&gt; 是先取值，后 &lt;code&gt;++&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;如果 &lt;code&gt;i = 0&lt;/code&gt;，则 &lt;code&gt;int a = i ++&lt;/code&gt; 以后，a 为 0，i 为 1。&lt;/p&gt;
&lt;p&gt;而 &lt;code&gt;++ i&lt;/code&gt; 是先 &lt;code&gt;++&lt;/code&gt;，后取值。&lt;/p&gt;
&lt;p&gt;如果 &lt;code&gt;i = 0&lt;/code&gt;，则 &lt;code&gt;int a = ++ i&lt;/code&gt; 以后，a 为 1，i 为 1。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;如果我们将 &lt;code&gt;i ++&lt;/code&gt; 和 &lt;code&gt;++ i&lt;/code&gt; 想成是两个函数，可以这样理解。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;i ++&lt;/code&gt; 要先暂存 i 的初值，然后对 i 进行加 1 操作，之后返回之前暂存的 i 的初值。伪码如下：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;int j = i;
i = i + 1;
return j;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;而 &lt;code&gt;++ i&lt;/code&gt;，则不需要暂存 i 的初值，直接对 i 进行加 1 操作以后，返回新的 i 的值就好了。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;i = i + 1;
return i;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这样看，相信大家就能一目了然了，&lt;code&gt;i ++&lt;/code&gt; 的过程由于需要暂存 i 的初值，所以，理论上，性能耗费会更高一些。&lt;/p&gt;
&lt;p&gt;因此，如果大家看一些“上古”的程序设计书籍（以 C 语言为主），会提及，上面的 for 循环，用 &lt;code&gt;++ i&lt;/code&gt; 更好。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;但是，&lt;strong&gt;在现代编程环境中，这一点性能偏差，完全可以忽略不计。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一方面，现代编译器的优化，使得编译器完全可以分析出，在上述 for 循环的 i ++ 以后，对 i 的结果并没有进行赋值使用。从而，编译器会进行优化，最后编译出的逻辑，不进行上面所说的无用的暂存。&lt;/p&gt;
&lt;p&gt;另一方面，即使使用不优化的编译，有人统计过，对于现代计算机来说，循环次数要多达 10^47 次，才可以产生人类可以察觉的性能差异。&lt;/p&gt;
&lt;p&gt;10^47 是什么概念？&lt;/p&gt;
&lt;p&gt;整型可以存储的数字规模是 10^9 这个量级。同学们可以在自己的计算机上尝试一下，做一个循环 10^9 次的循环。每一次只是给一个整型赋值，看走完这个循环，需要多少时间？&lt;/p&gt;
&lt;p&gt;以 C++ 为例，大概就是这样的一个程序：&lt;/p&gt;
&lt;p&gt;```
int main(){&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;int i, a;

clock_t t1 = clock();
for(i = 0 ; i &amp;lt; 1000000000; i ++)
    a = 1;
cout &amp;lt;&amp;lt; (clock() - t1) * 1.0 / CLOCKS_PER_SEC &amp;lt;&amp;lt; endl;

return 0;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;}
```&lt;/p&gt;
&lt;p&gt;对于大多数同学的计算机，相信这个循环需要的时间，是高于 1 秒钟的。在我的计算机上，需要大概 1.3 秒。&lt;/p&gt;
&lt;p&gt;就算只需要 1 秒钟，10^47 是 10^9 的 10^38 倍。也就是，循环 10^47 次，大概需要 10^38 秒。&lt;/p&gt;
&lt;p&gt;这是什么概念呢？同学们可以用计算机计算一下，10^38 秒大概是 3*10^30 这么多年。&lt;/p&gt;
&lt;p&gt;因为一天不过 60 * 60 * 24 = 86400 秒；&lt;/p&gt;
&lt;p&gt;一年不过 86400 * 365 = 3.1536 * 10^7 秒。&lt;/p&gt;
&lt;p&gt;我查了一下，太阳系大概诞生于 64 亿年前，即 6.4 * 10^9 年前。这么算，现代计算机循环 10^47 这么多操作的时间，亿亿个太阳系已经诞生了。&lt;/p&gt;
&lt;p&gt;是亿亿，不是一亿。用 3*10^30 除以 6.4*10^9，得到的结果，比一亿个一亿，还要大五万倍左右。&lt;/p&gt;
&lt;p&gt;所以，在通常使用的时候，i ++ 和 ++ i 的这个性能差距，如果在一些语言或者编译环境（解析环境）中真的存在，也完全可以忽略不计。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;那么，在逻辑等价的情况下，应该使用 &lt;code&gt;i ++&lt;/code&gt; 还是 &lt;code&gt;++ i&lt;/code&gt; ？&lt;/p&gt;
&lt;p&gt;在这种情况下，应该考虑的就是表意性。即哪种写法最好理解？&lt;/p&gt;
&lt;p&gt;可惜，表意性是一个主观的事情，没有客观标准。因此，公说公有理，婆说婆有理。&lt;/p&gt;
&lt;p&gt;或许这也就是为什么，在很多新兴语言中，干脆直接废除掉 &lt;code&gt;i ++&lt;/code&gt; 或者 &lt;code&gt;++ i&lt;/code&gt; 这种语法吧。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;i = i + 1&lt;/code&gt;，多清晰：）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;写完这篇小文，发现文中的计算，对于大家对数量级有一个直观的理解很有帮助。&lt;/p&gt;
&lt;p&gt;很多同学曾经问我类似这样的问题：一个 O(n) 的算法，一秒钟就跑完了，换成 O(n^2) 的算法，怎么电脑没反应了？&lt;/p&gt;
&lt;p&gt;答案是：电脑在反应，但需要相当长的时间。&lt;/p&gt;
&lt;p&gt;假设你的 n 是 10 万左右。如果 O(n) 的算法用 1 秒钟，O(n^2) 的算法就要用大概 10 万秒钟。（不严格，因为 0.5n^2 也叫 O(n^2)）&lt;/p&gt;
&lt;p&gt;10 万秒钟，就是要一天多的时间。因为，上文计算了，一天不过 86400 秒，即 8 万多秒。所以，要真想看到 O(n^2) 算法的计算结果，耐心等着就好。&lt;/p&gt;
&lt;p&gt;如果不想等这一天多的时间...... 那就是学习算法的意义了：）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-11-18/readme.md" rel="alternate"/></entry><entry><id>2019/2019-11-14/readme.md</id><title>爱尔兰麋鹿的灭绝</title><updated>2019-11-14T00:00:00-07:00</updated><content>&lt;h2&gt;爱尔兰麋鹿的灭绝&lt;/h2&gt;
&lt;p&gt;在网上看到了一个关于“古生物”的新闻。&lt;/p&gt;
&lt;p&gt;2018 年 9 月，一名爱尔兰的渔夫在捕鱼的过程中，无意中捕捞出了一个爱尔兰麋鹿的头骨。科学家说，由于这个头骨一直在水底“沉睡”，所以保存极其完好。是人类获得的最完整的爱尔兰麋鹿的头骨标本。&lt;/p&gt;
&lt;p&gt;&lt;img alt="elk" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-11-14/elk.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;一个麋鹿的头骨有什么大惊小怪的？&lt;/p&gt;
&lt;p&gt;因为，这种爱尔兰麋鹿早已灭绝。实际上，这个物种只存在于 10000 年前的地球上。&lt;/p&gt;
&lt;p&gt;10000 年什么概念？中华上下才 5000 年，其中还有近 1500 年的历史是没有考古学证据支撑的。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;爱尔兰麋鹿最大的特点是，其雄鹿头顶的角巨大。有多大呢？最大展开能达到 6 米之长。古生物学家恢复出的爱尔兰麋鹿的样子，大体是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="elk2" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-11-14/elk2.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;头上的角宛如翅膀一般。这要放到中国古代，妥妥的是神兽级别的存在。古人再添油加醋想象一下，这货就飞起来了。&lt;/p&gt;
&lt;p&gt;可惜，实际上，爱尔兰麋鹿不会飞。不仅不会飞，这对雄伟的鹿角，成为了让爱尔兰麋鹿灭绝的罪魁祸首。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;雄性的鹿之所以进化出鹿角，主要是防御敌人用。因此，雄鹿担任着保护家族的使命。于此同时，鹿角的大小也成为了雄鹿获得异性青睐的重要标志。每到繁殖季节，雄鹿之间也会互相用角进行决斗，赢得和雌性交配的机会。&lt;/p&gt;
&lt;p&gt;因此，鹿角的质地是非常坚硬的。其成分，和骨骼基本是一致的。&lt;/p&gt;
&lt;p&gt;爱尔兰麋鹿的鹿角重量可达其全身重量的 10% 之多。可以想象，爱尔兰麋鹿在 10000 年前，具有着极强的竞争优势。因为其巨大的鹿角，让其种族并不惧怕其他更加凶猛野兽的袭击。&lt;/p&gt;
&lt;p&gt;这样的一个物种，为什么会灭绝呢？古生物学家给出的解释是：因为爱尔兰麋鹿的角过于庞大，吸收了身体大量的养分。当地球环境产生变化，致使爱尔兰麋鹿的生存环境里，没有足够的食物的时候，爱尔兰麋鹿却不能快速减小鹿角的大小，来适应环境。大量的营养被鹿角吸收，导致无法维持爱尔兰麋鹿的机体生存。&lt;/p&gt;
&lt;p&gt;就这样，几轮并不算巨大的环境变化以后，爱尔兰麋鹿整个物种彻底灭绝了。而同时期在欧洲大陆生存下来的其他麋鹿品种，都有着明显的统一特点：顶角更小。&lt;/p&gt;
&lt;p&gt;&lt;img alt="elk3" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-11-14/elk3.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;让爱尔兰麋鹿自豪的，最重要的竞争优势——其巨大的鹿角，最后成为了让爱尔兰麋鹿灭绝的元凶。而其他的麋鹿，虽然顶角更小，看起来像是一种竞争上的劣势，最终，却顽强地存活了上万年的时间。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;为什么这样一个和技术世界毫无关系的古生物学新闻，引起了我的兴趣？&lt;/p&gt;
&lt;p&gt;熟悉我的同学都知道，我在北京创业的时候，项目是和北京大学工商管理学院合作的。期间，我采访接触了大量的中国企业。&lt;/p&gt;
&lt;p&gt;其中之一，就是新浪。更准确的说，是新浪的微博事业部。那时候，是新浪微博在中国最火的时候。&lt;/p&gt;
&lt;p&gt;期间，我访问到了新浪微博运营部门的一个主管。具体的名字和层级我就不透露了。但是，她的故事，让我觉得很受启发。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;她是一个典型的，从基层爬起来的高管。她加入新浪微博的时候，新浪微博刚刚起步。&lt;/p&gt;
&lt;p&gt;那会儿，新浪微博的运营策略是什么呢？就是想办法让全中国各地稍微有头有脸的人物，都来注册新浪微博，使用新浪微博，让新浪微博的内容具有社会影响力。&lt;/p&gt;
&lt;p&gt;这里说的“稍微有头有脸”的人物，绝不仅仅是众人皆知的演艺明星或者商业大亨。实际上，在各个省，市，都有大量的地方性人物。他们并不为全国人民所知，但是被当地居民熟知。比如某个地方电视台的主持人，或者只在某个城市才能收听得到的广播电台的播音员。这些人，都是新浪微博的目标。&lt;/p&gt;
&lt;p&gt;新浪微博的做法很简单，派海量运营专员，到全国各个地方，去说服这些目标人物开通新浪微博，使用新浪微博。这名高管，在当时，负责中国西南地区几个极其不起眼的城市的“拉人”工作。&lt;/p&gt;
&lt;p&gt;按照常理推算，被分配到这样不起眼的地方，应该不是最优秀的人才。最优秀的人才通常会被委以重任，去攻破北上广深这样巨大的市场。与此同时，在这样的地方，业绩也一定平平，和到其他发达地区“拉人”的业绩，肯定不在同一个量级。&lt;/p&gt;
&lt;p&gt;那为什么，最后，她成为了一名高管？&lt;/p&gt;
&lt;p&gt;她的回答，在当年的我看来，出乎意料；但这么多年过去以后，我却认为在情理之中——因为，其他优秀的人才，都在之后的几年，陆续离职了。&lt;/p&gt;
&lt;p&gt;为什么离职？原因很多。有的人不看好微博这种“铺人力拉人”的运营方式，觉得太 low；有的人不满意新浪微博的一些制度；还有的人，认为遇到了更好的机会，于是就跳了。对了，那个年代也是中国互联网创业最火热的时期，靠几张 PPT 就获得投资的事情屡见不鲜。&lt;/p&gt;
&lt;p&gt;只有这个人，还一直留在新浪微博，直到坚持到了新浪微博的爆发。此时，和她同时期的“老人”们都不见了。环顾四周，她竟然成了最早的，最了解新浪微博这款产品运营策略方方面面的“权威人士”。于是，她成为了新浪微博运营部门的高管之一。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;对于这段经历，她总感慨自己是幸运的。但是我不这么看。因为，和她同期入职的所有运营人员，在这件事情上，和她的幸运程度是一样的。但是，只有她最终摘得了“微博”的胜利果实。&lt;/p&gt;
&lt;p&gt;当然，其他离职的同事，不一定混得很差。但是，大概率的，没有在微博好。&lt;/p&gt;
&lt;p&gt;2014 年 4 月 17 日，微博作为新浪公司的独立子公司，在美国纳斯达克交易所挂牌上市，股票代号 WB，是中国社交媒体在纳斯达克上市的第一只股票。发行价定为 17 美元，上市当天大涨，收盘至 20.24 美元。当时市值 30.4 亿美元。&lt;/p&gt;
&lt;p&gt;在随后的几年，微博股票节节攀升，在最高时，甚至达到了近 150 美元一股。2018 年以后，微博逐渐势微，现在的股价，大概是 50 美元一股。不管怎样，当年陪着微博上市的大小主管们，已经妥妥地财务自由了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;是什么让这位主管一直坚持留在了新浪微博？我倾向于认为，是她“不够聪明。”&lt;/p&gt;
&lt;p&gt;因为不够聪明，所以她感觉不到“铺人力拉人”的方式有多 low；即使能感知到，她也无法提出更好的解决方案；因为不够聪明，她也大概率地没有更好的机会，投身到其他互联网大潮的创业项目中；因为不够聪明，她在面对团队的矛盾和来自上级的压力时，也只能默默忍耐。&lt;/p&gt;
&lt;p&gt;在这里，我没有贬低她的意思。所谓聪明不够，努力来凑。我相信，她是一个极度努力的人，在她的工作岗位上也做出了突出的成绩。甚至，到如今，很多人会说她有眼光，有大智慧。&lt;/p&gt;
&lt;p&gt;但是，如果时光倒退，回到她刚入职的年头，让大家来预测，这帮运营新人，谁最终能有所成就，可能，她不会被几个人看好。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;她不是爱尔兰麋鹿，没有巨大的顶角；她只是一只普通的小鹿，却最终熬过了最难熬的日子，在残酷的社会竞争中存活了下来。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;这个案例在当年给与了我很大的震撼。我第一次意识到，很多一般人眼中的“成功人士”，都不是什么“强人”。甚至相反，他们很有可能在一开始，被认为是一名“弱者”。&lt;/p&gt;
&lt;p&gt;同时，这也是我第一次意识到，和很多品质比起来，“聪明”是多么的没有意义。后来，我看到了更多心理学家的学术研究，都在辅证这个事实。&lt;/p&gt;
&lt;p&gt;因此，我写过一篇文章，叫&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2018/2018-07-18/"&gt;《天生不聪明》&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;比如，很多同学认为，学好算法需要很聪明。但其实，只要踏踏实实地学习，坚持下去，任何人都能学好算法。&lt;/p&gt;
&lt;p&gt;如果觉得缺少高手的指引，还有 bobo 老师在慕课网的课程啊！bobo 老师的算法课程，总共已经有上万人学习。bobo 老师每个月都能收到不同的同学告诉我，自己收到了腾讯，网易，阿里，百度，甚至是国外的苹果，谷歌等企业的 Offer。&lt;/p&gt;
&lt;p&gt;&lt;img alt="offer1" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-11-14/offer1.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="offer2" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-11-14/offer2.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="offer3" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-11-14/offer3.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;为了指引大家更好的学习，慕课网还特意为大家设计了一个 Java 算法学习路线。三门课程学习下来，相信，所有人都能成为算法领域的小牛。&lt;/p&gt;
&lt;p&gt;&lt;img alt="imooc1" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-11-14/imooc1.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="imooc2" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-11-14/imooc2.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="imooc3" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-11-14/imooc3.png" /&gt;&lt;/p&gt;
&lt;p&gt;上面三门课程的学习路线，也可以在我的公众号【是不是很酷】中，回复【课程】，了解更多。&lt;/p&gt;
&lt;p&gt;大家在学习过程中有任何疑问，都可以随时在问答区和我交流。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-11-14/readme.md" rel="alternate"/></entry><entry><id>2019/2019-11-07/readme.md</id><title>这不是魔术表演，这是 Adobe 的发布会</title><updated>2019-11-07T00:00:00-07:00</updated><content>&lt;h2&gt;这不是魔术表演，这是 Adobe 的发布会&lt;/h2&gt;
&lt;p&gt;在硅谷的科技企业中，Adobe 似乎显得有些“没落”。实际上，Adobe 和微软，Oracle 等企业一样，都是在互联网时代以前的 IT 企业，更容易被人冠以软件公司的头衔，而非互联网公司。&lt;/p&gt;
&lt;p&gt;但是，近些年，无论是微软，还是 Adobe，都在云服务上发力，大有逆风翻盘的意思。微软在去年（2018 年）重回第一，虽然现在又不是第一了，但显然回到了 IT 企业的第一梯队，而不再是一个没落的形象。&lt;/p&gt;
&lt;p&gt;至于 Adobe，也通过将自家软件云端化战略，市值暴增。说实话，我觉得 Adobe 的股票值得买。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;因为我研究生的专业是虚拟现实，所以自那时起，就很关注 Adobe 的发布会了。&lt;/p&gt;
&lt;p&gt;Adobe 每年的发布会被称为是 Adobe Max。近些年来越来越精彩。一个很大的原因是：Adobe 的自家产品在结合 AI 以后，所释放出来的惊人能力。&lt;/p&gt;
&lt;p&gt;虽然从商业战略上，Adobe 在走云服务路线，但是 Adobe 的发布会，完全可以看作是 AI 在图像学，计算机视觉等领域的最新应用效果展。&lt;/p&gt;
&lt;p&gt;同时，通过看他家的发布会，我们还能了解很多创意界人士的需求痛点。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;比如，很多时候，我们拍摄的视频尺寸和实际需要使用的视频尺寸可能不一致。在下图中，我们要想将原始的 16：9 的视频，剪辑成为 9：16 的手机拍摄效果。如果将剪辑区域固定，效果将非常糟糕。主体目标会经常“飞“出屏幕外。&lt;/p&gt;
&lt;p&gt;&lt;img alt="pr1" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-11-07/pr1.gif" /&gt;&lt;/p&gt;
&lt;p&gt;那怎么办？传统的方式，就需要人工跟踪主体目标，相当于在大视频下再做一次运镜处理。可想而知，这个工作量是非常巨大的。&lt;/p&gt;
&lt;p&gt;但是，现如今，Adobe 家的 Premiere 产品，将可以直接自动跟踪主题目标，生成任意你需要的尺寸的视频。&lt;/p&gt;
&lt;p&gt;&lt;img alt="pr2" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-11-07/pr2.gif" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;再来看看 Adobe 官方给出的其他展示案例：&lt;/p&gt;
&lt;p&gt;&lt;img alt="pr3" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-11-07/pr3.gif" /&gt;&lt;/p&gt;
&lt;p&gt;是不是很酷？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;再来看“抠图”这个事情。&lt;/p&gt;
&lt;p&gt;当年我做 iOS Apps 的时候，经常要“东拼西凑”一些素材。为此，我曾经专门买过一本书：大概叫《如何用 PS 进行抠图》一类的。&lt;/p&gt;
&lt;p&gt;一点儿都不夸张，一本书。&lt;/p&gt;
&lt;p&gt;现如今，在 Photoshop 上，抠图这件“小事儿”，画一个框框就能解决了。&lt;/p&gt;
&lt;p&gt;&lt;img alt="koutu1" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-11-07/koutu1.gif" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;你以为这个抠图功能只能识别图片中的主体部分吗？不不不，绝不仅仅如此，我们只对那个帽子感兴趣？画个框框。done！&lt;/p&gt;
&lt;p&gt;&lt;img alt="koutu2" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-11-07/koutu2.gif" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;即使在极其复杂的场景下，针对极其难抠的毛发，这个新功能也瞬间搞定。&lt;/p&gt;
&lt;p&gt;还记得我上面说的《如何用 PS 进行抠图》的书吗？其中至少半本内容在介绍如何抠毛发... 幸好我那会儿觉得没用，所以没有学...：）&lt;/p&gt;
&lt;p&gt;&lt;img alt="koutu3" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-11-07/koutu3.gif" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Adobe 的发布会有一个很有意思的版块儿，叫 Adobe MAX Sneak Peek。&lt;/p&gt;
&lt;p&gt;Sneak Peek，就是“偷偷看一眼”的意思。在这里，Adobe 是指，这些功能还在开发过程中，短时间不会正式集成到 Adobe 的软件里。但是，在这里，大家可以先睹为快。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;比如，Adobe 想象出了面向未来的全新合影方案。&lt;/p&gt;
&lt;p&gt;相信大家都有这种体验，和全家人来到旅游景点，但是必须要别人的帮忙，才能照出一个全家福。要是在人多的旅游景点还好，但是，如果旅游景点没啥人呢？别觉得奇怪，在美国，这种情况很常见。&lt;/p&gt;
&lt;p&gt;现在，我们可以这样玩儿。先分别照出两张照片。&lt;/p&gt;
&lt;p&gt;&lt;img alt="family1.png" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-11-07/family1.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="family2.png" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-11-07/family2.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;大家可以看到，上面的两张照片，分别是爸爸和两位小孩子，以及妈妈和一位小孩子，在同一个景点的合影。&lt;/p&gt;
&lt;p&gt;值得一提的是，两张照片同时出现的右下角那个拿着吉他的小朋友，姿势完全不同。同时，两个照片虽然背景是在同一地点，但是具体的角度，光线等也有很大的区别。&lt;/p&gt;
&lt;p&gt;然后，Adobe 的新技术，可以无缝将这两张照片结合起来，形成全家福。关键是：一键搞定！&lt;/p&gt;
&lt;p&gt;有意思的是，Adobe 的工程师在演示这个功能的时候，直接打开一个 cmd 开始运行 Python 程序。我仔细看了一下，运行的是一个叫做 SmartGroupPhotoMerge.py 的文件... 并且，运行过程中，连调试用的矩阵输出都没有注释掉...&lt;/p&gt;
&lt;p&gt;&lt;img alt="family3" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-11-07/family3.gif" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;但是，结果却出人意料的好。这个功能先从第二张照片中，找到了在第一张照片中缺失的人物：那位母亲。然后，自动裁剪出了这位母亲的图像，无缝衔接在了第一张图片中!&lt;/p&gt;
&lt;p&gt;&lt;img alt="family4" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-11-07/family4.gif" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;再仔细看一下静态的成片：&lt;/p&gt;
&lt;p&gt;&lt;img alt="family5" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-11-07/family5.png" /&gt;&lt;/p&gt;
&lt;p&gt;从此再也不用担心合影的问题啦！是不是很酷？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;再比如，以后，Adobe 的特效制作产品 After Effect，就可以直接基于视频中的人物动作进行动作捕捉，然后制作动画效果了！&lt;/p&gt;
&lt;p&gt;哎，说来惭愧，我研究生的课题研究的就是动作捕捉。和人家比起来，自己就是个渣渣。&lt;/p&gt;
&lt;p&gt;&lt;img alt="ae1" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-11-07/ae1.gif" /&gt;&lt;/p&gt;
&lt;p&gt;一但捕捉好动作，就可以将视频中真实人物做的动作，映射到动画人物上了。所以，动画设计师的工作大大减轻了。对于简单的动作，只需要自己演上一段，然后，砰！就映射到虚拟的动画人物上了。&lt;/p&gt;
&lt;p&gt;&lt;img alt="ae2" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-11-07/ae2.gif" /&gt;&lt;/p&gt;
&lt;p&gt;人人可以做动画的时代即将来临。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;另一个有意思的技术，也是在方便动画工作者。&lt;/p&gt;
&lt;p&gt;在制作动画片的时候，很多时候，场景上只有人物在说话而已。此时，近乎动画设计师全部的工作量，都是制作口型动画，让动画人物的口型和录音保持一致。&lt;/p&gt;
&lt;p&gt;但现在，Adobe 让这个工作自动化了。只需要一个静态图片，一段录音，就能自动生成一段视频，让图片中的人物，根据录音，口型动起来！&lt;/p&gt;
&lt;p&gt;比如，在这个例子里，演示人员随便画了一个涂鸦的小猫。然后，小猫就根据录音，开始说话了！&lt;/p&gt;
&lt;p&gt;&lt;img alt="talk1" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-11-07/talk1.gif" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;觉得这种涂鸦线条太简单，所以好识别？来张梵高的自画像，一样的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="talk2" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-11-07/talk2.gif" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;对了，在这个演示中，工作人员右侧就开着一个 Jupyter Notebook，一边执行程序代码，一边展示代码输出结果。就跟坐在你旁边调试一样。&lt;/p&gt;
&lt;p&gt;这是我见过的最接地气的大厂发布会演示了... &lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Adobe 还在定义下一代的纹理映射。&lt;/p&gt;
&lt;p&gt;演示人员首选随手画了一个小鸟：&lt;/p&gt;
&lt;p&gt;&lt;img alt="texture1" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-11-07/texture1.gif" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;然后又选择了一个真实的小鸟的照片：&lt;/p&gt;
&lt;p&gt;&lt;img alt="texture2" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-11-07/texture2.gif" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;点击生成。砰！一个有着和绘制的小鸟同样形象的照片出现了。图片中小鸟的纹理细节，是根据选择的照片生成的。&lt;/p&gt;
&lt;p&gt;这张照片创建了一个新物种！&lt;/p&gt;
&lt;p&gt;&lt;img alt="texture3" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-11-07/texture3.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;这个技术同样适用于两张真实的照片。比如，给一个包包，添加不同的设计，看看结果会怎样？选择几张照片就搞定了。&lt;/p&gt;
&lt;p&gt;&lt;img alt="texture4" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-11-07/texture4.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;或者试一试，把两张完全不一样的鸟类照片融合，看看会产生什么新物种？&lt;/p&gt;
&lt;p&gt;&lt;img alt="texture5" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-11-07/texture5.gif" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;如果看过七龙珠的同学，是不是有种悟天克斯的既视感？&lt;/p&gt;
&lt;p&gt;&lt;img alt="gotenks" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-11-07/gotenks.gif" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;在字体设计上，Adobe 甚至添加上了体感交互过程。&lt;/p&gt;
&lt;p&gt;想象一下在这个字体上，涂了一层虚拟的油漆。演示人员摇晃一下平板，虚拟的油漆竟然流了下来，然后，一种全新的字体效果就被设计出来了！&lt;/p&gt;
&lt;p&gt;&lt;img alt="font" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-11-07/font.gif" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;天哪！这到底是在做设计，还是在玩儿游戏？&lt;/p&gt;
&lt;p&gt;&lt;img alt="font2" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-11-07/font2.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;了解摄影的同学都知道，光线是极其重要的一个因素。很多摄影专业人士为了捕捉一天中最好的光线，要在摄影地蹲点好几个小时。&lt;/p&gt;
&lt;p&gt;现在，Adobe 利用 AI 的能力，让摄影者可以随时拍摄照片，然后，再在照片中任意调节成为一天中不同的光线效果。&lt;/p&gt;
&lt;p&gt;&lt;img alt="light" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-11-07/light.gif" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Adobe 的新技术更可以让我们非常简单的直接调整照片中人物的微表情。&lt;/p&gt;
&lt;p&gt;在下面的展示中，演示人员将这位主持人照片的眼睛变大了，同时，还让笑容含蓄的他，更开心了一些。&lt;/p&gt;
&lt;p&gt;&lt;img alt="face" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-11-07/face.gif" /&gt;&lt;/p&gt;
&lt;p&gt;从此以后再也不用担心笑得不够好看了。嘴角的角度，想调成多少，就是多少！&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Adobe 的野心不仅如此。人家还意图进军 AR 领域！在下面的宣传视频中，设计人员直接将设计的结果，通过 AR 技术，搬运到了真实的展馆场景中！&lt;/p&gt;
&lt;p&gt;&lt;img alt="ar" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-11-07/ar.mp4" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;这其实是 Adobe 家的新产品，叫做 Adobe Aero，简称 AR。现在，大家可以直接在 Apple Store 下载这款软件，来体验一下 Adobe 的黑科技。&lt;/p&gt;
&lt;p&gt;&lt;img alt="ar2" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-11-07/ar2.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;怎么样，是不是很酷？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;我看过很多科技媒体评论，都认为 AI 离落地尚远。但其实，在很多专业领域，已经完全离不开 AI 了。只不过，AI 还并没有像手机电脑一样，成为大众唾手可得的技术产品而已。&lt;/p&gt;
&lt;p&gt;但我们每一个人，在现代社会生活，都会有意无意地接触到 AI。从使用搜索引擎，到各种不同网站的内容推荐。还有我们看的电视电影，玩的游戏，那些精美的效果和设计，背后都是大量 AI 辅助的结果。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;依我看，将技术和设计完美结合的 IT 企业，除了苹果，Adobe 也不差。搞不好，从现如今的视角看，Adobe 更出彩。&lt;/p&gt;
&lt;p&gt;对了，今年的 Adobe MAX 大会开始以后，Adobe 股价暴涨。&lt;/p&gt;
&lt;p&gt;&lt;img alt="stock" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-11-07/stock.png" /&gt;&lt;/p&gt;
&lt;p&gt;我已经开始期待明年 Adobe 的发布会了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-11-07/readme.md" rel="alternate"/></entry><entry><id>2019/2019-11-04/readme.md</id><title>微软日本实验了一下一周只工作 4 天会发生什么，结果令人大吃一惊</title><updated>2019-11-04T00:00:00-07:00</updated><content>&lt;h2&gt;微软日本实验了一下一周只工作 4 天会发生什么，结果令人大吃一惊&lt;/h2&gt;
&lt;p&gt;今年 8 月份，微软日本做了一个实验，一周只工作 4 天，每周五、六、日三天都休息。但是员工薪水保持不变，每周五的休假也不计入年假中，看看结果会如何。&lt;/p&gt;
&lt;p&gt;这相当于，今年 8 月份，微软日本的 2300 多名员工多了 4 天的带薪假日！&lt;/p&gt;
&lt;p&gt;就在上周，微软日本公布了这次实验的效果，结果令人大吃一惊。微软日本官方网站对这次实验的总结页面，可以参考&lt;a href="https://news.microsoft.com/ja-jp/2019/10/31/191031-published-the-results-of-measuring-the-effectiveness-of-our-work-life-choice-challenge-summer-2019/"&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;简单来讲，结果就是，在今年 8 月份：&lt;/p&gt;
&lt;p&gt;微软日本的员工额外请假的天数减少了 25.4%；&lt;/p&gt;
&lt;p&gt;用电量减少了 23.1%；&lt;/p&gt;
&lt;p&gt;打印纸张的使用量减少了 58.7%。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我查了一下，今年 8 月份一共有 22 个工作日，5 个周五。也就是微软日本在今年 8 月份，有 22.7% 的工作日放假了。&lt;/p&gt;
&lt;p&gt;用电量减少的幅度 23.1%，和员工额外请假的天数 25.4%，和这个 22.7% 基本相当。但是，打印纸张使用量瞬间减少 58.7% 是什么鬼？大家平时在每周五都疯狂打印什么吗？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;最最关键的是，据统计，&lt;strong&gt;员工的工作效率提升了 39.9%。&lt;/strong&gt;也就是说，员工工作了更少的时间，但是，更多的工作任务被完成了！&lt;/p&gt;
&lt;p&gt;这简直太神奇了，说实话，我觉得不科学！&lt;/p&gt;
&lt;p&gt;于是，我又仔细查证了一下，为什么会发生这样巨大的效率提升，发现问题的关键，在于与此同时，微软日本实行了会议制度改革。不必要的会议，一率取消。如果一定要开会，微软日本在这期间严格规定：由于工作时间的减少，所以，&lt;strong&gt;所有的会议都必须在 30 分钟内结束！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;看来，&lt;strong&gt;会议真的是生产效率提升的巨大阻碍啊！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;最后，微软日本有 92.1% 的员工对这项政策满意。不知道 7.9% 的员工不满意是什么鬼，大概都是中高层领导吧。&lt;/p&gt;
&lt;p&gt;不管怎样，微软已经决定，在今年冬天，再找一个月试验一下。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;在外网上，对于这个新闻，已经吵翻了天。连 BBC 都进行了报道。&lt;/p&gt;
&lt;p&gt;&lt;img alt="bbc" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-11-04/bbc.png" /&gt;&lt;/p&gt;
&lt;p&gt;支持派就不用说了。实际上，在国外，一直都有倡导一周工作 4 天的支持派。很多科技企业因此实行弹性工作制，或者允许在家办公（Work from home），都是这派声音争取的结果。&lt;/p&gt;
&lt;p&gt;但是，很多人认为，大多数企业，包括微软在内，短时间不会采取永久的一周四天工作制。&lt;/p&gt;
&lt;p&gt;一个很重要的原因是：不时地进行一下一周四天工作制，对员工来说，是一个鼓励。但如果一周四天工作制是常态，员工一旦习惯了，大概率的，不会有太多的效率提升。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;不过，似乎，更多的人在替企业主思考，如果一天只工作四天的话，到底多休息哪一天合适？&lt;/p&gt;
&lt;p&gt;很多人认为，休息周三，比休息周五更好。因为元气满满地周一工作，周二就消耗地差不多了。然后周三休息一天，周四就又元气满满地来工作了。毕竟，再工作一天，就又到双休日了！&lt;/p&gt;
&lt;p&gt;还有人觉得，应该每两周一个周期，单周周五休，双周周一休。这样一来，相当于每两周中间，多了一个四天的小长假！每两周都足够时间好好旅游一下。只是不知道，这样一来，会不会大多数人上班时间都去查旅游攻略了呢？&lt;/p&gt;
&lt;p&gt;不知道你怎么看？&lt;/p&gt;
&lt;p&gt;但是。。。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;别人家的公司，大家看看就好了。&lt;/p&gt;
&lt;p&gt;2019 年就剩下两个月了。希望在这最后两个月，大家努力，让自己的 2019 更精彩：）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-11-04/readme.md" rel="alternate"/></entry><entry><id>2019/2019-10-27/readme.md</id><title>【俄罗斯方块覆盖】答案</title><updated>2019-10-27T00:00:00-07:00</updated><content>&lt;h2&gt;【俄罗斯方块覆盖】答案&lt;/h2&gt;
&lt;p&gt;在上一周的推文 &lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-10-17/"&gt;俄罗斯方块覆盖&lt;/a&gt; 的最后，我给大家留了一个小的思考题。如果没有看过上篇文章，请一定阅读后再看这篇文章。这篇文章是对文末思考题的解答：）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;思考题如下：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;现在，你和 bobo 老师一起玩儿一个游戏。这个游戏是这样的：&lt;/p&gt;
&lt;p&gt;我们面对一个 5*4 的棋盘格，一共有五种形状，就是俄罗斯方块中的五种形状各一个。&lt;/p&gt;
&lt;p&gt;&lt;img alt="5" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-10-27/5.png" /&gt;&lt;/p&gt;
&lt;p&gt;你和 bobo 老师轮流，每次拿出一个形状，摆在棋盘上。每个形状只能使用一次。&lt;/p&gt;
&lt;p&gt;如果谁最后无法把任何剩余的形状拼进棋盘格中，谁就输了。&lt;/p&gt;
&lt;p&gt;傲娇的 bobo 老师让你先手行动。问：第一步，你要怎样走，能保证自己肯定赢？&lt;/p&gt;
&lt;p&gt;为了降低难度，对于这个问题，我给出四个选项：&lt;/p&gt;
&lt;p&gt;&lt;img alt="question" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-10-27/question.png" /&gt;&lt;/p&gt;
&lt;p&gt;看看大家能不能思考出答案？更关键的是，能不能解释清楚，为什么？&lt;/p&gt;
&lt;p&gt;在这里，大家注意，和很多博弈论问题不同的地方在于：&lt;strong&gt;这个问题并没有要求你或者 bobo 老师每步行动都采用最佳策略。 &lt;/strong&gt;
&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;解答篇&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在这里，我们首先分析一下，什么叫保证自己肯定能赢？&lt;/p&gt;
&lt;p&gt;第一步：你走；&lt;/p&gt;
&lt;p&gt;第二步：bobo 老师走；&lt;/p&gt;
&lt;p&gt;第三步：你走；&lt;/p&gt;
&lt;p&gt;第四步：bobo 老师走；&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;大家可以看到，你走的是奇数步，bobo 老师走的是偶数步。换句话说，&lt;strong&gt;你走完以后，棋盘格上应该有奇数个形状；bobo 老师走完以后，棋盘格上应该有偶数个形状。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;也就是说，如果在某种盘面下，棋盘格只能容纳奇数个形状，那么你就稳赢了。&lt;/p&gt;
&lt;p&gt;只有 D 满足这个条件。因为 D 选项中的长条，将整个棋盘格拆分成为了两个 2*4 的盘面。对于俄罗斯方块剩下的四种形状，不可能有两种不同的形状，可以同时“挤”在一个 2*4 的盘面中。&lt;/p&gt;
&lt;p&gt;&lt;img alt="a" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-10-27/a.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="b" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-10-27/b.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="c" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-10-27/c.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="d" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-10-27/d.png" /&gt;&lt;/p&gt;
&lt;p&gt;在这里，同学们要注意：对于第三个图，虽然我们可以再塞进去一个 L 形状，但是题目要求，五种形状，每种只能使用一次。&lt;/p&gt;
&lt;p&gt;所以，对于 D 选项，上下两部分最多再容纳各一个形状，整体只能容纳三个形状，是奇数。&lt;/p&gt;
&lt;p&gt;你先将长条横在中间，bobo 老师走一步，你再走一步，bobo 老师就一定无路可走了：）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;而对于其他的三个选项，都有方法可以再容下三个其他形状，也就是整个棋盘格可以有四个形状，是偶数。在这种情况下，你就输了。&lt;/p&gt;
&lt;p&gt;&lt;img alt="AA" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-10-27/AA.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="BB" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-10-27/BB.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="CC" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-10-27/CC.png" /&gt;&lt;/p&gt;
&lt;p&gt;在这里，请大家再体会一下，我们将这样的一个博弈问题，转换成为了：棋盘格中最多可以容纳多少个形状。&lt;/p&gt;
&lt;p&gt;另外，值得一提的是，在这个题目中，并没有要求你和 bobo 老师的每一步都采用最佳策略。这是和很多博弈论类问题不同的地方。也就是，两个人的行动可能不是当前状态下的最优行动。&lt;/p&gt;
&lt;p&gt;因为每一步不一定是最佳策略，所以对于(A)(B)(C)，你都有可能产生棋盘格中容纳四个形状的状态，导致输掉。但是对于(D)，你无论如何都不会输：）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-10-27/readme.md" rel="alternate"/></entry><entry><id>2019/2019-10-23/readme.md</id><title>bug 变 feature</title><updated>2019-10-23T00:00:00-07:00</updated><content>&lt;h2&gt;bug 变 feature&lt;/h2&gt;
&lt;p&gt;今天是 1024，中国的程序员节。写篇轻松点儿的文章，大家放松一下。&lt;/p&gt;
&lt;p&gt;聊聊历史上那些大名鼎鼎的 &lt;strong&gt;bug 变 feature&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img alt="bug" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-10-23/bug.gif" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;最经典的 bug 变 feature 的例子，应该是 Gmail 的“撤回”功能。在 Gmail 上，用户发送的邮件，有 5 秒钟的时间可以撤销。如果在 5 秒钟内，发现邮件发错人了，或者突然决定不发了，可以点击这个“Undo”按钮。&lt;/p&gt;
&lt;p&gt;&lt;img alt="undo" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-10-23/undo.png" /&gt;&lt;/p&gt;
&lt;p&gt;这么一个简单的功能，在有些情况下，可能是救命的。别问我是怎么知道的 &lt;/p&gt;
&lt;p&gt;但是，Gmail 的这个功能，其实并不是设计者的本意。最初，对于 Gmail 的服务器来说，发送一封邮件的处理准备时间需要 5 秒左右。每发送一封邮件，用户都需要等待 5 秒钟，这样的用户体验，实在是太差了。&lt;/p&gt;
&lt;p&gt;最终，Gmail 的工程师创新性地将这 5 秒钟，让用户理解成是允许自己反悔的时间。这便成为了 Gmail 邮箱服务的一大特色。&lt;/p&gt;
&lt;p&gt;即使如今，服务器的运算效率显然可以瞬间把邮件发送出去，Gmail 依然保留了这个功能。&lt;strong&gt;bug 变 feature。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;实际上，在计算机发展早期，很多 bug 变 feature 的经典案例，都和计算机的性能局限性有关。&lt;/p&gt;
&lt;p&gt;比如最经典的游戏 Space Invaders。&lt;/p&gt;
&lt;p&gt;说这个名字，中国的用户可能并不熟悉。但是如果说“小蜜蜂”，80 后们应该都很熟悉。相信有无数同学，在家长下血本购买了小霸王学习机后，在一次又一次的“小霸王其乐无穷哇”的呼喊声中，开始了 FC 游戏之旅。比如我：） &lt;/p&gt;
&lt;p&gt;“小蜜蜂”，近乎可以说是 FC 上的第一代射击游戏。&lt;/p&gt;
&lt;p&gt;&lt;img alt="fc" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-10-23/fc.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;小蜜蜂的设计是：在每一关开始，没有击落的敌人还比较多时，敌人的移动速度比较慢。随着画面上剩余的敌人越来越少，敌人的移动速度也越来越快，难度随之增加。&lt;/p&gt;
&lt;p&gt;实际上，这并不是游戏有意设计的。在最初，由于计算机的性能较低，当画面上的敌人很多时，每一帧的渲染计算量过大，导致每一帧时间相对较长，帧率变低，所以看起来移动速度很慢。&lt;/p&gt;
&lt;p&gt;随着游戏进行，画面上的物体越来越少，计算能力跟上了，帧率也就提高了，相应，敌人的速度也就变快了。&lt;/p&gt;
&lt;p&gt;但是，这样一个结果，从游戏体验上看，并不差，甚至加入了更多挑战性。所以后来，虽然性能不再是问题，但是，这个游戏机制保留了下来。&lt;strong&gt;bug 变 feature。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;另一个在游戏领域，和性能相关的 bug 变 feature 的例子，是大名鼎鼎的游戏《寂静岭》。&lt;/p&gt;
&lt;p&gt;《寂静岭》初代，是 1999 年发行的一个 3D 游戏。在那个年代，3D 游戏还不多。由于计算机的运算性能不高，不足以支撑将人物视野范围内的所有场景都同时渲染出来。于是，就会产生：人物一边行进，周边的建筑物突然“蹦出来”的渲染效果。用户体验非常不好。&lt;/p&gt;
&lt;p&gt;于是，《寂静岭》的团队决定将故事背景设定在一个虚拟的托卢卡湖边的小镇上。因为托卢卡湖上充满了水汽，常年都包裹着浓雾。&lt;/p&gt;
&lt;p&gt;在浓雾这一背景设计下，“蹦出来”的建筑物变得自然了。与此同时，也和游戏的类型——心理恐怖游戏非常契合。这简直是史上最佳电子游戏界的遮瑕膏。&lt;/p&gt;
&lt;p&gt;&lt;img alt="hill" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-10-23/hill.png" /&gt;&lt;/p&gt;
&lt;p&gt;现在，《寂静岭》系列已经有了八部作品，计算机的 3D 渲染能力也早就不需要借助浓雾来遮掩了。但是，《寂静岭》的浓雾设计却一直保留着。&lt;strong&gt;bug 变 feature。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="hill2" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-10-23/hill2.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;在游戏设计领域，bug 变 feature 的例子特别多。或许是因为，游戏设计本身包含艺术的成分。而艺术是没有标准答案的。很多时候，bug 反而是创新的来源。&lt;/p&gt;
&lt;p&gt;比如，大名鼎鼎的《超级马里奥》里，有一种隐藏的金币砖块，可以顶出很多金币。实际上，这最初是一个 bug。游戏本身的设计，一个砖块只能顶出一个金币。但是，游戏设计者发现这个 bug 很有意思，就一直保留了下来。&lt;strong&gt;bug 变 feature。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="mario" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-10-23/mario.gif" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;再比如，《马里奥 3D 世界》中，程序员无意在一个场景里保留了两个马里奥的实体。设计师看到后，觉得很有意思，于是设计了一种特殊能力，可以一下子克隆出多个马里奥。&lt;strong&gt;bug 变 feature。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="mario2" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-10-23/mario2.gif" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;大名鼎鼎的《古墓丽影》系列中的女主劳拉，最初设计时，胸根本没有那么大。3D 建模师不小心将一个 50 的参数输入成为了 150。于是，一个举世闻名的大胸妹出现了。&lt;/p&gt;
&lt;p&gt;大家一看，效果还不错，那就这样了。&lt;strong&gt;bug 变 feature。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="lara" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-10-23/lara.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;甚至，据说，《街头霸王》系列的核心玩法：连招，最初也是一个 bug。本身，设计者并没有想到这个机制。但后来发现，动作可以在极短的过程中连接起来，而让对手动弹不得。&lt;/p&gt;
&lt;p&gt;这本是一个 bug，由于要想触发这一 bug，需要在非常短的时间内进行人物招式的转换，其实也是有难度的。设计者也就没有修复这一 bug。慢慢的，连招，竟然变成了对打类游戏的核心玩法。&lt;/p&gt;
&lt;p&gt;如果喜欢玩儿对打类游戏的同学，下次在使用连招的时候，可以告诉自己，自己其实触发了一个 bug，但是，&lt;strong&gt;bug 变 feature。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="fighter" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-10-23/fighter.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;不仅仅是游戏，在操作系统领域，都有 bug 变 feature 的例子。最有名的，就是 Linux 或者 Unix 系统中的隐藏文件。&lt;/p&gt;
&lt;p&gt;如果使用 Linux 或者 Unix 系统的同学会知道，隐藏文件的定义是以点(.)开头的文件。&lt;/p&gt;
&lt;p&gt;比如，我们建立一个 git 仓库，文件下就会产生一个 .git 的隐藏文件夹；再比如，我们可以使用 .gitignore 文件，来告诉 git 不追踪哪些文件。&lt;/p&gt;
&lt;p&gt;&lt;img alt="git" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-10-23/git.png" /&gt;&lt;/p&gt;
&lt;p&gt;实际上，在 Linux 或者 Unix 系统上，大量配置文件都是以点(.)开头的。但这原本是一个 bug。&lt;/p&gt;
&lt;p&gt;因为操作系统下的文件名称格式是 &amp;lt;文件名&amp;gt;.&amp;lt;文件后缀&amp;gt;。道理上，操作系统应该要检查文件名为空的情况。可是程序的边界条件检测不完整，就产生了这种文件名为空，于是显示不出文件的形式。&lt;/p&gt;
&lt;p&gt;后来，开发者干脆将这种形式，定义成了隐藏文件的格式。&lt;strong&gt;bug 变 feature。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;历史上最有名的 bug 变 feature 的例子，应该是在 1997 年，IBM 开发的人工智能深蓝（Deep Blue），打败了当时的国际象棋大师 Garry Kasparov。&lt;/p&gt;
&lt;p&gt;后来，人们研究这场对战，发现决定生死的一招棋，是深蓝的第 44 步棋。在这一步中，人工智能做出了暂时性的牺牲，但是赢得了长远的胜利。&lt;/p&gt;
&lt;p&gt;可后来，人们却发现，这其实是深蓝的一个 bug。在当时的棋局下，深蓝并没有找到自己的行动策略，于是随机走了一步。是的，随机。&lt;/p&gt;
&lt;p&gt;然而，这随机的一步，竟然决定了历史的胜局...&lt;/p&gt;
&lt;p&gt;&lt;img alt="chess" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-10-23/chess.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我只想说：&lt;strong&gt;为什么我写的 bug，终归还是 bug；但别人写的 bug，最终却变成了 feature？：）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1024 程序员节快乐！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-10-23/readme.md" rel="alternate"/></entry><entry><id>2019/2019-10-17/readme.md</id><title>俄罗斯方块覆盖</title><updated>2019-10-17T00:00:00-07:00</updated><content>&lt;h2&gt;俄罗斯方块覆盖&lt;/h2&gt;
&lt;p&gt;这周，给大家分享一个有趣的几何问题：）&lt;/p&gt;
&lt;p&gt;在俄罗斯方块中，一共有 5 种不同的形状。这 5 种形状，都是由 4 个小方格组成的。如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img alt="a" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-10-17/a.png" /&gt;&lt;/p&gt;
&lt;p&gt;在真正的俄罗斯方块游戏中，其实一共有 7 种形状。这是因为上图的形状 B 和形状 D 不是对称的。所以，对这两种形状做镜面反射，可以得到另外两个形状，这两个形状，在我们今天的问题中不讨论。&lt;/p&gt;
&lt;p&gt;&lt;img alt="b" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-10-17/b.png" /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;值得一提的是，这些形状，在英文中，被称为 &lt;strong&gt;Tetromino&lt;/strong&gt;。其中， &lt;strong&gt;tetra-&lt;/strong&gt; 这个前缀，就表示“四”的意思。我们变换这个词根，可以得到一系列不同的英文单词。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;比如，只由一个小方格组成的形状，就叫做 &lt;strong&gt;Monomino&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;mono-&lt;/strong&gt; 前缀，表示单独的，也就是“一”。比如“独裁者”，就是 monarch；比如“独白”，就是 monologue；比如“垄断”，就是 monopoly；比如“一夫一妻制”，就是 monogamy；比如我们数学中学的单调函数，“单调的”，就是 monotonous；等等等等。&lt;/p&gt;
&lt;p&gt;Monomino 的形状只有孤零零的一种：&lt;/p&gt;
&lt;p&gt;&lt;img alt="monomino" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-10-17/monomino.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;如果由两个小方格组成，就是 &lt;strong&gt;Domino&lt;/strong&gt;，也就是大名鼎鼎的多米诺。相信大家都见过高手玩儿多米诺骨牌的超酷视频。&lt;/p&gt;
&lt;p&gt;&lt;img alt="domino" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-10-17/domino.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;其中，&lt;strong&gt;du-&lt;/strong&gt; 这个前缀，就是表示“二”，比如“两个人决斗”，就是 duel；比如“二重唱”，就是 duet；比如“两倍”，就是 double；等等等等。&lt;/p&gt;
&lt;p&gt;因为对称性，Domino 的形状也只有孤零零的一种：&lt;/p&gt;
&lt;p&gt;&lt;img alt="domino2" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-10-17/domino2.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;如果由三个小方格组成，就是 &lt;strong&gt;Triomino&lt;/strong&gt;。其中，&lt;strong&gt;tri-&lt;/strong&gt; 这个前缀，就表示“三”。比如“三角形”，就是 triangle。&lt;/p&gt;
&lt;p&gt;Triomino 一共有两种。由于形状的不同，被称为 Straight Triomino 和 Bent Triomino，非常好理解。&lt;/p&gt;
&lt;p&gt;&lt;img alt="triomino" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-10-17/triomino.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;而由四个小方格组成，就是上面所说的 &lt;strong&gt;Tetromino&lt;/strong&gt;，也就是俄罗斯方块游戏中的形状。值得一提的是，俄罗斯方块这个游戏，官方的英文名字就是 &lt;strong&gt;Tetris&lt;/strong&gt;，词根也是 tetra-。其实，这个名字和“俄罗斯”没有什么关系：）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;由五个小方格组成，就是 &lt;strong&gt;Pentomino&lt;/strong&gt;。其中，&lt;strong&gt;pent-&lt;/strong&gt; 这个前缀，就是“五”的意思。比如大名鼎鼎的五角大楼，就叫 The Pentagon。而 pentagon 本身，就是五边形的意思。&lt;/p&gt;
&lt;p&gt;由五个小方格组成的不同形状，一共有 12 种，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img alt="pentominoes" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-10-17/pentominoes.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;由 4 个格子组成的不同形状有 5 种；由 5 个格子组成的不同形状有 12 种。当我们使用更多的格子时，所能够组成的不同形状，将以几何级数的速度上升。这本身也是一个很有意思的，经典的组合数学的问题，不过我们这篇文章不探讨这个问题。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这篇文章，我们探讨如下问题：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于俄罗斯方块的五种不同形状，每种形状使用了 4 个小格子。如果我们每种形状都取一个，则一共有 20 个小格子。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;用这 5 个形状，能否填满一个 5*4 的棋盘格？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="chessboard" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-10-17/chessboard.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;注意，填满的定义是：不能有格子是空的，也不能有格子同时被两个形状占据（不能重叠）。&lt;/p&gt;
&lt;p&gt;为了方便大家思考，我再把俄罗斯方块的五种不同形状摆上：&lt;/p&gt;
&lt;p&gt;&lt;img alt="a" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-10-17/a.png" /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解答：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可能计算机专业的同学，会尝试使用程序，用穷举法试验一下。实际上，这个程序并不那么好写，但我还是建议计算机专业的同学尝试一下，是一个很好的编程练习。&lt;/p&gt;
&lt;p&gt;对于这个问题，正确答案是：&lt;strong&gt;不可能。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;是的，这又是一个&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-09-15/"&gt;《没有解的问题》&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;如果同学们可以正确地实现这个程序，你的程序会告诉你没有解。但是，要想理解为什么这五种形状不能填满一个 5*4 的棋盘格，还有更加巧妙的思考，可以不借助计算机，直接看出来。&lt;/p&gt;
&lt;p&gt;这个思考本身，在问题中，我已经提示给大家了。就是“棋盘格”。&lt;/p&gt;
&lt;p&gt;说起棋盘格，大家想到什么？一定是国际象棋中，黑白相间的格子。这正是想明白这个问题的关键。&lt;/p&gt;
&lt;p&gt;&lt;img alt="chessboard2" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-10-17/chessboard2.png" /&gt;&lt;/p&gt;
&lt;p&gt;大家可以看到，一个 5*4 的棋盘格，可以被这样划分为 10 个黑格子；10 个白格子。&lt;/p&gt;
&lt;p&gt;如果，我们将俄罗斯方块中的五种形状，也按照棋盘格的方式，用黑白相间的格子表示，就是这样：&lt;/p&gt;
&lt;p&gt;&lt;img alt="c" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-10-17/c.png" /&gt;&lt;/p&gt;
&lt;p&gt;这里，大家要注意，中间的形状 C，也就是 T 形状，同时占据了三个黑色格子和一个白色格子。而其他所有形状，都占据了两个黑格子和两个白格子。因此，这五种形状，占据了 11 个黑格子和 9 个白格子。&lt;strong&gt;他们是不可能摆在一个有 10 个黑格子和 10 个白格子的 5*4 的棋盘格中的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;证毕。&lt;/p&gt;
&lt;p&gt;怎么样，是不是很简单？&lt;strong&gt;是不是很酷？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;这本身是一个非常经典的，解决棋盘覆盖问题的技巧，同时，在我看来，也是非常巧妙的一种思维转换方式。我们从探讨 5*4 的棋盘格整体，转而去考察 10 个黑格子和 10 个白格子这样的一个“局部”。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;最后，给同学们留一个思考题：&lt;/p&gt;
&lt;p&gt;这个问题本身，虽然背景依然是俄罗斯方块，但和上面介绍的俄罗斯方块覆盖问题无关。但同样，可以巧妙地通过思维的转换，快速看出答案。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;问题如下：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;现在，你和 bobo 老师一起玩儿一个游戏。这个游戏是这样的：&lt;/p&gt;
&lt;p&gt;我们面对一个 5*4 的棋盘格，一共有五种形状可供我们选择，就是俄罗斯方块中的五种形状各一个。&lt;/p&gt;
&lt;p&gt;你和 bobo 老师轮流，每次拿出一个形状，摆在棋盘上。每个形状只能使用一次。&lt;/p&gt;
&lt;p&gt;如果谁最后无法把任何剩余的形状拼进棋盘格中，谁就输了。依然是，格子之间不能重叠。&lt;/p&gt;
&lt;p&gt;傲娇的 bobo 老师让你先行动。问：第一步，你要选怎样的图形，怎么摆放，能保证自己肯定赢？&lt;/p&gt;
&lt;p&gt;在这里，给同学们四个选项：&lt;/p&gt;
&lt;p&gt;&lt;img alt="question" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-10-17/question.png" /&gt;&lt;/p&gt;
&lt;p&gt;看看大家能不能思考出答案？更关键的是，能不能解释清楚，为什么？&lt;/p&gt;
&lt;p&gt;答案我会在下周揭晓。不过，根据我的经验，一般，同学们在留言区，就能把正确答案分析出来了：）&lt;/p&gt;
&lt;p&gt;对了，大家应该看出来了，这篇文章中大部分配图，都是我手绘的。炫耀一下下：）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;本篇文章最后的思考题答案，可以参考&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-10-27/"&gt;这里&lt;/a&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-10-17/readme.md" rel="alternate"/></entry><entry><id>2019/2019-10-09/readme.md</id><title>凭什么不是你？</title><updated>2019-10-09T00:00:00-07:00</updated><content>&lt;h2&gt;凭什么不是你？&lt;/h2&gt;
&lt;p&gt;来自我的知识星球读者的提问：&lt;/p&gt;
&lt;p&gt;bobo 老师，我是 985 非科班硕士，想转行互联网，大概有一年时间自学，目前纠结学前端还是 Java。学了一点 Java，担心一年时间不够。现在比较倾向于前端，因为时间可能充足一些，校招竞争小一些。&lt;/p&gt;
&lt;p&gt;但是，了解到前端以后发展可能比不上后端，升得慢，天花板较低。请问老师怎么看呢？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;bobo 老师的回答：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;以下是我的个人看法：&lt;/p&gt;
&lt;p&gt;我完全不同意前端发展比不上后端。在我看来，前端有极其宽广的发展前景。看最近几年前端框架层出不穷的推陈出新就明白了。这些推陈出新，都是前端人搞出来的啊！发展多么迅猛！&lt;/p&gt;
&lt;p&gt;虽然有些人认为，如今前端框架的发展已经日趋成熟，但这完全不代表前端领域“无事所作”。就在昨天，我在慕课网的专栏更新中还写了：在浏览器上都能做 AR 应用了，凭什么说前端比后端差？WebAR 了解一下？&lt;/p&gt;
&lt;p&gt;这样的例子我能举出一大堆。&lt;/p&gt;
&lt;p&gt;WebAssembly 大大提高了前端代码层面的性能问题，很多人工智能算法都能在前端运行了。前端 + AI 了解一下？&lt;/p&gt;
&lt;p&gt;未来的趋势本身就是“端到端”的，IoT 正在逐渐普及发展。前端 + IoT 了解一下？&lt;/p&gt;
&lt;p&gt;至于区块链领域，Node.js 已经是开发区块链应用的重要选择之一了。&lt;/p&gt;
&lt;p&gt;更不用说像 WebOS 这样“宏伟的设想”了。虽然在过去十年，WebOS 在消费领域没有取得商业上的成功，但我看到的，不是 WebOS 在逐渐没落，相反，越来越多的问题正在被得以解决，市场环境也越来越成熟。谁也说不好什么时候，我们就将迎来 WebOS 的全面爆发。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;凭什么说前端比后端差？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;当然，通过上面的举例，你也应该能看到：在深入前端技术的过程中，其实，你会不可避免的接触越来越多的“后端技术”，或者说是底层技术更准确一些，也就是我一直强调的“内功”。要想成为技术大牛，科班生的那堆课程是逃不过的。但关键在于，&lt;strong&gt;我个人认为，对于非科班生而言，前端是最好的切入计算机行业的方式。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为什么？因为当下，科班计算机专业的课程体系，基本学的就是后端。所以，在后端方向上，非科班生将和科班生“直接正面冲突”，非常吃亏。&lt;/p&gt;
&lt;p&gt;但是，前端不同。因为科班生也没有正儿八经的课程体系来系统学习前端技术，因此，非科班在竞争上吃亏少一些。更何况，前端领域更容易用作品说话，说服别人：虽然我不是科班生，但并不比科班生差。&lt;/p&gt;
&lt;p&gt;如果你认为前端比后端差，很可能从骨子上，你已经把自己定位成了“调包侠”。其实，后端的“调包侠”一样天花板很低。别说后端了，人工智能这么高大上，我敢断言，“AI 调包侠”的天花板，比前端低多了。&lt;/p&gt;
&lt;p&gt;所以，眼光深远一些。上面列举了那么多领域，&lt;strong&gt;每个领域都需要创新者，开拓者，领军人物和灵魂人物，这些人凭什么不是你？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;燕雀安知鸿鹄之志，凭什么你不能是下一个“尤雨溪”？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;与你共勉。大家加油！：）&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-10-09/readme.md" rel="alternate"/></entry><entry><id>2019/2019-10-07/readme.md</id><title>大厂面试为什么总考算法？以及如何避开算法面试。</title><updated>2019-10-07T00:00:00-07:00</updated><content>&lt;h2&gt;大厂面试为什么总考算法？以及如何避开算法面试。&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;大厂面试究竟为什么总是考算法？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;很多同学都问过我这个问题，毕竟，在实际工作中，我们近乎根本不可能从底层实现一遍经典算法。我在文章&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-03-18/"&gt;《学算法有什么用？没用》&lt;/a&gt;中说过，如果真的以工作内容为导向，算法还真可能对绝大部分同学来说没什么用。&lt;/p&gt;
&lt;p&gt;但是，算法却是大厂面试考察的重点。甚至，极端一些，国外一些大厂只考算法。&lt;/p&gt;
&lt;p&gt;为什么会这样？在这篇文章中，我打算系统阐述一下这个问题。相信会对你有启发。&lt;/p&gt;
&lt;p&gt;顺便一提，&lt;strong&gt;文末附赠如何绕过大厂算法面试攻略。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先，在更早，微软还稳稳坐在老大位置上的时候，大厂的面试题完全不是现在的画风。&lt;/p&gt;
&lt;p&gt;那是什么画风呢？请看如下问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;井盖为什么是圆的？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;为什么镜子中的景象是左右相反的，而不是上下颠倒的？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如何把把富士山从一个地方搬运到另一个地方？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有两个房间，一间房里有三盏灯，另一间房有控制这三盏灯的三个开关。这两个房间是分割开的，从一间不能看到另一间的情况。现在要求你分别进这两房间一次，然后判断出这三盏灯分别是由哪个开关控制的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;等等等等。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;整体，这些问题和算法的关系不大，如果非要归类的话，说他们是“智力题”或许更合适。&lt;/p&gt;
&lt;p&gt;是的，在那个时期，以微软为首的大厂，主要考“智力题”。为什么？按照微软“半官方”的说法，因为彼时计算机行业尚属新兴行业，每天都会面对很多全新的问题，处理这些问题的方式也没有一定之规。在这种情况下，微软希望选拔出最具有创造性的人才，可以灵活，创新地处理工作中遇到的各种问题。&lt;/p&gt;
&lt;p&gt;但是，随着时间的推移，计算机行业逐渐成熟，从业人员也在呈指数级上涨。虽然创造力依然很有意义，但并不再是唯一的选拔人才的指标了。一个逻辑思维强，基本功扎实的人，也能够非常好地胜任软件工程师的角色。至此，互联网大厂的面试进入了第二阶段，以算法问题为主。&lt;/p&gt;
&lt;p&gt;这并不是坏事儿。因为这意味着计算机行业不再是“天才”才能涉足的领域。普通人通过训练学习，也可以进入。与此同时，这意味着计算机行业门槛降低。一个行业门槛的降低，意味着这个行业可以成规模的扩张。这也就是大家现在看到的互联网欣欣向荣的景象了。&lt;/p&gt;
&lt;p&gt;值得一提的是，微软招聘了那么多“可以创造性解决问题的人才”，但也逃不过在创新性上被 Google，Apple 等企业反超的命运。所以，这样的人才选拔策略是否合理，也很值得商榷。比尔盖茨曾经很认真地反省过这件事情。&lt;/p&gt;
&lt;p&gt;不管怎样，“智力面试题的盛行”，早已成为了历史。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为什么当下，大厂面试主要考核算法问题？这里要说一点点人才选拔的理论。&lt;/p&gt;
&lt;p&gt;简单地说，在 HR 领域，一个公认的人才选拔模型，由三部分组成。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;通用问题思考能力；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;专业能力；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;人品，三观，等等。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;“人品，三观”很好理解，这篇文章不谈。&lt;/p&gt;
&lt;p&gt;“专业能力”也很好理解，想当医生，各种医学知识应该了解；想当律师，各种法律条文应该了解。同理，搞计算机的，至少要会写代码，不能是“口头工程师”。&lt;/p&gt;
&lt;p&gt;至于“通用问题思考能力”，简单来说，就是把专业能力拿去，看一个人遇到一个非专业的问题，水平如何。这是一个很大的范畴，想象力，创造力，反应力，记忆力，归纳总结能力，表达能力，等等等等，都能装进这个篮子里。上面列举的微软的“智力题”，从很大程度上，是在考察“通用问题思考能力”。&lt;/p&gt;
&lt;p&gt;当下，大部分互联网企业比较认可的结论是：算法面试问题，可以很好地同时顾及“通用问题思考能力”和“专业能力”的考察。&lt;/p&gt;
&lt;p&gt;说算法问题可以很好地考察“专业能力”很好理解。为什么说算法问题能很好地考察“通用问题思考能力”？&lt;/p&gt;
&lt;p&gt;因为，解决算法问题是一个典型的“学以致用”的过程。对于计算机专业的同学来说，近乎大一大二两年，就已经将基本的算法和数据结构学习完了。数据结构大体就那么多；经典算法大体就那么多；算法设计思想也就那么几类。但是，面试者能否综合这些知识，解决一个一个算法问题？相信大家都明白，这并没有那么简单。&lt;/p&gt;
&lt;p&gt;而实际上，在计算机的世界中，我们经常面对类似的情况。各类语言就摆在这里；各种 API 文档上写得一清二楚；各种工具也都唾手可得，从数据库，到数据平台；从正则表达式，到云计算服务；github 上各类开源项目应有尽有。我们能否合理组合这一切，完成我们想要的功能？&lt;/p&gt;
&lt;p&gt;解决算法问题，近乎就是这个解决问题模型的缩影。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当然，还有一类面试问题，可以更好地模拟这种“真实的问题”，那就是系统设计类问题。实际上，很多企业也会大量地考察系统设计类问题。比如以下问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如何设计一个 Google？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如何设计一个 Facebook？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如何设计一个 Youtube？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如何设计一个短地址生成服务？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如何设计一个通知系统？&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;等等等等。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;但是，如果仅仅考察系统设计问题，最大的缺点是容易流于“表象”。&lt;/p&gt;
&lt;p&gt;比如，很多同学都知道，面对性能问题，我们可以使用缓存机制（Cache），或者进行并行处理。但是，具体在实现一个缓存机制或者进行并行处理的过程中，可能会出现什么问题？仅仅用自然语言描述，很多时候都是不够的。&lt;/p&gt;
&lt;p&gt;可在短短的面试过程中，近乎不可能让每一个面试者都真地实现一个完整的缓存机制或者并行模型。因此，&lt;strong&gt;对于系统设计问题的考察，通常很难触及到代码层面。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;但是，对于软件工程师来说，正确地实现代码，比知道几个诸如“缓存机制”或者“并行处理”这样的名词重要多了。很多人说起这样的概念头头是道，但真的写起代码来，就原形毕露了。&lt;/p&gt;
&lt;p&gt;所谓 &lt;strong&gt;Talk is cheap, show me the code&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img alt="linus" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-10-07/linus.png" /&gt;&lt;/p&gt;
&lt;p&gt;算法面试相较而言，虽然问题规模会更小，问题本身也更有局限性，但能考察出程序员真刀真枪写代码的能力。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不要说系统设计问题，其实，就算是算法问题，相信很多同学也都有体会。&lt;strong&gt;对于一个问题，描述它的解决思路是容易的，但真要落实到代码，完成正确的逻辑，就不那么容易了。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于一个具体的工程问题，没有受过专业训练的人，很容易忽略复杂的细节，将问题想简单。毕竟，盖一个房子不过是建四面墙，上面加个屋顶而已。但是，这么一个简单的“盖房子”的工程问题，凝聚了人类几千年的智慧结晶，里面包含了诸多复杂的工程问题。从地基要挖多深，到屋体架构设计；从承重墙的构建，到具体施工材料的选择。&lt;strong&gt;外行看来很简单的问题，实际上是很复杂的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;计算机专业也是如此。排行榜不就是排个序吗？但能否达到性能标准？搜索引擎不就是把互联网上相关的信息展现出来吗？但是怎么定义“相关信息”。互联网这么大，怎么快速响应？这些都是实打实的问题，外行想不到，只有内行才能理解其中的难点。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我在&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-07-09/"&gt;《神一样的随机算法》&lt;/a&gt;这篇文章中，向大家介绍了 Knuth Shuffle 算法。很多同学说，这很简单啊。因为这个算法本质就是从一堆元素中，每次随机取一个，然后将这个元素删除，再随机取一个，再删除，以此类推。&lt;/p&gt;
&lt;p&gt;但如果考虑具体的实现，我们遇到的问题就是，这堆元素要怎么存储？如果我们放在一个链表中，每次删除的性能太差；但如果我们放在哈希表或者红黑树中，又不能高效实现“随机取一个元素”的操作。Knuth Shuffle 极其巧妙地在数组中高效完成了这一切任务。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;再举一个例子，Kruskal 最小生成树算法，思想也非常简单。对所有边排序，之后从小到大选边，只要和已有的边没有形成环，就选择，否则抛弃。这么一个简单的描述，但落实到具体代码中，怎么判断“是否和已有的边形成环”，并不那么容易。&lt;/p&gt;
&lt;p&gt;实际上，在历史上，Kruskal 算法的思想很早就出现了，但是，一直没有一个高效的实现方式。直到人们意识到可以用并查集进行“环检测”，Kruskal 才成为了一个“实用的算法”。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;现在，还有很多算法思想，人们还没有找到高效的实现。有机会再和大家分享。现阶段，这些“没有好的实现”的算法思想并不实用。因为，软件工程师的核心价值，是具体用代码实现出功能，而不是侃侃而谈思想或者概念。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当然了，如果遇到真才实学的面试官，面试者随便吹几个概念，其实也不可能蒙混过关。有经验的面试官一定能深入问出面试者的水平。但是，这对面试官的要求太高了。&lt;/p&gt;
&lt;p&gt;对于任何一个企业来说，高水平的软件工程师，他的主要时间应该用来完成工程设计，而不是去面试。更何况，现如今，互联网企业规模急速扩大，一个企业一天可能几十上百场面试，怎么可能有那么多高水平的面试官？&lt;/p&gt;
&lt;p&gt;这样一来，&lt;strong&gt;算法面试的另一个优势就体现出来了：对于面试官来说，好准备。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于系统设计问题来说，通常，面试官的水平要远远高于面试者，才能真实地鉴别出面试者的能力。但是，对于算法问题来说，即使面试官的算法水平低于面试者，也可以进行考核。因为面试官可以直接看答案，理解清楚解题思路和代码就好了。&lt;/p&gt;
&lt;p&gt;正因为如此，会出现下图这样的事情。虽然可能是段子，但是，这背后反映的事实是真实的。&lt;/p&gt;
&lt;p&gt;&lt;img alt="interview" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-10-07/interview.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;一个算法面试官问你一个算法问题，你答不好，不代表他比你强。因为你们处于信息不对等的位置。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;除此之外，算法面试还有更多优点。&lt;/p&gt;
&lt;p&gt;比如，&lt;strong&gt;语言无关&lt;/strong&gt;。不管是编译型语言，还是脚本语言；不管是什么编程范式为主的语言；也不管是开发 iOS 还是 Android 还是前端还是后端的语言，都能用来解决算法问题；&lt;/p&gt;
&lt;p&gt;同时，考察算法问题，&lt;strong&gt;对”硬件条件“要求也很低&lt;/strong&gt;。并不需要非常特定的环境或者配置；在公司的会议室可以完成，找个咖啡厅也能完成；面对面可以完成，远程也可以完成。没有电脑？拿张纸都可以开始。对，我说的就是白板编程。&lt;/p&gt;
&lt;p&gt;另外，使用算法问题，可以很容易地比较面试者的水平差异。其他领域的问题，很难像算法问题一样，在不同难度级别上，产生这么多看似完全不重复的问题。不管是深度还是广度，不管是简单的还是难的，总会有合适的算法问题让面试官选择，以测试出你的水平上限；&lt;/p&gt;
&lt;p&gt;也正因为算法问题的选择很多，所以，使用算法面试，非常容易&lt;strong&gt;成规模&lt;/strong&gt;地进行招聘。在一段时间里进行几百场面试，题目不会重样。这样，避免了泄题的问题。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;7.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;那么，算法面试有没有缺点呢？当然有。最大的缺点，我在我的文章&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-09-26/"&gt;《第一类错误和第二类错误》&lt;/a&gt;中提到过，就是容易产生 False Negative ，也就是漏过人才。因为，不擅长算法的人，不意味着不胜任计算机专业的工作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大厂错过了人才怎么办？答案可能有点儿扎心：他们不在乎。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;反正有简历源源不断地涌进来。大厂招聘的目的并不是不错过每一个人才，而是招聘到足够数量满足自己需要的人才。&lt;/p&gt;
&lt;p&gt;通常来讲，擅长算法的人，近乎都能够很好地胜任软件工程师的工作。反之，不擅长算法的人，虽然有可能是人才，但更有可能不是人才。相较而言，大厂更害怕将蠢材误判为人才招进来。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;8.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;那么，在什么情况下，算法面试对于企业来说，不是好的选择？&lt;/p&gt;
&lt;p&gt;典型的情况就是：企业不需要考察“通用问题解决能力”。这就是很多小公司面试不考算法的原因。小公司更注重专业能力的考察。能干活最重要。他们并不会接触到那么多“全新的，创造性的问题”。&lt;/p&gt;
&lt;p&gt;对于大厂，也有不适合考算法的情况。那就是：企业期望招聘的人才，是一个专门领域的人才。比如，企业想招聘一个数据库专家，面试问题却是一堆动态规划，这是不合适的。&lt;/p&gt;
&lt;p&gt;对于很多公司，比如 Google，即使招聘领域专家，也会考察算法问题，但难度明显降档。最典型的就是 Google 在面试 Homebrew 的作者 Max Howell 的时候，给出的算法面试题只是“翻转二叉树”这么简单而已。这个问题在 Leetcode 上只是一个 easy 的问题。&lt;/p&gt;
&lt;p&gt;（不过，Google 因为 Max Howell 没有很好地回答这个算法问题而拒绝了这位 iOS 界的大牛。这里面的故事，以后有机会和大家分享。）&lt;/p&gt;
&lt;p&gt;&lt;img alt="howell" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-10-07/howell.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;9.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所以，&lt;strong&gt;进大厂绕过算法面试的方式是什么？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;就是成为领域专家。让企业不能把你当做是一个普通的求职者，使用一般通用的流程去面试。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;“领域专家”这个词听起来很吓人，但其实，可能并没有大家想得那么复杂。&lt;/p&gt;
&lt;p&gt;在我的学生中，有同学曾经面对大厂面试官的算法问题，霸气回应“算法我不懂，架构设计随便问”，最终成功进了大厂；&lt;/p&gt;
&lt;p&gt;有同学自己做了一个简易的操作系统内核，成功进大厂；&lt;/p&gt;
&lt;p&gt;有同学上架了一款非常成功的 iOS 应用，国内拿奖无数，还被苹果邀请参加了 WWDC 开发者大会。甚至，严格意义上，他是一名非科班的同学，但最终，毫无悬念地走入大厂；&lt;/p&gt;
&lt;p&gt;也有同学，本科都没读，阴错阳差，研究起了外挂，圈内小有名气，最终只是高中学历，走入大厂安全核心部门；&lt;/p&gt;
&lt;p&gt;这样的例子太多太多。这些例子里的同学，都不是每个领域数一数二的专家。但是，从企业的角度看，已经算是“领域专家”了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;最近，有一个新闻刷屏了，清华一个学霸，在自己写的CPU上运行自己写的操作系统，以及用自己实现的编译器生成的程序。当然，这里面可能还有很多细节需要考察，但是，这样的人才，大厂一定是开绿灯的。&lt;/p&gt;
&lt;p&gt;&lt;img alt="xueba" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-10-07/xueba.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;实际上，我个人认为：在面试中，更多地考察操作系统，编译原理，网络基础等等知识，是更加合理，也是更实用，有意义的。对这些领域的考察，也完全可以涵盖算法。但是，缺点就在于，这些领域，很难有千变万化的题目。毕竟，Google 有一个规矩，泄露出去的面试题，不会出现第二次的。&lt;/p&gt;
&lt;p&gt;但是，摆出在这些领域的成绩，是不可能被任何一个大厂忽略的。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;10.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;大家可以看出来，我所谓的“绕过大厂算法面试”的方式，就是成为“领域专家”。有没有觉得自己上当受骗了？&lt;/p&gt;
&lt;p&gt;至少在我看来，成为“领域专家”，是比掌握那些基本的算法面试问题要难的。&lt;/p&gt;
&lt;p&gt;但是，很多时候，现实就是这样。我们对现实不满，苦苦追求其他“捷径”。但是，其他的路其实是更艰苦的路。而&lt;strong&gt;我们总容易忽略，摆在眼前的道路，其实，已经是捷径了。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-10-07/readme.md" rel="alternate"/></entry><entry><id>2019/2019-09-30/readme.md</id><title>此后七十年</title><updated>2019-09-30T00:00:00-07:00</updated><content>&lt;h2&gt;此后七十年&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1949 年。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这一年，世界上第一台&lt;strong&gt;电子延迟存储自动计算器&lt;/strong&gt;（Electronic Delay Storage Auto-matic Calculator, EDSAC）在英国剑桥大学诞生了。虽然叫它“计算器”（Calculator），但它实际是一台“计算机”（Computer）。只是当时，人们对计算机的认识很局限，认为，它只能作为“计算器”的用途而已。&lt;/p&gt;
&lt;p&gt;这台计算机，是英国剑桥大学数学实验室的 Maurice Wilkes 教授带领他的团队完成的。他们深受冯.诺依曼的启发，使用了 3000 个真空管，排在 12 个柜架上，占地 5×4 米，消耗功率 12 Kw。&lt;/p&gt;
&lt;p&gt;这是世界上第一台可以实际运行的存储程序式电子计算机。从此，计算机的世界里有了“子程序”（subroutines）的概念。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;此后七十年&lt;/strong&gt;，计算机硬件愈发成熟，软件行业更是如火如荼。子程序早已是一个连小学生都懂的概念，计算机则化为巴掌大的智能手机，装在了每一个人的口袋里。&lt;/p&gt;
&lt;p&gt;&lt;img alt="EDSAC" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-30/EDSAC.jpg" /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1949 年。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;MIT 的 Jay Forrester 教授，首次提出了&lt;strong&gt;磁芯存储器&lt;/strong&gt;（magnetic core memory）的概念。这一技术成为了日后很长的时间里，随机存取存储器（Random Access Memory）的主要技术方案，也就是我们所说的内存。&lt;/p&gt;
&lt;p&gt;&lt;img alt="mit" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-30/mit.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;值得一提的是，对于这一技术日后的发展和完善，美国华裔电脑科学家王安做出了突出贡献。他是王安计算机的创办人。1948 年，获哈佛大学应用物理博士学位的他，已经在磁芯内存领域，有了 34 项之多的发明专利。20 世纪 80 年代，王安电脑达到顶峰，王安也一度成为美国第五大富豪。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;此后七十年&lt;/strong&gt;，计算机行业的企业家将不仅仅诞生在美国的土地上。横跨整个太平洋，在遥远的东方，一个个响亮的名字逐一出现。华为，联想，小米，金山，百度，阿里巴巴，腾讯，京东，网易，搜狐，新浪，字节跳动。每一个名字，都是中国人的骄傲。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1949 年。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这一年，世界上第一台&lt;strong&gt;调制解调器&lt;/strong&gt;诞生了。位于美国波士顿的空军剑桥研究中心（AFCRC），由 Jack Harrington 领导的研究小组，成功将电子信号转换成了模拟信号，使得信号可以在电话线中传输，之后，又在终端将模拟信号转换成电子信号。&lt;/p&gt;
&lt;p&gt;调制解调器主要完成“调制”（MODulate）和“解调”（DEModulate）两个功能，将这两个单词的首字母拼接起来，一个新的英语词汇诞生了：MODEM。此后，这个词汇流入中国，因为音似“猫”的发音，被大众亲切地称为：猫。&lt;/p&gt;
&lt;p&gt;这本是为了传输雷达信号而进行的项目，却打开了一扇新世界的大门。此后七十年，互联网蓬勃发展，推动了人类历史的又一次全新的信息革命。甚至，我们至今仍然置身其中。互联网成为了现代社会每个人离不开的技术。&lt;/p&gt;
&lt;p&gt;&lt;img alt="modem" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-30/modem.jpg" /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1949 年。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;图灵在《伦敦时报》上声称：计算机将可以进入任何一个人类智力可以涉及的领域，并最终和人类竞争。甚至，我们在未来区分不出来一首诗，到底是计算机写的，还是人类写的；而欣赏一首诗的标准，或许也将被计算机所定义。&lt;/p&gt;
&lt;p&gt;图灵说的是&lt;strong&gt;人工智能&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;此后七十年&lt;/strong&gt;，人工智能这个“学科”开始在无数人的希冀与质疑下缓慢成长。它显然不像图灵想象的那么简单，却吸引了无数这个世界上最聪明的大脑。它曾陷入低谷，也曾辉煌；它曾被人排斥，害怕，也曾被人捧上神坛，引来无数投资人的青睐。至今，我们还在探索人工智能的道路上，准备迎接由人工智能主导的新的一轮信息革命。&lt;/p&gt;
&lt;p&gt;&lt;img alt="turing" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-30/turing.jpg" /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1949 年&lt;/strong&gt;，世界发生了很多大事。但这些，都比不上在遥远的东方，发生的一件大事。&lt;/p&gt;
&lt;p&gt;1949 年 9 月，在中国共产党的领导下，中国共产党、各民主党派、人民团体与社会各界人士在北平召开了中国人民政治协商会议第一届全体会议。&lt;/p&gt;
&lt;p&gt;会议决定：建立一个国家名称不同于中华民国的新中国。按照《中国人民政治协商会议共同纲领》，这个新国家的国号为&lt;strong&gt;中华人民共和国&lt;/strong&gt;，并定于 1949 年 10 月 1 日举行建国仪式，史称开国大典。&lt;/p&gt;
&lt;p&gt;1949 年 10 月 1 日下午 2 时 55 分，仪式正式开始。开国大典由中央人民政府秘书长林伯渠主持。在下午 3 点，毛泽东于北京天安门正式宣布：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;同胞们，中华人民共和国中央人民政府今天成立了！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="founding" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-30/founding.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;此后七十年&lt;/strong&gt;，一条巨龙在世界的东方腾飞。&lt;/p&gt;
&lt;p&gt;在这片土地上，我们的父辈曾经遭受磨难与困苦，但从未放弃希望。在这里，他们拼搏的泪水与汗水，浇灌出了一个全新的，强大的中国。短短七十年的时间，全世界都不得不为她所取得的成绩赞叹。&lt;/p&gt;
&lt;p&gt;今天，她七十岁。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;祝祖国七十岁生日快乐，繁荣富强。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;此后七十年，大家加油！&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-09-30/readme.md" rel="alternate"/></entry><entry><id>2019/2019-09-26/readme.md</id><title>第一类错误和第二类错误</title><updated>2019-09-26T00:00:00-07:00</updated><content>&lt;h2&gt;第一类错误和第二类错误&lt;/h2&gt;
&lt;p&gt;通常，在初等教育阶段，我们习惯于说，错误就是错误。我们要争取不犯错误。&lt;/p&gt;
&lt;p&gt;但是，长大以后，所有的人都会慢慢明白一个道理。在这世界上，怎么可能不犯错误？犯错不可避免。关键是，我们要尽量避免我们不想犯的那类错误。&lt;/p&gt;
&lt;p&gt;错误还有分类？是的。错误不仅有分类，错误的分类，还被大量领域非常认真地研究。如果你学习过统计学，就会接触过这个术语：&lt;strong&gt;第一类错误和第二类错误。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;统计学教材上会对这两类错误有非常文驺驺的表述（不同看懂他们，我也一直傻傻分不清）：&lt;/p&gt;
&lt;p&gt;第一类错误，也称为 α 错误，是指当虚无假设(H0)正确时，而拒绝H0所犯的错误；&lt;/p&gt;
&lt;p&gt;第二类错误，也称为 β 错误，是指虚无假设(H0)错误时，反而接受虚无假设的情况。&lt;/p&gt;
&lt;p&gt;但是，如果你学习过机器学习，就会看到对这两类错误的一个更加直观的表示。被称为 &lt;strong&gt;False Positive 和 False Negative&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;这两个名词非常好理解。都是“False”，也就是都是错误。但一个是，你判断结果为“阳性”(Positive)，但是你的判断错了。另一个是，你判断结果为“阴性”(Negative)，但是你判断错了。&lt;/p&gt;
&lt;p&gt;用一个漫画形象地表示。就是这样：&lt;/p&gt;
&lt;p&gt;&lt;img alt="fpfn" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-26/fpfn.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;一个男人，是不可能怀孕的。但是，医生却说他怀孕了。医生显然犯错误了。这个错误，就是 False Positive，也就是第一类错误。&lt;/p&gt;
&lt;p&gt;一个女人，挺着大肚子，显然是怀孕了。但是，医生却说她没怀孕。医生显然犯错误了。这个错误，就是 False Negative，也就是第二类错误。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;大多数教材在介绍 False Positive 或者 False Negative 的时候，都会以医学测试作为例子进行讲解。因为，任何医学诊断都可能犯错。如果我们仅仅研究“如何不犯任何错误地去进行医学诊断”，人类的医学早就停滞发展了。&lt;/p&gt;
&lt;p&gt;但慢慢的，人们意识到：这两类错误，我们不能同等看待。某类错误会比另外一类错误更严重。&lt;/p&gt;
&lt;p&gt;在医学诊断领域，False Negative 就是比 False Positive 更严重的错误。换句话说，一个患病的人，没有被检查出来；远远比一个健康人，被误诊为有病要严重。&lt;/p&gt;
&lt;p&gt;因为，一个健康人，即使被误诊为有病，他会开始进行后续的一系列检查和治疗，在这个过程中，就会甄别出这是一例误诊。但是，一个患病的人，如果没有被检查出来，他将以为自己是正常人，继续生活。错失了最佳治疗时期不说，还有可能威胁到他身边的人甚至整个社会的健康。&lt;/p&gt;
&lt;p&gt;我在美国，已经听说过大量身边人遭遇了 False Positive 的医学诊断。甚至，曾经有过一次亲身经历。有一次，我陪老婆看病，老婆的某一项指标是 Positive，医生笑眯眯地说，“通常，遇到这种情况，我们都要花很长时间向病人解释什么是 False Positive。但因为你有博士学历，一定理解什么 False Positive。所以，不要太过担心。”&lt;/p&gt;
&lt;p&gt;后来，事实证明，果然是 False Positive。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;和医学类似，对于一个警报系统来说，False Negative 的错误也远比 False Positive 严重。警报系统可能犯错，以火警为例，可能设施内已经有了起火的隐患，但警报系统没有响（False Negative）；也可能设施内什么事情都没有，警报系统却突然开始响个不停（False Positive）。&lt;/p&gt;
&lt;p&gt;如果错误是不可避免的话，对于这两类错误，显然，大家更愿意看到 False Positive，而不是 False Negaative。没有火情，警报响了，大家白疏散一场而已。但万一有了火情，警报器却没有响，那损失的，就可能是人命。&lt;/p&gt;
&lt;p&gt;西方国家对这一点特别重视，所以留学生近乎一定都会有过被假火警疏散的经历。尤其是中国的烹饪方式，以“炒”为主，这个过程会产生大量油烟，在一些公寓，特别容易触发火警警报。这已经成了很多留学生的阴影。甚至，有一些人表示，看到“炒菜”，就马上条件反射般地想到了消防蜀黍的背影。自己 20 多年的饮食习惯因此得到了改善。现在天天吃这个。&lt;/p&gt;
&lt;p&gt;&lt;img alt="saland" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-26/saland.jpg" /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;是不是在所有情况下，False Negative 都比 False Positive 严重呢？不是的。&lt;/p&gt;
&lt;p&gt;在一个和大家息息相关的领域里，False Positive 就比 False Negative 要严重。那就是人才选拔制度。&lt;/p&gt;
&lt;p&gt;任何的人才选拔制度都会犯错。有可能把不是人才的人当做了人才（False Positive）；也有可能把人才漏掉（False Negative）。&lt;/p&gt;
&lt;p&gt;很遗憾的是，对于大多数人才选拔制度来说，都是更倾向于不犯 False Positive 的错误，而可以容忍 False Negative 的。换句话说，大多数制度都认为，漏过人才没有关系，但要是把蠢材当做人才，就麻烦了。为什么，因为蠢材在组织中，将极大地对组织的氛围产生危害；但是即使漏掉了人才，是金子也总会发光的。&lt;/p&gt;
&lt;p&gt;如果说的更严重点儿，一个国家的总统选举制度，如果伴随着大概率的 False Positive 错误的概率的话，就会让一个蠢材领导国家，对整个国家都是巨大的灾难。&lt;/p&gt;
&lt;p&gt;古代世袭制，就很容易犯这样的错误。晋惠帝的“何不食肉糜”，应该是这类错误的杰出代表了。&lt;/p&gt;
&lt;p&gt;&lt;img alt="old" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-26/old.png" /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;总会有人抱怨，HR 只看学历，自己学历低，连简历关都过不去。但是，HR 的这一策略，其实就是在尽量不犯 False Positive 的错误。虽然学历低的群体中，确实有人才，但我们必须承认，如果要求所有的 HR 都去努力在低学历群体中甄别哪些是人才，不仅效率低，更重要的是，很容易犯 False Positive 的错误。&lt;/p&gt;
&lt;p&gt;IT 大企业面试校招喜欢考算法，其实也是这个道理。如果大家都没有特别独到的某一个领域的成绩的话，实践表明，用算法考核成绩来衡量一个人的能力，最靠谱。这里“靠谱”的意思就是，不容易犯 False Positive 的错误。&lt;/p&gt;
&lt;p&gt;诚然，有很多大神，算法水平不怎么样。那么，当这些大神在自己的领域做出越来越瞩目的成绩以后，这些 IT 大企业的 HR 们会前来“有针对性”地招安的。但是，对于大规模的 IT 人才选拔，考算法最好：虽然会漏掉人才，但是算法好的人，大都不会是蠢材。&lt;/p&gt;
&lt;p&gt;可能有些同学会说，这些 IT 大企业难道不怕漏过人才吗？答案可能有些扎心：他们不怕。&lt;/p&gt;
&lt;p&gt;或者说，就算怕，但是，他们更怕招来蠢材。一个苍蝇坏一锅汤的例子，在协同工作的环境下不要太多。尤其是在国外，福利完善，工会强势，万一一个蠢材在公司里没有产出，还耍无赖，福利好处一个都不落，对于整个项目组来说，都是毁灭性的打击。经历过的人都懂。&lt;/p&gt;
&lt;p&gt;从某种意义上讲，高考也是这样的一个制度。是不是有天才因为不适应高考这种形式，从而陨落。肯定有。但是，在制度设计层面，所有选拔制度都会犯错。如果一定要犯错，高层更不希望看到 False Negative。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;说到制度设计，这个话题就没完没了了。&lt;/p&gt;
&lt;p&gt;因为，社会是人类已知的最复杂的系统。所有的制度设计，一定会产生错误，关键是取舍。我们对错误是否有倾向性？我们是否可能尝试降低某一类错误？&lt;/p&gt;
&lt;p&gt;这个问题没有固定答案，在不同历史时期，不同的制度环境，不同的人或者组织，有不同的选择。&lt;/p&gt;
&lt;p&gt;战时，桂系军阀陶屠户曾说“宁可错杀三千，不可放走一人”。“错杀三千”和“放过一人”，都是犯错，陶屠户对于这两类错误，做出了属于自己的选择。&lt;/p&gt;
&lt;p&gt;而在现代社会环境中，大多数国家的法律，都是讲证据的。换句话说，只要证据有一点点不完善，有一丝丝可能错把一个好人当做罪犯，都更倾向于将这个嫌疑犯当做无罪处理。&lt;/p&gt;
&lt;p&gt;不“错杀一个好人”，是另一个选择。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;在投资的过程中，我们也会面对这种选择。保守的人宁愿错过机会，但不想承担风险，把不是机会的机会误判成机会（False Positive），造成损失；但是激进的人，宁愿损失，但是不想错失任何一个机会（False Negative）。&lt;/p&gt;
&lt;p&gt;所以，正规的基金公司，都会对客户进行一个评估，看你是保守的人，还是激进的人。这本质其实是在看，你更愿意犯 False Positive 的错误，还是更愿意犯 False Negative 的错误。&lt;/p&gt;
&lt;p&gt;你看，人家已经假设了，你肯定要犯错误。关键是偏好如何。没人能够做到，总是在最低点买入，最高点卖出。那是神。抱着不犯错的心态在市场上混，是不对的。我们必须正视错误。&lt;/p&gt;
&lt;p&gt;所以，我总说，不要完美主义，就是因为，犯错才是常态。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-09-26/readme.md" rel="alternate"/></entry><entry><id>2019/2019-09-17/readme.md</id><title>周杰伦与绝对音感</title><updated>2019-09-17T00:00:00-07:00</updated><content>&lt;h2&gt;周杰伦与绝对音感&lt;/h2&gt;
&lt;p&gt;周杰伦 2019 年全新单曲《说好不哭》，刷屏了。&lt;/p&gt;
&lt;p&gt;这首歌，在 QQ 音乐上，只用了两个小时，销量就超过了 1000 万人民币，还一度搞崩了腾讯的服务器。其影响力可见一斑。&lt;/p&gt;
&lt;p&gt;说实话，这首新歌，在我听来，属于周杰伦很平均水平的一首歌，如果放在以往的专辑里，甚至排名可能要偏后。但周杰伦的名气在那里，随随便便一首很“一般”的歌，就能产生这么大的影响力。&lt;/p&gt;
&lt;p&gt;杰迷勿喷，我只是有一说一，说一下自己的实际听感。实际上，我也是杰迷。高考结束那一年，《叶惠美》发布，整个寒假，我都是在《以父之名》的音乐中度过的。不信，我们可以到 KTV 飚这首歌去。&lt;/p&gt;
&lt;p&gt;80 后 90 后，谁的青春里没有周杰伦呢？&lt;/p&gt;
&lt;p&gt;&lt;img alt="yehuimei" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-17/yehuimei.jpg" /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;这次，周杰伦的新歌发布，让很多人惊喜的是，这首歌的词是方文山填的。周杰伦方文山再次合作。&lt;/p&gt;
&lt;p&gt;如果你查一下方文山的履历，就会知道，他是台湾桃园市成功高级工商职业学校电子科毕业的。这其实就是一个职业院校。毕业后的方文山，曾一度在桃源市当电子器材装配员。&lt;/p&gt;
&lt;p&gt;他喜欢创作，但家里毫无背景。电影，音乐，他都做不了。最终，他选择了门槛最低的创作形式——写歌词。&lt;/p&gt;
&lt;p&gt;方文山的伯乐也是吴宗宪。对于当时，自己毫无背景，吴宗宪怎么会看中他？方文山曾在一个访谈中直言：应该是看中了自己的“量”。&lt;/p&gt;
&lt;p&gt;&lt;img alt="fangwenshan" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-17/fangwenshan.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="fangwenshan2" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-17/fangwenshan2.png" /&gt;&lt;/p&gt;
&lt;p&gt;什么量呢？他写了一百多首词。&lt;/p&gt;
&lt;p&gt;不仅写了一百多首词，他还别出心裁，将这一百首词装订成册，制作了清晰的索引，比如关键字是“悲伤”的词都在哪里；关键字是“离别”的词都在哪里...... 方便别人翻阅。&lt;/p&gt;
&lt;p&gt;这样的一个小册子，他一共复印了 100 份。&lt;/p&gt;
&lt;p&gt;然后，他找到当时流行的 CD 唱片，看背面的制作人名单，每一个制作人都寄去。滚石，飞碟，宝丽金，索尼，燕麦...... 这些唱片公司的制作人，无论大小，都是方文山的目标。&lt;/p&gt;
&lt;p&gt;方文山当时是这么计算的：这 100 份小样，寄到唱片公司的前台，可能前台会被当做粉丝信处理，所以，只有 50 份会真正地转给制作人的经纪或者助理；&lt;/p&gt;
&lt;p&gt;制作人的经纪或者助理，可能并不会把这份小样真正交给制作人，所以，可能只有 25 份会真正落到制作人手里；&lt;/p&gt;
&lt;p&gt;制作人收到小样不一定看，所以，可能只有 12 个制作人，真的打开了这个小样，看了看；&lt;/p&gt;
&lt;p&gt;看了的制作人，不一定觉得好，所以，可能也就有 5，6 个制作人觉得好，能给他一个机会，当面聊一聊。&lt;/p&gt;
&lt;p&gt;方文山计算自己能收到 5，6 封回信，最终，他只收到了 1 封回信。就是吴宗宪的回信。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;说到周杰伦，大家可能马上想到被吴宗宪逼着 10 天写 50 首歌的事情。这个故事太俗了，不说了。&lt;/p&gt;
&lt;p&gt;我马上想到的另一个事情，是周杰伦具有绝对音感。&lt;/p&gt;
&lt;p&gt;对于绝对音感，我一直很好奇。因为，在我看来，这就像你拥有一个超能力一样。&lt;/p&gt;
&lt;p&gt;当然，现在，我知道了，经过后天训练，是可以培养出绝对音感的。绝对音感的培养，最佳时期是在 3 岁到 9 岁之间。尤其是学习钢琴的孩子，用专业的方法训练，有不小的概率能够培养出绝对音感。所以，我认为，周杰伦的绝对音感，大概率是后天培养出来的。&lt;/p&gt;
&lt;p&gt;但是，仍然有很小比例的人，是先天就具有绝对音感的。这个比例是多少呢？大概是 0.01% 左右，即万分之一。&lt;/p&gt;
&lt;p&gt;看起来很低，但从全球人口的角度，这并不是一个很低的数字。全球现如今有 75 亿人口，就算是万分之一，也有 75 万的人，天生就具有绝对音感。&lt;/p&gt;
&lt;p&gt;我有的时候总在想：这 75 万人，是不是都在做音乐相关的工作呢？大概率的不是。虽然，如果他们做音乐，有着天然的优势。&lt;/p&gt;
&lt;p&gt;我就又在想：他们之中，会不会有很多人，也梦想过做音乐呢？但是因为各种原因，他们没有尝试。&lt;/p&gt;
&lt;p&gt;绝对音感就是这样一个神奇的天赋，你很有可能拥有它，但如果你不尝试学习音乐，你就永远不知道自己拥有这样的天赋，更谈不上发挥这个天赋了。&lt;/p&gt;
&lt;p&gt;如果周杰伦不尝试，不去 10 天创作 50 首歌，他就不会推出自己的第一张专辑，《Jay》；&lt;/p&gt;
&lt;p&gt;如果方文山不尝试，不去写 100 首词，寄给唱片公司，他还是一名流水线上的工人。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;无独有偶，就在昨天，在我的知识星球，有同学向我提问：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;波波老师，怎样确定自己到底适合做什么呢？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我的回答是这样的：&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;bobo老师的回答：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;怎么才能知道自己适合什么？个人认为，只能去尝试，通过尝试做不同的事情，找到自己适合什么。否则，一个人就是不知道自己适合什么。&lt;/p&gt;
&lt;p&gt;“自己究竟适合什么”这个问题的答案背后，是包含巨大的信息价值的。如果每个人都能轻易知道自己适合什么，大多数人就少了很多患得患失的烦忧。可惜，世界不是这个样子的。除了极少数的人，一出生就知道自己适合什么，大多数人都是不知道的。这其实和只有极少数人是富二代是一个道理。&lt;/p&gt;
&lt;p&gt;无论国内外，近乎所有专业的本科阶段的学习，都是某一个领域的全面教育，而非专业教育。本科阶段，会让你接触一个领域的方方面面，目的就是让大家找到自己适合哪个方向。到了研究生阶段，才会具体钻进某一个细分领域深耕。&lt;/p&gt;
&lt;p&gt;往前捯，我们的初等教育更是如此。小学初中高中，我们简直无所不学，天文地理，艺术哲学，美术音乐，物理化学。这些都是为了让我们在小时候接触这个世界尽量多的领域，在这个过程中找到自己适合什么。&lt;/p&gt;
&lt;p&gt;其实，我一直认为，每个人的一生，都在不断寻找自己适合什么的道路上。我也一样。我适合写字吗？我也不知道。所以，今年开始，我决定定期更新我的公众号，就是逼自己不断去写字，看自己到底适合不适合。&lt;/p&gt;
&lt;p&gt;一旦做了，我判断“是否适合”的标准很简单：看自己做起来，会不会觉得厌烦，如果不厌烦，不抵触，我觉得就是适合的。&lt;/p&gt;
&lt;p&gt;至于能不能做出成绩。说实话，这个世界上的大多数事情，对于大多数正常智商的人来说，只要坚持去做，总能做出一点儿小成绩的。有没有大发展不好说，但混口饭吃肯定是没问题的。&lt;/p&gt;
&lt;p&gt;必须有天赋才能去做的事儿，在这个世界上，其实挺少的。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-09-17/readme.md" rel="alternate"/></entry><entry><id>2019/2019-09-16/readme.md</id><title>答读者问 | 如何寻找学习资料？</title><updated>2019-09-16T00:00:00-07:00</updated><content>&lt;h2&gt;答读者问 | 如何寻找学习资料？&lt;/h2&gt;
&lt;p&gt;最近，有个同学在我的知识星球问我：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我是个程序员小白，是其他专业转来的，看了您的课，真仿佛要上天一般。想求教老师 ，除了学习您的数据结构和算法课程，能推荐一下我还能到哪里找到讲得这么容易理解的课程，来提高技术水平吗？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;bobo老师的回答：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我的回答可能要让你失望了。&lt;strong&gt;简单来说，我没有任何秘密的资料，或者秘密的资料源，这些资料通俗易懂，看了就上天了。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;各个领域的经典资料，通常都是好资料。关键是它是否适合你。即使是我经常不推荐的《算法导论》，它的经典程度也是毋庸置疑的。只不过对大多数人来说，尤其是初学者来说，水平完全不适合看《算法导论》而已。实际上，很多同学会在我的课程问答区问出一些水平很高的偏理论的问题，我的回答都会引用《算法导论》中的推导。&lt;/p&gt;
&lt;p&gt;怎么找各个领域的经典资料？我的经验，在大多数情况下，网上一搜，评价高的书籍或者课程，都不会太差。&lt;/p&gt;
&lt;p&gt;但是，关键在于，不能指望某一个资料，跟着它学就“从入门到精通”了。这是不现实的。&lt;strong&gt;大多数资料，都是有的地方很精彩，但有的地方一塌糊涂。我的课程也不例外。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我的经验：&lt;strong&gt;比对参考不同的资料，对于同一个知识点，看不同的人怎么说，是非常非常重要的。&lt;/strong&gt;很多时候，一本书这里的例子举得不好，但是看那本书的例子就懂了；可是那本书的那个公式推导过程又不清晰，看这本书就很清晰了。&lt;/p&gt;
&lt;p&gt;这是正常的学习过程，不能犯懒。也不能“完美主义”：认准一个教材就一路走到黑。只有这样，才能慢慢综合众家之言，形成自己对知识的理解。对此，我强烈建议再阅读一遍我的公众号文章：&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2018/2018-04-18/"&gt;《高效学习的秘密》&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;如果真要说找资料有什么诀窍的话，我认为有以下几点可以分享：&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在这个时代，不要只关注出版物或者大平台上的课程。很多网络上的帖子的讨论，或者博客，或者简单的教学视频，或者一些大学的公开课件，出奇的棒。尤其是当你不需要系统学习某个领域，只是想学习某一个知识点的时候，通过网络上的碎片化知识介绍进行学习，其实是非常高效的。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;找英文资料。&lt;/p&gt;
&lt;p&gt;不吹不黑，在当下，就我接触的资料范畴，英文资料，真的比中文资料强太多。不仅仅在出版物方面，还在我上面说的网络讨论或者博客或者简短的教学视频上。比如 Youtube，在我看来就是超牛的教育网站。&lt;/p&gt;
&lt;p&gt;这里，我说的强太多，首先，就在于可读性和可理解性上。对于大多数英文教材，别看厚厚一大本，其实里面涵盖的内容，和很多中国教材薄薄的一小本儿，内容量是一样的。甚至中国教材涵盖的内容可能更多。但国外教材为什么厚？很多时候，就是翻来覆去地说，站在不同角度用不同例子说，生怕你看不懂。&lt;/p&gt;
&lt;p&gt;另外一点，就是英文世界资料涵盖内容的丰富程度和细腻程度，很多时候出乎我的意料。&lt;/p&gt;
&lt;p&gt;比如，我在我的知识星球分享过一份资料，一本书的厚度，只讲贝塞尔曲线一个主题。把贝塞尔曲线的来龙去脉讲得一清二楚。要知道，一般，在图形学课本中，贝塞尔曲线只是一章甚至是半章的内容。&lt;/p&gt;
&lt;p&gt;比如，我的算法或者数据结构课程，大量使用面向对象的编程特性。就有很多同学问我，如果用 C 语言怎么办？我会推荐他们读一本书《Object-Oriented Programming With ANSI C》。这本书在网上完全是开源的。它使用 C 语言——一个没有面向对象语言特性的语言，重构了面向对象语言的各种特性。通过这个过程，绝对既对面向对象有了深刻的底层理解，同时对 C 语言有了更深刻的理解。传送门：&lt;a href="https://www.cs.rit.edu/~ats/books/ooc.pdf"&gt;https://www.cs.rit.edu/~ats/books/ooc.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;比如，有的同学学习深度学习，却总是想把高数线数重新学习一遍。我在很多地方都说过，只要你本科的高数线数及格了，就没必要。直接去学习机器学习，遇见数学发现自己搞不定，再有针对性地补一下数学。目标性强，效率高。但如果你一定要因为学习深度学习复习一下相关数学的话，英文的世界里早就有这样的材料了。比如这份 The Matrix Calculus You Need For Deep Learning ：&lt;a href="https://explained.ai/matrix-calculus/index.html"&gt;https://explained.ai/matrix-calculus/index.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这些资料在我看来都还太“古板”，再举几个例子。比如你想自己搞一个邮箱服务器？来看看这 How To Run Your Own Mail Server ：&lt;a href="https://www.c0ffee.net/blog/mail-server-guide/"&gt;https://www.c0ffee.net/blog/mail-server-guide/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;想了解一下量子计算是怎么回事儿？来看看这个 An Interactive Introduction To Quantum Computing ：&lt;a href="http://davidbkemp.github.io/QuantumComputingArticle/"&gt;http://davidbkemp.github.io/QuantumComputingArticle/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;... ...&lt;/p&gt;
&lt;p&gt;这样的例子太多太多了，举也举不完。&lt;/p&gt;
&lt;p&gt;所以，英语真的很重要。虽然我曾经写过&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-06-02/"&gt;《答读者问 | 这个年代，还有必要学英语吗？非说没必要，也没毛病》&lt;/a&gt;，但那是因为有的人很明确自己不需要英语。那就没必要学。&lt;/p&gt;
&lt;p&gt;但从接受技术资料的角度，如果你能无碍接受任何英文资料，我个人认为，学习速率将直接超越 99%，甚至 99.99% 的程序员。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;现在，越来越多的资料，以开源的形式呈现，也都非常好。我在上面举的很多例子，其实就是开源资料，而非出版物。如果翻我的知识星球中【资源共享】的标签，还能看到更多例子。&lt;/p&gt;
&lt;p&gt;不过，我的知识星球建立时间也不长，积累不够多。很多我过去接触到的好资料，都“丢失”了。我最近在思考创建一个开源项目，整理这些“非正规出版”，但极其有价值的开源资料：）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;最后，因为这个回答里有提及了英语，所以多说两句。&lt;/p&gt;
&lt;p&gt;我之前写了一篇文章，叫&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-08-27/"&gt;《慢增长》&lt;/a&gt;，其中举的例子里“炫耀”了一下我在扇贝单词的打卡记录，于是，很多同学也开始天天背单词了。&lt;/p&gt;
&lt;p&gt;在这里，我必须说，直接背单词并不是我推荐的英语学习方式。脱离具体的英语资料，用中英对应的方式去背单词，在大多数时候是低效的。&lt;/p&gt;
&lt;p&gt;正确的积累单词的方式，是在英语使用中去积累。最常见也是成本最低的英语使用方式，就是阅读。在大量英语阅读的基础上，不认识的或者模糊的单词记录一下，每天复习一下，效果比死记硬背好太多。具体阅读什么，大家不用太纠结，你喜欢就好。人文，社科，历史，政治，科幻，恐怖，奇幻...其实...小黄书都可以...关键是你喜欢，读得下去。如果连中文都不想读的材料，就算了。&lt;/p&gt;
&lt;p&gt;当然，除了阅读以外，电影、游戏、漫画、音乐......都可以。我曾经写过一篇文章：&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-05-30/"&gt;《看美剧学英语靠不靠谱？我说靠谱，方法都在这里了》&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;前几天，我在我的知识星球，也转载了我朋友圈里一位妈妈的分享。她观察自己的孩子在英国学习，是怎样积累词汇量的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="star_share" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-16/star_share.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;最后，对我的知识星球感兴趣的同学，欢迎扫码加入。&lt;strong&gt;免费的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;不在公众号的日子里，我都在知识星球。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-09-16/readme.md" rel="alternate"/></entry><entry><id>2019/2019-09-15/readme.md</id><title>没有解的问题</title><updated>2019-09-15T00:00:00-07:00</updated><content>&lt;h2&gt;没有解的问题&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;小的时候，有一类智力题特别流行，就是一笔画问题。现在我们都知道了，这本身就是欧拉图问题。但小时候哪有那么多理论知识，就是觉得笔不离纸，一笔能画出那么多图案，是件很酷的事情。&lt;/p&gt;
&lt;p&gt;我印象很清晰，有一次去科技馆，在一个角落，我遭遇了经典欧拉回路问题的起源 —— 柯尼斯堡七桥问题 (Seven Bridges of Königsberg)。在这样一幅图中，我们能否从一个陆地出发，经过所有的桥一次且仅一次，最终回到出发的陆地？&lt;/p&gt;
&lt;p&gt;&lt;img alt="seven" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-15/seven.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;小学时候的我，在那个角落研究了很长时间，都没有完成这个任务。我还想把这个问题抄到小本本上，回家好好研究。然后，科技馆的小姐姐告诉我：不用研究了，这个问题无解。&lt;/p&gt;
&lt;p&gt;现在，相信大家都知道，对于一个图，如果图中的每一个顶点的度都是偶数，整幅图才存在欧拉回路。这可能是每个小学生都知道的结论，但是，这个结论对于当时的我来说，是非常震撼的。&lt;/p&gt;
&lt;p&gt;在我印象里，这是我第一次意识到：&lt;strong&gt;原来，这个世界上有的问题，是没有解的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;有一道网传的微软面试题是这样的：&lt;/p&gt;
&lt;p&gt;一个直角三角形，斜边长是 10，斜边上的高是 6，问这个直角三角形的面积是多少？如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img alt="right_tr" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-15/right_tr.png" /&gt;&lt;/p&gt;
&lt;p&gt;如果你认为结果是底乘以高除以二，即 10 * 6 / 2 = 30，那么你就上当了。&lt;/p&gt;
&lt;p&gt;这个问题的答案是：这样的直角三角形完全不存在。&lt;/p&gt;
&lt;p&gt;为什么？其实，如果我们将这个斜边，想做是一个半径为 5 的圆的直径，就可以很清晰地看到这一点。所有的斜边长为 10 的直角三角形，都可以在这个圆中找到。圆上的任意一点，和这条直径的两个端点相连，就构成了一个斜边长为 10 的直角三角形。&lt;/p&gt;
&lt;p&gt;&lt;img alt="right_tr_solution" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-15/right_tr_solution.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;很显然，这样的直角三角形，其斜边的高，最大为 5。&lt;/p&gt;
&lt;p&gt;所以，斜边长是 10，斜边上的高是 6 的直角三角形是不存在的。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一个据说骗过爱因斯坦的问题，是这样的：&lt;/p&gt;
&lt;p&gt;一辆汽车，要行驶 2 英里，上山和下山各 1 英里。这辆车上山时的平均速度为 15 英里/小时。问：它下山要开多快，才能使上下山的平均速度是 30 英里/小时？&lt;/p&gt;
&lt;p&gt;如果跟随直觉，很容易给出 45 这样一个错误的答案。但是，如果我们仔细计算一下，就会发现，事情没有这么简单。&lt;/p&gt;
&lt;p&gt;这个问题的标准计算方法是这样的，我们假设下山速度要达到 &lt;em&gt;v&lt;/em&gt;，才能使上下山的平均速度达到 30 英里/小时。&lt;/p&gt;
&lt;p&gt;所以，我们就知道了，上山的过程，我们用的时间是 1 / 15；&lt;/p&gt;
&lt;p&gt;下山的过程，我们用的时间是 1 / &lt;em&gt;v&lt;/em&gt;；&lt;/p&gt;
&lt;p&gt;上下山的总过程，我们用的总时间，就是这二者相加：&lt;/p&gt;
&lt;p&gt;&lt;img alt="t" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-15/t.png" /&gt;&lt;/p&gt;
&lt;p&gt;而上下山的路程总和，是 2 英里，因此，上下山的平均速度，就是 2 除以上面的时间表达式。所以，要想让上下山的平均速度达到 30，就是求解下面方程中的 &lt;em&gt;v&lt;/em&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img alt="eq1" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-15/eq1.png" /&gt;&lt;/p&gt;
&lt;p&gt;对于这个方程，首先，等号左右两边可以同时除以 2，就变成了这个样子：&lt;/p&gt;
&lt;p&gt;&lt;img alt="eq2" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-15/eq2.png" /&gt;&lt;/p&gt;
&lt;p&gt;我们再次可以把左侧分式的分母挪到右边，而右侧的 15，挪到左边的分母，上式就变成了这样：&lt;/p&gt;
&lt;p&gt;&lt;img alt="eq3" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-15/eq3.png" /&gt;&lt;/p&gt;
&lt;p&gt;很显然，等号左右两边都有 1/15，所以，原问题等价于求解 &lt;em&gt;v&lt;/em&gt;，使得： &lt;/p&gt;
&lt;p&gt;&lt;img alt="eq4" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-15/eq4.png" /&gt;&lt;/p&gt;
&lt;p&gt;相信大家都了解了，从初等数学的角度，这意味着无论 &lt;em&gt;v&lt;/em&gt; 取多少，都无法使得原问题中的汽车上下山的平均速度是 30 英里/小时。&lt;/p&gt;
&lt;p&gt;站在高等数学的角度，用极限的眼光去看，这意味着原问题中的汽车要无穷快，才能使得上下山的平均速度是 30 英里/小时。&lt;/p&gt;
&lt;p&gt;是的，比光速还要快。但这显然不可能。所以，这个问题没有解。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;网传另一个亚马逊的面试题是这样的：&lt;/p&gt;
&lt;p&gt;有两个杆子，高是 50m。两个杆子之间挂了一根绳子，绳子的长度是 80m。两个杆子间的绳子耷下来，最低点距离地面是 10m。如下图所示。&lt;/p&gt;
&lt;p&gt;问：两个杆子之间的距离是多少？&lt;/p&gt;
&lt;p&gt;&lt;img alt="amazon" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-15/amazon.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;正确答案是，这两个杆子之间没有距离，即距离为零。因为，只有当这根长度是 80m 的绳子对折的时候，其长度为 40m，距离地面才会有 10m。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一个问题为什么没有解？因为问题的条件限制。说得文驺驺一点，叫做&lt;strong&gt;约束&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;对于柯尼斯堡七桥问题，当前的七座桥连接陆地的方式，让这个问题没有解。如果我们改变这个约束，多添加一些桥，或者少走一些桥（拆掉一些桥），都能让这个问题有解；&lt;/p&gt;
&lt;p&gt;一个直角三角形，斜边长是 10，斜边上的高是 6，这里的“直角”，“斜边的长度”，“高的大小”，都是约束，只要改变一个约束，这个三角形都会存在；&lt;/p&gt;
&lt;p&gt;同理，对于两根杆之间的距离问题，杆的高度，绳子的长度，绳子离地面的高度，这些约束合在一次，让这两个杆之间的距离只有可能为 0。上述约束稍作改变，都会让这个问题的场景更加合理；&lt;/p&gt;
&lt;p&gt;至于上下山的问题，我们只需要对汽车上下山平均速度的要求稍微低一点，哪怕希望汽车上下山的平均速度是 29 英里/小时，这个问题都是有解的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;不合理的约束合在一起，让我们的问题无解。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;上面的问题都是数学问题，虽然很 tricky，但我相信，这些问题对我的这个公众号的读者来说，都太小儿科了。&lt;/p&gt;
&lt;p&gt;一个数学问题没有解，这似乎并不是什么稀奇事。但是，放在生活中，似乎很多人会忘记这一点。&lt;/p&gt;
&lt;p&gt;比如，我会收到很多类似这样的问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;我算法很差，想用一个月的时间，把算法面试准备得差不多，要怎么学习？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;我大专学历，计算机专业，要求不高，在北上广找一个 8k 的工作就知足了，但一直没有着落，怎么办?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些问题，在我看来，都是无解的。&lt;/p&gt;
&lt;p&gt;但是无解的问题，并非没有意义。分析一个问题为什么没有解，可以说是一件非常有意义的事情。&lt;/p&gt;
&lt;p&gt;通常，是问题的约束，导致了问题的无解。所以，&lt;strong&gt;在大多数情况下，解决方案，都是改变约束。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;“一个月的时间把算法面试准备得差不多”是无解的，但是，如果改变约束条件，两个月呢？三个月呢？半年呢？问题可能就有解了。&lt;/p&gt;
&lt;p&gt;或者，现在真的只剩下一个月的时间了，不能系统准备算法面试的方方面面了，那只准备算法领域的一个子集呢？如果只把数据结构扎扎实实拿下来呢？或者就把 Leetcode 上的腾讯面试题都刷一遍，认认真真把这些题都搞懂呢？&lt;/p&gt;
&lt;p&gt;现在的形势，大专学历在北上广找一个 8k 的工作如果有难度的话，那么，如果改变约束条件呢？6k 呢？4k 呢？工资太少，在北上广生活不容易，换一个城市呢？杭州？南京？苏州？武汉？&lt;/p&gt;
&lt;p&gt;或者，会不会，在这个问题中，决定性的约束条件其实是学历。一狠心，花几年时间，来个专升本，改变学历这个约束条件，以后找工作会不会就会简单很多了呢？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;当然，每个人的情况不同，我很理解，很多时候，约束条件不是那么容易就可以替换，甚至取消掉的。&lt;/p&gt;
&lt;p&gt;如果这样的话，那么我们就必须承认：&lt;strong&gt;这个世界上，有很多问题，就是无解的。数学尚且如此，生活更是如此。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在我看来，承认很多问题没有解，并没有什么不好。&lt;/p&gt;
&lt;p&gt;一方面，这能让我们更聚焦在“有解”的问题上；&lt;/p&gt;
&lt;p&gt;另一方面，这能让我们从一个全新的角度看待那些无解的问题。&lt;/p&gt;
&lt;p&gt;很多时候，想明白让那些问题无解的约束条件究竟是怎样的，我们可不可能改变这些约束条件，就是创新的来源。&lt;/p&gt;
&lt;p&gt;而另外一些时候，想明白一个问题为什么没有解，也就离这个世界的真相不远了。&lt;/p&gt;
&lt;p&gt;比如，&lt;/p&gt;
&lt;p&gt;钱就是难赚的；&lt;/p&gt;
&lt;p&gt;生活就是不易的；&lt;/p&gt;
&lt;p&gt;很多成绩的获得，就是需要时间的积累的。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-09-15/readme.md" rel="alternate"/></entry><entry><id>2019/2019-09-10/readme.md</id><title>iPhone 设计“崩溃”史</title><updated>2019-09-10T00:00:00-07:00</updated><content>&lt;h2&gt;iPhone 设计“崩溃”史&lt;/h2&gt;
&lt;p&gt;2019 年苹果秋季发布会结束了。重头戏就是发布了全新的 iPhone 11, 11 Pro 和 11 Pro Max。相信大家已经都知道了。如果还不知道，随便翻翻朋友圈或者公众号文章，应该到处都是类似的新闻。&lt;/p&gt;
&lt;p&gt;作为一个非常酷的公众号，把苹果发布会的内容重复一遍，这就太不酷了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;说到不酷，苹果最新发布的 iPhone 11 系列，最大的槽点就是：太不酷了。或者，咳，让我们直白一点，&lt;strong&gt;太丑了&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;iPhone 11 整体的视觉效果是这样的。&lt;/p&gt;
&lt;p&gt;&lt;img alt="iphone11" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-10/iphone11.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;这个双摄像头放在一个方块儿里的排列方式，像极了某种很无奈的表情。&lt;/p&gt;
&lt;p&gt;&lt;img alt="emoji" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-10/iphone11-emoji.png" /&gt;&lt;/p&gt;
&lt;p&gt;如果有表情包制作者看到这篇文章，建议深挖一下，做个表情包，搞不好能火。大概就是这么一个风格：&lt;/p&gt;
&lt;p&gt;&lt;img alt="emoji" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-10/emoji.png" /&gt;&lt;/p&gt;
&lt;p&gt;不用谢我了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;至于近一万大洋的 iPhone 11 Pro 和 11 Pro Max，视觉效果是这样的。&lt;/p&gt;
&lt;p&gt;&lt;img alt="iphone11pro" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-10/iphone11pro.png" /&gt;&lt;/p&gt;
&lt;p&gt;在 iphone 5 发布的时候，果粉们以为苹果手机会越做越长。&lt;/p&gt;
&lt;p&gt;&lt;img alt="iphone5" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-10/iphone5.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;乃至 iphone 20 可能是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="iphone20" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-10/iphone-20.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;但是，时间证明：果粉们错了。苹果怎么可能只在屏幕的长度上做文章呢？这样的科技趋势预测，显然没有考虑到：摄像将成为手机最重要的功能之一，同时迎来直播业，网红业等行业的井喷式增长。&lt;/p&gt;
&lt;p&gt;现在，大家终于明白了，到 2029 年，苹果手机第 21 代，应该是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="iphone2029" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-10/iphone2029.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;当然了，现在刚 iphone 11，只有 3 个摄像头而已。放在一个方块儿里，像极了灶台。正好，现在苹果 CEO 姓 Cook...&lt;/p&gt;
&lt;p&gt;&lt;img alt="iphone11-cook" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-10/iphone11-cook.png" /&gt;&lt;/p&gt;
&lt;p&gt;但是，可能国内这种无火的灶台不是特别多。所以，我还是觉得说它像浴霸更贴切。&lt;/p&gt;
&lt;p&gt;&lt;img alt="iphone11-yuba" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-10/iphone11-yuba.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;总而言之一句话：&lt;strong&gt;苹果的设计全面“崩溃”&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;但其实，苹果设的计“崩溃”，已经不是一天两天了。最早可以追溯到 iOS 7 发布的那一天。&lt;/p&gt;
&lt;p&gt;苹果自 iOS 7 起，摒弃了一直使用的拟物化设计，采用了全新的扁平化的设计风格，引起了设计界的轩然大波。至今，整个设计界对于扁平化设计，还是褒贬不一。&lt;/p&gt;
&lt;p&gt;咱也不是专业设计，咱也不懂设计专业。反正美丑是比较主观的事情，仁者见仁，智者见智。远观对比图如下：&lt;/p&gt;
&lt;p&gt;&lt;img alt="ios6vs9" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-10/ios6vs9.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;但是，逻辑咱们还是听得懂的。其实，我看到很多设计师的评论，并非反对苹果的扁平化设计，而是觉得苹果的很多扁平化设计，非常“业余”。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;比如，照相的图标。左边是过去的设计，右边是新的扁平化设计。很明显的，右边的图标更加平庸，只是一个剪切画而已。&lt;/p&gt;
&lt;p&gt;&lt;img alt="camera-icon" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-10/camera-icon.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;再比如游戏中心（Game Center）的图标。右边是新的扁平化设计，四个气球叠在一起，完全不知道是什么意思。我承认，“游戏中心”是一个相对比较抽象的概念，很难用一个图标准确表达。但左侧以前的设计，告诉你这是“游戏中心”，你会觉得合理；而对于右侧的新设计，就算知道它是“游戏中心”，大多数人多半一脸蒙圈，为什么这个图标是游戏中心？&lt;/p&gt;
&lt;p&gt;&lt;img alt="gamecenter-icon" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-10/gamecenter-icon.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;再比如，扁平化以后的“照片”图标，右侧新设计到底是什么？&lt;/p&gt;
&lt;p&gt;&lt;img alt="photo-icon" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-10/photo-icon.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;还有一些图标的改变，很多专业设计师的评价是，“为了扁平而扁平”。&lt;/p&gt;
&lt;p&gt;比如 newsstand，以前的设计是一个书架，上面摆放着你订阅的报纸杂志，一看就知道什么意思。但是新的扁平设计，让人觉得是一个三流的内容聚合 App：&lt;/p&gt;
&lt;p&gt;&lt;img alt="newsstand-icon" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-10/newsstand-icon.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;不过没有关系，反正现在苹果已经没有 newsstand 了，取而代之的是全新的 News。&lt;/p&gt;
&lt;p&gt;嗯，说实话，我一直不知道这个 news 的新图标，和“新闻”有什么关系？&lt;/p&gt;
&lt;p&gt;&lt;img alt="news-icon" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-10/news-icon.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;我们不吐槽 iOS 的扁平化设计了，毕竟，iOS 7 已经是 2013 年的事情了，说实话，我已经习惯了。&lt;/p&gt;
&lt;p&gt;时间飞逝，来到了 2015 年，苹果发布了全新一代的&lt;strong&gt;苹果鼠标第二代&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;和所有的苹果中文翻译一样，苹果鼠标 2 代，有一个拗口得不能再拗口的中文名字，&lt;strong&gt;妙控鼠标 2&lt;/strong&gt;。它的英文名字明明是 Magic Mouse 2，我实在不理解，直译的“魔法鼠标”哪里不好？&lt;/p&gt;
&lt;p&gt;除了没有魔法以外？&lt;/p&gt;
&lt;p&gt;&lt;img alt="magic-mouse-2" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-10/magic-mouse-2.png" /&gt;&lt;/p&gt;
&lt;p&gt;我现在使用的鼠标就是这款“妙控鼠标2”。这款鼠标比起 1 代鼠标，最大的区别是从使用七号电池，变成了充电电池。&lt;/p&gt;
&lt;p&gt;但是...... 充电的设计是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="magic-mouse-2-charging" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-10/magic-mouse-2-charging.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;这意味着，在充电的时候，你无法使用这款鼠标。&lt;/p&gt;
&lt;p&gt;2015 年，这样的设计简直不可思议。&lt;/p&gt;
&lt;p&gt;我们可以看看罗技的充电鼠标是怎么设计的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="logitech-mx" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-10/logitech-mx.png" /&gt;&lt;/p&gt;
&lt;p&gt;充电时完全不影响使用。&lt;/p&gt;
&lt;p&gt;我本来不觉得这是什么了不起的设计，直到遇到了苹果的“妙控鼠标2”。&lt;/p&gt;
&lt;p&gt;咱也不懂鼠标产业，也不懂设计。咱就是个小白，想弱弱地问一句：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这个设计，对苹果来说很难吗？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;时间来到了 2016 年，苹果发布了 iphone 7。嗯，取消了 3.5mm 耳机接口。于是，如果你需要边充电边戴耳机的话，基本上是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="iphone7" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-10/iphone7.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;当然了，后来我们才知道，这可能是在给苹果即将推出的无线耳机 airpod 铺路。&lt;/p&gt;
&lt;p&gt;不仅如此，2016 年最新的 Macbook Pro，苹果还取消了所有的 USB 接口。于是，使用新款 Macbook 的画风就成这样了。&lt;/p&gt;
&lt;p&gt;&lt;img alt="adapters" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-10/adapters.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;反正苹果的转换头儿生意是火爆了。在苹果官网，只看“显示器适配器”，就有 10 个选择，都是 200 大洋起步的。&lt;/p&gt;
&lt;p&gt;&lt;img alt="adapter-page" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-10/adapter-page.png" /&gt;&lt;/p&gt;
&lt;p&gt;对了，苹果的转换头还特容易坏，我也习惯了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;不说 Macbook 了，我们说回 iPhone。2018年，大名鼎鼎的 iPhone X 系列发布。&lt;/p&gt;
&lt;p&gt;全新的 iPhone，掀起了一阵全世界范围最新的手机设计风潮：&lt;strong&gt;刘海屏&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img alt="notch" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-10/notch.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;当然，采用刘海屏，也有不得已的技术原因。但是，很多设计师都表示，完全可以使用更巧妙的设计，避免这个视觉灾难。&lt;strong&gt;毕竟，苹果曾经是将技术和设计结合得最完美的科技公司啊！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;比如，对于 iPhone 应用的整体设计，可以采用如下方式：&lt;/p&gt;
&lt;p&gt;&lt;img alt="notch-soluution" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-10/notch-solution.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;大家可以看到，对于右侧的设计，其实“刘海”还是存在的，但是，在视觉上，被隐藏了。与此同时，刘海两侧的屏幕并没有浪费，依然可以显示时间和电量等信息。&lt;/p&gt;
&lt;p&gt;但不知道为什么，苹果坚持把刘海大大地展示在自家应用上。可能是考虑到土豪们使用起来，需要让周围人知道，这是最新的 iPhone X 吧。&lt;/p&gt;
&lt;p&gt;所以，我们看到的全屏照片或者电影，都是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="notch-photo" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-10/notch-photo.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;如今，很多注重用户体验的 app 设计——是的，比苹果还注重用户体验的 app 设计师们——将自己的 app 在全屏展示画面或者图片时，修改成了下图最后的设计：&lt;/p&gt;
&lt;p&gt;&lt;img alt="notch-soluution2" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-10/notch-solution2.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;但是，对于苹果的官方 app，就没辙了。所以，使用 safari 横屏浏览网页的话，效果是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="notch-page" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-10/notch-page.png" /&gt;&lt;/p&gt;
&lt;p&gt;怎么办呢？很多网页设计的教程会告诉你：请考虑刘海屏的问题。当移动网页横屏浏览的时候，&lt;strong&gt;网页的左右两边，应该留出一定的安全距离...&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;不知道这是不是当下前端设计必考的知识点...&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;于是我试验了一下，在我的手机上，横屏看我的微信公众号《是不是很酷》的文章目录，效果是这样的...&lt;/p&gt;
&lt;p&gt;&lt;img alt="weixin" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-10/weixin.JPG" /&gt;&lt;/p&gt;
&lt;p&gt;嗯，&lt;strong&gt;不愧是腾讯，绝不向丑恶的设计低头...&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;好了，时间来到了 2019 年，最新的 iPhone 11 Max Pro 浴霸版，大家也看到了。&lt;/p&gt;
&lt;p&gt;&lt;img alt="iphone11" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-10/iphone11pro.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;可是，你猜怎样？&lt;/p&gt;
&lt;p&gt;就算苹果的设计大家都说“丑”，但每次都有大批跟风者。&lt;/p&gt;
&lt;p&gt;就说刘海屏手机吧，现在的手机行业形势是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="notch-phones" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-10/notch-phones.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;至于大方块儿三摄像头手机呢？嗯，据说 Google 的 Pixel 4 是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="pixel4" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-10/pixel4.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;刘海，方砖浴霸三摄像头，一个都不能少。&lt;/p&gt;
&lt;p&gt;其他手机呢？我们拭目以待。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;或许，我们都冤枉苹果了。&lt;strong&gt;不是苹果的设计太丑，只是，我们太不时尚。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最新消息，发布会结束后，苹果股价呈上涨趋势。&lt;/p&gt;
&lt;p&gt;&lt;img alt="stock" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-10/stock.png" /&gt;&lt;/p&gt;
&lt;p&gt;所以，亲爱的同学们，你们准备好购买，最新出炉的，最时尚的，iPhone 11 , 11 Pro 和 11 Pro Max 了吗？&lt;/p&gt;
&lt;p&gt;反正，我的课程群里已经有很多小伙伴表示，iPhone 11 还是很便宜的。性价比不错。&lt;/p&gt;
&lt;p&gt;嗯，国行起步价，5499，确实比起往届便宜了。新款绿色看上去确实也挺有气质。&lt;/p&gt;
&lt;p&gt;&lt;img alt="iphone-11-green" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-10/iphone-11-green.png" /&gt;&lt;/p&gt;
&lt;p&gt;更良心的，其实是一起发布的新款 iPad，起步价 2699：&lt;/p&gt;
&lt;p&gt;&lt;img alt="ipad" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-10/ipad.png" /&gt;&lt;/p&gt;
&lt;p&gt;看来经济不景气，中美贸易战，谁都不容易。尤其是苹果——这个被外媒称为：&lt;strong&gt;全美国对中国依赖最深的科技巨头。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="cook" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-10/cook.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;库克同学应该也很无奈吧。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-09-10/readme.md" rel="alternate"/></entry><entry><id>2019/2019-09-02/readme.md</id><title>我不看好 ZAO，即使没有隐私和版权问题</title><updated>2019-09-02T00:00:00-07:00</updated><content>&lt;h2&gt;我不看好 ZAO，即使没有隐私和版权问题&lt;/h2&gt;
&lt;p&gt;ZAO 在朋友圈刷屏了。&lt;/p&gt;
&lt;p&gt;但是，在我的朋友圈，我不是被用 ZAO 换脸后的视频刷的屏，而是被谴责 ZAO 的隐私问题和版权问题的文章刷的屏。&lt;/p&gt;
&lt;p&gt;关于 ZAO 背后所涉及的隐私问题，安全问题和版权问题，我就不深入分析了，相关文章很多了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这篇文章我想讲的是，即使没有这些问题，ZAO 也不会长久地火下去。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为什么？因为现在，ZAO 的模式完全没有“消费性”。&lt;/p&gt;
&lt;p&gt;什么意思？大家不要误会，这里的“消费性”，和钱没有关系。我的意思是，这个模式，大家根本不会消费时间。&lt;/p&gt;
&lt;p&gt;对于互联网模式来说，时间就是钱。大众对自己时间的消费，最终会被平台方或者内容提供方转换成金钱。&lt;/p&gt;
&lt;p&gt;为什么我说 ZAO 的模式不具备“消费性”？因为自由度太低。&lt;/p&gt;
&lt;p&gt;从目前 ZAO 的玩法来看，官方提供了一系列的影视片段“模板”，用户可以基于这些影视片段“模板”进行换脸。但是，除了脸，什么都没有改变。&lt;/p&gt;
&lt;p&gt;问题来了。&lt;strong&gt;用户为什么要选择看同一个影视片段 100 次， 1000 次， 10000 次，他们的区别只是这些片段中的人脸发生了变化？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;虽然在近几年，确实有越来越多的流行的元素，我发现我有点儿理解不了了。但我还是坚信“逻辑”的意义。我的观察告诉我，“逻辑”依然是世界的支柱。没有逻辑的事情不会发生。用户不是傻子，如果用户决定付出时间，绝对是有内在逻辑的。&lt;/p&gt;
&lt;p&gt;大批用户可能会在初始的时候，因为“好玩”，所以尝试 ZAO。这波流量背后的逻辑是“猎奇心理”。但“猎奇心理”是极其容易被满足的。除非 ZAO 能够做到不停地创造“奇”。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;但不停地创造“奇”，比做出 ZAO 的难度还大。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;那么其他平台是怎么解决这个问题的？答案就是&lt;strong&gt;发动群众的力量和智慧&lt;/strong&gt;。所谓的 UGC (User Generated Contents)，即用户生成内容。&lt;/p&gt;
&lt;p&gt;以微信为例，微信公众号生态的活力在哪里？在于不同背景经历的人，每天可以基于不同时间，不同地点，不同国家，不同的人身上发生的不同的事情，发表不同的观点。&lt;/p&gt;
&lt;p&gt;这么多的“不同”是核心，我管这些“不同”叫自由度。因为有了自由度，所以，在微信公众号上，&lt;strong&gt;信息量足够大&lt;/strong&gt;，每个人能够根据自己的年龄，身份，职业，心态，兴趣，爱好，找到适合自己的信息。&lt;/p&gt;
&lt;p&gt;而 ZAO 只是根据固定的影片模板改变“脸”。说实话，&lt;strong&gt;“脸”这个元素蕴含的信息量太低了&lt;/strong&gt;。虽然每个人的“脸”都是极其重要的信息，随着科技的发展，甚至成为了标识每个人身份的验证信息。但是，从信息量的角度，&lt;strong&gt;“重要”不等于“信息量大”&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;对于大多数人来说，脸其实就像自己的学号工号身份证号一样。即使是马云，那张脸只是一张脸而已，你从中看不到他为了创建阿里巴巴付出了什么；遭遇了什么；解决了什么；对中国造成了怎样的影响；对世界又造成了怎样的影响；他对未来怎么想，怎么看......这些信息，是用户真正愿意付出时间获得的信息。&lt;/p&gt;
&lt;p&gt;同理，知乎，抖音，甚至是直播，都在基于 UGC 的模式创建不同的信息，满足不同人的“需求”，这是他们具有“消费性”的底层逻辑基础。拥有自由度，用户才能创作出满足不同需求的内容。这和所使用的技术难不难，先不先进，完全没有关系。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;不过，在严重的隐私问题和版权问题下，似乎这些也不重要了。&lt;/p&gt;
&lt;p&gt;大家因为 ZAO，开始关心隐私问题和版权问题，我也是很开心的。也许，这也是 ZAO 的正面意义吧。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;题外话。&lt;/p&gt;
&lt;p&gt;今天是美国的劳动节，在网上偶遇这幅图片。&lt;/p&gt;
&lt;p&gt;&lt;img alt="labor" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-02/labor.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;There is dignity in labour, even if it means getting dirty to put food on your table. Do it, rather than stay clean and go begging while disturbing others.&lt;/p&gt;
&lt;p&gt;我的投资老板在朋友圈让我翻译一下。我发现，翻译真的好难啊。&lt;/p&gt;
&lt;p&gt;献丑了，如果有同学有更好的翻译，欢迎交流斧正：）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;什么是劳动的尊严？就是自食其力。把自己的双手搞脏，真正地去做。这远胜于保持自己双手干干净净，却只能叨扰别人，四处乞讨。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-09-02/readme.md" rel="alternate"/></entry><entry><id>2019/2019-09-01/readme.md</id><title>《美国工厂》到底在讲什么？</title><updated>2019-09-01T00:00:00-07:00</updated><content>&lt;h2&gt;《美国工厂》到底在讲什么？&lt;/h2&gt;
&lt;p&gt;这两天终于补看了最近朋友圈火热的《美国工厂》。&lt;/p&gt;
&lt;p&gt;&lt;img alt="cover" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-01/cover.png" /&gt;&lt;/p&gt;
&lt;p&gt;简单地说，《美国工厂》讲述了一家中国企业在美国开办工厂的艰难。&lt;/p&gt;
&lt;p&gt;之前看到很多文章，都在说这个纪录片是在讲述中美文化的差异和冲突。我本以为影片会重点刻画中国人民的勤劳刻苦和美国人民的自由散漫懒散。但是真的看完以后，我才发现，完全不是那么回事儿。&lt;/p&gt;
&lt;p&gt;影片的态度显然不是夸耀美国，但也很难说是夸耀中国。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;比如，在影片中，外国高管来中国参观学习，采访中国工人的时候，中国工人说，每天上 12 个小时班，一个月也就休息两三天。美国人呢？每周 5 天，每天 8 个小时。都 9102 年了，我实在不觉得这些数字代表我们更加勤劳刻苦。&lt;/p&gt;
&lt;p&gt;&lt;img alt="film1" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-01/film1.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;再比如，这帮外国高管偶然看到中国工厂外，两个老人蹲在玻璃堆里分拣碎玻璃，都惊呆了。因为他们既没有佩戴护目眼镜，也没有使用防割手套——完全没有安全措施。这真的是在说我们不畏艰难，迎难而上吗？&lt;/p&gt;
&lt;p&gt;&lt;img alt="film2" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-01/film2.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;回到美国那边，我不知道为什么，总觉得导演的剪辑在吞吞吐吐，刻意把事情说得很模糊。比如，采访一位员工，员工表示，拒绝用机器抬起两倍重量的货物，因为超过了机器的最大负载，她认为是不安全的。她不愿意冒生命的危险。&lt;/p&gt;
&lt;p&gt;&lt;img alt="film3" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-01/film3.png" /&gt;&lt;/p&gt;
&lt;p&gt;有毛病吗？我觉得一点儿毛病都没有。我们中国的工厂，不也到处贴着“抓生产更要抓安全”吗？只能说，似乎中美两国对“安全”的定义不太一样，中国人觉得用用机器抬起最高承重两倍的货物，也是安全的。&lt;/p&gt;
&lt;p&gt;然后，镜头转向了一位曾经通用汽车厂的老员工，这位老员工表示：他在通用汽车厂干了 15 年，一次工伤都没有。但是，在这个中国投资的玻璃厂，他受工伤了。可是不知道为什么，影片不详细地介绍他究竟是因为什么受了工伤？是他个人的原因？还是厂子的原因？是制度不合理？还是设备有问题？统统没有解释。&lt;/p&gt;
&lt;p&gt;影片想要描述的重点是，这家中国开办的厂子，似乎安全有些隐患，进而，引出了全片中美双方最大的冲突点 —— 工会问题。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;在工会问题上，两边人打起了“舆论战”，支持工会的人上街游行，中国这边呢，“干掉”工会积极分子。&lt;/p&gt;
&lt;p&gt;&lt;img alt="film4" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-01/film4.png" /&gt;&lt;/p&gt;
&lt;p&gt;其实，公平地讲，这种“办公室政治”，哪里都有。所谓有人的地方就有江湖。这些问题我不想评价谁是谁非。因为这件事情真的太复杂。企业想要追求更大的效应没毛病；工人想要追求更多的福利也没毛病。企业主和员工本来就是站在不同位置看问题的。因为屁股坐的位置不一样，所以脑袋里想的事情也就不一样。&lt;/p&gt;
&lt;p&gt;就这样，这家中国人投资的美国工厂，从刚一进入美国，受到了当地的热烈欢迎，甚至被很多人认为是救世主——拯救了很多家庭多年没有收入的窘境；到慢慢被美国人不接受，甚至反对。&lt;/p&gt;
&lt;p&gt;我们可以说是中美的文化差异导致了这样的冲突。但是认真反观，在中国，冲突不存在吗？回头看影片中对在中国工人的采访和表情，其实，似乎只不过因为环境不同，文化不同，中国工人不会大声说 No，不会上街抗议。但中国工人也没那么幸福。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;累啊，肯定累，那有什么办法？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;或许，这个纪录片真正揭示的，是现代制造业的现状：不管是中国文化，还是美国文化，人们对于这样的工作，都越来越不能接受了。&lt;/p&gt;
&lt;p&gt;引自影片中一段美国工人的话：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;工作的状况并不是很好。&lt;/p&gt;
&lt;p&gt;一再重复做同样的事情，会让你很疲惫。&lt;/p&gt;
&lt;p&gt;你有时候会想：为什么我要做这个？&lt;/p&gt;
&lt;p&gt;你会考虑自己有没有精力和毅力，做这个工作。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可是，在通用汽车厂，这些人就不会这么想吗？&lt;/p&gt;
&lt;p&gt;&lt;img alt="film5" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-01/film5.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;其实，从工厂主的角度，也并不喜欢用工人。&lt;/p&gt;
&lt;p&gt;影片的结尾，机器臂娴熟地做着原本是工人做的事情。主管告诉身边的曹德旺主席，下次就能把这里的人取消掉了，再下次就能把那里的人取消掉了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;没办法，人做的太慢了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;![film6.png]&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;人不仅仅做的慢，人还会劳累，还会出错，还要被管理，还要沟通，还要休假。人要自由，要尊严，要福利，要工会。这些问题机器统统都没有。&lt;/p&gt;
&lt;p&gt;这在我看来，这才是《美国工厂》的核心。不管是美国文化，还是中国文化，都越来越不能适应现代制造业的发展了。在我们还在争论谁好谁坏的时候，企业家已经给出了答案——机器最好。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;之前看过一个很有意思的统计数据。现在美国有很多的失业人口，造成了一定程度的社会不稳定。很多美国人喜欢将这些失业归咎为大量的移民，尤其是非法移民，抢了美国人民的饭碗。&lt;/p&gt;
&lt;p&gt;但实际上，真实原因很有可能不是这样，如果我们看一下美国的制造业的产值，就会发现，它是在保持一个不断上升的趋势的；但是，制造业相关的工作数量却在逐渐降低。&lt;/p&gt;
&lt;p&gt;下图中，蓝色的线条是制造业的产值；而红色的线条则是制造业的工作数量。&lt;/p&gt;
&lt;p&gt;&lt;img alt="chart1" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-01/chart1.png" /&gt;&lt;/p&gt;
&lt;p&gt;为什么会产生这种现象？就是因为自动化。自动化让企业主可以雇佣更少的人，创造更多的价值。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;如果我们聚焦到一个具体行业中看，就更有意思了。一个偶然的机会，我在网上看到了这样一张图。&lt;/p&gt;
&lt;p&gt;&lt;img alt="chart2" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-01/chart2.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;这个图描述的是，在石油行业里，石油钻机的数量和石油工人数量之间的关系。绿色线条是石油钻机的数量，红色线条是石油工人的数量。&lt;/p&gt;
&lt;p&gt;大家可以看到，在 2015 年，工作的石油钻机和石油工人的数量都在疯狂下降。因为 2015 年，国际油价出现暴跌。有兴趣的同学可以搜索一下那会儿的新闻。&lt;/p&gt;
&lt;p&gt;因为原油价格暴跌，大多数油企没有动力继续钻井采油了。所以，很多钻井平台停止了作业，很多石油工人也下岗了。&lt;/p&gt;
&lt;p&gt;但是，油企在这个时间里可并没有闲着。油企们在投资，实验，研究自动钻井平台。&lt;/p&gt;
&lt;p&gt;一方面，这是油企的求生之路。如果油价一直这么低，就必须要尽快将成本降低下来。怎么降低成本？大规模使用机器。虽然短期可能需要大量资金，但是长期来看，机器最省钱。&lt;/p&gt;
&lt;p&gt;另外一方面，石油行业的实地钻井平台作业，是充满危险的，机器代替人类进行危险作业，本来就是早晚的事情。只不过，这波石油价格的暴跌，推动油企们更快地完成了这一进程。&lt;/p&gt;
&lt;p&gt;结果是怎样的呢？2016 年 6 月开始，石油价格逐渐回升，美国的很多石油钻井机逐渐开始作业。但是，石油工人的雇佣量完全没有上升。&lt;/p&gt;
&lt;p&gt;两年的时间，美国石油企业在自动化上的投资，已经可以让原先需要 20 人做的工作，现在只需要 5 个人就好。据统计，这波油价的暴跌，让美国 44 万石油工人下岗，但是，其中 22 万的工人，永远不会回到石油行业了。因为自动化的原因，石油行业不再需要这么多人了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;什么美国文化，中国文化。机器没有文化，机器赢了。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;机器的逐渐发展完善，是否会让大多数人类失去工作，从而引发巨大的社会不稳定？这其实是一个老生常谈的问题。&lt;/p&gt;
&lt;p&gt;截至目前为止，还没有发生这样的情况，并且，与之相反的，研究表明，因为机器的逐渐普及和应用，更多的工作岗位被创建出来了。&lt;/p&gt;
&lt;p&gt;一个典型的例子，是 ATM 机的普及。&lt;/p&gt;
&lt;p&gt;1970 年的美国，由于银行逐渐开始普及 ATM 机，一度导致大量银行的业务人员下岗。但是，随后，统计数据表明，正是由于 ATM 机的普及，导致银行慢慢开始需要更多的人才了。&lt;/p&gt;
&lt;p&gt;为什么？因为 ATM 让简单的存款，取现等常规业务变得极其简单廉价，使得银行开一个支行的成本变低了。于是，银行开始了扩张，到处都有支行，每个支行都需要人员，虽然，他们的工作不是简单的为客户存钱和取现。&lt;/p&gt;
&lt;p&gt;另一方面，因为这些常规业务的简单化，也使得人们对金融的需求越来越多元化，银行业开设了越来越多的业务种类，满足人们的金融需求。银行业，金融业蓬勃发展，导致需要更多的人才。&lt;/p&gt;
&lt;p&gt;这还没有算维护 ATM 机器，升级 ATM 机器带来的就业。&lt;/p&gt;
&lt;p&gt;所以，一派观点认为，机器逐渐普及，其实将带来更多的就业。只不过，&lt;strong&gt;这些工作，不可能是原来那些轻松的任务了。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;以银行业为例，在过去，只是帮助用户存钱和取现，就可以成为一个体面的白领，&lt;strong&gt;但在这个时代，已经不可能了。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在机器逐渐发展的时代，所有人的知识必须升级。持续学习很有可能不只是一种生活理念或者是优秀的人才拥有的素质，而是每个人想要生存下去必须经历的生活方式。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;否则呢？《美国工厂》里给出了一个很好的例子。&lt;/p&gt;
&lt;p&gt;原来在通用汽车厂工作的工人，时薪是 29 美元一个小时；但是在福耀玻璃厂，继续当蓝领，每小时只能赚 12.84 美元，一半儿都不到。&lt;/p&gt;
&lt;p&gt;注意，这其中还有时间差距，十几年前的 29 美元，和现在的 29 美元，完全不是一个概念。&lt;/p&gt;
&lt;p&gt;按照影片的说法，在以前，孩子要想买双新的运动鞋，这些工人随随便便就买了，但现在不可能这么随性了。甚至，他们失去了自己的房子和汽车。&lt;/p&gt;
&lt;p&gt;&lt;img alt="film7" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-09-01/film7.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;这才是真真正正的，美国在过去十几年，很多人经历的生活变化。曾经幸福美好的生活，突然就没了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;看着《美国工厂》中的代顿，我总是在不可遏制地想：今天的硅谷，会不会就是明天的代顿？今天风光的码农们，会不会就是明天的这些美国蓝领？&lt;/p&gt;
&lt;p&gt;我也不知道答案。未来太远，我们只能把握今天。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-09-01/readme.md" rel="alternate"/></entry><entry><id>2019/2019-08-27/readme.md</id><title>慢增长</title><updated>2019-08-27T00:00:00-07:00</updated><content>&lt;h2&gt;慢增长&lt;/h2&gt;
&lt;p&gt;这两天，我的公众号不知道为什么，突然有了一大波关注，增速是平常正常增长量的 20 倍之多。这让我有些惶恐。&lt;/p&gt;
&lt;p&gt;为什么惶恐？&lt;/p&gt;
&lt;p&gt;熟悉我的人都知道，我其实是一个很“慢”的人。所谓的慢，并不是指执行力低。我自认为自己的执行力还是可以的。这里说的“慢”是指，通常对于一个计划，我会给出一个很长的时间周期。比如一年，三年，甚至五年，十年。&lt;/p&gt;
&lt;p&gt;之所以会这样，一个很重要的原因是，在我不长的人生历程中，我发现，“快”的结果通常都不尽如人意。至少在我的身上是这样。&lt;strong&gt;我是一个不适合“快”的人。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所以，在给自己制定计划的时候，我通常都不用任务量的方式做计划。&lt;/p&gt;
&lt;p&gt;比如打算看一本书，我不会要求自己每天看10页。虽然这样算下来，一整本《算法导论》，4 个月就能看完了。但实际情况却是：这样的计划，近乎一定无法完成。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;无法完成的计划，除了打击自己的自信心，没有任何好处，不如没有。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我是在列出了无数的计划，然后毫无意外地无数次完不成计划，之后无数次质疑自己，无数次人生观崩塌，然后无数次再把自己重新拾掇起来，无数次继续努力以后，得出这个结论的。&lt;/p&gt;
&lt;p&gt;现在我通常是怎么给自己做计划的呢？给自己制定任务时间。&lt;/p&gt;
&lt;p&gt;比如打算看一本书，我要求自己，每天看 40 分钟。这 40 分钟是看半本书还是 1 页纸，无所谓。只要高效利用这 40 分钟，努力吸收这本书中的知识，我觉得就够了。&lt;/p&gt;
&lt;p&gt;所谓每天进步一点点。&lt;/p&gt;
&lt;p&gt;毕竟，对于一本书，不同章节有难有易，有的地方进度快一些，有的地方进度慢一些，是很正常的。读懂，消化，学到知识才是目的。&lt;/p&gt;
&lt;p&gt;我发现，这个方法对我特别有效。虽然这样算下来，完整学习一本教材的时间，通常都会比我最初预估的时间慢三倍甚至五倍。但关键是，我终于能完成自己的目标了。慢一点又何妨？积累起来，我比过去那个制定了无数目标却都完成不了的自己，强了不知道多少倍。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;过去追求“快”，结果却很慢。真的慢下来，才发现：慢就是快。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;其实，我也无法做到每天都按时按量完成自己的学习任务。毕竟，长大了，不像在学校里，近乎所有的时间都可以用来学习。生活中，总会有各种意外打断原本的计划。&lt;/p&gt;
&lt;p&gt;但一旦明白很多事情都“快”不来，对于这种生活中的“意外”，也就不会那么焦虑了 —— 毕竟，对于大多数事情，不差那么一两天。&lt;/p&gt;
&lt;p&gt;“不差这一两天”，这听起来似乎很“违背主流价值观”，我也不建议你和你的领导这么讲，但我确实是这么认为的。&lt;/p&gt;
&lt;p&gt;已经有好几个同学，在不同的群里，扒出了我的扇贝账号。我在很早之前，就开始使用扇贝记单词了。最初只是想扩充词汇量，增强英语水平，但到现在，已经近乎是一个兴趣了。看见一个单词我不认识，我就觉得好奇，就会习惯性地拿扇贝单词给它记下来。（我没收扇贝一分钱广告费。）&lt;/p&gt;
&lt;p&gt;到现在，我在扇贝单词上已经积累了 55734 个单词，打卡 1310 天了，折合下来，大概是三年半的时间。&lt;/p&gt;
&lt;p&gt;&lt;img alt="shanbay" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-08-27/shanbay.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;如果对词汇量有概念的同学，一定明白，55734 个单词是一个很夸张的数字。因为，在英语为母语的国家，普通的成年人，词汇量大概是 2 万到 3.5 万之间。&lt;/p&gt;
&lt;p&gt;当然，我在扇贝单词上积累了 5 万多个单词，不代表我的词汇量真的就是 5 万多。实际上，怎样计算词汇量，也有不同的标准。再加上这其中包含了很多词组或者固定搭配，而不仅仅是单词而已。&lt;/p&gt;
&lt;p&gt;但是，这个数字确实也让我自己吓了一大跳。很多同学都说，波波老师太刻苦了。但是我自己知道，我一点儿都不刻苦，比我刻苦的人多了去了。&lt;/p&gt;
&lt;p&gt;我不是在谦虚，因为，我的打卡日历大概是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="calender" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-08-27/calender.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;大家可以看到，典型的三天打鱼，两天晒网。&lt;/p&gt;
&lt;p&gt;现在的我，一般每天都会阅读很多英文文章。遇到不认识的词，就在扇贝里记录下来。晚上有时间，就过一下；没时间，就算了。有的时候一天遇不到几个新词，有的时候则能遇到上百个，甚至几百个。&lt;/p&gt;
&lt;p&gt;虽然我在扇贝上真正打卡了 1310 天，但其实，这是大概六七年积累的量。&lt;/p&gt;
&lt;p&gt;慢不慢？当然慢。但是回头看，我却发现，自己比六七年前，真的进步了一大截。毕竟，在六七年前，说要和我一起学习英语的小伙伴，没坚持几个月就放弃了。&lt;/p&gt;
&lt;p&gt;在那几个月里，我估计他的进度比我快不少。但其实，站在更长的时间尺度上看，&lt;strong&gt;这短暂的“快”，意义并没有那么大。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;更关键的是，我意识到了，&lt;strong&gt;很多东西，是快不来的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于理工科的同学，本科课本上的大部分学科都能考前突击，甚至花一晚上的时间，把一个学期的课程内容掌握得八九不离十。我估计，在国内读大学的同学们，99% 都有类似的经历。我也有。&lt;/p&gt;
&lt;p&gt;但经验告诉我，这样“快速”掌握的知识，最终无一例外，只有可能忘记，到头来，真到需要的时候，还要重新学起。&lt;strong&gt;以为很快，其实很慢。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;还有很多知识，根本快不起来，比如英语，比如算法。近乎所有的“内功知识”，都有这样的特点。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;不仅仅个人学习如此，很多领域的创新，乃至产业的发展，亦是如此。&lt;/p&gt;
&lt;p&gt;比如这阵子网上讨论得很热的芯片和操作系统，在我看来，就是快不起来的领域。大家固然要努力奋斗，但是所有的进步也要符合客观规律。这个世界并非“人有多大胆，地有多大产”。&lt;strong&gt;对于很多领域来说，时间的积累是必须的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;再说一个大家可能不熟悉的领域——农业（包括养殖业）。我在国内创业的时候，访谈了很多农企，深知农业技术创新的艰难。&lt;/p&gt;
&lt;p&gt;为什么艰难？不是资源不到位。国家每年的一号文件，第一个提到的都是农业，每年大把的资金流向农业领域。&lt;/p&gt;
&lt;p&gt;但是，客观事实是，一茬农作物，怎么也要半年一年，才能有收成。甚至一些果树，要几年的时间，才能结果。常言道“桃三杏四梨五年，核桃结果十五年”。什么意思？桃树要三年结果；杏树要四年结果；梨树要五年结果；核桃树呢？十五年。&lt;/p&gt;
&lt;p&gt;慢不慢？太慢了。随便做个实验，几年过去了，搞不好还什么成果都没有。这种“慢”，和现代社会的节奏格格不入。这年头，没有几个人能熬住这种慢。因此，人才很难流向农业。&lt;/p&gt;
&lt;p&gt;但这个“慢”有没有什么好处呢？&lt;/p&gt;
&lt;p&gt;前一阵子，我在知乎看到的一个问答，很受启发。讲述了北欧国家是如何维持高福利的社会生活的。我将这个答案放在了这篇文章的“阅读原文”中。&lt;/p&gt;
&lt;p&gt;其中有一条，就是在产业发展上，北欧国家在尽量选择“&lt;strong&gt;高附加值，低发展速度&lt;/strong&gt;”的产业。&lt;/p&gt;
&lt;p&gt;“高附加值”好理解，“低发展速度”是怎么回事？&lt;/p&gt;
&lt;p&gt;互联网就是典型的“高发展速度”的领域。表现就是，技术更新换代快。结果就是，一款产品很难做到真正的“积累”，产品优势可能也就三五年的时间。&lt;/p&gt;
&lt;p&gt;之前我们还在用人人网，突然就都去微博了；微博玩着玩儿着，就都来到微信了。微信稳稳地站住了社交服务的脚跟了吗？抖音快手等视频社交又来势汹汹，谁也不知道未来会怎样。&lt;/p&gt;
&lt;p&gt;“高发展速度”的行业因为变化太快，所以很难有所积累，也因此，大家通常危机意识会很强。因为大家知道，自己被打败的时候，连渣儿都不会剩。所以，这些领域的人都在疯狂创新，生活节奏越来越快。&lt;/p&gt;
&lt;p&gt;不仅仅是中国，其实美国也是如此，美国最发达的产业，是那些“高附加值，高发展速度”的产业。比如互联网，比如金融。&lt;/p&gt;
&lt;p&gt;但欧洲国家，尤其是北欧国家，发展思路似乎完全不同。当然，这个不同背后，不一定完全是主观选择的结果，也是在很多历史政治经济等等方面的条件下，“被迫”采取的选择。但不管怎样，最终结果是：他们的支柱产业，大多是“高附加值，低发展速度”的产业。&lt;/p&gt;
&lt;p&gt;农业就是典型的这类产业。尤其是畜牧业。&lt;/p&gt;
&lt;p&gt;以乳制品为例，如果你认为养奶牛没什么技术含量，那就大错特错了，这里面的技术含量极高。在丹麦，能够做到 95% 的牧场，每毫升牛奶的细菌数低于 3 万。而美国标准是每毫升牛奶细菌数 10 万。至于中国，我查到的数据是 200 万。&lt;/p&gt;
&lt;p&gt;当然，我不是畜牧业专家，现在是不是有什么变化并不了解，我也完全没有不爱国的意思，毕竟我们改革开放以后，发展时间并不长，我们在一些方面和发达国家还有差距，这个要承认。&lt;strong&gt;我只是想用这个数据辅证，畜牧业是很有技术含量的一个行业。&lt;/strong&gt;达到丹麦的标准是极难的，需要漫长时间里的不断耕耘发展。在乳制品行业，可以和丹麦媲美的是荷兰，也是一个北欧国家。&lt;/p&gt;
&lt;p&gt;欧洲的其他国家也有类似的“产业优势”，比如德国的发动机，在我看来也是如此，“&lt;strong&gt;高附加值，低发展速度&lt;/strong&gt;”。这些产业变化很慢，一旦取得了成果，这些成果很容易积累下来，在很长时间里产生效益。所谓的“传统行业”。&lt;/p&gt;
&lt;p&gt;当然，这样的选择也有损失，毕竟，变化才代表着机会，在迭代速度快的行业里，才有超越的机会。中国如今取得现在的国际地位，一个很大的原因是，在这类变化很快的新兴行业抓住了机会。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;但是，这并不意味着，“快”，是唯一的选择。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;我很早就认命了，自知自己无法像马云乔布斯那样，创造出阿里或者苹果一样的商业帝国。因为我太“慢”了。&lt;/p&gt;
&lt;p&gt;研究生刚创业的时候，一腔热血，觉得自己要学习乔布斯，改变世界。&lt;strong&gt;Change the World&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;后来，来了美国，和一个 Google 的同学聊天，启发很大。其实，我们不需要改变世界，对这个世界产生一点影响，就够了。所谓的 &lt;strong&gt;Make an Impact&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;但是现在，我的观念又变了。我觉得，产生一点影响都是奢求。现在，我喜欢的说法，是产生一点涟漪。&lt;strong&gt;Make a Ripple&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;你看，我是不是越来越没追求？&lt;/p&gt;
&lt;p&gt;但我却觉得，我越来越进步了。因为，不再年少轻狂，理解了梦想和现实的分界。&lt;/p&gt;
&lt;p&gt;慢慢来，哪怕产生一点涟漪，或许才是实现梦想的开始。&lt;/p&gt;
&lt;p&gt;再不济，涟漪虽浅，但也证明，我在这里。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-08-27/readme.md" rel="alternate"/></entry><entry><id>2019/2019-08-21/readme.md</id><title>反设计：简单的音量调节控件，你能设计得有多糟糕？</title><updated>2019-08-21T00:00:00-07:00</updated><content>&lt;h2&gt;反设计：简单的音量调节控件，你能设计得有多糟糕？&lt;/h2&gt;
&lt;p&gt;在昨天公众号更新的文章 &lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-08-20/"&gt;&lt;strong&gt;《万能学习法》&lt;/strong&gt;&lt;/a&gt; 中，我以设计为例，向大家介绍了一个看起来很朴素的学习方法：&lt;strong&gt;将自己的作品不断去和大师的作品作对比，仔细总结，自己的作品到底哪里有不足，然后去改进。如此反复。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不过，有的时候，反向思维也是很有意思的事情。&lt;/p&gt;
&lt;p&gt;我们也可以设想，一个东西，最糟糕的情况，是什么样子？&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;最近，我在国外 Reddit 论坛上，看到了一个很有意思的帖子。大家可以点击 &lt;a href="https://www.reddit.com/r/ProgrammerHumor/search?q=volume&amp;amp;restrict_sr=on"&gt;这里&lt;/a&gt; 查看原帖。&lt;/p&gt;
&lt;p&gt;音量控制，是一个每个人都接触过的控件。无论是电脑操作系统，还是手机操作系统；无论是在线视频，还是游戏，都一定有音量控制的功能，让用户选择合适的音量。&lt;/p&gt;
&lt;p&gt;在大多数情况下，音量控制的 UI 都是这样一种形式：&lt;/p&gt;
&lt;p&gt;&lt;img alt="good" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-08-21/good.gif" /&gt;&lt;/p&gt;
&lt;p&gt;但是，这个帖子的标题是：&lt;strong&gt;对于音量控制这样一个控件，你能设计得有多糟糕？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这样一个问题，已经有了上百个网友的脑洞。通过这些设想，我们其实能总结出：&lt;strong&gt;到底什么是坏的设计？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;简单举几个例子。&lt;/p&gt;
&lt;p&gt;用户如果想要调整音量，一定是有非常明确的调整方向。或者用户觉得现在音量太大了，要调小一些；或者用户觉得现在音量太小了，要调大一些。&lt;/p&gt;
&lt;p&gt;但如果，我们的音量调整是随机的，就很麻烦了。&lt;/p&gt;
&lt;p&gt;比如：&lt;/p&gt;
&lt;p&gt;&lt;img alt="random1" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-08-21/random1.gif" /&gt;&lt;/p&gt;
&lt;p&gt;甚至是这样：&lt;/p&gt;
&lt;p&gt;&lt;img alt="random2" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-08-21/random2.gif" /&gt;&lt;/p&gt;
&lt;p&gt;好像很好玩的样子？🤔🤔🤔&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;说到好玩，&lt;strong&gt;游戏化&lt;/strong&gt;是这几年产品设计界很流行的概念。如果不了解的同学，可以查一查 &lt;strong&gt;Gamification&lt;/strong&gt; 这个概念。&lt;/p&gt;
&lt;p&gt;如果把音量控制做得具有游戏性，会怎样？&lt;/p&gt;
&lt;p&gt;比如，愤怒的小鸟？&lt;/p&gt;
&lt;p&gt;&lt;img alt="game1" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-08-21/game1.gif" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;或者是，打冰壶？&lt;/p&gt;
&lt;p&gt;&lt;img alt="game2" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-08-21/game2.gif" /&gt;&lt;/p&gt;
&lt;p&gt;看起来很绚丽，但我们真的需要这样的音量控制吗？&lt;/p&gt;
&lt;p&gt;不过，我觉得另外一个有意思的问题是，&lt;strong&gt;在什么时候，我们其实需要这样的控制方式？&lt;/strong&gt;🤔🤔🤔&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;当然，和“好玩儿”呈反方向的设计，就是&lt;strong&gt;过度专业&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;比如：&lt;/p&gt;
&lt;p&gt;&lt;img alt="expert1" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-08-21/expert1.png" /&gt;&lt;/p&gt;
&lt;p&gt;过度专业是很多理工专业的同学做设计的时候常犯的问题。在他们眼中，事情很复杂，琐碎，但是在用户眼中，是否真的需要这么专业的设置？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;与之相对应的，&lt;strong&gt;过度设计&lt;/strong&gt;，则是很多设计专业的同学容易犯的错误。&lt;/p&gt;
&lt;p&gt;比如，设计专业很多时候强调“直观感受”。但是，下面的例子，我觉得特别好的说明了：过度直观感受，不一定是好的设计。&lt;/p&gt;
&lt;p&gt;比如，对于音量来说，显然音量越大，就越“震撼”，那么，我们有没有必要把音量控制设计成这个样子？&lt;/p&gt;
&lt;p&gt;&lt;img alt="material" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-08-21/material.gif" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;另一类过度设计，则是应用最“前沿”的科技，做“烂创新”。&lt;/p&gt;
&lt;p&gt;这和创业同理。&lt;strong&gt;虽然好的创业项目通常都会和最前沿的技术做结合。但是，应用最前沿的技术，不一定是好的项目。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;比如，我们把音量控制和现在最流行的人工智能结合起来？&lt;/p&gt;
&lt;p&gt;&lt;img alt="ai" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-08-21/ai.gif" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;最后，作为产品设计，很多时候，我们要做价格设计。那么，音量控制这个功能如果做成这样？用户会是什么反应？&lt;/p&gt;
&lt;p&gt;&lt;img alt="money1" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-08-21/money1.png" /&gt;&lt;/p&gt;
&lt;p&gt;翻译：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;最右侧 - 免费：您可以（并且只可以）将音量调到 100%。（有声音就不错了）&lt;/p&gt;
&lt;p&gt;中间 - 我们最流行的套餐，2.97 刀一个月：可以无限次使用音量调节杆！&lt;/p&gt;
&lt;p&gt;最左侧 - 每年只要 29.95 刀，您不仅享受到了 17% 的折扣和无限次使用音量调节杆的权限，还包括：静音功能；使用快捷键迅速调节音量；保护您的音量隐私！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有的同学干脆直接在 iOS 上做了这么一个 demo：&lt;/p&gt;
&lt;p&gt;&lt;img alt="money2" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-08-21/money2.gif" /&gt;&lt;/p&gt;
&lt;p&gt;是不是很酷？🤔🤔🤔&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;这些设计方案，我称为是“&lt;strong&gt;反设计&lt;/strong&gt;”，因为，它们是向着设计目标的反方向 —— “不好用”，甚至是“不能用”去努力的。&lt;/p&gt;
&lt;p&gt;但很多时候，我觉得这样的反方向，也能为我们提供很多灵感。&lt;/p&gt;
&lt;p&gt;比如，在做算法设计的时候，我经常使用这样的方式。假设我的计算机算力无穷，空间无限大，对于一个算法问题，我可以怎么解决？然后，基于这个最差的解决方案，再去优化。&lt;/p&gt;
&lt;p&gt;为什么设想这样一个最差的解决方案是有意义的？&lt;/p&gt;
&lt;p&gt;一方面，一个差的解决方案，也是一个解决方案。它比什么都没有强。&lt;/p&gt;
&lt;p&gt;另一方面，一个差的解决方案，通常不言自明地向我们揭示了，这个解决方案到底差在哪里。很多时候，这将为我们提供优化的路径和方向。即使我们最终没有成功，我们也拥有了一个方向。&lt;/p&gt;
&lt;p&gt;不要小瞧这一点，拥有方向，比面对一个问题毫无头绪，强了太多。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-08-21/readme.md" rel="alternate"/></entry><entry><id>2019/2019-08-20/readme.md</id><title>万能学习法</title><updated>2019-08-20T00:00:00-07:00</updated><content>&lt;h2&gt;万能学习法&lt;/h2&gt;
&lt;p&gt;我曾拜一个师傅学习设计，更准确的说，是页面设计。&lt;/p&gt;
&lt;p&gt;为什么要学习页面设计，因为我觉得页面设计很实用，也很简单。说“简单”或许不准确，说“门槛低”应该更准确。&lt;/p&gt;
&lt;p&gt;毕竟，对于普通的开发者来说，做页面设计，其实主要是摆弄不同的文字或者图像元素，将他们进行合理的排列，调整方向，大小和布局；决定字体和颜色，大概也就如此，并不需要真正的去“创造”什么。&lt;/p&gt;
&lt;p&gt;实际上，任何一个人，在生活中，近乎都一定会接触这样的设计。从写一份文档进行排版，到做 PPT；从为自己设计一张名片，到搭建个人网站。&lt;/p&gt;
&lt;p&gt;设计有没有什么理论，技巧和原则？有。&lt;/p&gt;
&lt;p&gt;对于程序员朋友，我强烈推荐一本书，叫《给大家看的设计书》。这本书的英文名字其实更准确，叫《The Non-Designer's Design Book》，即《给非设计师看的设计书》，里面介绍了很多极其基本的设计原则。现在已经是第四版了。&lt;/p&gt;
&lt;p&gt;&lt;img alt="cover" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-08-20/cover.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;这本书我在拜师前就翻了两遍了。还是觉得对设计不得要领。总以为，还有很多更深刻的理论知识我没有掌握，所以设计出的页面总不能让自己满意。&lt;/p&gt;
&lt;p&gt;师傅听说我看过这本书，告诉我，你已经不需要学习其他理论知识了。对于你的需求，这本只有 200 来页的小册子足够了。&lt;/p&gt;
&lt;p&gt;那么这个师傅还能怎么教我呢？&lt;/p&gt;
&lt;p&gt;他问我：你随便说一个你觉得好看的页面设计。&lt;/p&gt;
&lt;p&gt;那个时候，苹果的设计风格风靡全世界。我说：苹果官网的页面设计就很好看啊。&lt;/p&gt;
&lt;p&gt;师傅说，那好，给你留一个作业。你一定都记得苹果官网主页都有什么内容吧？回去，不要看苹果官网，按照自己的记忆和想象，把苹果官网的页面设计重复出来，下次带来。&lt;/p&gt;
&lt;p&gt;就这么简单的一个事情，让我明白了什么叫“&lt;strong&gt;我以为我知道得一清二楚的东西，但我其实完全不知道&lt;/strong&gt;”。&lt;/p&gt;
&lt;p&gt;按理说，苹果官网我访问过那么多次；因为觉得它好看，还几次特意停留，长时间观察它的页面效果；甚至在浏览器的开发者模式下，看过其中的源码。&lt;/p&gt;
&lt;p&gt;但是，当我从零开始，要再次把这个页面的设计重复出来——注意，只是重复而已，没有任何创造——我却发现，我完全做不好。&lt;/p&gt;
&lt;p&gt;第二次，我拿着自己的“苹果主页设计”找到师傅，师傅只是打开苹果官网，和我的设计一点一点对照，对于其中的区别，讲了讲而已。其实，所有的理论我都懂。&lt;/p&gt;
&lt;p&gt;相信很多同学了解这个师傅的“套路”了。大家一定觉得，他的第二次作业是，再问我一个我觉得好的页面，让我复制吧？至少当时我是这么觉得的。&lt;/p&gt;
&lt;p&gt;但是，我错了。&lt;/p&gt;
&lt;p&gt;师傅的第二次作业是：怎么样？是不是对苹果官网的设计理解更透彻了？那么好。回去，不要看苹果官网，按照自己的想象，把苹果官网的设计再重复一遍，下次带来。&lt;/p&gt;
&lt;p&gt;是的，一样的作业。&lt;/p&gt;
&lt;p&gt;这次，我能让自己满意吗？答案是不能。虽然有进步，但是，我发现，还是有很多细节，是被自己忽略的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我以为我知道得一清二楚的东西，但我其实完全不知道。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;再找师傅，师傅依然是，打开苹果官网，和我的设计一点一点对照，对于其中的区别，讲了讲而已。当然，这次，会触及很多更细节的内容，比如字体的选择，字号的选择，颜色的选择，等等等等。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;这个师傅没教过我几次课。但是，我从他身上学到了一个重要的学习设计的方法：看再多理论都没用，去设计就好了。&lt;/p&gt;
&lt;p&gt;只是，自己动手设计以后，还没有结束。还要用自己的作品，和别人的优秀设计再去做对比，仔细总结，自己的设计和优秀的设计，区别到底是什么。自己欠缺的到底是什么。&lt;/p&gt;
&lt;p&gt;这步总结至关重要，&lt;strong&gt;所有的进步，都在这步总结中&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;如果你认为有的人似乎没有那么努力，但却能取得不错的成绩，我认为关键就是这步总结做得是否到位了。&lt;/p&gt;
&lt;p&gt;在一年的时间里，如果我做了 100 个设计，你只做了 10 个设计，但是，每个设计都认真和大师级作品做对比，总结，积累。我认为，大概率的，你的进步会更明显，取得的成就也会更大。&lt;/p&gt;
&lt;p&gt;但不要以为这是什么捷径。实际上，认真和别人的设计做对比，总结，修改，很有可能比再设计 90 个稿子更熬人，累心。经历过的人都懂。&lt;/p&gt;
&lt;p&gt;你为了做这 10 个设计，付出的努力，很有可能远远超过我做 100 个设计付出的努力。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;为什么讲这个故事？&lt;/p&gt;
&lt;p&gt;因为，有很多同学都问我：老师，听你的课，觉得自己都懂，但是一写代码，就不会写了，怎么办？&lt;/p&gt;
&lt;p&gt;我的回答非常简单：&lt;strong&gt;硬着头皮去写。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;实在写不出来了，开始总结，自己为什么写不出来？是语法原因？概念没搞懂？还是哪里的逻辑没有理清楚？&lt;/p&gt;
&lt;p&gt;然后，再看一遍视频，特别是你没有理清楚的那部分，再仔细体会一下课程中是怎么完成这段逻辑的。&lt;/p&gt;
&lt;p&gt;然后，关上视频，再尝试自己去写。&lt;/p&gt;
&lt;p&gt;还写不出来？很正常。继续仔细总结，自己为什么仍然写不出来。当然，你也有可能写出有 bug 的代码，那就仔细去调试。看看 bug 在哪里？关键是总结：为什么自己觉得已经理解的逻辑，落实到代码上，却写出了 bug？是不是某一个变量的语义，或者初值，或者某些边界，其实是自己没有在意的地方？甚至，其实，自己以为自己理解了，但实际并没有理解？&lt;/p&gt;
&lt;p&gt;然后再打开课程视频的代码，比较，总结。&lt;/p&gt;
&lt;p&gt;如此反复。&lt;/p&gt;
&lt;p&gt;说实话，看一遍视频，却写不出代码，这太正常了。&lt;strong&gt;要是看一遍就会了才不正常。&lt;/strong&gt;那样的话，算法也太简单了一点，也就不会有那么多同学因为算法感到头疼了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;这个方法只适用于学习设计和算法吗？&lt;/p&gt;
&lt;p&gt;当然不是。这个方法在我看来，是&lt;strong&gt;万能学习法&lt;/strong&gt;，可以应用在一切领域的学习中。&lt;/p&gt;
&lt;p&gt;说白了，&lt;strong&gt;不断地重复，不断地总结。不断地把自己的学习成果，和专业人士的成果作对比，不断反思，自己的差距在哪里。在不知不觉中，我们就进步了。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;有的同学可能会说，不断重复，怎么能激发创造力，做出创新呢？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;所有的创新，都根基于对基础的深刻理解，而不是信马由缰的异想天开。&lt;/strong&gt;只是，在大多数时候，我们只能看见创新者的创新，却看不见他们基础扎实的那一面。&lt;/p&gt;
&lt;p&gt;我们看到毕加索的《梦》，觉得这个好简单，我也能画。&lt;/p&gt;
&lt;p&gt;&lt;img alt="dream" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-08-20/dream.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;但是，我们看不到，毕加索自小就有着扎实的美术功底。&lt;/p&gt;
&lt;p&gt;比如，毕加索 13 岁的油画《老渔夫》&lt;/p&gt;
&lt;p&gt;&lt;img alt="painting1" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-08-20/painting1.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;毕加索 14 岁的油画《艺术家的母亲》&lt;/p&gt;
&lt;p&gt;&lt;img alt="painting2" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-08-20/painting2.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;毕加索 15 岁的油画《科学与慈善》&lt;/p&gt;
&lt;p&gt;&lt;img alt="painting3" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-08-20/painting3.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;很多人只看到毕加索的这只牛，觉得好简单，我也能画：&lt;/p&gt;
&lt;p&gt;&lt;img alt="niu1" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-08-20/niu1.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;却忽视了，这只牛，是从一头完整的牛，不断做减法，得到的艺术抽象的结果。&lt;/p&gt;
&lt;p&gt;&lt;img alt="niu8" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-08-20/niu8.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="niu8" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-08-20/niu7.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="niu8" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-08-20/niu6.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="niu8" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-08-20/niu5.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="niu8" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-08-20/niu4.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="niu8" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-08-20/niu3.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="niu8" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-08-20/niu2.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="niu8" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-08-20/niu1.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-08-20/readme.md" rel="alternate"/></entry><entry><id>2019/2019-08-07/readme.md</id><title>罗振宇和“乌鸦嘴”</title><updated>2019-08-07T00:00:00-07:00</updated><content>&lt;h2&gt;罗振宇和“乌鸦嘴”&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最近，罗振宇被骂了。&lt;/p&gt;
&lt;p&gt;被骂的原因，说白了，是因为不靠谱。&lt;/p&gt;
&lt;p&gt;2014 年，在北京大火的黄太吉，得到了罗振宇的加持。他说，黄太吉的成功，意味着过去商业世界所有观察角度全错。甚至一度，很多白领都在探讨，是不是去卖煎饼果子，才是通往财富自由的正确方式。&lt;/p&gt;
&lt;p&gt;结果，2016 年，黄太吉陆续关店。很多白领梦碎。&lt;/p&gt;
&lt;p&gt;2015 年 12 月 31 日，罗振宇第一次跨年演讲，他公开表示，乐视和暴风影音这样的公司，不能用传统的眼光看待，这是一个新物种，一定会改变我们的环境。&lt;/p&gt;
&lt;p&gt;结果大家也看到了，贾老板欠债高达 70 个亿，现在还躲在美国不敢回国；至于冯鑫，也已经被采取强制措施。这里面，盘子太大，水太深，咱也不知道，咱也不敢问。不管怎样，他们都是失败的，真要说改变了我们的环境，也是向着坏的方向。&lt;/p&gt;
&lt;p&gt;2016 年，罗振宇又公开表示看好罗永浩。彼时，罗永浩发布了锤子手机 M1。但与此同时，锤子手机正在以每年 4 亿人民币的速度亏损，财务问题从锤子科技诞生的那一刻起，就一直萦绕在这家网红企业上空。&lt;/p&gt;
&lt;p&gt;2019 年 3 月，罗永浩不再担任锤子软件（北京）有限公司法人代表。&lt;/p&gt;
&lt;p&gt;至于 ofo，说实话，罗振宇并没有在 ofo 失败前表示极度看好小黄车，只是认为戴维虽然当前深陷困境，但还年轻，未来还有很多可能。&lt;/p&gt;
&lt;p&gt;对此，我是非常认同的，不能算是罗振宇的“乌鸦嘴”，真要算，是无良自媒体强行凑黑材料，带节奏。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;就算抛去 ofo 不看，黄太吉，乐视，暴风影音，锤子科技，这么多证据，似乎也能说明罗振宇的“乌鸦嘴”了。&lt;/p&gt;
&lt;p&gt;但对此，其实我是不太同意的。照我看，罗振宇只是“单纯得可爱”而已。&lt;/p&gt;
&lt;p&gt;我曾经写过一篇文章，&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2017/2017-09-02/"&gt;《网购有助"脱单"?我还实现了一个准确率99.9%的癌症预测系统呢》&lt;/a&gt;，讲的是机器学习或者统计学领域的一个很朴素的思想。&lt;/p&gt;
&lt;p&gt;假设，有一种疾病，发病率是千分之一，即 0.1%，那么，我可以利用这个事实，不作任何事情，就发明出一个准确率高达 99.9% 的疾病预测系统。&lt;/p&gt;
&lt;p&gt;怎么做？很简单，对于任何一个人，我都无差别地预测：这个人是健康的。反正只有 0.1% 的人会得病，对这 0.1% 的人，我的预测是错误的；但是，对剩下的 99.9% 的人，我的预测都是正确的。整体看来，我的预测准确率高达 99.9%。虽然没有任何技术含量。&lt;/p&gt;
&lt;p&gt;这种情况，被称为数据极度倾斜（Extremely Skewed Distribution）。患病人群相比健康人群，少太多了。所以，“准确率”这个常用的指标，不再能反映出真实的问题。在统计学或者机器学习领域，会使用其他指标，来鉴别出，这样的预测，其实是无意义的。&lt;/p&gt;
&lt;p&gt;具体技术细节，在这里不探讨了，也不是这篇文章的重点。&lt;/p&gt;
&lt;p&gt;但是，这种数据极度倾斜的情况，在生活中，其实也很常见。&lt;/p&gt;
&lt;p&gt;创业就是如此。&lt;/p&gt;
&lt;p&gt;对于创业来说，失败的概率，是远远大于成功的概率的。大概是多少呢？我之前写的文章&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-07-31/"&gt;《成功者的年龄》&lt;/a&gt;中，引用了哈佛商业评论的一个数据：不管创始人的年龄是怎样的，创业成功率都稳稳地在千分之三以下。&lt;/p&gt;
&lt;p&gt;&lt;img alt="prob" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-08-07/prob.png" /&gt;&lt;/p&gt;
&lt;p&gt;在这样的一个概率分布下，很显然，&lt;strong&gt;去看衰你所知道的任何一个企业，才是当“先知”的最佳策略。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;其实，这样的例子，在生活中随处可见。&lt;/p&gt;
&lt;p&gt;算命是另外一个很好的例子。&lt;/p&gt;
&lt;p&gt;大多数算命先生，肯定要说你将要遇到一点儿小挫折，小磨难，而绝对不会说你一帆风顺。&lt;/p&gt;
&lt;p&gt;除了因为人家要靠消灾解难赚钱以外，还有一个重要的原因：这么说，是近乎百分百不会错的。&lt;/p&gt;
&lt;p&gt;所谓人生不如意，十有八九。&lt;/p&gt;
&lt;p&gt;我们身边很多人，也会有意无意地运用这套逻辑。具体表现就是，不管你做什么，他们都不看好，觉得八成做不成。&lt;/p&gt;
&lt;p&gt;如果你真的没做成，他们会洋洋得意地表示，你看你看，我早就跟你说了吧，这事儿有问题的；&lt;/p&gt;
&lt;p&gt;但倘若你做成了，他们会开心地表示，之前只是善意地提醒，能成功，我也很开心啊。&lt;/p&gt;
&lt;p&gt;怎么都不得罪人。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;看衰一个企业同理，煞有介事地表现出对一个企业的担心，指出运营模式的问题，其实是十拿九稳的方式。&lt;/p&gt;
&lt;p&gt;事实上，在现实世界中，大多数人也是这么做的。&lt;/p&gt;
&lt;p&gt;苹果自打乔布斯时代，依靠 ipod, iphone 等产品一路逆袭，也一路伴随着众多质疑声。随着乔布斯“驾崩”，库克“上位”，苹果药丸的声音更是没有断过。&lt;/p&gt;
&lt;p&gt;苹果的市值，也伴随着这些质疑声，慢慢超越了谷歌脸书等巨头，甚至一度排名世界第一。&lt;/p&gt;
&lt;p&gt;尽管如此，如果大家去翻翻媒体报道，最多的声音依然还是苹果药丸。&lt;/p&gt;
&lt;p&gt;为什么？&lt;/p&gt;
&lt;p&gt;因为大家都知道，苹果早晚药丸。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在商业界，有一个共识，就是&lt;strong&gt;企业法人的寿命，是远远小于自然人的寿命的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;说白了，就是没有什么企业能活 100 岁，哪怕你是现在的巨头。看看雅虎，柯达，就明白了。&lt;/p&gt;
&lt;p&gt;如果觉得这些企业的例子离我们太远，那就看看黄太吉，乐视，暴风影音和 ofo 吧。去翻翻三五年前的新闻，感受一下那时候的媒体报道，然后，再看看今天。&lt;/p&gt;
&lt;p&gt;我在&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-04-18/"&gt;《从巴黎圣母院的大火，到消逝的IT巨头》&lt;/a&gt;一文中，引过 BBC 的数据。BBC 在 2012 年，曾发表过一篇振聋发聩的文章，叫《Can a company live forever?》（一家公司可能永远活着吗？）其中的统计数据表示，现如今，美国标普 500 指数的公司，平均寿命竟然只有 15 年。&lt;/p&gt;
&lt;p&gt;换句话说，15 年后，大部分现在耳熟能详的大企业，都会被新的公司替换掉。&lt;/p&gt;
&lt;p&gt;中国呢？我能查到的数据是，中小企业的平均寿命仅 2.9 年，中国集团企业的平均寿命仅 7-8 年。&lt;/p&gt;
&lt;p&gt;这个数据不一定准确，毕竟，我国在数据统计方面，还不够完善。但是，趋势是毋庸置疑的：大多数企业的寿命，其实是很短的。&lt;/p&gt;
&lt;p&gt;所以，大家经常能看到新闻，什么硅谷神童，七八岁的样子，收到了苹果谷歌微软的 Offer，让小朋友长大以后来工作。小朋友们笑着表示，不要不要不要，我长大以后要自己做企业。&lt;/p&gt;
&lt;p&gt;可不是嘛。先不说打工和创业的区别，关键是，等小朋友长大了，苹果谷歌微软，指不定什么样子了呢。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所以，在大多数情况下，大多数人其实是悲观的。&lt;/p&gt;
&lt;p&gt;用这样的视角看，罗振宇这个也看好，那个也看好，结果看好的都黄了，真的是“单纯得可爱”。&lt;/p&gt;
&lt;p&gt;之所以给“单纯得可爱”加引号，是因为，商业的世界里，难免有各种利益纠葛。到底怎么回事儿，里面的人可能都说不清，更不要提外面的人了。&lt;/p&gt;
&lt;p&gt;如果这里没有什么利益关系，&lt;strong&gt;我倒是真的很欣赏罗振宇这个“敢夸”的性格。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;但是现在媒体这么一闹，不知道罗振宇先生会不会不再这么“单纯”了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;至于“乌鸦嘴”，其实有很多文学作品和科学研究，都在为乌鸦正名。&lt;/p&gt;
&lt;p&gt;不好的事情发生了，却怪罪乌鸦，这实在不能称为理性。&lt;/p&gt;
&lt;p&gt;不过，并不是所有人都追求理性。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;值得一提的是，科学研究表明，乌鸦的智商，其实是极其高的。&lt;/p&gt;
&lt;p&gt;人类大脑，约占自身总体重的 1.5%，普通渡鸦则约为 1.3％，有一种短嘴鸦，大脑重量，竟能占总体重的 2.3％。&lt;/p&gt;
&lt;p&gt;但人们依然说乌鸦不吉利。&lt;/p&gt;
&lt;p&gt;毕竟，&lt;strong&gt;把问题归咎于一种长相丑陋，叫声难听的鸟，比实际去分析清楚问题的真正原因，要简单太多。&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-08-07/readme.md" rel="alternate"/></entry><entry><id>2019/2019-08-06/readme.md</id><title>2019-08-06 - 无题</title><updated>2019-08-06T00:00:00-07:00</updated><content>&lt;p&gt;&lt;img alt="love" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-08-06/love.png" /&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-08-06/readme.md" rel="alternate"/></entry><entry><id>2019/2019-07-31/readme.md</id><title>成功者的年龄</title><updated>2019-07-31T00:00:00-07:00</updated><content>&lt;h2&gt;成功者的年龄&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;老婆的老板，是一位在认知神经科学领域很牛的教授。一名 50 多岁的大叔，不仅在专业领域是佼佼者，为人还谦和有礼，没有一点儿老板的架子。总之，就是给他干活儿很舒服的那种。&lt;/p&gt;
&lt;p&gt;有一次，我和我老婆突然在路上聊到了这位老板的履历，倒推回去，我们惊讶地发现，这名大牛老板，竟然是在大概 45 岁的时候，才拿到了正教授的职称。&lt;/p&gt;
&lt;p&gt;为什么说是“惊讶”呢？因为，如果你在学术圈混，近乎每隔那么几个月，就会听到“某某大牛 30 多岁获得某某学校正教授职称”的新闻。给人的感觉就是，人家 30 多岁都当上正教授了，你要是 30 岁连副教授都不是，就别在学术圈儿混了。&lt;/p&gt;
&lt;p&gt;可事实却是，这样一位圈内知名的大牛，45岁才是正教授。这个事实引起了我的好奇：平均来讲，大学的正教授，都是多少岁拿到的呢？&lt;/p&gt;
&lt;p&gt;我 Google 了一下，结果是这样的。&lt;/p&gt;
&lt;p&gt;&lt;img alt="google" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-31/google.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;答案是 55 岁&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;换句话说，能在 45 岁拿到正教授的职称，已经比平均水平提前 10 年了。而且是在一流的学府。确实是大牛。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个月，哈佛商业评论的一篇文章引起了我的兴趣。这篇文章统计了一下成功的企业，创始人的平均年龄是多大。&lt;/p&gt;
&lt;p&gt;大家可以先猜猜，大概多少岁？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;答案是 45 岁。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;哈佛商业评论的这篇文章的标题就是&lt;a href="https://hbr.org/2018/07/research-the-average-age-of-a-successful-startup-founder-is-45?gig_events=socialize.login"&gt;《Research: The Average Age of a Successful Startup Founder Is 45》&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;如果你经常看到 20 多岁或者 30 多岁创业成功的案例，很遗憾，这只是媒体制造的幻觉。&lt;/p&gt;
&lt;p&gt;为什么媒体更愿意报道“年轻人”创业成功的案例？从道理上讲，是因为人们更愿意看到这样的案例。&lt;/p&gt;
&lt;p&gt;每年的苹果开发者大会，让人印象最深刻的，就是那些最年轻的开发者。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;比如 2016 年最年轻的苹果开发者 Anvitha Vijay，九岁。&lt;/p&gt;
&lt;p&gt;&lt;img alt="ios" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-31/ios.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;比如 2017 年最年轻的苹果开发者 Yuma Soerianto。&lt;/p&gt;
&lt;p&gt;&lt;img alt="ios2" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-31/ios2.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;这些都让人不禁怀疑，是不是现在 9，10 岁的小朋友，都是编程达人了？&lt;/p&gt;
&lt;p&gt;于是，我查了一下。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;全世界的移动开发者大概有 8700 万人。平均年龄，北美地区是 34 岁；欧洲是 32 岁；亚洲是 27 岁。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;说回《哈佛商业评论》的这篇文章。他们基于美国的数据，调查了一下，&lt;strong&gt;大多数企业初创的时候，创始人的年纪是多大？答案是 42 岁。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;但是，这些企业，很多只是很小的生意，比如一家洗衣店或者饭馆。这些生意背后的老板从来不会进入公众的视野，也不会被媒体报道。&lt;/p&gt;
&lt;p&gt;为此，他们又特意看了一下大众比较关注的“高科技”企业。他们定义“高科技”企业的标准是：看一家企业是否有专利；是否被风险投资；以及是否雇佣了大量科学、技术、工程、数学，等专业领域的人才。&lt;/p&gt;
&lt;p&gt;结果并没有改变，这些“高科技”企业的创始人年纪，&lt;strong&gt;平均也是 40 出头。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;大家注意，在上面的“高科技”定义中，并没有特指软件行业。实际上，如果只看软件行业，创始人的平均年龄是 40 岁，但是看其他领域的高科技行业，比如生物医疗行业，&lt;strong&gt;创始人的平均年龄骤升至 47 岁。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当然了，这样去看所有的企业，大家觉得不过瘾。毕竟，大家只对那些超级成功的企业感兴趣。于是，这个团队抽出了所有这些“高科技”企业中，5 年时间里增长最快的那千分之一的企业，看他们的创始人平均年龄。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;答案就是这篇文章标题声称的：45 岁。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果考虑到成功率这个概念，就更夸张了。近乎每个存活的企业，背后都有成百上千家失败的企业作陪衬。如果考虑成功的概率，这个团队的数据分析结果表示，50 岁以后，创业成功的概率才是最大的。具体见下图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="prob" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-31/prob.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;可能还会有同学说，不对啊。好像乔布斯 25 岁就创建了苹果公司？&lt;/p&gt;
&lt;p&gt;但是，大家忽视了，苹果公司至今看家的产品 —— iPhone，首次发布会，是在乔布斯 52 岁的时候。&lt;/p&gt;
&lt;p&gt;同样的道理，这篇文章认为，&lt;strong&gt;那些创始人年龄很小的企业，真正高速发展，成为足以改变世界的巨头的时候，大多都是在创始人步入中年以后。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;说回中国。就在上周，备受关注的科创板在上海正式开市。首批 25 家公司在上交所挂牌上市。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这 25 家企业的创始人，平均年龄是多大呢？答案是：52 岁。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;其中40 后，50 后，60后，70后，有 24 位，占 96% 之多。80 后只有孤零零的 1 位。90 后？抱歉，没有。&lt;/p&gt;
&lt;p&gt;你没有看错，还有 40 后，50 后。其中，40后，也就是大概 75 岁了，有 1 位；50 后，也就是大概 65 岁了，有 3 位。&lt;/p&gt;
&lt;p&gt;这位 40 后的创业者，叫&lt;strong&gt;尹志尧&lt;/strong&gt;，他先后获得中科大物理系学士的学位，北大化学系硕士学位，之后赴美留学，获得加利福尼亚大学洛杉矶分校物理化学博士学位。此后 20 年，一直在硅谷工作。&lt;/p&gt;
&lt;p&gt;2004 年，60 岁的尹志尧回国创业，此时，他已经手握近 300 项国际专利。&lt;/p&gt;
&lt;p&gt;2019 年，又是 15 年以后，这位大牛的企业成功在科创板上市。&lt;/p&gt;
&lt;p&gt;&lt;img alt="yin" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-31/yin.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;这样一位大牛，创建一家企业，在改革东风的吹拂下，尚需要 15 年的时间，还只是在科创板上市。我不明白为什么很多人会觉得， 20 来岁的小年轻，可以用 3 年的时间，做成改变世界的大企业。&lt;/p&gt;
&lt;p&gt;反正，我看到了凡客诚品，ofo，和最近网上一直讨论的暴风影音。&lt;/p&gt;
&lt;p&gt;另外，大家可能已经感受到了，尹志尧是一名名副其实的学霸。值得一提的是，科创板的大多数创始人都是学霸。据统计，这 25 人中，有 11 人拥有博士学历，有 8 人拥有硕士学历。这还是在那个年代。&lt;/p&gt;
&lt;p&gt;但是，就如同媒体喜欢宣传“低龄”创始人一样，媒体也喜欢宣传“没学历的”创始人。搞得大家都觉得读书无用。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;有意思的是，如果我们去看风投愿意投资的对象，很明显的，风投更愿意投给年轻人。&lt;/p&gt;
&lt;p&gt;为什么？&lt;/p&gt;
&lt;p&gt;《哈佛商业评论》给出了两个解释。&lt;/p&gt;
&lt;p&gt;第一个解释，很简单。风投获取信息的来源之一，也是大众媒体。所以，风投也被媒体带歪了，误以为年轻人的成功概率更高。&lt;/p&gt;
&lt;p&gt;但是，一个正儿八经的投资公司，有那么多分析师和内部消息，真金白银的把钱投下去，肯定是经过深思熟虑的。&lt;/p&gt;
&lt;p&gt;所以，或许，第二个解释更靠谱。&lt;/p&gt;
&lt;p&gt;那就是，虽然年轻人成功率低，但是，年轻人经验少，人脉少，通常财务状况也更紧迫，或者更急需证明自己。在这样的情况下，风投更容易以更低的价格介入，进而，让自己投资的收益更高。&lt;/p&gt;
&lt;p&gt;换句话说，&lt;strong&gt;风投不是选择成功率更高的企业，而是选择收益率最大的企业，进行投资。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;但是，人到中年，经验足够丰富了，接触的人和事更多，思考也更加成熟，对投资的看法就会产生巨大的不同。毕竟，我在北大商学院，还看到很多老板，坚持不融资，不上市。按照他们的话说，我的企业利润这么高，效益这么好，为什么非要拿别人的钱？为什么非要让自己变成给投资人打工？&lt;/p&gt;
&lt;p&gt;从这个视角看，&lt;strong&gt;投资人青睐年轻的创始人，很大一部分原因，是年轻创始人更容易被欺负。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这多多少少有些像企业更喜欢年轻的职员。因为他们要的工资更少，加班也没意见，天天 996，也不见怎么声张。搞不好还在网上怼那些对 996 怨声载道的中年人：不愿意 996，那就辞职呗。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;很多同学问我，要 30 岁了，怎么办？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;其实，我也不知道怎么办。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;但我就是觉得，什么时候开始都不晚。哪怕自己 60 岁，80 岁。&lt;/p&gt;
&lt;p&gt;很多人告诉我们，高考以后，上了大学，就轻松了。&lt;/p&gt;
&lt;p&gt;但相信所有大学生都明白，上大学根本不轻松。高考根本不是结束，只是开始。&lt;/p&gt;
&lt;p&gt;很多人告诉我们，大学毕业，找个好工作，就轻松了。&lt;/p&gt;
&lt;p&gt;但相信所有职场人都理解，上班根本不轻松。找到工作根本不是结束，只是开始。&lt;/p&gt;
&lt;p&gt;所以，30 岁，35 岁，40 岁，还没车子，房子，票子，工作还不稳定，事业也还不成功。&lt;/p&gt;
&lt;p&gt;怎么办？怎么办？怎么办？&lt;/p&gt;
&lt;p&gt;其实，回头看，对于大多数所谓的成功者而言， 30 岁，35 岁，40 岁，只是开始。&lt;/p&gt;
&lt;p&gt;不要着急，路，是一步一步走出来的。&lt;/p&gt;
&lt;p&gt;没有人是例外。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;大家加油！&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-07-31/readme.md" rel="alternate"/></entry><entry><id>2019/2019-07-22/readme.md</id><title>关于图论算法的杂七杂八</title><updated>2019-07-22T00:00:00-07:00</updated><content>&lt;h2&gt;关于图论算法的杂七杂八&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Google 有一道很经典的面试题。大意就是，在一个二维平面上，有一些自行车，用字母 B 表示（Bike）；还有一些人，用字母 P 表示（Person）。比如下图，有两个人，四辆自行车。其中*代表什么都没有。&lt;/p&gt;
&lt;p&gt;&lt;img alt="graph" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-22/graph.png" /&gt;&lt;/p&gt;
&lt;p&gt;现在，要给每个人都分配一辆自行车，并且要求所有人到分配的自行车的距离总和最小。求分配方案。&lt;/p&gt;
&lt;p&gt;距离的定义是曼哈顿距离。&lt;/p&gt;
&lt;p&gt;原始的问题有一个条件：假设所有人到所有自行车的距离都不相同，该怎么处理？&lt;/p&gt;
&lt;p&gt;这是一个初等图论问题。用 BFS 就能解决。&lt;/p&gt;
&lt;p&gt;但是，这个条件稍微变一下，这个问题的难度陡然增加：如果有可能有多个人，到多辆自行车，距离相等，怎么办？&lt;/p&gt;
&lt;p&gt;在这种条件下，一辆自行车可能离多个人的距离都是最近的，且距离相等，这辆自行车该分配给谁呢？随机分配是不行的，因为全局可能只有一个最优解。&lt;/p&gt;
&lt;p&gt;但其实，这也是一个经典的图论算法问题。带权图的最小匹配。&lt;/p&gt;
&lt;p&gt;当然，这个问题其实还有一个更简单的版本，就是不要求一人一车的匹配关系。可以理解成把题目中的自行车换成小卖部。要求每个人找到离自己最近的小卖部，大热天儿的，买根冰棍吃。多个人可以到同一个小卖部。&lt;/p&gt;
&lt;p&gt;这基本上就是 Leetcode 上的 286 号问题了。有兴趣的同学可以找来看一看。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;去年，有一个同学，给我在慕课网上的课程《玩转数据结构》打了一个差评。原因是：课程不包含图论算法。&lt;/p&gt;
&lt;p&gt;我当时很不爽。虽然我知道，近乎在所有的大学教育体系中，图论都是和数据结构一起教的。但是，在我的观念中，图论算法和其他数据结构的知识有很大的不同。再加上一门课程的时间有限，所以我将图论算法和其他数据结构分开了。这一点，在我的课程导论中，特意强调了 n 遍。&lt;/p&gt;
&lt;p&gt;我们谈起一般的数据结构，比如数组，链表，队列，栈，二分搜索树，红黑树，哈希表，等等等等，这些数据结构主要的作用是内存数据存储。我们关注如何把数据放进这些结构中，如何取出来，如何删除，如何更新。说白了，就是在内存中做CRUD。不同的数据结构，有不同的优势，适用于不同的场景。&lt;/p&gt;
&lt;p&gt;因此，在一般语言的标准库中，都有一个概念，叫容器类。不同的容器类，有着自己的优缺点和适用场景，其实本质就对应了不同的数据结构底层实现。我的《玩转数据结构》课程，基本上就是在和主流的容器类设计对标，讲解容器类的底层原理，并一一进行了代码实现。学习完《玩转数据结构》，大家应该能实现出一个属于自己的小型容器类库。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;但是，图论不同。大家应该可以观察到，近乎没有一个语言的标准库中包含“图”这种数据结构。&lt;/p&gt;
&lt;p&gt;为什么？因为在通常情况下，我们不需要使用“图”这种数据结构做数据存储。如果我们把数据组织成为“图”的形式，一定是因为要计算一些隐藏在这些数据关系中的属性。&lt;/p&gt;
&lt;p&gt;比如，我们将城市交通系统组织成图的形式，绝对不是为了存储这些城市的信息，而是为了能方便的计算出：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;从某个城市，到另外一个城市，最短时间应该怎么走；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;路费最小应该怎么走；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;是不是有些城市和另外一些城市没有联通；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;是不是有一些路或者城市，担任着重要的交通枢纽作用，负荷过大；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果新建一条公路，在哪两个城市之间修建最好；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;等等等等。&lt;/p&gt;
&lt;p&gt;对于这些问题的求解，都要使用图论算法来解决。&lt;/p&gt;
&lt;p&gt;但是，解决不同的问题，无论是从图的存储角度，还是算法的细节，都有着细微的区别和变化，这使得对于一般语言来说，创建一个图的标准库，太沉了。&lt;/p&gt;
&lt;p&gt;正因为如此，我决定把图论从数据结构中拆出来。&lt;/p&gt;
&lt;p&gt;虽然，通过学习我的图论课程，也能够实现一个小型的图论算法库，但是，我更希望同学们能够体会使用图论模型解决问题的灵活性，掌握使用图论对问题建模的能力。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;说到使用图论对问题建模，我想到了我在公众号写过一篇文章：&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-04-11/"&gt;《什么叫学会了？自己到底有没有学会？知识掌握的七个境界》&lt;/a&gt;，其中在“灵活应用的境界”中，提及了这样两道经典面试问题。&lt;/p&gt;
&lt;p&gt;过河问题：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;农夫需要把狼、羊、菜和自己运到河对岸去，只有农夫能够划船，而且船比较小。除农夫之外每次只能运一种东西。还有一个棘手问题，就是如果没有农夫看着，羊会偷吃菜，狼会吃羊。请考虑一种方法，让农夫能够安全地安排这些东西和他自己过河&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;装水问题：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;有两个水桶，一个装5升，一个装 3 升。怎么利用水桶，得到 4 升水？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这两个问题都可以使用图论的方法解决。&lt;/p&gt;
&lt;p&gt;我的老婆看了这篇文章，马上问我怎么求解。&lt;/p&gt;
&lt;p&gt;你看，我老婆对图论的掌握，没有达到“灵活应用的境界”。&lt;/p&gt;
&lt;p&gt;当然了，人家本身也不是搞计算机的，没必要对图论的掌握达到“灵活应用的境界”。人家是搞认知神经科学的。&lt;/p&gt;
&lt;p&gt;但是，有意思的是，其实在认知神经科学领域，大量使用图论模型。认知神经科学，主要是研究人脑的运作机制。其中，一个主流的方式，就是将人脑不同认知区域看作是图的顶点，认知区域之间的信号传输看做是图的边。&lt;/p&gt;
&lt;p&gt;所以，很多次，我和老婆交流认知科学领域的问题，最后竟然发现，其实，我们是在讨论一个图论算法。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;就在上周，七月老师和我交流了一个多小时。我们讨论，对于电商业务场景中的 SKU 查找问题，有没有效率更高的算法。&lt;/p&gt;
&lt;p&gt;由于我平时很少接触这类业务场景的问题，所以，搞明白这个问题的本质，用了半个小时。但是，当我搞明白这个问题以后，竟然发现也能抽象成为一个图论问题。&lt;/p&gt;
&lt;p&gt;我正在思考能否把这个问题再做一下抽象，有时间单独写文描述一下。&lt;/p&gt;
&lt;p&gt;不过，这样的业务底层算法问题，通常的业务开发者应该不需要管。我一下子就想到了图数据库这个概念。&lt;/p&gt;
&lt;p&gt;这个名词，连同大名鼎鼎的 NoSQL，我在各类科技新闻的标题上看到无数遍了，但因为犯懒，一直没有深入去理解到底是怎么回事儿，更别提上手实践了。&lt;/p&gt;
&lt;p&gt;借着这个机会，我简单学习了一下图数据库的思维和应用场景，果然，很多业务问题，可以直接靠图数据库，得到更好的解决。而图数据库的底层实现，恰恰就是图论算法。&lt;/p&gt;
&lt;p&gt;上一次我关注数据库的最新发展，学习的还是动态数据库的概念。&lt;/p&gt;
&lt;p&gt;每每看到数据库的发展，我都会感慨，这样一个“古老”的领域，仍然在 21 世纪不断推陈出新，各种新概念层出不穷，可见计算机科学领域依然年轻蓬勃的生命力。&lt;/p&gt;
&lt;p&gt;而更关键的是，&lt;strong&gt;这些最新的发展，骨子里都离不开那些“古老”而经典的算法和数据结构。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我的研究生毕业设计论文，是做动作捕捉和建模。简单地说，就是在身上放传感器，做各种姿态的运动。计算机获取传感器的信号，然后在虚拟的世界中恢复真实世界中人的动作。&lt;/p&gt;
&lt;p&gt;大概就是这么个意思：&lt;/p&gt;
&lt;p&gt;&lt;img alt="motion" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-22/motion.png" /&gt;&lt;/p&gt;
&lt;p&gt;对于这个任务，如果传感器足够多，就能恢复的很好。但是，传感器太多，就会很麻烦，不方便。&lt;/p&gt;
&lt;p&gt;能不能使用更少的传感器完成这个任务，是我的毕业论文核心。&lt;/p&gt;
&lt;p&gt;使用更少的传感器，就需要在算法中，添加一定的预测能力。比如通常需要 32 个传感器，现在我只用 4 个传感器，那就需要用这 4 个传感器的信息，想办法预测出剩下的 28 个传感器的信息。&lt;/p&gt;
&lt;p&gt;在我读研的时候（10年前），机器学习还不火。甚至在我的印象中，我还没有听说过“机器学习”这个名词，更别提深度学习了。现在很多机器学习算法，那时我都是在一门叫做“模式识别”的课程中接触的。&lt;/p&gt;
&lt;p&gt;对于我要解决的这个运动捕捉问题，由于还牵扯时间序列的问题，最后，我选择基于大名鼎鼎的隐马尔科夫的模型（HMM）进行实现和改进。相信很多同学都听说过这个模型，在语音识别等领域，有着重要的应用。&lt;/p&gt;
&lt;p&gt;现在的知识体系，通常把隐马尔科夫模型，归入一类叫做&lt;strong&gt;概率图模型&lt;/strong&gt;的范畴中。在这个范畴中，除了隐马尔科夫模型，还有诸如贝叶斯网络，马尔科夫随机场，条件随机场等模型。很多深入一些的人工智能课程，会专门介绍概率图模型。&lt;/p&gt;
&lt;p&gt;简单来说，概率图模型就是结合了概率论和图论的模型，用来解决一些预测问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;又是图论。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;大名鼎鼎的迪杰斯特拉，英文名是 Dijkstra，相信大家都知道。因为有一个以他命名的非常著名的算法：有权图的单源最短路径算法，又叫 Dijkstra 算法。&lt;/p&gt;
&lt;p&gt;通常计算机专业的学生，会在至少三门不同的课程中学习这个算法，分别是数据结构，离散数学，和计算机网络。&lt;/p&gt;
&lt;p&gt;但是，如果你翻开迪杰斯特拉的履历，就会发现，迪杰斯特拉的很多成就，都集中在在编译原理领域。&lt;/p&gt;
&lt;p&gt;为什么？因为编译原理是图论算法应用的重灾区。随手拿起一个编译原理领域的问题，基本都能被抽象成一个图论问题。&lt;/p&gt;
&lt;p&gt;最典型的就是内存管理，我随手搜了一个网上讲解 JVM 垃圾回收机制的示意图，大家可以感受一下。&lt;/p&gt;
&lt;p&gt;&lt;img alt="gc" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-22/gc.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;至于计算机网络，就不用说了，天然就是一个图模型，每一个物理设备都是一个节点。设备间的通信是边。&lt;/p&gt;
&lt;p&gt;&lt;img alt="networks" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-22/networks.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;操作系统亦是如此。我在网上找了一个讲解任务调度算法的文章，其中的配图如下：&lt;/p&gt;
&lt;p&gt;&lt;img alt="schedule" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-22/schedule.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;当然，我的课程只是图论算法基础，不会涉及这些内容。但我希望通过这些例子告诉同学们，我们学习这些基础的算法和数据结构有什么用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;它们是组建更高级逻辑的基石，是学习计算机科学领域更高级内容的前提。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;肯定还是会有同学跟我讲，“我觉得我在工作中，没用到过这些算法啊？”&lt;/p&gt;
&lt;p&gt;对此，我不想反驳，我在我的公众号文章 &lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-03-18/"&gt;《学算法有什么用，没用》&lt;/a&gt; 中，已经说得很清楚了。&lt;/p&gt;
&lt;p&gt;再次强调一遍文中的观点，&lt;strong&gt;这个时代，我不认为每一名程序员都需要极佳的算法基础，才能做出成绩。&lt;/strong&gt;计算机已经是一个极其广阔的专业领域了。&lt;/p&gt;
&lt;p&gt;但是，如果你对图论算法感兴趣，或者觉得有用，或者正在准备像头条这样的偏重算法考察的大厂面试。&lt;/p&gt;
&lt;p&gt;或许，我在慕课网上的新课——&lt;strong&gt;《玩转图论算法》&lt;/strong&gt;，是一个好的开始。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;对了，现在还有优惠，便宜 50 块钱。&lt;/p&gt;
&lt;p&gt;新课上线，还有更新期，请大家谅解。&lt;/p&gt;
&lt;p&gt;二维码如下：&lt;/p&gt;
&lt;p&gt;&lt;img alt="ad" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-22/ad.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;课程涉及的基本内容，可以在课程宣传页，点击“章节介绍”看到。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-07-22/readme.md" rel="alternate"/></entry><entry><id>2019/2019-07-20/readme.md</id><title>吴军说的基因论到底有没有道理？</title><updated>2019-07-20T00:00:00-07:00</updated><content>&lt;h2&gt;吴军说的基因论到底有没有道理？&lt;/h2&gt;
&lt;p&gt;最近，吴军接受《头条有约》的采访，被喷了。被喷的原因有很多，毕竟，整个访谈的信息量还是很大的。其中，有一条，就是关于“企业基因论”。按照吴军的说法，腾讯的 toB 业务没有发展起来，是因为腾讯没有做 toB 业务的基因。&lt;/p&gt;
&lt;p&gt;这说法，和吴军 2012 年点评腾讯一模一样，不过彼时，吴军是向腾讯的搜索业务开炮。&lt;/p&gt;
&lt;p&gt;2010 年 4 月，吴军离开 Google，担任腾讯主管搜索业务的副总裁。结果大家也看到了，腾讯在搜索领域并没有什么成绩。吴军两年后一走了之，又回到了 Google。2012 年  8 月，重回谷歌的吴军在接受媒体采访时说：腾讯做不起来搜索，是因为腾讯没有搜索基因。&lt;/p&gt;
&lt;p&gt;这确实有点儿甩锅的嫌疑。更何况，之后，吴军无论是出书还是卖课，都不忘挂上自己在腾讯做过高管的头衔，但其实并没有大的成绩。这么说老东家，于情，我认为是不合适的。&lt;/p&gt;
&lt;p&gt;但是，于理，吴军的“企业基因论”到底有没有道理？&lt;/p&gt;
&lt;p&gt;实际上，吴军一直是“企业基因论”的推崇者。比如，对于百度在移动领域连连失利，吴军曾经在采访中一言以蔽之：百度没有移动互联网的基因。&lt;/p&gt;
&lt;p&gt;在《浪潮之巅》一书中，吴军也一直强调这一点。&lt;/p&gt;
&lt;p&gt;比如说到 IBM，吴军认为，IBM 的基因就决定了它不可能领导以个人用户为核心的 PC 产业；&lt;/p&gt;
&lt;p&gt;再比如，AMD 的市场策略从来不是创新，而是不断推出与 Intel 兼容的，但是更便宜的替代品，为什么？这是 AMD 的基因决定的；&lt;/p&gt;
&lt;p&gt;至于桌面时代的王者——微软，在互联网时代接连失利，也是因为微软的基因不适应互联网时代...&lt;/p&gt;
&lt;p&gt;不仅仅是贬公司，吴军夸一个公司的思路，基本上也是基因论。&lt;/p&gt;
&lt;p&gt;比如说思科经常收购自己的员工辞职出去创业成立的小公司，让自己基本垄断了互联网路由器和其他重要设备的技术，这种策略的实施，是思科的基因使然；&lt;/p&gt;
&lt;p&gt;比如，说苹果能够从危机时代，顺利通过 iPod, iPhone 等产品，过渡适应新时代，是因为苹果从来都有创新基因；&lt;/p&gt;
&lt;p&gt;再比如说，摩托罗拉的产品，稳定性和鲁棒性都很好，从某种程度讲，是摩托罗拉的基因...&lt;/p&gt;
&lt;p&gt;上面的例子，全部选自吴军的《浪潮之巅》，近乎是原文。《浪潮之巅》整本书，都在强调“企业基因论”。其实，吴军对此并不避讳，因为他在微博中就这么说过：&lt;/p&gt;
&lt;p&gt;&lt;img alt="weibo" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-20/weibo.jpg" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我的每一本书都提出一些口号式的观点...《浪潮之巅》提出的就是公司的基因决定论...&lt;/p&gt;
&lt;p&gt;微博：@吴军博士&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;从我的角度看，吴军的这种所谓的“企业基因论”，和我在 &lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-04-23/"&gt;《还有没有机会逆袭？谈成功者的困境。》&lt;/a&gt; 一文中的观点是一回事儿。&lt;/p&gt;
&lt;p&gt;说白了，就是一个企业因为某种模式成功了，就会守住这种模式。这种模式带给了这个企业成功，这个企业就不会轻易放弃这种模式了，甚至在很多新的业务场景下，依然坚持这种模式，哪怕有所谓的创新，也多多少少都会带有这种模式的影子。&lt;/p&gt;
&lt;p&gt;但是，没有任何一种模式是万金油，套用同样的模式必然会经历失败。&lt;/p&gt;
&lt;p&gt;结果就是：你在那件事儿上成功了，在这件事儿上失败了，就是没有做这件事儿的基因，只有做那件事儿的基因。&lt;/p&gt;
&lt;p&gt;有毛病吗？没毛病。但就是有点儿欠水平。&lt;/p&gt;
&lt;p&gt;因为，按照这个逻辑，可以无差别地解释任何企业失败的原因。这样做商业评论，也太简单了一点。毕竟，无论是对于当事人，还是旁观者，更想知道的是：自己下一次要怎样能做得更好；是否有一定的方法论，能够做到比现在更好一点，甚至取得成功。&lt;/p&gt;
&lt;p&gt;这就好比：我代码写得还行，但文章写得不好，你就说我没有写文章的基因。我肯定不服。因为我明白，我代码写得还行，是因为从小就写代码，坚持写了十多年了；你要让我也从小写文章，坚持写十多年，搞不好我文章写的比代码还好。&lt;/p&gt;
&lt;p&gt;对于我来说，我更想知道，我该怎样更加系统地训练，让我的文章能写得更好。&lt;/p&gt;
&lt;p&gt;“没有基因”，是毫无操作性的评论。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;我在 &lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-05-06/"&gt;《正式邀请你，和我一起，用技术人的眼光，探索世界》&lt;/a&gt; 一文中曾说，我在北京做的时间最长的创业项目，是和北大光华管理学院合作的。近乎整整五年的周末，我都是在光华管理学院的课堂上度过的。在这些课堂上，分析一个企业的成败是家常便饭。&lt;/p&gt;
&lt;p&gt;除了常规技术性的分析（股权分配，组织架构，商业模式，等等等等），实战派的老师通常很强调一点：&lt;strong&gt;一个商业评论是否有操作性。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;没有操作性的评论，对于企业主来说，没有意义。&lt;/strong&gt;说 Google 平庸很简单，不需要吴军出马，很多 10 岁以下的小朋友现在都这么说了。但关键是，Google 怎么平庸了？要怎么做才能摆脱平庸？这样的评论才能看出水平。&lt;/p&gt;
&lt;p&gt;对了，也不要说什么 Google 要持续创新；要抓住痛点；要引领潮流；，要关注好隐私问题；在个人用户和企业用户之间掌握平衡；在免费项目和收费项目之间掌握平衡...... 这些听上去很对的话，&lt;strong&gt;都是废话&lt;/strong&gt;，一个小学生都能说。&lt;/p&gt;
&lt;p&gt;实际上，&lt;strong&gt;商业评论是非常专业的事情。如果上升到咨询的角度，就更专业了。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;虽说评论一个冰箱的制冷效果，不需要你也能制冷；但是如果你了解制冷的原理，明白一台冰箱制冷效果不好的原因，甚至能够提出清晰地技术方案，让一台冰箱的制冷效果更好，最大化，甚至超越所有其他冰箱。显然，&lt;strong&gt;这才是你有价值的体现。&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;最后，说一个曾经给我印象最深的案例。&lt;/p&gt;
&lt;p&gt;美国作为一个“车轮上的国家”，汽车产业一直很发达。大名鼎鼎的福特汽车众所周知，加上通用和克莱斯勒，这些车企塑造了美国上世纪汽车产业的辉煌。而底特律，则是那个时代的“硅谷”。&lt;/p&gt;
&lt;p&gt;但是上世纪六七十年代，日本车企大举进入美国市场，竟然逐渐蚕食掉了美国汽车品牌的市场份额。&lt;/p&gt;
&lt;p&gt;为什么？质美价廉。&lt;/p&gt;
&lt;p&gt;但是，要知道，当时的日本，还是战败国的身份，经济体量也和美国相差甚远。日本怎么做到这一点的？&lt;/p&gt;
&lt;p&gt;这里面，原因有很多，大家如果随便在网上搜一搜，就能搜到这个案例，基本上是任何一个 MBA 学生必学的经典案例。&lt;/p&gt;
&lt;p&gt;这些原因中，有一个原因，我特别感兴趣，而且是美国人怎么都学不来的。&lt;/p&gt;
&lt;p&gt;以自由民主为傲的美国人，平时自由散漫惯了，管理成本很高，再加上很多人有吸毒的恶习，经常旷工，根本无法实施精细化管理；相较而言，日本人以集体主义精神为主，更加重视自己的工作，也更加服从上级管理，勤勉，肯吃苦，这就使得丰田等车企的效率奇高。&lt;/p&gt;
&lt;p&gt;与此同时，美国工会制度普遍完善，使得美国的汽车工人的权益被最大化。从某种程度，这伤害了美国汽车品牌的自身竞争力。&lt;/p&gt;
&lt;p&gt;据统计，美国车企用于支付员工养老金和医保的成本，平均摊到每一辆汽车上，让每辆车的成本增加了 1400 美元，而公会不发达的日本，这项支出，平均摊到每辆汽车上，仅有 215 美元。&lt;/p&gt;
&lt;p&gt;至于员工的带薪休假等成本，据计算，让美国车企的每辆车贵了 630 美元，而这些，在当时的日本公司，统统不存在。&lt;/p&gt;
&lt;p&gt;这样算下来，同等性能的汽车，日本车比美国车便宜 2000 美元，大概占当时汽车售价的 10%。&lt;/p&gt;
&lt;p&gt;如样明显的成本优势，日本汽车蚕食美国汽车市场，简直是理所当然。&lt;/p&gt;
&lt;p&gt;美国汽车改得了吗？改不了。&lt;/p&gt;
&lt;p&gt;为什么？&lt;/p&gt;
&lt;p&gt;吴军说了，基因使然。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;2019.6.20 &lt;/p&gt;
&lt;p&gt;于 Santa Clara&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-07-20/readme.md" rel="alternate"/></entry><entry><id>2019/2019-07-11/readme.md</id><title>不小心，较真儿了：高德纳和特朗普</title><updated>2019-07-11T00:00:00-07:00</updated><content>&lt;h2&gt;不小心，较真儿了：高德纳和特朗普&lt;/h2&gt;
&lt;p&gt;首先，和大家致歉。&lt;/p&gt;
&lt;p&gt;在这一周更新的文章 &lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-07-09/"&gt;《神一样的随机算法》&lt;/a&gt; 中，我介绍了大名鼎鼎的 Knuth 洗牌算法。顺便简单地介绍了一下大神 Knuth。&lt;/p&gt;
&lt;p&gt;介绍的时候，煞有介事的表示：中文名，&lt;strong&gt;高纳德&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;但这是错的，马上有同学表示，Knuth 老爷子的中文名是&lt;strong&gt;高德纳&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;我到维基百科一查，还真是。&lt;/p&gt;
&lt;p&gt;&lt;img alt="knuth" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-11/knuth.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;由于 Donald 的发音，很容易联想到：其实“高德纳”是一个错误的翻译，但将错就错，约定成俗了。&lt;/p&gt;
&lt;p&gt;所以，我大颜不惭地发表了如下言论：&lt;/p&gt;
&lt;p&gt;&lt;img alt="wechat1" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-11/wechat1.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;马上有同学指出：其实在 TAOCP 的中文版的序言中，就曾经介绍过“高德纳”这个中文名字的来源。&lt;/p&gt;
&lt;p&gt;额？&lt;/p&gt;
&lt;p&gt;如果会正儿八经地介绍了名字的来源，那这个名字肯定就不会是错误的了，一定有来头。&lt;/p&gt;
&lt;p&gt;但是我手头没有 TAOCP 的中文版，当年只是英文版翻了半本（其实不到）而已。。。&lt;/p&gt;
&lt;p&gt;赶紧去网上查，最后终于搞清楚了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;Donald Ervin Knuth 的中文名为什么是高德纳？&lt;/p&gt;
&lt;p&gt;这是&lt;strong&gt;姚期智的夫人储枫，在高德纳 70 年代访问中国的时候，给他起的中文名字。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;其中“德纳”部分是 Donald 的音译。非常符合英文发音，尾巴的 d 被轻音吞掉。&lt;/p&gt;
&lt;p&gt;第一个字“高”则是姓氏，据说也是因为 Knuth 这个姓氏起的。我怀疑是因为南方比如香港的发音，K 的发音就是 G。比如香港的“太古”，对应的英文是“TAIKOO”&lt;/p&gt;
&lt;p&gt;所以，“高德纳”是一个地道的中文名，“高”是姓，“德纳”是名。&lt;/p&gt;
&lt;p&gt;顺便一提：&lt;/p&gt;
&lt;p&gt;姚期智相信大家都了解，目前中国唯一获得过图灵奖的华人。清华大学大名鼎鼎的姚班，大家也应该是如雷贯耳。如果没听说过也没有关系，反正和我等凡人根本不在一个次元。&lt;/p&gt;
&lt;p&gt;但储枫大家可能不太了解了。也是一个很牛的理论计算机学家，香港城市大学计算机科学系的系主任。现在也是清华大学交叉信息研究院（姚期智任院长）的客座教授，讲计算几何与组合算法。&lt;/p&gt;
&lt;p&gt;网上的八卦传闻，姚期智当年是搞物理的，是在储枫美女的建议下，经过冷静思考，转向了当时方兴未艾的计算机科学领域。&lt;/p&gt;
&lt;p&gt;&lt;img alt="chufeng" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-11/chufeng.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;这么一位知识界的大牛，华人唯一图灵奖背后的女人，网上竟然找不到一张她的高清照片。但我一定要放一张！&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;说到 Donald 这个名字，马上就想到现在的美国总统 Trump，毕竟，他的全名就是 Donald John Trump。&lt;/p&gt;
&lt;p&gt;马上就有同学问，现在的美国总统 Trump，为什么有一个中文翻译是特朗普？毕竟，从音译的角度，川普更准确。&lt;/p&gt;
&lt;p&gt;对于这个问题，我的第一反应是日本。&lt;/p&gt;
&lt;p&gt;可能很多同学知道，日本人的英语发音，会把 r 的音发成 l。比如 right，日本人可能会读成 light。&lt;/p&gt;
&lt;p&gt;所以，或许是中国某些地方方言也有这样的发音规则？不过由于我从小是在北京长大，对中国各地的方言口音确实了解得不多。&lt;/p&gt;
&lt;p&gt;但是，这回我不敢马虎了，赶紧在网上查了查，别说，这一查，还真有料。&lt;/p&gt;
&lt;p&gt;简单地说，新华社官方管美国总统叫“特朗普”，而不是“川普”。也就是“特朗普”这个翻译，和方言口音没什么关系。是中国官方钦定的。&lt;/p&gt;
&lt;p&gt;在新华社的公众号下搜索“特朗普”，全是他的新闻。&lt;/p&gt;
&lt;p&gt;&lt;img alt="trump1" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-11/trump1.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;但是搜索“川普”，却啥都没有。除了！&lt;/p&gt;
&lt;p&gt;&lt;img alt="trump2" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-11/trump2.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;除了第一篇文章，原来新华社专门发文解释过这件事情：为啥 Trump 翻译成了“特朗普”而非“川普”？&lt;/p&gt;
&lt;p&gt;想阅读原文的同学直接点击这里：&lt;a href="https://mp.weixin.qq.com/s?__biz=MzA4NDI3NjcyNA==&amp;amp;mid=2649342577&amp;amp;idx=2&amp;amp;sn=38bd5de614fc04329907763c40dd1d71&amp;amp;chksm=87f4c6eab0834ffc20e170745e123bbc7e26e3ede92a20a81cc1235d7b7aacc2c06d9fa4b78c&amp;amp;mpshare=1&amp;amp;scene=1&amp;amp;srcid=0711V9OG05reUmAX98yhLtMP&amp;amp;pass_ticket=D2oQgEogpFzWURFslsWalr1CBZYs188ZC9%2BITkGjXf1N1p8EmAdPhFLb7dcrNAaG#rd"&gt;为啥 Trump 翻译成了“特朗普”而非“川普”？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;简单来说，新华社给出的解释就是，根据国家权威的《英语姓名译名手册》和《世界人名翻译大辞典》的规定，Trump 就应该翻译成“特朗普”。后面所有的文字解释，洋洋洒洒说了一堆，中心思想只有一个：这就是约定俗成的，官方认可，统一使用。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;但是&lt;strong&gt;这不叫原因，这叫事实。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们肯定还能往下追问：国家权威的《英语姓名译名手册》和《世界人名翻译大辞典》为什么规定，Trump 就应该翻译成特朗普，而不是川普？&lt;/p&gt;
&lt;p&gt;上面的新华社文章说：无从考证。&lt;/p&gt;
&lt;p&gt;&lt;img alt="xinhuashe" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-11/xinhuashe.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;但是我费了点儿功夫，考证出了一个我觉得可信的原因：&lt;/p&gt;
&lt;p&gt;原来 Trump 这个词，追根溯源，&lt;strong&gt;来自德语&lt;/strong&gt;。其实大量英语单词和德语有着千丝万缕的联系，毕竟都是欧洲语系，溯源的话，二者都来自原日耳曼语。日耳曼民族神圣罗马帝国毕竟也有近千年的辉煌。&lt;/p&gt;
&lt;p&gt;而在德语中，Trump 的读音近似“特朗普”。（我没学过德语，如果有了解德语的同学，可以证实一下。）&lt;/p&gt;
&lt;p&gt;《英语姓名译名手册》和《世界人名翻译大辞典》，对于有外来语言特征的单词，在音译成中文的时候，会首先参照原语言，在 Trump 这个词上，也就是德语发音。&lt;/p&gt;
&lt;p&gt;所以，日本人把 r 发音成 l，看来也是有原因，有历史渊源的。&lt;/p&gt;
&lt;p&gt;抱歉，较真儿了。&lt;/p&gt;
&lt;p&gt;但是，涨姿势。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;最后，以上这些讨论，发生在哪里呢？&lt;/p&gt;
&lt;p&gt;发生在我新注册的&lt;strong&gt;知识星球&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;很多同学都曾问过我有没有知识星球，但因为我以前没有玩儿过这东西，所以只是一直在观望学习而已。&lt;/p&gt;
&lt;p&gt;看了几个大佬的知识星球，大体搞懂了。个人粗浅理解：这就是另外一个朋友圈儿呗。&lt;/p&gt;
&lt;p&gt;所以，我注册了一个。&lt;strong&gt;免费的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;整体，我的知识星球的定位，是短分享。公众号的内容，比较适合做长文章的分享，我将在知识星球中，做更多短内容分享。虽然只是只言片语，也希望对大家有收获。&lt;/p&gt;
&lt;p&gt;做更多短内容分享。“更多”是什么意思呢？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;日更。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="rigeng" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-11/rigeng.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;反正我每天都会抽出一部分时间阅读大量资讯内容，看到有趣的就分享一下，应该不是什么负担。&lt;/p&gt;
&lt;p&gt;不过，由于是短内容分享，分享内容的严谨性就会打折扣，也会有一些非技术的内容。&lt;/p&gt;
&lt;p&gt;我随便截取几个过去的分享：&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分享1：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="1" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-11/1.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分享2：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-11/2.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分享3：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="3" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-11/3.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;大概是这样。&lt;/p&gt;
&lt;p&gt;如果玩儿知识星球的同学，对我的“短”内容分享感兴趣，可以加入。&lt;/p&gt;
&lt;p&gt;以下为二维码：&lt;/p&gt;
&lt;p&gt;&lt;img alt="qrcode" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-11/qrcode.JPG" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-07-11/readme.md" rel="alternate"/></entry><entry><id>2019/2019-07-09/readme.md</id><title>神一样的随机算法</title><updated>2019-07-09T00:00:00-07:00</updated><content>&lt;h2&gt;神一样的随机算法&lt;/h2&gt;
&lt;p&gt;之前，在我的文章 &lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-05-19/"&gt;《如何把技术做深？可能，这是一个错误的问题》&lt;/a&gt; 中，我谈到了对问题定义的重要性。很多时候，面对很多问题，我们思考的方向，并非是怎么解决，而是，我们要解决的问题究竟是什么。&lt;/p&gt;
&lt;p&gt;不过，在那篇文章中，我举的例子，都是很抽象的例子，比如“如何把技术做深？”，“如何学英语？”，“如何成功？”。但其实，在具体的技术领域，也是如此。&lt;/p&gt;
&lt;p&gt;这篇文章，我们从一道经典面试题开始来探讨这个问题。这个面试题有很多形式，但其实背后的算法是一致的。&lt;/p&gt;
&lt;p&gt;这个问题是：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;设计一个公平的洗牌算法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;看问题，洗牌，显然是一个随机算法了。随机算法还不简单？随机呗。把所有牌放到一个数组中，每次取两张牌交换位置，随机 k 次即可。&lt;/p&gt;
&lt;p&gt;如果你的答案是这样，通常面试官会进一步问一下，k 应该取多少？100？1000？10000？&lt;/p&gt;
&lt;p&gt;很显然，取一个固定的值不合理。如果数组中有 1000000 个元素，随机 100 次太少；如果数组中只有 10 个元素，随机 10000 次又太多。一个合理的选择是，随机次数和数组中元素大小相关。比如数组有多少个元素，我们就随机多少次。&lt;/p&gt;
&lt;p&gt;这个答案已经好很多了。但其实，连这个问题的本质都没有触及到。此时，面试官一定会狡黠地一笑：这个算法公平吗？&lt;/p&gt;
&lt;p&gt;我们再看问题：设计一个&lt;strong&gt;公平&lt;/strong&gt;的洗牌算法。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;问题来了，对于一个洗牌算法来说，什么叫“公平”？这其实是这个问题的实质，我们必须定义清楚：什么叫公平。&lt;/p&gt;
&lt;p&gt;一旦你开始思考这个问题，才触及到了这个问题的核心。&lt;strong&gt;在我看来，不管你能不能最终给出正确的算法，如果你的思路是在思考对于洗牌算法来说，什么是“公平”，我都觉得很优秀。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;因为背出一个算法是简单的，但是这种探求问题本源的思考角度，绝不是一日之功。别人告诉你再多次“要定义清楚问题的实质”都没用。这是一种不断面对问题，不断解决问题，逐渐磨炼出来的能力，短时间内无法培训。&lt;/p&gt;
&lt;p&gt;这也是我经常说的，&lt;strong&gt;面试不是标准化考试，不一定要求你给出正确答案。面试的关键，是看每个人思考问题的能力。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;说回我们的洗牌算法，什么叫公平呢？一旦你开始思考这个问题，其实答案不难想到。洗牌的结果是所有元素的一个排列。一副牌如果有 n 个元素，最终排列的可能性一共有 n! 个。公平的洗牌算法，应该能&lt;strong&gt;等概率地给出这 n! 个结果中的任意一个。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如思考虑到这一点，我们就能设计出一个简单的暴力算法了：对于 n 个元素，生成所有的 n! 个排列，然后，随机抽一个。&lt;/p&gt;
&lt;p&gt;这个算法绝对是公平的。但问题是，复杂度太高。复杂度是多少呢？O(n!)。因为，n 个元素一共有 n! 种排列，我们求出所有 n! 种排列，至少需要 n! 的时间。&lt;/p&gt;
&lt;p&gt;有一些同学可能对 O(n!) 没有概念。我本科时就闹过笑话，正儿八经地表示 O(n!) 并不是什么大不了不起的复杂度。实际上，这是一个比指数级 O(2^n) 更高的复杂度。因为 2^n 是 n 个 2 相乘；而 n! 也是 n 个数字相乘，但除了 1，其他所有数字都是大于等于 2 的。当 n&amp;gt;=4 开始，n! 以极快的的速度超越 2^n。&lt;/p&gt;
&lt;p&gt;O(2^n) 已经被称为指数爆炸了。O(n!) 不可想象。&lt;/p&gt;
&lt;p&gt;所以，这个算法确实是公平的，但是，时间不可容忍。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们再换一个角度思考“公平”这个话题。其实，我们也可以认为，公平是指，&lt;strong&gt;对于生成的排列，每一个元素都能等概率地出现在每一个位置。&lt;/strong&gt;或者反过来，&lt;strong&gt;每一个位置都能等概率地放置每个元素。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个定义和上面的&lt;strong&gt;最终洗牌结果，可以等概率地给出这 n! 个排列中的任意一个&lt;/strong&gt;，是等价的。这个等价性，可以证明出来。并不难。如果正在学习概率论的同学，还比较习惯概率论处理问题的思想，应该能很快搞定：）&lt;/p&gt;
&lt;p&gt;基于这个定义，我们就可以给出一个简单的算法了。说这个算法简单，是因为他的逻辑太容易了，就一个循环：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;for(int i = n - 1; i &amp;gt;= 0 ; i -- )
    swap(arr[i], arr[rand() % (i + 1)])&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这么简单的一个算法，可以保证上面我所说的，对于生成的排列，&lt;strong&gt;每一个元素都能等概率的出现在每一个位置。&lt;/strong&gt;或者反过来，&lt;strong&gt;每一个位置都能等概率的放置每个元素。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;大家可以先简单的理解一下这个循环在做什么。其实非常简单，i 从后向前，每次随机一个 [0...i] 之间的下标，然后将 arr[i] 和这个随机的下标元素，也就是 arr[rand() % (i + 1)] 交换位置。&lt;/p&gt;
&lt;p&gt;大家注意，由于每次是随机一个 [0...i] 之间的下标，所以，我们的计算方式是 rand() % (i + 1)，要对 i + 1 取余，保证随机的索引在 [0...i] 之间。&lt;/p&gt;
&lt;p&gt;这个算法就是大名鼎鼎的 &lt;strong&gt;Knuth-Shuffle，即 Knuth 洗牌算法。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个算法的原理，我们稍后再讲。先来看看 Knuth 何许人也？&lt;/p&gt;
&lt;p&gt;中文名：高纳德。算法理论的创始人。我们现在所使用的各种算法复杂度分析的符号，就是他发明的。上世纪 60-70 年代计算机算法的黄金时期，近乎就是他一手主导的。他的成就实在太多，有时间单独发文介绍，但是，我觉得一篇文章是不够的，一本书还差不多。&lt;/p&gt;
&lt;p&gt;大家最津津乐道的，就是他所写的《The Art of Computer Programming》，简称 TAOCP。这套书准备写七卷本，然后，到今天还没有写完，但已经被《科学美国人》评为可以媲美相对论的巨著。&lt;/p&gt;
&lt;p&gt;微软是 IT 界老大的年代，比尔盖茨直接说，如果你看完了这套书的第一卷本，请直接给我发简历。&lt;/p&gt;
&lt;p&gt;&lt;img alt="taocp" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-09/taocp.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;至于这套书为什么写的这么慢？因为老爷子写到一半，觉得当下的文字排版工具都太烂，于是&lt;strong&gt;转而发明出了现在流行的LaTex文字排版系统...&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;另外，老爷子可能觉得当下的编程语言都不能完美地表现自己的逻辑思想，还&lt;strong&gt;发明了一套抽象的逻辑语言，用于这套书中的逻辑表示...&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下面这张照片是他年轻的时候。这张照片是我在斯坦福大学计算机学院的橱窗拍的。&lt;/p&gt;
&lt;p&gt;&lt;img alt="donald" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-09/donald.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;下面的话和大家共勉：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A programmer who subconsciously views himself as an artist will enjoy what he does and will do it better.&lt;/p&gt;
&lt;p&gt;Donald E. Knuth 1978&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以，我从来都不认为自己只是一名工程师而已。&lt;strong&gt;我是艺术家：）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;是时候仔细的看一下，这个简单的算法，为什么能做到保证：&lt;strong&gt;对于生成的排列，每一个元素都能等概率的出现在每一个位置&lt;/strong&gt;了。&lt;/p&gt;
&lt;p&gt;其实，简单的吓人：）&lt;/p&gt;
&lt;p&gt;在这里，我们模拟一下算法的执行过程，同时，对于每一步，计算一下概率值。&lt;/p&gt;
&lt;p&gt;我们简单的只是用 5 个数字进行模拟。假设初始的时候，是按照 1，2，3，4，5 进行排列的。&lt;/p&gt;
&lt;p&gt;&lt;img alt="1" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-09/1.png" /&gt;&lt;/p&gt;
&lt;p&gt;那么，根据这个算法，首先会在这五个元素中选一个元素，和最后一个元素 5 交换位置。假设随机出了 2。&lt;/p&gt;
&lt;p&gt;&lt;img alt="2" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-09/2.png" /&gt;&lt;/p&gt;
&lt;p&gt;下面，我们计算 2 出现在最后一个位置的概率是多少？非常简单，因为是从 5 个元素中选的嘛，就是 1/5。实际上，根据这一步，任意一个元素出现在最后一个位置的概率，都是 1/5。&lt;/p&gt;
&lt;p&gt;&lt;img alt="3" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-09/3.png" /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;下面，根据这个算法，我们就已经不用管 2 了，而是在前面 4 个元素中，随机一个元素，放在倒数第二的位置。假设我们随机的是 3。3 和现在倒数第二个位置的元素 4 交换位置。&lt;/p&gt;
&lt;p&gt;&lt;img alt="4" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-09/4.png" /&gt;&lt;/p&gt;
&lt;p&gt;下面的计算非常重要。3 出现在这个位置的概率是多少？计算方式是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="5" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-09/5.png" /&gt;&lt;/p&gt;
&lt;p&gt;其实很简单，因为 3 逃出了第一轮的筛选，概率是 4/5，但是 3 没有逃过这一轮的选择。在这一轮，一共有4个元素，所以 3 被选中的概率是 1/4。因此，最终，3 出现在这个倒数第二的位置，概率是 4/5 * 1/4 = 1/5。&lt;/p&gt;
&lt;p&gt;还是 1/5 !&lt;/p&gt;
&lt;p&gt;实际上，用这个方法计算，任意一个元素出现在这个倒数第二位置的概率，都是 1/5。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;相信聪明的同学已经了解了。我们再进行下一步，在剩下的三个元素中随机一个元素，放在中间的位置。假设我们随机的是 1。&lt;/p&gt;
&lt;p&gt;&lt;img alt="6" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-09/6.png" /&gt;&lt;/p&gt;
&lt;p&gt;关键是：1 出现在这个位置的概率是多少？计算方式是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="7" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-09/7.png" /&gt;&lt;/p&gt;
&lt;p&gt;即 1 首先在第一轮没被选中，概率是 4/5，在第二轮又没被选中，概率是 3/4 ，但是在第三轮被选中了，概率是 1/3。乘在一起，4/5 * 3/4 * 1/3 = 1/5。&lt;/p&gt;
&lt;p&gt;用这个方法计算，任意一个元素出现在中间位置的概率，都是 1/5。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;这个过程继续，现在，我们只剩下两个元素了，在剩下的两个元素中，随机选一个，比如是4。将4放到第二个位置。&lt;/p&gt;
&lt;p&gt;&lt;img alt="8" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-09/8.png" /&gt;&lt;/p&gt;
&lt;p&gt;然后，4 出现在这个位置的概率是多少？4 首先在第一轮没被选中，概率是 4/5；在第二轮又没被选中，概率是 3/4；第三轮还没选中，概率是 2/3，但是在第四轮被选中了，概率是 1/2。乘在一起，4/5 * 3/4 * 2/3 * 1/2 = 1/5。&lt;/p&gt;
&lt;p&gt;用这个方法计算，任意一个元素出现在第二个位置的概率，都是 1/5。&lt;/p&gt;
&lt;p&gt;&lt;img alt="9" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-09/9.png" /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;最后，就剩下元素5了。它只能在第一个位置呆着了。&lt;/p&gt;
&lt;p&gt;那么 5 留在第一个位置的概率是多少？即在前 4 轮，5 都没有选中的概率是多少？&lt;/p&gt;
&lt;p&gt;在第一轮没被选中，概率是 4/5；在第二轮又没被选中，概率是 3/4；第三轮还没选中，概率是 2/3，在第四轮依然没有被选中，概率是 1/2。乘在一起，4/5 * 3/4 * 2/3 * 1/2 = 1/5。&lt;/p&gt;
&lt;p&gt;&lt;img alt="10" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-09/10.png" /&gt;&lt;/p&gt;
&lt;p&gt;算法结束。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;你看，在整个过程中，每一个元素出现在每一个位置的概率，都是 1/5 ！&lt;/p&gt;
&lt;p&gt;所以，这个算法是公平的。&lt;/p&gt;
&lt;p&gt;当然了，上面只是举例子。这个证明可以很容易地拓展到数组元素个数为 n 的任意数组。整个算法的复杂度是 O(n) 的。&lt;/p&gt;
&lt;p&gt;通过这个过程，大家也可以看到，同样的思路，我们也完全可以从前向后依次决定每个位置的数字是谁。不过从前向后，代码会复杂一些，感兴趣的同学可以想一想为什么？自己实现一下试试看？&lt;/p&gt;
&lt;p&gt;（因为生成 [0, i] 范围的随机数比生成 [i, n) 范围的随机数简单，直接对 i+1 求余就好了。）&lt;/p&gt;
&lt;p&gt;怎么样，&lt;strong&gt;是不是很酷？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="11" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-09/11.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个算法除了洗牌，还能怎么用？&lt;/p&gt;
&lt;p&gt;其实，在很多随机的地方，都能使用。比如，扫雷生成随机的盘面。我们可以把扫雷的二维盘面先逐行连接，看作是一维的。之后，把 k 颗雷依次放在开始的位置。&lt;/p&gt;
&lt;p&gt;&lt;img alt="mine1" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-09/mine1.png" /&gt;&lt;/p&gt;
&lt;p&gt;然后，我们运行一遍 Knuth 洗牌算法，就搞定啦：&lt;/p&gt;
&lt;p&gt;&lt;img alt="mine2" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-09/mine2.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;是不是很酷？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这就是我喜欢算法的原因。在我眼里，&lt;strong&gt;算法从来不是枯燥的逻辑堆砌，而是神一样的逻辑创造。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;尽管这个世界很复杂，但竟也如此的简洁，优雅。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-07-09/readme.md" rel="alternate"/></entry><entry><id>2019/2019-07-04/readme.md</id><title>随便扯：What's your problem</title><updated>2019-07-04T00:00:00-07:00</updated><content>&lt;h2&gt;随便扯：What's your problem&lt;/h2&gt;
&lt;p&gt;周末了，随便聊点儿轻松的话题。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;红颜祸水，不是，宏颜获水的事情，大家应该都知道了。&lt;/p&gt;
&lt;p&gt;首先，表明立场：坚决反对。因为，这是对公共秩序的公然藐视。&lt;/p&gt;
&lt;p&gt;如果对百度心生不满，最简单的做法，就是不用百度，并且劝身边的朋友，尽可能不用百度。这是对一个企业最有杀伤力的做法。如果认为百度的某些行为超越了法律框架，应该进行起诉，同样在法律框架下解决问题。&lt;/p&gt;
&lt;p&gt;浇一瓶水，不是英雄，什么都改变不了。&lt;/p&gt;
&lt;p&gt;其次，担心一下这种级别的大会的安保问题。幸亏这是一瓶水，如果不仅仅是水，会发生什么？不可想象。希望类似活动的举办方引以为戒。&lt;/p&gt;
&lt;p&gt;另外，李彦宏的现场即时回应真心赞。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;大家看到在AI前进的道路上，会有各种各样想不到的事情发生。但是我们前行的决心不会改变，坚信AI会改变每一个人的生活。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;这篇文章，想随便聊一聊李彦宏面对这个事情的第一反应，英语脱口而出：What's your problem?&lt;/p&gt;
&lt;p&gt;这个英语实在是太地道了。&lt;/p&gt;
&lt;p&gt;美剧看多了的同学，面对这种情况，可能都会想到 What the f**k 一类的回应。但是，这个回应在英语语境里，实在是太不雅了。&lt;/p&gt;
&lt;p&gt;What's the problem，近乎就是 What the f**k 的文明版。如果要翻译的话，就是“你有什么毛病？”这不是一个疑问句，而是反问句，表达自己的愤怒。&lt;/p&gt;
&lt;p&gt;在 Phrase Mix 上，对 What's the problem 是这么解释的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is a phrase that you can use to start an argument with someone who's acting angry or rude. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;你可以使用 What's the problem 来开始一场争执。通常是对举止粗暴无礼，令人生气厌烦的人来说。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"What's your problem?" means "Why are you acting that way?" &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What's the problem? 的意思就是在问，“你为什么要这么做？”&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;But asking someone "What's your problem?" makes it sounds like you're criticizing them.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但是，这个质问背后，有着强烈的批评色彩。&lt;/p&gt;
&lt;p&gt;大家可以通过李厂长脱口而出的英文，看出其英语功底的深厚。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;这让我想起了一个笑话。&lt;/p&gt;
&lt;p&gt;一个老外问一个中国留学生，Can I ask you a question?&lt;/p&gt;
&lt;p&gt;中国留学生开心地回答：Yeah, sure! What's your problem?&lt;/p&gt;
&lt;p&gt;老外气鼓鼓地走了，留下了一脸懵逼的留学生独自在风中凌乱...&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;所以，在英语中，problem 和 question 是不一样的，虽然中文翻译都是“问题”。&lt;/p&gt;
&lt;p&gt;但是，question 是中性的，表示一个疑问。所以“问号”，用英文说，就是 question mark。&lt;/p&gt;
&lt;p&gt;而 problem，则带有一定的贬义，表示不好的问题，需要被及时解决。现在，大家都觉得科技公司有各种各样的问题，就要用 problem。&lt;/p&gt;
&lt;p&gt;随便截一个今天的英文新闻标题：&lt;/p&gt;
&lt;p&gt;&lt;img alt="problem" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-04/problem.png" /&gt;&lt;/p&gt;
&lt;p&gt;当然了，problem 稍微有些口语化，而且感情色彩可能有点儿更浓烈。更加中性一点儿的，客观描述“问题”的方式，可以用 issue。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;其实，和中文一样，很多时候，用词不准确，表达同样的事情，给人的感觉会极度不同。&lt;/p&gt;
&lt;p&gt;比如，我刚来美国的时候，还没有车，为了出行方便，租了一辆车。&lt;/p&gt;
&lt;p&gt;结果，车爆胎了。叫道路援助，折腾了好长时间，一天的事情都没有办成。道路援助换好备胎以后，我还需要第二天额外花时间，去租车公司换辆车。&lt;/p&gt;
&lt;p&gt;换车的时候，我提出不仅这两天的租金我不应该付，还应该得到补偿。补偿的英文是 compensation，我说的就是 I think I deserve a compensation due to ... 结果，换来了服务人员的白眼。No Compensation！搞的我很莫名，不是说美国的服务都挺好吗？&lt;/p&gt;
&lt;p&gt;结果回来一研究，才搞明白，compensation 这个词，比较严重，背后的意思，偏向法律的赔偿。尤其是在发生重大的事故，比如巨大的经济损失或者伤亡事故之后，谈的才是 compensation。&lt;/p&gt;
&lt;p&gt;当然，我的情况也可以谈 compensation，但请打官司。这不是我的本意。&lt;/p&gt;
&lt;p&gt;于是，到了退车的时候，我还是想要“赔偿”，但是换了一个说法：I think I deserve a &lt;strong&gt;discount&lt;/strong&gt; due to ... 结果，轻松拿到了我本来想要的“补偿”。discount，是优惠的意思。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;你看，这就是我对“语言”渐渐开始感兴趣的原因。同样的事情，同样的意思，换一种表达，换一个词汇，结果就会如此不同。&lt;/p&gt;
&lt;p&gt;其实，这也是在短时间内，我并不认为机器翻译能取代人工翻译的原因。机器翻译诚然可以降低不同语言人群之间交流的门槛，起到传达基本信息的作用。但是专业的翻译在短时间内一定是被需要的。因为，不同语言之间并非是一一映射的对应关系，而掺杂了诸多人文社会，风俗习惯，约定俗成的内容。&lt;/p&gt;
&lt;p&gt;机器要想理解“我们不是我们，我们还是我们”，还要时间。&lt;/p&gt;
&lt;p&gt;这也是自然语言和程序员们所使用的编程语言不同的地方。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;编程语言是一种人造的，用于描述逻辑的语言。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;而自然语言，是在历史的长河中，慢慢演化出来的，沉淀了无数历史记忆和先人智慧的，更多用于表达情感，思辨，而绝不仅仅是逻辑的语言。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;最后，作为一名程序员，聊一个逻辑梗。&lt;/p&gt;
&lt;p&gt;上面讲的那个笑话，Can I ask you a question? 不能回答 What's your problem? &lt;/p&gt;
&lt;p&gt;那应该怎么回答？&lt;/p&gt;
&lt;p&gt;通常，在生活中，我们直接回答 yes，就好了。&lt;/p&gt;
&lt;p&gt;语气轻松一些，可以说，sure, go ahead.&lt;/p&gt;
&lt;p&gt;但是，我见过的神级回答是：You just have.&lt;/p&gt;
&lt;p&gt;整个对话是这样的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Can I ask you a question?&lt;/p&gt;
&lt;p&gt;You just have.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个回答是什么意思呢？就是，你已经问过了。你问的问题就是：我能问你一个问题吗？&lt;/p&gt;
&lt;p&gt;这里，产生了一个微妙的无穷递归。为了不冒昧地提问，你首先问能否问一个问题；但在问“能否问一个问题”的时候，你已经冒昧地提问了。&lt;/p&gt;
&lt;p&gt;当然，在正常的对话中，面对别人问“Can I ask you a question?”，不要回答“You just have.”。&lt;/p&gt;
&lt;p&gt;否则，可能换来别人的白眼：What's your problem?&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-07-04/readme.md" rel="alternate"/></entry><entry><id>2019/2019-07-01/readme.md</id><title>1/2 + 1/4 + 1/8 + 1/16 + ... 一个级数问题的几何求解</title><updated>2019-07-01T00:00:00-07:00</updated><content>&lt;h2&gt;1/2 + 1/4 + 1/8 + 1/16 + ... 一个级数问题的几何求解&lt;/h2&gt;
&lt;p&gt;级数是高等数学中的一个非常重要的概念。在数学中，&lt;strong&gt;一个有穷或无穷序列的和，称为级数。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;有穷级数，非常简单，因为是有穷的，用小学学习的加法运算，就可以求出。比如6, 60, 600，这个序列的级数是666。&lt;/p&gt;
&lt;p&gt;比较难的是无穷级数，最典型的级数是等差级数（又叫算术级数）和等比级数（又叫几何级数）。&lt;/p&gt;
&lt;p&gt;比如：1，2，3，4，5，... 是一个等差级数。&lt;/p&gt;
&lt;p&gt;比如：1，2，4，8，16，... 是一个等比级数。其中，公比为2。&lt;/p&gt;
&lt;p&gt;比如：1/2，1/4，1/8，1/16，1/32，... 也是一个等比级数。其中，公比为 1/2。&lt;/p&gt;
&lt;p&gt;对于无穷级数，有一个很重要的概念，就是级数的敛散性。也就是一个无穷级数是发散的，还是收敛的。&lt;/p&gt;
&lt;p&gt;所谓的收敛，就是存在一个“界”，这无穷项的和，肯定超不过这个“界”；如果不存在这个“界”，就称这个级数是发散的。&lt;/p&gt;
&lt;p&gt;比如，1，2，3，4，5，... 是一个发散级数；&lt;/p&gt;
&lt;p&gt;比如：1，2，4，8，16，... 是一个发散级数；&lt;/p&gt;
&lt;p&gt;但是，1/2，1/4，1/8，1/16，1/32，... 是一个收敛级数。这个级数的“界”是1。也就是这串数字按照这样的趋势继续下去，无穷项的和，一定是小于1的。无论如何，都超不过1这个“界”。&lt;/p&gt;
&lt;p&gt;通过定义，大家也能想到了，由于我们是在考虑无穷项的和的问题，所以严格地使用数学语言，我们要想证明这个“界”，需要使用“极限”的概念。&lt;/p&gt;
&lt;p&gt;实际上，&lt;strong&gt;极限是大家在本科学习高等数学所接触的第一个概念，是微分，积分，这一套数学工具的根基，是初等数学和高等数学的重要分水岭。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不过，在这篇文章中，我将使用几何的方式，证明1/2，1/4，1/8，1/16，1/32，... 这个序列的和，一定不会超过1这个“界”：）&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;其实非常简单。首先，我们把每一个数字想成是一个矩形的面积。那么我们可以先画一个边长为1的正方形。它的面积就是1。&lt;/p&gt;
&lt;p&gt;&lt;img alt="1" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-01/1.png" /&gt;&lt;/p&gt;
&lt;p&gt;下面，我们将看到，这个面积为1的正方形，可以盛放面积为1/2，1/4，1/8，1/16，1/32，...的矩形，无数多个！：）&lt;/p&gt;
&lt;p&gt;首先，我们放一个面积为1/2的矩形，非常简单，将这个正方形一分为2，一半的面积就是1/2。&lt;/p&gt;
&lt;p&gt;&lt;img alt="2" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-01/2.png" /&gt;&lt;/p&gt;
&lt;p&gt;然后，我们再放一个面积为1/4的矩形，将剩下的1/2再一分为2，其中一半的面积，就是1/2的1/2，即1/4。&lt;/p&gt;
&lt;p&gt;&lt;img alt="3" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-01/3.png" /&gt;&lt;/p&gt;
&lt;p&gt;相信聪明的同学们都已经会了。我们再放一个面积为1/8的矩形，只需要将剩下1/4面积再一分为2，其中的一半面积，就是1/4的1/2，即1/8。&lt;/p&gt;
&lt;p&gt;&lt;img alt="4" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-01/4.png" /&gt;&lt;/p&gt;
&lt;p&gt;这个过程可以一直下去。我们再放一个1/16的矩形：&lt;/p&gt;
&lt;p&gt;&lt;img alt="5" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-01/5.png" /&gt;&lt;/p&gt;
&lt;p&gt;再放一个1/32的矩形......&lt;/p&gt;
&lt;p&gt;&lt;img alt="6" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-07-01/6.png" /&gt;&lt;/p&gt;
&lt;p&gt;可以看出来，1/2，1/4，1/8，1/16，1/32，... 这个数列的每一个数所表示的矩阵，可以无穷无尽地放到这个大小为1的正方形中。&lt;/p&gt;
&lt;p&gt;所以，1/2，1/4，1/8，1/16，1/32，... 这个级数是收敛的，结果为1：）&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;对了，和&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-05-29/"&gt;《如何优雅地证明平方差公式？》&lt;/a&gt;的配图一样，这篇文章的配图也都是我在ipad上手绘出来的。虽然很简单，但允许我再次炫耀一下：）&lt;/p&gt;
&lt;p&gt;怎么样，&lt;strong&gt;是不是很酷？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-07-01/readme.md" rel="alternate"/></entry><entry><id>2019/2019-06-30/readme.md</id><title>一场关于知识产权的讨论</title><updated>2019-06-30T00:00:00-07:00</updated><content>&lt;h2&gt;一场关于知识产权的讨论&lt;/h2&gt;
&lt;p&gt;上周，一名内容创业者韦老师在他的公众号发表了一篇文章&lt;a href="https://mp.weixin.qq.com/s?__biz=MzAxNTAyOTczMw==&amp;amp;mid=2649330749&amp;amp;idx=1&amp;amp;sn=634296a973a7839dde06e8df1a92b49d&amp;amp;chksm=839770b7b4e0f9a1032b63c0109e0660513191659ff55f28d41a32a27efa40fd2ad81fc3390b&amp;amp;mpshare=1&amp;amp;scene=1&amp;amp;srcid=0626VWRTwoRK4UbjwPHs8PG9&amp;amp;pass_ticket=B6hY64shJG2GbcMIeFXlsdoTUVOiqwjP%2Fx%2BNailBtcYr2fhWhke9RmzY7Xdtmsxp#rd"&gt;《闲鱼与盗版更配，起诉到底绝不和解！》&lt;/a&gt;，怒斥了闲鱼平台对于盗版问题的“不作为”。&lt;/p&gt;
&lt;p&gt;后来，这篇文章被公众号大V &lt;strong&gt;小声比比&lt;/strong&gt; 转发，&lt;a href="https://mp.weixin.qq.com/s?__biz=MzIxMjgxMDAwOA==&amp;amp;mid=2247497524&amp;amp;idx=1&amp;amp;sn=e42168fb3ad4f22a50f50dd3cbb159a7&amp;amp;chksm=9742d743a0355e555b615fb7377a265424135915a6c485fb6e5f270d0869b2b3032d71fedc7a&amp;amp;mpshare=1&amp;amp;scene=1&amp;amp;srcid=&amp;amp;pass_ticket=B6hY64shJG2GbcMIeFXlsdoTUVOiqwjP%2Fx%2BNailBtcYr2fhWhke9RmzY7Xdtmsxp#rd"&gt;《因为闲鱼上随处可见的盗版，这家创业公司要倒闭了》&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;在这里，我不想声讨太多关于盗版的问题。中国的版权环境大家都是了解的。不过让我欣慰的是，越来越多的人有了版权意识，购买正版支持知识创作者，也正是因为如此，有越来越多的人，愿意花时间整理，贡献出自己的知识：）&lt;/p&gt;
&lt;p&gt;尽管如此，在&lt;a href="https://mp.weixin.qq.com/s?__biz=MzIxMjgxMDAwOA==&amp;amp;mid=2247497524&amp;amp;idx=1&amp;amp;sn=e42168fb3ad4f22a50f50dd3cbb159a7&amp;amp;chksm=9742d743a0355e555b615fb7377a265424135915a6c485fb6e5f270d0869b2b3032d71fedc7a&amp;amp;mpshare=1&amp;amp;scene=1&amp;amp;srcid=&amp;amp;pass_ticket=B6hY64shJG2GbcMIeFXlsdoTUVOiqwjP%2Fx%2BNailBtcYr2fhWhke9RmzY7Xdtmsxp#rd"&gt;《因为闲鱼上随处可见的盗版，这家创业公司要倒闭了》&lt;/a&gt;这篇文章中，第二名的留言依然很具有代表性。&lt;/p&gt;
&lt;p&gt;&lt;img alt="pirate" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-06-30/pirate.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;在我看来，这就好比在说，小偷偷了东西便宜卖给别人，造福大众，有何不好？&lt;/p&gt;
&lt;p&gt;讽刺地是，这名用户的头像使用的是中华人民共和国五星红旗。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;不过，我确实承认，知识产权本身是一个有争议的话题。社会上围绕知识产权的讨论，从来没有停止过。&lt;/p&gt;
&lt;p&gt;上周，我在朋友圈转发了小声比比的这篇文章，引来了一个朋友跟我的讨论。我觉得这个讨论挺有意思，在这里分享给大家。&lt;/p&gt;
&lt;p&gt;所以，&lt;strong&gt;这篇文章，我有点儿偷懒，基本就是我们在朋友圈的留言整理：）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当然，我们的讨论不够充分，我们也都不是知识产权问题的专业人士，所以难免有不严谨的地方。&lt;/p&gt;
&lt;p&gt;但是，我的核心观点是：&lt;strong&gt;知识产权必须存在，但是以何种形式存在，可以讨论。知识产权存在的原因在于，要保证原创作者有回报，只有这样，才有人愿意产生知识，社会才能更好地发展&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;实际上，如果深入交流，就会发现，大多数所谓的“反知识产权”人士，对此也是赞同的。只不过认为现行的知识产权制度提高了公众获取知识的门槛。对此，我也赞同，现行的知识产权制度，有这样或者那样的问题。但关键是，更好的制度在哪里？因为，可见的，如果废除现行的知识产权制度，原创作者将没有动力做任何原创，结果是&lt;strong&gt;公众获取知识的门槛更高&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;这就是经济学，政治学，社会学等领域有意思的地方。社会是一个整体，牵一发动全身。很多事情不是简单的 1 + 1 = 2。这就像曾经很多人讨论过的，从法律量刑的角度，拐卖儿童不能轻易判死罪；这也是曾经美国的“禁酒令”全面失败，最终不得不废止的原因。看起来拐卖儿童十恶不舍，我们把这些坏蛋杀掉就好；看起来酒是一个坏东西，我们把它禁掉就好了。但事情没有这么简单。如果世界这么简单，乌托邦就不是乌托邦了。&lt;/p&gt;
&lt;p&gt;至今为止，在我们的社会上，没有一种制度或者法规，是完美无缺的。批评一种制度是不好的，这是很简单的事情。但关键是，现行制度是不是已有方案中的最好方案？&lt;strong&gt;如果是，我们也只能暂时接受他的缺点。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当然，还有很多“反知识产权”人士提出了这样或者那样的可能措施，在下面的讨论中会提到一二。我认为都是有问题的。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;下面是我和我的朋友的讨论：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;朋友：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;或许本就不该有知识产权这种概念？或许确实无法保护所谓的知识产权？比如专利保护是公开换保护，但可口可乐就是不去申请专利，是否才是正确的方式？知识产权是否反而阻碍了创新？有关这个东西我还没有想明白……&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;bobo：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我以为知识产权在鼓励创新。因为知识产权保证了创新者有收益。如果没有知识产权，大家就没有创新的动力，窃以为这是中国少有技术主导的企业的核心原因。技术太容易被偷走，没有良好的版权保护环境，就没有人做。但知识产权应该是有期效的，当然期效是多少可以讨论，包括具体怎么叫侵权，细节上也有很多可以讨论的地方。但是没有知识产权，我认为是不可行的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;朋友：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;拿写文章举例，知识产权说我的文章你不能直接拿走说是自己写的，我是靠写文章赚钱的，靠阅读收费；而反对知识产权的学者似乎认为你拿走无所谓，首先很难管，其次我不应该靠阅读收费，盈利模式可以是我通过写文章积累人气，然后去开讲座赚钱。你即使转发文章抹去作者，也会因为种种原因导致我被周知而抄袭者给我做嫁衣。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;bobo：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为什么我不应该靠阅读收费？如果文章的作用只是积累人气的话，结果就是所有的文章都是为积累人气设计的。咪蒙的文章是例子；《厉害了我的国》似的文章也是例子。另外，开讲座赚钱也是知识售卖。那别人把你的讲座录下来倒卖可不可以？&lt;/p&gt;
&lt;p&gt;具体怎么执行，确实是另一回事儿。但以这篇文章中的现象为例，闲鱼中明明包含大量明显盗版资源，版权人已经甄别出来并进行了举报，但是平台方不作为，这是有问题的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;朋友：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;你说的这篇文章中的闲鱼，你认为闲鱼不作为，是基于现有知识产权保护体系前提下的，我同意。现在的情况下就是知识产权很难得到有效的保护。&lt;/p&gt;
&lt;p&gt;不是说不应该靠阅读收费，而是在没有知识产权的保护下，你无法靠阅读收费，而不得不转向其他的盈利模式，这也迫使你创新，创新其他的盈利模式而不是简单的躺赚。别人确实可以把你讲座偷录卖钱，这就是我刚才说的，最终偷录者给讲座者做了嫁衣，因为帮助讲座人扩大了观众，让更多人了解讲座人的观点，从而提高了讲座人的价值。仅从这一点看，偷录人帮讲座人创造了价值，奖赏就是卖盗版的钱。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;bobo：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不对。照这个逻辑偷窃不是罪。只要我把偷窃的东西以更低廉的价格卖给别人或者免费分一部分给别人，我都是在提升被偷用品的品牌价值。讲赏就是我在赃物中获得的那一份。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;朋友：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;错。偷窃的结果是我有了你没有。这应该叫做剽窃，我多了你没有少。至于剽窃是不是罪，是可以讨论一下的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;bobo：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果按照“有无”定义，相当于是说只有实体才物品才受到保护，但知识由于无“形”，所以不受到保护。我不同意。&lt;strong&gt;我认为集结劳动者的时间的产品就应该被保护。&lt;/strong&gt;否则，就不会有人付出这个时间。知识就无法发展起来。中国就是这样。似乎绕回去了。。。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;朋友：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;是的，所以似乎讨论的根本就变成了：如果没有知识产权保护，就没人创新。于是反方首先就会首先想到最著名的可口可乐的例子来反驳。。。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;bobo：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我不认为可口可乐的例子可以反驳应该没有知识产权。专利，版权，包括商业机密等，本身就是平等的，各有优劣的保护知识的方式，每一个人，每一个企业都可以自由选择。可口可乐使用商业机密的方式成功地保护了自己的知识，不代表知识产权没有用。逻辑上不成立。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;朋友：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;另外一个不保护也创新的例子是，以前保护更差，仍然有那么多单机游戏。不过结果是大家都死了。再后来是被迫创新出网络收费模式。似乎看起来是因为保护不到位而导致再也没有单机游戏玩，实际可能是单机游戏被市场淘汰。只不过不是用户淘汰他们。&lt;/p&gt;
&lt;p&gt;我在想，如果现有的体系无法有效保护，是不是这种方式压根就是不科学的。正好现在有学者提出了反对知识产权的观点，我觉得或许他们是对的。但是看他们的观点，也没有完全说服我，所以在这个问题上我目前无法回答“如果没有保护，创新者怎么活”的问题，但至少我能说“有保护也活不下去”。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;bobo：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;有保护当然能活下去。&lt;strong&gt;我认为美国梦的本质就是因为有强大的知识产权保护。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我认为知识产权保护是必须有的。因为要保证知识产生者有足够的动力去产生知识。但是，这个产权是什么样子，可以讨论。可以不是现在的样子。可能存在一种保护形势，消费者不买单，但是基于这样或那样的机制，知识生产者还能有足够的好处。那没问题。&lt;/p&gt;
&lt;p&gt;但是你说“逼着创新”，这个逼，不应该是逼知识的生产者。因为这个创新属于社会制度的创新或者商业模式的创新，不能让每个知识产生者都是社会制度或者商业模式专家。比如大学的科研制度，其实就是另外一种模式，相当于由全体纳税人买单，经由政府分配，再到大学，再到每个科研工作者，然后科研工作者发表公开的论文。至于效果如何，每个人见解不同。&lt;/p&gt;
&lt;p&gt;实际上现在的知识界也有这种“创新”，就是免费写文章靠广告收钱。但是问题就在于，由于要靠广告收钱，所以文章要顾及传播度，由于要顾及传播度，所以高深的内容就没人写。因为内容越高深，受众就越少。&lt;strong&gt;所以在这种模式眼里，高深的，小众的内容，没有价值。对于整个社会，我认为这个结果是有害的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;朋友：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;反对派的观点是保护是先进国家对落后国家的一种流氓手段。最近还有谣传说美国要否认华为在美专利？对于是否应该有知识产权，我也没有被反对派说服，但我能get到支持派的观点。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;bobo：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;国家间是另一个话题。我以为我们讨论的问题首先假想这个世界没有国界，是否应该有知识产权。然后才应该细分国家间情况不同，知识产权应该怎么处理的问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;朋友：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;有道理，应首先假设无国界。中国不提了，了解一下美国的情况。盗版问题严重吗？可能不像闲鱼这么明目张胆，那是否可以方便的接触到盗版资源？比如win10？比如单机游戏盗版电影。使用的人多吗？微软在打击本土盗版的力度比中国强吗？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;bobo：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;盗版问题显然也有。但是没有闲鱼这么明目张胆。&lt;strong&gt;盗版者知道自己在盗版，知道自己是违法的。这是很重要的分水岭。&lt;/strong&gt;就像抢劫的人知道自己做的是坏事儿。但是抢劫没法杜绝。这就是法律，警察，法院，监狱这套机制存在的意义。也正因为如此，显然美国的创新能力比中国强，创新意愿也更强。但是在国内，很多盗版者理直气壮，甚至引以为荣，结果就是深深地打击了知识的生产。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;朋友：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我觉得因为美国知识产权法律健全，所以创新能力强或意愿强，这个推论过程可能存在问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;bobo：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;有可能不是因果关系，是相关关系。&lt;/strong&gt;但是主观上看，原创人员在美国写书，做电影，写代码，等等等等，都更加没有顾虑。美国对知识产权的保护，公认是世界最严的，至少到现在，通过美国的发展，我们肯定得不出这样的知识产权保护在阻碍创新的结论。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;朋友：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;美国可以吸引全球顶尖人才无可非议，顶尖人才创新能力和意愿强似乎也可以这么假设，因此美国创新能力强。几乎可以假设不是因为美国的知识产权保护吸引高端人才，至少应该不是主要原因。因此能否推出无论是否有知识产权保护，美国创新能力永远第一的结论？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;bobo：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不能。&lt;strong&gt;无数例子在告诉我们制度的重要性。&lt;/strong&gt;中国人到了国外都是高素质好公民；外国人到了中国也开始加塞乱丢垃圾。人的素质固然重要，&lt;strong&gt;但我认为制度是让人的素质持续发挥效能的核心原因。&lt;/strong&gt;我坚信高端人才在一个版权保护薄弱的社会，只有可能在非版权的领域发挥自己的能力。比如中国，无数别出心裁的侵权方式。&lt;/p&gt;
&lt;p&gt;而且你说的“可以假设不是因为美国的知识产权保护吸引高端人才”。这个假设我也存疑。那是什么在吸引高端人才？&lt;/p&gt;
&lt;p&gt;我认为是经济实力。这个经济实力是怎样累积的？我认为对知识的保护有巨大的贡献。因为有对知识的合理保护，所以创新者能做大做强，进而吸引更多人才。形成正向循环。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;朋友：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;嗯，我同意你的这些观点。我回头还得持续关注反对者的观点，看看他们对此有何高见。今天的讨论我很有收获！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;bobo：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我也很有收获！：）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;新的一周，大家加油！&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-06-30/readme.md" rel="alternate"/></entry><entry><id>2019/2019-06-23/readme.md</id><title>TIOBE 编程语言排行榜到底靠不靠谱？我想大家推荐另一个榜单。</title><updated>2019-06-23T00:00:00-07:00</updated><content>&lt;h2&gt;TIOBE 编程语言排行榜到底靠不靠谱？我想大家推荐另一个榜单。&lt;/h2&gt;
&lt;p&gt;不知道从什么时候开始，很多公号喜欢拿 TIOBE 编程语言排行榜说事儿。这个榜上某个语言上升一个名词下降一个名次的都要被大书特书。&lt;/p&gt;
&lt;p&gt;最典型的例子是对 Python 语言的吹捧，Python语言在最近几年的火热是众所周知的事情，不需要什么排行榜，大家都看在眼里。现在 Python 在这个排行榜是什么趋势呢？2019年6月最新的 TIOBE 编程语言排行榜是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="board" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-06-23/board.png" /&gt;&lt;/p&gt;
&lt;p&gt;Python 名列第三名。&lt;/p&gt;
&lt;p&gt;所以，Python 连小学生都要学习了，大家快来学习啊。&lt;/p&gt;
&lt;p&gt;在这里，我没有黑 Python 的意思，大家都学习 Python，掌握这么一个脚本语言，如果运用得到，在很多场景，都能大大提高工作效率，是个挺好的事情。我本人也很喜欢 Python 语言。（但绝不是铁粉）&lt;/p&gt;
&lt;p&gt;但关键在于这个逻辑。如果在 TIOBE 排行榜上排名靠前，就意味着大家都要重视，意味着是趋势的话。那么显然，小学生都应该学习 Java，因为 Java 是第一名。&lt;/p&gt;
&lt;p&gt;除了 Java，其次应该学习的，就是 C 语言了，因为 C 语言是第二名。不仅如此，从 Ratings 上看（大家可以理解成是投票数），这两个语言都和 Python 不在一个量级上。&lt;/p&gt;
&lt;p&gt;仔细观察，这个排行榜还有很多“奇怪”的地方，比如大火的 JS 语言，竟然输给 C++, C# 和 Visual Basic.NET。大家可以随便在一个群里做个小调研，看看是 JS 应用广泛，掌握的同学多，还是 C++, C# 和 Visual Basic.NET 更流行。这显然是违背现实的。&lt;/p&gt;
&lt;p&gt;所以，TIOBE 编程语言排行榜到底靠不靠谱？&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;一个排行榜靠不靠谱，这是一个伪命题。像我在&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-05-19/"&gt;《如何把技术做深？可能，这是一个错误的问题》&lt;/a&gt;中所说的，很多问题的核心，是对问题的定义。换句话说，什么是“靠谱”，不同的人，理解不同。&lt;/p&gt;
&lt;p&gt;看待一个排行榜，关键就是这个排行榜的依据是什么。如果这个排行榜的依据契合你的需求，他就靠谱，否则，就不靠谱。&lt;/p&gt;
&lt;p&gt;那么 TIOBE 编程语言排行榜的依据是什么？按照 TIOBE 官方的说法：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Popular search engines such as Google, Bing, Yahoo!, Wikipedia, Amazon, YouTube and Baidu are used to calculate the ratings&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;翻译：使用主流的搜索引擎，比如谷歌，必应，雅虎，维基百科，亚马逊，YouTube，百度等，来计算排行权重。&lt;/p&gt;
&lt;p&gt;换句话说，TIOBE 使用搜索引擎上的数据作为排名的依据。&lt;strong&gt;一个语言在TIOBE上排名越高，代表着你能在搜索引擎上寻找到更多关于这个语言的文字或者讨论。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这样一来，是不是觉得 C 语言名列第二就合理了？毕竟，C 语言有着那么久的历史，曾在整整一个时代，是所有程序员的入门语言。即使今天，在我国，大多数院校计算机专业的学习，第一门语言也是 C 语言。&lt;/p&gt;
&lt;p&gt;根据这个排名依据，TIOBE 确实能一定程度反应一个语言的流行度。但其实不能反映一个语言“当下”的流行度。因为历史在互联网世界里留下的印记，在 TIOBE 的这个指标计算方式中，会冲击真正的流行和趋势。所以，&lt;strong&gt;在 TIOBE 排行榜中，经常会看到一些老古董名列前茅，但一些明明是趋势，具有相当的发展前景的语言，却名落孙山。&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;如果不去看 TIOBE 编程语言排行榜，要如何选择学习的语言？&lt;/p&gt;
&lt;p&gt;对此，我的建议永远是：&lt;strong&gt;不要选择语言，而去选择领域。&lt;/strong&gt;换句话说，大家完全没必要去比较不同的语言的好坏，至少在新手阶段是这样的。大家应该去思考，自己想解决什么样的问题。&lt;/p&gt;
&lt;p&gt;比如你觉得移动开发很酷，能做出有意思的App，那么进而去权衡想做 Android 开发还是 iOS 开发，当你做好这个决定好以后，你主力要学习的语言基本上就已经选择好了。&lt;strong&gt;语言只是工具，服务于你想要达到的目的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通常情况下，我们很难看到一个人的头衔是某个语言专家，比如 Python 语言专家，或者 Swift 语言专家。我们只能看见机器学习专家，或者 iOS 专家，就是这个原因。领域比语言重要太多，甚至可以说，在领域面前，语言不值一提。&lt;/p&gt;
&lt;p&gt;更何况，通常，成为某个领域专家，解决这个领域越来越多的问题的过程中，都是要使用多种语言的。这里的本质，也是因为&lt;strong&gt;不同的语言适合的场景不同。&lt;/strong&gt;遇到某个场景的问题，就去用最适合的语言去解决相应的问题。再次强调，&lt;strong&gt;语言只是工具而已，但一名技术人员真正的价值，在于解决了什么问题，而不是掌握了什么语言。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当然，有一些领域，包含多种语言解决方案，比如都是做后端，Java 可以，C# 可以，C++ 可以，PHP 可以，Python 可以，JS 也可以。此时，是不是应该选择语言了呢？&lt;/p&gt;
&lt;p&gt;我的答案也不是。&lt;strong&gt;此时，应该去选择框架，语言依然是第二位。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这里，最典型的其实就是 Python 语言。Python语言可以用来做后端，但 Python 语言的火热，更多的是在大数据，人工智能领域的应用。如果仅仅是因为 Python 火，而选择使用 Python 做后端，这个决策很有可能是不明智的。&lt;/p&gt;
&lt;p&gt;依然是，我没有说不应该选择 Python 做后端，我想强调的是，&lt;strong&gt;不应该因为 Python 语言火，而选择使用 Python 做后端。&lt;/strong&gt;这个因果关系是错误的，因此可能导致以后看来，你的决策是错误的。Python 语言火的背后，有很多和后端这个领域完全没有关系的因素。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;所以，编程语言排行榜这个事儿，看看就好了。是个消遣，跟富豪排行榜似的。但真要做决定，语言不是第一要务。&lt;/p&gt;
&lt;p&gt;最后，对于排行榜，我从来不推荐 TOIBE 的编程语言排行榜。我向大家推荐 &lt;strong&gt;Stackoverflow 每年基于全球开发者统计得到的报告。&lt;/strong&gt;Stackoverflow 2019年的报告，可以&lt;a href="https://insights.stackoverflow.com/survey/2019"&gt;&lt;strong&gt;点击这里&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;为什么推荐 Stackoverflow 的报告？首先是因为这份报告每年是重新统计的，所以不会出现之前我说的互联网上的历史数据淹没趋势的现象。&lt;/p&gt;
&lt;p&gt;其次，这份调查统计是 Stackoverflow 这个近乎是全球最大的开发者问答社群，基于其真实开发者用户获得的数据。更能体现开发者的“意志”，而不会被非专业开发人员的想法所“绑架”。显然，对于具体技术的感觉，开发者自身更靠谱。&lt;/p&gt;
&lt;p&gt;比如，对于编程语言，Stackoverflow 2019 年的报告，评选出的最普遍使用的语言是这样的。是不是觉得合理很多？&lt;/p&gt;
&lt;p&gt;&lt;img alt="stack1" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-06-23/stack1.png" /&gt;&lt;/p&gt;
&lt;p&gt;另外，还记得我上面说的，&lt;strong&gt;首选框架，而非语言&lt;/strong&gt;吗？Stackoverflow 的调查也对框架进行了排名。&lt;/p&gt;
&lt;p&gt;比如，对于 Web 端的框架，排名是这样的（从2019年开始，这个调查对 Web 框架单独列榜）：&lt;/p&gt;
&lt;p&gt;&lt;img alt="stack2" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-06-23/stack2.png" /&gt;&lt;/p&gt;
&lt;p&gt;其他框架的排名是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="stack3" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-06-23/stack3.png" /&gt;&lt;/p&gt;
&lt;p&gt;对于 Stackoverflow 的调查，我最喜欢的一点，是包含一个，大家今年最喜欢的语言（或者框架）是什么？最想学习的语言（或者框架）是什么？认为正在死亡的语言（或者框架）是什么？&lt;strong&gt;在我看来，这个榜单，才更能说明趋势。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;比如，今年，大家认为&lt;strong&gt;正在死亡的语言&lt;/strong&gt;是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="stack4" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-06-23/stack4.png" /&gt;&lt;/p&gt;
&lt;p&gt;大家可以看到，在 TOIBE 编程语言排行榜上很多名列前茅的语言，在这份“正在死亡的语言”榜单上也名列前茅，是不是很有意思？&lt;/p&gt;
&lt;p&gt;那么大家此时都喜欢的，看好的语言，是什么样子的呢？是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="stack5" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-06-23/stack5.png" /&gt;&lt;/p&gt;
&lt;p&gt;嗯。。。不同背景的同学们应该能从中看出不同的东西：）&lt;/p&gt;
&lt;p&gt;框架方面也是如此。比如，大家认为&lt;strong&gt;正在死亡的 Web 框架&lt;/strong&gt;是怎样的呢？是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="stack6" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-06-23/stack6.png" /&gt;&lt;/p&gt;
&lt;p&gt;大家注意，在上面 Web 框架排名中，jQuery名列第一，但它同时在“正在死亡”的排行榜，名列第二。再次告诉了我们，&lt;strong&gt;流行的，不代表趋势。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Web 框架方面，最受大家喜欢的框架是什么样子的呢？是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="stack7" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-06-23/stack7.png" /&gt;&lt;/p&gt;
&lt;p&gt;当然了，所有的排行榜，都只是某一个角度的参考。面对这些参考，大家要怎么行动，是另外的事情了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;新的一周，大家加油！&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-06-23/readme.md" rel="alternate"/></entry><entry><id>2019/2019-06-19/readme.md</id><title>浅谈Facebook发布数字币Libra</title><updated>2019-06-19T00:00:00-07:00</updated><content>&lt;h2&gt;浅谈Facebook发布数字币Libra&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;6月18日，Facebook 公布了其筹备了近一年的加密币 Libra 的白皮书。现在这个白皮书还没有中文版，不过按照如今中文开发者社区的活跃程度，应该很快就有中文版了。想先睹为快的同学，可以访问以下英文版的链接。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://libra.org/en-US/white-paper/"&gt;https://libra.org/en-US/white-paper/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;由于微信不允许在推文中添加外链，所以需要大家手动复制地址到浏览器。不排除需要科学上网。&lt;/p&gt;
&lt;p&gt;不过，白皮书这种东西，大部分和产品宣传书差不太多。什么在全球范围可以像短信或者分享照片一样简单，安全，可靠，便捷的交易。而且更加便宜，手续费近乎为零。&lt;/p&gt;
&lt;p&gt;如果你曾经读过一两篇曾经一度很热门的诸如《五分钟带你了解区块链》，《从没有一篇文章能把区块链讲的这么明白》一类的十万加文章，应该会认同 Libra 具有这样的优势。虽然我看过的大多数这类文章，根本没有把区块链的实质给点出来。&lt;/p&gt;
&lt;p&gt;与此同时，所有基于区块链技术的加密货币都具有这样的优势。所以这些也都是废话。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;将 Libra 和大多数其他加密货币，比如比特币，区分开来的，是其背后有作为支持的实际资产抵押。Facebook 官方说法是，这个实际资产，是一系列低波动性资产，比如稳定且信誉良好的中央银行提供的现金或者政府债券。这使得 Libra 的价格近乎不可能像以比特币为首的电子币一样，有那么大的价格波动。所以，Libra 的价格不完全由，或者是完全不由用户的“共识”而决定，而由其背后作为实际支撑的资产所决定。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;李笑来的名言，傻逼的共识也是共识，一定程度对Libra失效了。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所以，Libra 是一种稳定币（stablecoin）。这是一个专有名词，有兴趣的同学可以查一查。Libra 的问世，也应该会让 stablecoin 的概念一定程度火起来，被更多的人所了解。&lt;/p&gt;
&lt;p&gt;不过，Libra 并不是世界上的第一个稳定币。以下加密币都是稳定币：DGX，TUSD，USDT，PAX...... 有兴趣的同学可以自己查一下。&lt;/p&gt;
&lt;p&gt;但要注意，稳定币不代表没有风险。只是风险更少。历史上有稳定币彻底失败的案例，比如 NuBits；&lt;/p&gt;
&lt;p&gt;而稳定币领域的绝对老大 USDT，直接使用美元做支撑，也曾在2017年曝出丑闻，疑似过量发行了超出其美元支撑金额的电子币。这里说是疑似，只是法律上的严谨而已，毕竟没证据。但我个人倾向于近乎肯定。因为USDT拒绝向公众或者权威第三方对其进行任何形式的审计或者提供证据。有一派观点认为，2017年比特币连带各种加密货币疯狂暴涨，幕后的黑手就是USDT。不过这扯远了...&lt;/p&gt;
&lt;p&gt;说回稳定币，即使是法币，也有不稳定的因素。无论是津巴布韦，还是土耳其，都在近些年由于经济危机，出现了其国家法币价值迅速下滑的情况。所以，稳定币的稳定也是相对的。但不管怎样，&lt;strong&gt;我坚信 Libra 的稳定性，比现在市面上主流的加密币，应该是稳定了不止一两个量级。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;由于 Libra 是一种稳定币，其价格是由其背后支撑它的资产背书的。所以，获得 Libra 的手段不是“挖矿”，而是使用法币兑换。也就是。。。充值。。。&lt;/p&gt;
&lt;p&gt;这使得区块链技术界的很多人，并不很认同 Libra。因为如果没有可以让普通人参与的“挖矿”机制，就意味着 Libra 不是“去中心化”的。而“去中心化”，近乎是区块链技术的核心。&lt;/p&gt;
&lt;p&gt;或许也正是这个原因，使得 Libra 和比特币有着本质的区别。Libra 白皮书的发布，也并没有导致比特币大涨。&lt;/p&gt;
&lt;p&gt;但我个人认为，至少在现阶段，这并无妨。对于其他加密货币，虽然本质确实是去中心化的，但是，一旦被实际作为货币使用，无论是支付，还是交易，都要经过第三方，此时，这些货币都一定程度中心化了。&lt;/p&gt;
&lt;p&gt;交易所是最好的例子。当我们在一个交易所交易电子币的时候，交易所就成为了电子币的中心。交易所可以看到每个人名下的资产信息；交易所可以更改，没收你名下的资产；当然，国家或者其他权力机构也可以勒令交易所没收你名下的资产；如果交易所的安全防线被突破，你的资产也将遭受威胁。&lt;/p&gt;
&lt;p&gt;这就是为什么出现过那么多起交易所跑路或者被黑的事件后，投资者的财产都遭受了严重的损失，而并没有像加密币所宣称的那样“安全”。&lt;/p&gt;
&lt;p&gt;另一方面，在现阶段，我认为完全去中心化的货币，时机还并没有成熟，或者还远远没有成熟。这就像我们的社会，离共产主义还很远很远，是一样的。&lt;/p&gt;
&lt;p&gt;完全的去中心，完全的匿名，将给洗钱，贿赂，勒索，等各种犯罪活动提供温床。基于比特币，已经有无数事件向我们证明了这一点。&lt;/p&gt;
&lt;p&gt;这就好像绝对的言论自由，近乎一定将会产生无端的谩骂，诽谤和人身攻击；绝对的身体自由，我都不敢想象会发生什么。&lt;/p&gt;
&lt;p&gt;所以，自由是相对的，至少在短期内，人类社会会是如此。关键是，如何界定有限自由（法律）；谁有权利剥夺他人自由（法院）；剥夺他人权力的自由如何被监督（三权分立）；以及如何执行这份权力（国家机器），等等等等。&lt;/p&gt;
&lt;p&gt;因此，&lt;strong&gt;我认为 Libra 其实走在了一条正确的，符合历史发展，社会发展的道路上。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;其实，&lt;strong&gt;Libra真正要做的，是支付网络。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当然了，本质上，&lt;strong&gt;区块链本身就是支付网络。这是所有加密币价值的核心来源。&lt;/strong&gt;理解这一点并不容易。&lt;/p&gt;
&lt;p&gt;这有点儿像，爱因斯坦像我们揭示了：空间不仅仅是“空间”，空间其实是一个“场”，&lt;strong&gt;我们所处的整个宇宙空间，是一个巨大的“引力场”。&lt;/strong&gt;理解到这一点，是理解爱因斯坦的相对论，尤其是广义相对论到底在说什么的金钥匙。也是现代物理学和古典物理学的巨大分水岭。&lt;/p&gt;
&lt;p&gt;同理，比特币（以比特币为例）不仅仅是一个“币”，比特币是一个支付网络（区块链）。没有这个网络，就没有比特币；没有比特币，也就没有这个网络。&lt;strong&gt;比特币价值的核心，是其背后的这个网络的价值。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在我看来，是否将比特币和其背后的网络分割来看，甚至根本意识不到比特币背后所存在的网络，是“币圈”和“链圈”的核心分水岭。&lt;/p&gt;
&lt;p&gt;但是，在这里，我不想对这个问题解释的过多，因为在我尝试向一些人解释这个问题之后，我意识到了很多人并不想这么看问题，所以很容易陷入鸡同鸭讲的境地。&lt;/p&gt;
&lt;p&gt;我并不是说我比别人多高级，毕竟无论是鸡还是鸭，都是一个级别的家禽类动物。烧着吃都不错。我只是说，对这个问题，大家背景不同，接收的信息源不同，认识也就不同，所以得到不同的结论，完全是正常的。&lt;/p&gt;
&lt;p&gt;如果你认为比特币（包括所有的加密币）都是骗人的，我无法反驳你，也不想反驳你。更何况咱们伟大祖国都这么定性了。所以，这么想挺好的。少了很多风险和麻烦。&lt;/p&gt;
&lt;p&gt;说回 Libra，&lt;strong&gt;如果我理解的没有错，Libra 其实就是想认认真真的做回区块链技术的本源：在符合当下人类社会经济发展的规则和制度下，利用区块链技术，做一个有影响力的支付网络。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;从现在Libra背后的支撑企业来看，实力都是极其雄厚的。甚至，有很多本身做支付网络的大佬，在支持这个新兴的支付网络，比 VISA 和 mastercard。&lt;/p&gt;
&lt;p&gt;&lt;img alt="libra" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-06-19/libra.png" /&gt;&lt;/p&gt;
&lt;p&gt;但是，整体情况，还是并不乐观。&lt;/p&gt;
&lt;p&gt;欧洲现阶段整体对 Libra 并不欢迎。&lt;/p&gt;
&lt;p&gt;&lt;img alt="europe" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-06-19/europe.png" /&gt;&lt;/p&gt;
&lt;p&gt;这其实不赖欧洲，赖美国。因为，Libra 是一家由美国企业发布的电子货币。纵使是私人企业，也很容易被认为其背后代表的是“美元体系”，而非一个“更方便安全快捷”的支付网络这么简单。&lt;/p&gt;
&lt;p&gt;要知道，当年金融危机，美国人疯狂地做空欧元，就是为了保住美元在世界经济体系中的霸主地位。再加上早些年以 Facebook 为首的科技企业在隐私方面的问题，引发了欧洲最严隐私法 GDPR 的产生。欧洲整体对这家美国企业发布的电子币有一定的戒心，是无可厚非的。&lt;/p&gt;
&lt;p&gt;但其实，即使在美国，Libra 可能也会比想象中的艰难。最新的新闻，美国的监管机构已经开始向 Facebook 的 Libra 喊停。&lt;/p&gt;
&lt;p&gt;&lt;img alt="us" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-06-19/us.png" /&gt;&lt;/p&gt;
&lt;p&gt;所以，&lt;strong&gt;现在 Libra 面对的问题，其实根本不是技术问题，而是制度问题。&lt;/strong&gt;毕竟，区块链技术本质是要颠覆现行的货币制度，这不是一个小事情。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不过，如我上文曾经说的，&lt;strong&gt;我认为 Libra 走在了一条正确的，符合历史发展，社会发展的道路上。&lt;/strong&gt;很多细节问题的梳理，可能还需要时间。&lt;/p&gt;
&lt;p&gt;在我这个《是不是很酷》公众号刚申请后不久，我就曾发表过一篇文章&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2018/2018-01-30/"&gt;《随便聊聊比特币和区块链》&lt;/a&gt;。整体，我还是十分看好区块链技术的未来的。&lt;/p&gt;
&lt;p&gt;对了，顺便一提，虽然我国将 ICO 定为非法，但我国在区块链技术上可并不弱。以美国为首的很多国家，都在盯着我国，看我国要基于区块链技术有什么大动作。&lt;/p&gt;
&lt;p&gt;不信？随便在 Google 上搜索 &lt;strong&gt;China blockchain&lt;/strong&gt; 的关键词，得到的结果是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="google1" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-06-19/google1.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="google2" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-06-19/google2.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="china" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-06-19/china.png" /&gt;&lt;/p&gt;
&lt;p&gt;我就不翻译了。&lt;/p&gt;
&lt;p&gt;在我上面的文章&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2018/2018-01-30/"&gt;《随便聊聊比特币和区块链》&lt;/a&gt;里，我就说过：&lt;strong&gt;对ICO定性为非法融资，可以理解成是国家对电子货币发行的一种规范。至于这个规范的意义，我想不是“电子货币要玩儿完”，而更多的是“这个事儿大家不要自己搞了，国家队接手了”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;以上。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;P.S. &lt;/p&gt;
&lt;p&gt;补充一句：我认为国家定性ico非法是没有毛病的，直接堵住了很多骗子依托ico进行金融诈骗的门路；而且现在基于ico也确实没什么能给社会带来价值的应用，不算打击创新。但是区块链是一项重要的，有应用前景的技术，国家为了保持竞争力，也要发展挖掘利用这种技术。这两者不矛盾。&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-06-19/readme.md" rel="alternate"/></entry><entry><id>2019/2019-06-16/readme.md</id><title>嘿，瞎说什么大实话。</title><updated>2019-06-16T00:00:00-07:00</updated><content>&lt;h2&gt;嘿，瞎说什么大实话。&lt;/h2&gt;
&lt;p&gt;这是一篇相对比较个人的文章，没有技术干货，只对技术干货感兴趣的同学，在这里就可以关闭了：）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;之前，我写了一篇文章，&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-06-03/"&gt;《答读者问 | 这个年代，还有必要学英语吗？非说没必要，也没毛病》&lt;/a&gt;。一个很久没联系的老朋友，突然给我发来一个微信。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“看你玩儿公众号玩儿的很high？竟说大实话，有流量吗？”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我一看就乐了。和他聊了起来。&lt;/p&gt;
&lt;p&gt;我和他自小学就认识。我自认为身边有很多大神朋友，但是如果说“聪明”，我觉得大多数人都和我一样，并非聪明之辈。所以，我写了文章&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2018-07-18/"&gt;《天生不聪明》&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;但是，他是少有的，让我不得不承认，这个世界上真的有“聪明人”的人。&lt;/p&gt;
&lt;p&gt;本科的时候，大家都玩儿《魔兽争霸》，他竟然垄断了某个服务器上的资源，然后风生水起的做起了“虚拟”生意，大赚特赚。此后他折腾的各种玩意儿，大多让我瞠目结舌，极大地拓宽了我对这个世界的认识。在赚钱这件事儿上，我向他学到了很多。&lt;/p&gt;
&lt;p&gt;他和我一样，是个创业者。大多数创业者，都多多少少是“功利主义者”，我也一样。这里说的“功利”，就是钱。因为创业的职责，首先就是保证存活，自己也好，团队也罢。如何保证存活？就是要赚到钱。你可以谈理想，但是要先让大家吃饱肚子。不然，你再有理想，在别人眼里，也是个骗子。这是个很残酷的事实。&lt;/p&gt;
&lt;p&gt;当然，赚钱分“站着赚”和“跪着赚”。但什么是“站”？什么是“跪”？这是一个没有客观标准，非常主观的问题。同样的姿势，有的人觉得是“站”，有的人觉得是“跪”。&lt;/p&gt;
&lt;p&gt;我向来喜欢听每个人对这类主观问题的见解，但对这类问题，我从来不站队。&lt;/p&gt;
&lt;p&gt;小时候，有人说我没有个人见解。&lt;/p&gt;
&lt;p&gt;长大了，我才想明白，&lt;strong&gt;其实，“没有对错”，就是我的见解。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于写公众号这件事儿，粉丝数量，转发数量，阅读量，等等等等，都是硬性指标。发文章，讲的是流量。&lt;/p&gt;
&lt;p&gt;所以，我的这位朋友对我发出了来自灵魂深处的疑问。&lt;strong&gt;你这么写，都是大实话，有流量吗？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;拿&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-06-03/"&gt;《答读者问 | 这个年代，还有必要学英语吗？非说没必要，也没毛病》》&lt;/a&gt;这篇文章来说，核心观点就是：如果觉得英语学习没有用，不学也没事儿。关键是把自己觉得有用的学好。&lt;/p&gt;
&lt;p&gt;这个观点太不讨好观众了。喜欢学英语的不喜欢，正在努力学英语的不喜欢，想努力把英语学好的，也不喜欢。&lt;/p&gt;
&lt;p&gt;你说不好好学英语的人会喜欢？呵呵，不好好学习的人怎么会关注我的公众号？&lt;/p&gt;
&lt;p&gt;“但你说，我的观点有毛病吗？”，我问。&lt;/p&gt;
&lt;p&gt;“一点毛病都没有，就是完全没有传播度。”&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;他又拿出一篇我的文章，&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-05-20/"&gt;《浅谈Google限制华为》&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;“这篇文章是什么鬼？”他再次发出来自灵魂深处的疑问。&lt;/p&gt;
&lt;p&gt;还用红字标出，&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“我只能简单地说：对于这场贸易战，从道德的角度，我不站队。” &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="question" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-06-16/question.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“谁的理更多一些？谁的错更少一些？我相信，这是说不清楚的。” &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="question" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-06-16/question.png" /&gt;&lt;/p&gt;
&lt;p&gt;“你是认真的吗？你写公众号的，难道不看别的公众号吗？”&lt;/p&gt;
&lt;p&gt;“还，...真没怎么看”，我老实巴交地回答。&lt;/p&gt;
&lt;p&gt;”来来来，学习一下最近的10万+。“&lt;/p&gt;
&lt;p&gt;他一甩手，丢给我一沓链接。标题基本都是一个套路。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;什么什么怎么就沸腾了，美国人怎么怎么就懵逼了。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;也不算骗人，美国人要是能看懂，一定真的很懵逼。&lt;/p&gt;
&lt;p&gt;“你写的挺不错，也挺有深度，但真的不利于传播。”他开始总结性发言了。我还是很相信他的判断的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“嘿，瞎说什么大实话。”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当然，我们都知道：&lt;strong&gt;实话不止如此，没有说的话太多太多。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们就又在微信里聊了起来。&lt;/p&gt;
&lt;p&gt;在国内的时候，我和他曾经保持着每周一次夜谈的不成文的默契，很多时候，一下子聊到天亮。直到我因为家庭原因，跑到了国外。&lt;/p&gt;
&lt;p&gt;面对面的交流，没什么顾及，想说什么说什么，想骂什么骂什么。每次和他的交流，都是一次酣畅淋漓的旅行。从商业，到技术；从文学，到艺术；从经济，到历史。&lt;/p&gt;
&lt;p&gt;如果没有曾经的自由，我不会意识到，在微信里交流，会这么拘束。&lt;/p&gt;
&lt;p&gt;很快，我们在微信的交流，成为了猜谜游戏。每句话都充斥着各种暗语和字母，刚开始，我还觉得拆解这些“暗语”是很有意思很酷的事情，但很快，一股悲凉从心而生。&lt;/p&gt;
&lt;p&gt;虽然我们都不是什么“核心价值观好青年”，但我们也是衷心希望祖国繁荣昌盛的好少年（中年？）啊！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;为什么会被逼得如此说话？这真的正常吗？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我不知道。但我知道，这真的一点儿都不酷。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最近的时事热闻，一个发生在香港。&lt;/p&gt;
&lt;p&gt;香港是中华人民共和国的特别行政区，但大多数人对发生在香港的事情一无所知。更不要说充分地讨论了。&lt;/p&gt;
&lt;p&gt;我的投资老板，是在香港挖的第一桶金，现在移居在澳洲。香港对于他，有着不同寻常的意义。&lt;/p&gt;
&lt;p&gt;他在朋友圈转发了一篇文章，叫&lt;a href="https://mp.weixin.qq.com/s?__biz=Mzg2MDE1ODM2OA==&amp;amp;mid=2247483806&amp;amp;idx=1&amp;amp;sn=c2e8ce14e564536d63ac04be409977b8&amp;amp;chksm=ce2be151f95c6847b554ffad8e2c2e4a6b9d204a6acaf52fdb0b6454a6b8030592e6ae26992d&amp;amp;scene=21#wechat_redirect"&gt;《香港，香港》&lt;/a&gt;。我看了一下，是一篇十万加，就是一篇像香港旅游宣传片一样的文字。没有任何敏感内容。但作者关闭了评论通道。&lt;/p&gt;
&lt;p&gt;我总在想，不同的人，不同的经历，和这片弹丸之地有着不同的纠葛，看到这篇文章，会想到什么，念起什么。&lt;/p&gt;
&lt;p&gt;我不知道。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;另一个事情，是电影《八佰》，因“技术原因”被取消放映。这道取消令来得如此突然，观虎导演在前一天，还在为电影做宣传。&lt;/p&gt;
&lt;p&gt;贾樟柯在微博上说“电影事业，不能这么搞”，并且配了一张乌云蔽日的照片。&lt;/p&gt;
&lt;p&gt;&lt;img alt="weibo" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-06-16/weibo.png" /&gt;&lt;/p&gt;
&lt;p&gt;朋友跟我说，你口口声声做技术原创，这个“技术原因”，是不是要好好分析一下？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我说，我的技术能力还没有那么强。&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;说到《八佰》描述的这个主题，就要提到台湾。&lt;/p&gt;
&lt;p&gt;我曾和朋友一起在台湾旅游，自驾环岛一圈。我个人极其喜欢台湾的风土人情。&lt;/p&gt;
&lt;p&gt;在新加坡的时候，有一次，几个（新加坡）同事想一起去台湾开个会，顺便再玩儿一圈。结果，我和老婆悲哀的发现，由于我们是中国护照，所以需要办很多额外的手续，才能入境台湾。最后，因为时间太紧，我和老婆只得放弃了这个本来应该是“说走就走”的旅行。&lt;/p&gt;
&lt;p&gt;新加坡的同事惊讶地表示，以为台湾是中国领土不可分割的一部分，为什么中国公民出入台湾，竟然比我们还严格？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我无言以对。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1986年，崔健在北京工人体育馆举行的百名歌星演唱会上演唱了《一无所有》，宣告了中国摇滚乐的诞生。那时，我半岁。&lt;/p&gt;
&lt;p&gt;1989年，崔健创作并完成专辑《新长征路上的摇滚》；1991年，某个著名的历史事件两年后，崔健发行了《解决》。其中，收录了这篇文章开头我放的音乐：《一块红布》。那一年，我6岁，懵懂地步入了小学课堂。&lt;/p&gt;
&lt;p&gt;严格来说，崔健并不是我这个年代的音乐人，而属于比我更早的年代。直到又过了6年，我上初中，才开始接触崔健的音乐。那时候的男孩子，包括我，听崔健，更多的是在耍酷。虽然已隔十几年，但其实完全听不懂。只是，似乎，除了崔健，中国就没有真正的摇滚乐了。&lt;/p&gt;
&lt;p&gt;那时候，听《一块红布》，最喜欢里面的一句歌词，&lt;strong&gt;“可你的嘴将我的嘴堵住”。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这喜欢，完全来自青春期的躁动。&lt;/p&gt;
&lt;p&gt;但将近二十年后，再听《一块红布》，竟然还最喜欢这句歌词，&lt;strong&gt;“可你的嘴将我的嘴堵住”。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;但这回，我仿佛听见，崔健跟所有人说，&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“嘿，瞎说什么大实话”。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;2019.06.16 于美国 Santa Clara&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;img alt="red" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-06-16/red.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《一块红布》部分歌词摘抄：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;那天是你用一块红布&lt;/p&gt;
&lt;p&gt;蒙住我双眼也蒙住了天&lt;/p&gt;
&lt;p&gt;......&lt;/p&gt;
&lt;p&gt;你问我还要去何方&lt;/p&gt;
&lt;p&gt;我说要上你的路&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;看不见你也看不见路&lt;/p&gt;
&lt;p&gt;我的手也被你攥住&lt;/p&gt;
&lt;p&gt;你问我还在想什么&lt;/p&gt;
&lt;p&gt;我说我要让你做主&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我感觉你不是铁&lt;/p&gt;
&lt;p&gt;却象铁一样强和烈&lt;/p&gt;
&lt;p&gt;我感觉你身上有血&lt;/p&gt;
&lt;p&gt;因为你的手是热呼呼&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我感觉这不是荒野&lt;/p&gt;
&lt;p&gt;却看不见这地已经干裂&lt;/p&gt;
&lt;p&gt;我感觉我要喝点水&lt;/p&gt;
&lt;p&gt;可你的嘴将我的嘴堵住&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我不能走我也不能哭&lt;/p&gt;
&lt;p&gt;因为我的身体已经干枯&lt;/p&gt;
&lt;p&gt;我要永远这样陪伴着你&lt;/p&gt;
&lt;p&gt;因为我最知道你的痛苦&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;那天是你用一块红布&lt;/p&gt;
&lt;p&gt;蒙住我双眼也蒙住了天&lt;/p&gt;
&lt;p&gt;你问我看见了什么&lt;/p&gt;
&lt;p&gt;我说我看见了幸福&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;新的一周，大家加油！：）&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-06-16/readme.md" rel="alternate"/></entry><entry><id>2019/2019-06-10/readme.md</id><title>稀奇古怪面试题三则</title><updated>2019-06-10T00:00:00-07:00</updated><content>&lt;h2&gt;稀奇古怪面试题三则&lt;/h2&gt;
&lt;p&gt;在这一周，我的专栏更新的文章《从费米估算，到黑暗森林》中，我仔细向大家介绍了一类特殊的面试问题 —— 估算问题的思考思路。如果对我在慕课网上的专栏不了解的同学，可以参考这里：&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-05-06/"&gt;《正式邀请你，和我一起，用技术人的眼光，探索世界》&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;那么在这一周的公众号推文中，我就再给大家分享3道“非典型”的面试问题：）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;先来一个不是太怪的问题，相信很多人都听过。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在一天的时间里，钟表的时针和分针会重合多少次？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;解析：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;答案是22次&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;这个问题可以使用编程的方式，具体地求出这22个时针和分针重合的时间都在几点几分。不过，其实只需要稍微想一想，就能想出这个答案：）&lt;/p&gt;
&lt;p&gt;大家可以思考一下，在午夜零点的时候，是一天里第一次时针和分针发生重合的时候。下一次在什么时候呢？因为第一分钟，分针就会直接越过时针，所以，&lt;strong&gt;在0:00-1:00之间，不可能再发生时针和分针重合的时候了。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下一次时针和分针发生重合的时候，一定是在1点多。具体多少我们可以不求了，但我们知道，1点多一定有一次时针和分针重合的时候。&lt;/p&gt;
&lt;p&gt;那么再下一次呢？相信聪明的同学们很快就能想明白，在两点多的位置。&lt;/p&gt;
&lt;p&gt;再下一次呢？是三点多。&lt;/p&gt;
&lt;p&gt;依此类推。&lt;/p&gt;
&lt;p&gt;大家可以思考一下，在时针走回12点之前，最后一次时针和分针重合的时候是什么时候？答案是在十点多，而不是11点多。&lt;strong&gt;11:00-11:59这段时间里，时针和分针不会再重合了。&lt;/strong&gt;分针走过11:00-11:59这一圈的过程中，时针总会比分针更接近12点的位置，直到最后一分钟，时针和分针再次同时指向12点。&lt;/p&gt;
&lt;p&gt;因此，在0:00-11:59这12个小时里，时针和分针一共重合了11次。这11次分别是零点；1点多；2点多；3点多；4点多；5点多；6点多；7点多；8点多；9点多；10点多。&lt;/p&gt;
&lt;p&gt;那么在一天的时间里，一共24个小时，也就是时针要绕表盘转两圈，所以，一共重合了22次：）&lt;/p&gt;
&lt;p&gt;有兴趣的同学可以尝试一下，具体用编程的方式（甚至用数学的方式？）求解一下这22次分别是什么时间：）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;你想要检验你的好朋友，同时也是计算机大牛的bobo老师是否知道你的正确的手机号码。&lt;/p&gt;
&lt;p&gt;但是，小慕同学不让你接近bobo老师，只给你一张卡片，让你写一个问题给bobo老师。小慕会将这张卡片传给bobo老师，然后再将bobo老师的回答用这个卡片传回来。这一问一答的过程，你就需要判断出：bobo老师是否知道你的正确的电话号码。&lt;/p&gt;
&lt;p&gt;但是，你并不希望小慕同学知道你的电话号码。可是，小慕同学一定会偷看你和bobo老师写在卡片上的内容的。&lt;/p&gt;
&lt;p&gt;请问，你要怎么写这张卡片？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;解析：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最中规中矩的方法，是使用校验算法（或者摘要算法，哈希算法，不可逆的加密算法，但不管怎样，核心是做校验。）你可以在卡片上写上任意校验算法名称，根据正确的手机号码得到的校验码，以及其他必须的校验信息（如果有的话）。由于bobo老师是计算机大牛，所以可以假设bobo老师可以看懂你写的任何校验算法，然后将他知道的手机号码相应地转换成校验码，和你提供的校验码作比较，之后回答校验成功或者失败就好了。&lt;/p&gt;
&lt;p&gt;整个过程，小慕只能看到校验算法相关的信息和校验码，是不能反推出原始信息的。&lt;/p&gt;
&lt;p&gt;但是，对于这个问题，其实可以直接在卡片上&lt;strong&gt;要求bobo老师根据他所知道的号码给你打一个电话&lt;/strong&gt;，就能知道bobo老师手上的电话号码是否正确啦！&lt;/p&gt;
&lt;p&gt;是不是发现，&lt;strong&gt;有些时候，跳出程序员思维，事情会更简单：）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;设计一个疏散旧金山市市民的方案&lt;/p&gt;
&lt;p&gt;（如果对旧金山不熟悉，可以把问题改变成：设计一个疏散北京城市民的方案，或者疏散你所在的城市市民的方案。）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;解析：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;面对这个问题，面试官希望听到你反问：具体是因为什么灾难，要疏散城市的市民？因为具体原因不同，灾难的情况不同，就可能对疏散计划有细节上，甚至是整体上的影响。在问清楚具体情况之前，任何设计方案都一定是不对的。&lt;/p&gt;
&lt;p&gt;实际上，这种把问题搞清楚的能力，是职场的基本素质。很多时候，人和人的差距并不在具体的技术水平上，而是在这类“软”技能上。沟通是否有效？任务是否明确？目标是否清晰？很多时候，都将直接直接影响你的工作效率。之前，我写过一篇文章，&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-05-19/"&gt;《如何把技术做深？可能，这是一个错误的问题》&lt;/a&gt;，说的也是这个问题：）&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;最后，我必须要说：这些面试问题都是“非典型的”，这意味着其实你去外面找工作，遇到这样的问题，概率是很低的。在这里和大家分享，好玩为主。&lt;strong&gt;对于面试，关键还是要基础扎实。&lt;/strong&gt;所以，大家在准备面试的时候，切不要把精力放在这些偏题怪题上，&lt;strong&gt;踏踏实实学好基础，真的是最快的捷径。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不信的话，我的公众号之前发送过一批“福利”，是一个HR小姐姐的团队整理的2019年今日头条Java后端的面试真题。在我的公众号后台输入“&lt;strong&gt;头条面试&lt;/strong&gt;”即可领取。大家可以看一看，今日头条的面试真题，是不是没有偏题怪题？全都是稳扎稳打的“基础题”？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-06-10/readme.md" rel="alternate"/></entry><entry><id>2019/2019-06-03/readme.md</id><title>答读者问 | 这个年代，还有必要学英语吗？要说没必要，也没毛病</title><updated>2019-06-03T00:00:00-07:00</updated><content>&lt;h2&gt;答读者问 | 这个年代，还有必要学英语吗？要说没必要，也没毛病&lt;/h2&gt;
&lt;p&gt;上一周，我的专栏更新《学英语的最佳年龄到底是什么时候？》，谈了谈英语学习的相关话题。为了配合专栏的更新，我上一周的推文《看美剧学英语靠不靠谱？我说靠谱，方法都在这里了》也是聊英语学习方法的。&lt;/p&gt;
&lt;p&gt;于是，有一个同学给我发来了这样一个问题：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;现在翻译工具这么多，翻译工具翻译的越来越准确，程序猿还有必要学习英语吗？比如我学react，也经常上官网看一些api，大部分情况下都是用谷歌翻译，基本上都能知道大体意思；再比如react发布了新特性，上面有一段视频是介绍react hooks的特性，虽然95%以上我不知道那小哥在讲什么，但是我能看懂他写的代码。所以，在当下，学习英语真的很有必要吗？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;估计很多同学看到这个问题，会猜这篇推文我要侃侃而谈英语学习的必要性了。不过，我想我的回答会让很多同学大跌眼镜。&lt;/p&gt;
&lt;p&gt;虽然我认为英语确实很重要；从我尚不长的人生经验看，我坚信我还不算太差的英语，能够让我相对无碍地直接查看英文资料，也帮助了我很多很多，甚至在几个我经历的关键节点，说改变了我的人生都不为过。&lt;/p&gt;
&lt;p&gt;但是，面对这个问题，我的回答却是：&lt;strong&gt;如果你真心认为没必要学，那么就没必要学。&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;bobo老师的回答：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;大家年龄进入了成年，脱离了基础教育体系之后，进行自学，我比较尊崇这样一个观点：&lt;strong&gt;如果你觉得没必要学习，同时自己也没有兴趣，那就不需要去学。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;换句话说，我认为如果你选择学习一个技能，应该是因为：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 或者你觉得这个技能有用。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;比如有一些同学学习编程，可能只是觉得编程有用而已。其实他们可能并不是那么喜欢编程，但编程能找到一份工资还不错的工作，那就学呗。毕竟，干什么都要学，为什么不学一个热门的，获得高工资的概率更大的技能呢？这个想法一点儿毛病都没有。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 或者你对这个技能感兴趣。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;据我所知，很多同学学习英语，并不是因为英语对他的工作多有用，而是因为感兴趣，觉得能看懂《冰与火之歌》的原版，或者没有字幕看美剧，或者到国外和老外侃侃而谈，是件很酷的事情，所以开始学英语。至于英语进步以后，意外获得了一些更好的工作机会，完全是计划之外的，自己都没有想到的事情。&lt;/p&gt;
&lt;p&gt;很多同学学习绘画，学习吉他，也是因为兴趣，绝不是要从事艺术行业的工作。&lt;/p&gt;
&lt;p&gt;甚至我知道一些同学学习算法，都是因为兴趣。并不是自己的工作对算法的要求有多高，也不是自己想怎么靠着算法水平去升职加薪。有些同学只是想了解，那些烧脑的算法问题，背后的解决逻辑是怎样的，而已。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;如果，对于一个技能，你认为既没有用，又没有兴趣，那我个人就建议，没必要学习。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不用纠结一个技能有没有用。这个问题没有意义。因为所有的技能，出现在了这个世界上，就一定是有用的。&lt;strong&gt;问题的关键是，这个技能对你有没有用。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果你的问题是不知道它有什么用，别人还可以告诉你，这个技能能做这个，能干那个；&lt;/p&gt;
&lt;p&gt;但是如果像这个提问的同学一样，已经很明确的感知到英语这个技能，毫无作用，那么事实很可能就是这样的：现阶段而言，英语对你就是没有用。如果已经有了这么清晰的判断，我个人的建议就是：不要学。&lt;/p&gt;
&lt;p&gt;原因很简单，在这种情况下，学习效率实在太低了。大家都是成年人，已经有了充足的自我选择的空间和自由，完全没有必要再像基础教育的时候一样，被别人逼着去学习了。别人逼着学，谁都不开心，好不容易长大了，为什么不开开心心做自己喜欢的事儿？&lt;/p&gt;
&lt;p&gt;比如数学，很多同学就觉得没用，工作的时候也用不到。那在我看来，就没必要去学。什么时候突然发现：有些机会，自己抓不到，但是别人能抓到，是因为那些人的数学比自己好的时候，再去学。学起来自然有目标，有动力，效果会很显著。&lt;/p&gt;
&lt;p&gt;再比如算法，很多同学也觉得没用。所以我干脆写了一篇文章，叫&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-03-18/"&gt;《学算法有什么用，可能真没用》&lt;/a&gt;。也是这个意思。作为一个教算法的老师，天天喊大家可能不用学算法，也是没谁了。慕课网都拿我很无奈。&lt;/p&gt;
&lt;p&gt;你说算法决定了一个计算机工作者的基础素养和技术上限，我同意。但我确实看到了很多大牛，也在互联网行业摸爬滚打，混得风生水起，可是算法真的不怎么样。我说的是大实话。感兴趣的同学可以再看看那篇文章。&lt;/p&gt;
&lt;p&gt;对于很多同学而言，算法的核心作用可能就是应付面试。那就学到能应付面试为止就好了。面试算法真的不难。目标明确的话，学起来也很有动力，效率也很高。等什么时候，你发现限制自己技术的天花板是算法的时候，再去好好学算法。学起来自然有目标，有动力，效果会很显著。&lt;/p&gt;
&lt;p&gt;又比如英语，在我看来也是这样的。这名同学的提问有问题吗？我觉得没有任何问题的。虽然我认为英语很重要，而且我看到的事实是，在统计意义上，英语越好的同学，机会越多，但是这不代表要想走向成功，英语必须好。讲真，英语不怎么样，做得很成功的人，一抓一大把。&lt;/p&gt;
&lt;p&gt;我印象最深的，就是2016年的苹果发布会，请到了超级玛丽的设计者宫本茂。宫本茂说的那两句英文，显然是事先准备好的。但就是准备好的这两句，他说的那个蹩脚程度，看他的表情，我自己都替他觉得尴尬。&lt;/p&gt;
&lt;p&gt;&lt;img alt="mario" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-06-03/mario.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;但那又怎样呢？人家是享誉全球的大IP超级玛丽之父啊！当他用蹩脚的英语宣布超级玛丽将会上架 App Store 的时候，会场上爆发出了在我看来是那场发布会最热烈的欢呼。任天堂的股价当天直飙18.79%。&lt;/p&gt;
&lt;p&gt;我在互联网上没有看到任何一个人讨论宫本茂大神的英语问题。&lt;/p&gt;
&lt;p&gt;那么，学英语是必须吗？必须不是啊！&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;所以，问题又回到了我在&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-03-08/"&gt;《学算法有什么用，可能真没用》&lt;/a&gt;一文中最后的观点：一个东西是不是没有用，这不是一个核心的问题。核心的问题是：对于每个人来说，我们能不能理清对自己来说，有用的是什么？当下自己学习什么，受益最大，效益最高？或者自己最感兴趣，所以学习速度可能最快，获得的成就可能最卓越？这才是最最最重要的问题。&lt;/p&gt;
&lt;p&gt;一旦想明白了对于自己来说，什么东西最有必要学，就一股脑地去学好了。学的过程中，大家可能会发现需要其他领域的知识支撑，再去补就好了。效果最好，效率最高。甚至不去补，想办法绕过它，就像这名同学说的，谷歌翻译挺好的啊，对于我的需求，足够了啊。那就ok。继续向着自己的目标去。&lt;/p&gt;
&lt;p&gt;其实，真的没有那么多人去关注你不会什么，没学什么；&lt;strong&gt;在社会上，大家普遍更关注的是：你会什么，学了什么，做了什么。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不要在意别人的目光。&lt;/p&gt;
&lt;p&gt;不要认为所有人都觉得该会的东西你一定要会，比如英语和数学；&lt;/p&gt;
&lt;p&gt;也不要认为所有人都觉得该有的东西你一定要有，比如房子和车子。&lt;/p&gt;
&lt;p&gt;关键是想清楚自己想要什么。如果能想清楚这个问题，即使最后得出的结论和大多数人是一样的，在我看来，也是酷酷的。因为，你有属于你自己的思考。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在我看来，“酷”从不代表着和别人不一样。因为“酷”本身，和别人一点儿关系都没有。“酷”的来源，是对自己的深刻了解。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当然了，我也必须要说，对于很多同学，可能还想不清楚自己要什么，可能还在探索自己的方向，这也很正常。在这种情况下，如果问我，从事计算机行业，建议学什么？&lt;strong&gt;我给的建议是：学好计算机的基础知识（算法，数据结构，操作系统，等等等等）和英语。&lt;/strong&gt;因为以我的认知，这二者是最通用的，能最大概率让大家脱颖而出，或者带给大家新机会的技术。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-06-03/readme.md" rel="alternate"/></entry><entry><id>2019/2019-05-30/readme.md</id><title>看美剧学英语考不考谱？我说靠谱，但别较劲</title><updated>2019-05-30T00:00:00-07:00</updated><content>&lt;h2&gt;看美剧学英语考不考谱？我说靠谱，但别较劲&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;上周，我的推文&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-05-19/"&gt;《如何把技术做深？可能，这是一个错误的问题》&lt;/a&gt;一文中，我曾经谈到过英语学习，特别是英语阅读的问题。&lt;/p&gt;
&lt;p&gt;在这一周，我在慕课网的专栏更新的&lt;a href="https://m.imooc.com/collector/27?distId=1a99b&amp;amp;utm_source=fenxiao"&gt;《学英语的最佳年龄到底是什么时候》&lt;/a&gt;一文中，带领大家看了一篇比较新的研究英语学习的论文，又谈到了这个问题。&lt;/p&gt;
&lt;p&gt;其实，两篇文章都指向一个方向：&lt;strong&gt;想提高英语水平，最简单的方法，也或许是唯一的方法，就是不停地接触英语。&lt;/strong&gt;用英语去看书，看剧，看新闻，看动漫，打游戏，学习，交流。时间长了，自然而然，就会提高，想拦都拦不住。&lt;/p&gt;
&lt;p&gt;很多同学总把注意力放在非常细节的学习方法上，比如遇到不会的词要不要查？每张纸查几个词？不会的词要不要记录？要不要复习？怎么复习？什么频率？。。。&lt;/p&gt;
&lt;p&gt;对这些具体问题，我确实有一些建议，有机会可以再细说。但是整体上，&lt;strong&gt;在“长期大量接触英语”这个方法面前，所有的这些细节问题都是雕虫小技。&lt;/strong&gt;在具体使用英文的过程中，不认识的词已经影响你获取信息了，你自然会去查。至于要不要复习，肯定能适当复习是好的，&lt;strong&gt;但是，我敢向你保证：只要你愿意长期大量的接触英文，不复习一点儿影响都没有，肯定会进步的。因为长期大量接触英文本身，就是复习！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在这篇文章中，我想聊聊看美剧学英语。&lt;/p&gt;
&lt;p&gt;其实，这是我在知乎的一个回答，之前也曾经向大家推荐过。但是鉴于很多同学肯定没有看到。我稍加修改，在公众号里再推送一遍。&lt;/p&gt;
&lt;p&gt;看美剧学英语有多靠谱？我的结论是：非常非常非常靠谱。这个道理很简单，不断地进行英文输入绝对是没错的。但是，必须强调：&lt;strong&gt;千万不要有中文字幕！&lt;/strong&gt;千万不要有中文字幕！千万不要有中文字幕！重要的事情说三遍！&lt;/p&gt;
&lt;p&gt;如果挂中文字幕能学好英语的话，那每所大学里都有无数的英语达人了！毕竟，据我所知，追美剧的人不在少数，很多人对热播美剧如数家珍。甚至很多同学自大学以来的休闲时间，都是在美剧中度过的。但是！！大多数同学的英语水平没有显著提高，就是中文字幕惹的祸。&lt;/p&gt;
&lt;p&gt;一旦有中文字幕，基本上大家都不会去思考语言的问题了。但没有中文字幕，为了理解剧情，我们就会去思考，这个人说的这句话是什么意思？我们才会去体会，原来表达这个意思，可以用这个词，可以这么说，可以这么搭配，可以这么组织语言，我们的英语水平才可能提高。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于看美剧学英语，很多人都会建议，完全扔掉字幕去看剧，直接啃生肉。当然，如果你的水平能直接啃生肉，固然是好的。但是，对于大部分同学来说，可能一上来就啃生肉，学习曲线过于陡峭了。&lt;/p&gt;
&lt;p&gt;在大家已经有一定的英语基础（大概四级水平）和能啃生肉美剧之间，我认为有一个很重要的过渡。&lt;strong&gt;这个过渡期，我建议大家看美剧挂英文字幕。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;有一派观点认为看美剧挂英文字幕，训练的是阅读而非听力。我的亲身经历表明，这是不对的，或者说是不完全对的。我认为：&lt;strong&gt;看剧使用英文字幕，是从阅读为主的学习向听力为主的学习的一个重要过渡。&lt;/strong&gt;虽然，必须承认：有了英文字幕，很多人会依靠字幕而非听力获得美剧里的信息，但这不是坏事。&lt;/p&gt;
&lt;p&gt;因为，这是一个非常重要的，纠正发音的过程。相信很多同学都有感受：整篇英语文章能“看”懂意思，但要是朗读出来，简直是一塌糊涂。这是因为我们“哑巴”英语的教学环境，使得很多同学是“看”懂词的意思，但是对单词发音并不明确，甚至错的很离谱。对单词发音错误的认识，将直接妨碍听力。你都不知道单词的正确读法，怎么可能听懂？&lt;/p&gt;
&lt;p&gt;那怎么办？难道只能对着字典把所有单词的正确发音听一遍来纠正自己？虽然市面上有这样的产品，我也知道有人这样做，但这实在是太枯燥了！所以，对着英文字幕把美剧看一遍，我认为是非常自然地纠正发音的方式。&lt;/p&gt;
&lt;p&gt;不要以为这个过程会那么的愉快。不信试试看。如果不曾只使用英文字幕看美剧，不管是多么喜欢的美剧，半个小时一定会看累的。就是因为不适应，我们需要额外的集中注意力才能反映出人物对白的意思，从而理解剧情的走向。这个过程大脑是以学习为主，休息为辅的，所以会疲劳。因为这是一个学习的过程。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;另外，我提倡看剧挂英文字幕，还有一个很普遍的原因：词汇量。&lt;/p&gt;
&lt;p&gt;在这一点上，实际看美剧是有优势的。因为美剧中的词汇主要出现在对话中，所以不会像英文原著那样包含很多的复杂的文学性修辞词汇。但即使这样，不要小瞧美剧中的词汇量。《friends》之所以被奉为美语学习的经典，一个很大的原因是其词汇量低，用词简单（这里暂不探讨俚语和文化的问题）。&lt;/p&gt;
&lt;p&gt;那么《friends》的词汇量是多少呢？整部美剧共十季237集，我粗略统计，不重复的单词个数是10697个。当然，这里会包括很多单词的不同形态，所以实际数字比这个数字要少。但大概是这个量级：一万词。&lt;/p&gt;
&lt;p&gt;我不确定大家对词汇量有没有概念。随便在网上查一查，有很多词汇量测试的工具，国内外都有。我建议同学们有时间做一做，对自己的词汇量有一个大概的认识。整体上，如果大家只是在国内的环境下接触英语教育，即使过了六级，应该词汇量都达不到1万的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;词汇量一万是什么水平呢？在英语为母语的国家，这是一个八岁孩子的词汇量的水平。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这也告诉我们，虽然现在很多声音鼓吹什么核心词汇只要2000词；3000词；6000词的（虽然他们也有他们的道理），但是一部简单的friends，需要我们认识上万词。单词都不认识，怎么谈听懂？更不要说一个单词的不同用法和搭配了。所以对着英文字幕看美剧也是一个积累词汇量；更重要的是，学习词汇如何实际使用的过程。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;什么时候可以脱离英文字幕直接看美剧了？我的经验是，当不需要暂停，也能完整理解美剧的意思的时候，就可以尝试不要英文字幕了。注意，是“完整理解”，不是“猜懂”，这个度每个人要自己把握。是的，至少我在刚开始用英文字幕看美剧的时候，需要不时地暂停、甚至要回退重新看几遍，才能真的理解人物到底说了什么，是什么意思......&lt;/p&gt;
&lt;p&gt;真到了那个阶段，如果想要看剧提高自己的英语水平，要聊的可能是另外一些问题了。这篇文章暂时聚焦在“需要使用英语字幕看剧”的阶段。&lt;/p&gt;
&lt;p&gt;在这里，我还想说另外一个话题。就是有很多英语学习方法，建议一个剧来回刷，刷他个五遍十遍甚至二十遍。&lt;/p&gt;
&lt;p&gt;这样做有没有效果呢？有。但是，我不是特别赞同。至少，这种方法不适合我，因为太枯燥了。讲真，在我眼里，很少有美剧值得让我在短时间内重复看十遍二十遍的。连第二遍我都懒得看，包括《friends》。&lt;/p&gt;
&lt;p&gt;这又回到了文章开头的问题了。想提高英语水平，最简单的方法，也或许是唯一的方法，就是长期大量地接触英语。&lt;/p&gt;
&lt;p&gt;我说是“接触英语”，而不是“学英语”。&lt;/p&gt;
&lt;p&gt;什么区别？接触英语，本质是在应用英语，目的在于获取其他信息，而不是学习语言的使用方法（发音，语法，搭配，组织，等等等等）。获取信息是首要的，学英语是次要的。是“顺便”的。&lt;/p&gt;
&lt;p&gt;而把一个美剧翻来覆去的刷，显然首要任务是“学英语”，而不是“获取信息”。因为顶多刷两遍，这个美剧讲的是什么，你肯定已经知道了。&lt;/p&gt;
&lt;p&gt;翻来覆去地刷美剧，在我看来，只会让我“恶心”，时间长了，都不爱看美剧了。那就得不偿失了。&lt;/p&gt;
&lt;p&gt;我觉得只要坚持，但凡看美剧或者英文电影，就只挂英文字幕看，时间长了，就会有效果。既然一遍看懂了，干嘛把美剧当课文，非要烂熟于心呢？那么多美剧，都能看懂也了不得。&lt;/p&gt;
&lt;p&gt;翻来覆去地看，相当于是“精”学习了。&lt;strong&gt;如果大家有时间精力去“精”学习，我建议把这个时间精力放到更专业的英语学习材料上。&lt;/strong&gt;比如《新概念》就很好。用看美剧的方式“学英语”，关键就是“顺便”二字，休息娱乐的时候，顺便学学英语。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果你不是要顺便学英语，有很明确的目标，要专门学英语，请千万不要看美剧学英语&lt;/strong&gt;，耽误事儿。根据你的需求，市面上不同的严肃且有效的英语教材非常多。&lt;/p&gt;
&lt;p&gt;所以，大家想看剧顺便学英语，千万“别较劲”。看个美剧，别想着每个词每句话都搞得一清二楚的。看懂了就好了。真想较劲，跟严肃的英文教材多较劲。请大家再回顾我的文章：&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2018/2018-04-18/"&gt;《如果高效学习有什么秘诀的话，那就都在这里了：）》&lt;/a&gt;。&lt;strong&gt;不要完美主义。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当然了，人和人不同，比如有些人就是觉得《friends》超级好看，看二十遍都不腻，那么翻来覆去刷当然可以。&lt;/p&gt;
&lt;p&gt;这里，还请大家体会我的核心思想：&lt;strong&gt;怎么看，看什么，这些统统不重要。重要的是长期大量坚持接触英语。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最后，有些同学问我怎么找到只有英文字幕的资源。&lt;/p&gt;
&lt;p&gt;国内大多数片源，都是中英文字幕的。其实，使用“物理法”就很好。我学生时代就干过这事儿。拿个纸条一贴就可以。我网上一搜，果然也有人这么干。如下图所示。图片来自知乎。&lt;/p&gt;
&lt;p&gt;&lt;img alt="zhihu" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-05-30/zhihu.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;另外，有一些播放器支持马赛克功能，可以给中文字幕的位置打上马赛克。比如QQ影音。不影响观看的。以下图片来自网络搜索。&lt;/p&gt;
&lt;p&gt;&lt;img alt="subtitle1" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-05-30/subtitle1.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="subtitle2" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-05-30/subtitle2.png" /&gt;&lt;/p&gt;
&lt;p&gt;最后，如果想找到英文字幕的源文件，&lt;strong&gt;可以尝试科学上网后搜索“english subtitles”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;英文原文接触多了，很多时候，对原文所表达的意思，也会有自己的理解，自己的思考。在我看来，这才是学习英语最大的魅力啊。我们因此可以接受第一手的材料，直接和作者“对话”。&lt;/p&gt;
&lt;p&gt;比如，在我的文章&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-04-18/"&gt;《从巴黎圣母院的大火，到消逝的IT巨头》&lt;/a&gt;中，我就对大多数字幕组在《before sunset》中关于巴黎圣母院的那句翻译产生了质疑。&lt;/p&gt;
&lt;p&gt;&lt;img alt="dame" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-05-30/dame.png" /&gt;&lt;/p&gt;
&lt;p&gt;虽然其实无关紧要，但是不是很酷？：）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-05-30/readme.md" rel="alternate"/></entry><entry><id>2019/2019-05-29/readme.md</id><title>如何优雅地证明平方差公式？</title><updated>2019-05-29T00:00:00-07:00</updated><content>&lt;h2&gt;如何优雅地证明平方差公式？&lt;/h2&gt;
&lt;p&gt;聊点儿轻松的：）&lt;/p&gt;
&lt;p&gt;出一个初中数学题：&lt;strong&gt;平方差公式怎么证明？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;即，&lt;strong&gt;如何证明：a² - b² = (a + b)(a - b)&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;这个问题，在我们初中学习的过程中，证明思路大概是这样的：&lt;/p&gt;
&lt;p&gt;首先，我们知道了多项式和的乘法公式，即：&lt;/p&gt;
&lt;p&gt;(a + b)(c + d) = ac + ad + bc + bd&lt;/p&gt;
&lt;p&gt;然后，我们就可以把c = a，d = -b带进这个公式：&lt;/p&gt;
&lt;p&gt;(a + b)(a + (-b)) = a*a + a*(-b) + b*a + b*(-b)&lt;/p&gt;
&lt;p&gt;注意，中间的两项，a*(-b) 和 b*a 是相反的，所以可以消掉，就剩下了两项。a*a 和 b*(-b)，即 a² - b²&lt;/p&gt;
&lt;p&gt;所以我们证明出了：(a + b)(a - b) = a² - b²&lt;/p&gt;
&lt;p&gt;当然，我们整个推导过程，每一步都是”等价于“，所以从左推到右和从右推到左都是可以的。我们就有了：&lt;/p&gt;
&lt;p&gt;a² - b² = (a + b)(a - b)&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;上面的证明，是一个典型的代数证明。但是，&lt;strong&gt;代数证明的缺点是：太过抽象。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;实际上，平方差公式有一个优雅的几何证明方式：）&lt;/p&gt;
&lt;p&gt;因为一个数字的平方，就对应于以这个数字为边长的正方形的面积。&lt;/p&gt;
&lt;p&gt;所以，我们可以想象：a² 是一个大正方形的面积；b² 是一个小正方形的面积。我们将两个正方形这么摆：&lt;/p&gt;
&lt;p&gt;&lt;img alt="img1" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-05-29/img1.png" /&gt;&lt;/p&gt;
&lt;p&gt;很显然，我们要求的 a² - b²，就是蓝色部分面积。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;我们添加一条辅助线：&lt;/p&gt;
&lt;p&gt;&lt;img alt="img2" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-05-29/img2.png" /&gt;&lt;/p&gt;
&lt;p&gt;很显然，下面绿色部分的矩阵，面积是(a - b) * b；上面蓝色部分的矩形，面积是(a - b) * a。&lt;/p&gt;
&lt;p&gt;我们要求的 a² - b²，就是把橙色部分的 b*b 的正方形扔掉，蓝色和绿色两部分面积之和。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;由于这两个矩形，都有一个边是 a - b 这么长，我们可以把它们合起来。就是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="img3" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-05-29/img3.png" /&gt;&lt;/p&gt;
&lt;p&gt;这个矩形整体的面积是什么？就是 (a + b)(a - b) 啊！&lt;/p&gt;
&lt;p&gt;得证：a² - b² = (a + b)(a - b)&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;对了，这篇文章的配图都是我在ipad上手绘出来的，允许我炫耀一下 &lt;/p&gt;
&lt;p&gt;很多代数表达，都有很优雅的几何证明方式。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;通常，几何证明的缺点是，有局限性。&lt;/strong&gt;比如，在上面的证明中，其实隐含了很多假设：我们的a和b都必须是正数，同时，a还要比b大。但我们知道，平方差公式，是对任意数，甚至是复数，都成立的。&lt;/p&gt;
&lt;p&gt;但是，&lt;strong&gt;几何证明最大的优点，是直观。&lt;/strong&gt;它能帮助我们迅速将抽象的代数表达和具体的图形之间建立联系，&lt;strong&gt;帮助我们”看到“代数式到底在表达什么意思。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于很多数学问题，直观的几何表达都能轻易帮助我们更快速的理解，之后，我们也能轻松将代数表达推广到更抽象的范围，比如数字是负数或者复数的情况：）&lt;/p&gt;
&lt;p&gt;是不是很酷？&lt;/p&gt;
&lt;p&gt;有机会，再向大家介绍更多代数问题的几何证明：）&lt;/p&gt;
&lt;p&gt;大家加油！：）&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-05-29/readme.md" rel="alternate"/></entry><entry><id>2019/2019-05-28/readme.md</id><title>到底有没有必要学AI?</title><updated>2019-05-28T00:00:00-07:00</updated><content>&lt;h2&gt;到底有没有必要学AI?&lt;/h2&gt;
&lt;p&gt;昨天的推文&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-05-27/"&gt;《美国人眼里的前沿趋势技术是什么？》&lt;/a&gt;，我向大家整理了现在美国确认的高新前沿技术名单。大家很容易看出来：AI是很重要的一部分。就算不把AI单独拿出来，其实在不同的专业领域，AI都将要，或者说正在发挥着重大的作用。&lt;/p&gt;
&lt;p&gt;但是，普通人需不需要学习AI呢？&lt;/p&gt;
&lt;p&gt;如果你还是学生，或者将来有读研或者读博的想法，对于大部分理工科领域（不仅仅是计算机），近乎一定都会用到AI。我建议学习，绝对有用。&lt;/p&gt;
&lt;p&gt;如果你在工作，但不是AI岗算法岗，我的看法是，学AI不是必须。不过如果你有充电的时间和意愿，对于技术工作者来说，多少触一下AI的基础知识，有百利而无一害。&lt;/p&gt;
&lt;p&gt;为什么这么说？现在主流的AI技术——机器学习，解决问题的方式，和传统的计算机解决问题的方式是完全不同的。机器学习解决问题的方式是”基于数据“，而传统的计算机算法解决问题的方式是”基于逻辑“。这两种思想之间有巨大的差异和鸿沟。&lt;/p&gt;
&lt;p&gt;在这里，我们不讨论那种思维方式好。实际上各有千秋，适用的场景不同。但接触机器学习，在我看来并不是一定为了找一个AI相关的工作，而是多一个思考问题的角度。同时，对很项目，事情，新闻或者人，都能多一分属于自己的判断力，而不是人云亦云。这也一定程度减少了盲目跟风（对某些项目或者投资）所带来的风险。&lt;/p&gt;
&lt;p&gt;也正是因为这个原因，我认为从教育的角度，小学中学的教育不说，但是本科教育，尤其是计算机教育，AI一定会慢慢成为一种”必修课“。因为它不仅仅是一个技能，更是一种思维方式。AI如何解决问题；能解决什么问题；有什么坑；怎么看待AI给出的结果，这些思考将慢慢成为一个技术人的基本素质，这些都和找到一份具体的工作没有关系。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;该文是一个广告推广的引导语，现将这部分引导语保存在这里：）&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-05-28/readme.md" rel="alternate"/></entry><entry><id>2019/2019-05-27/readme.md</id><title>美国人眼里的前沿趋势技术是什么？</title><updated>2019-05-27T00:00:00-07:00</updated><content>&lt;h2&gt;美国人眼里的前沿趋势技术是什么？&lt;/h2&gt;
&lt;p&gt;这个月，美国共和党抛出了一个新的议案。整体，这个议案是希望能够减少甚至是杜绝中国的组织，企业或者是个人接触到更多美国的敏感高新技术信息。&lt;/p&gt;
&lt;p&gt;据我了解，这里所说的接触，是指：&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1）阻止美国企业将敏感高新技术信息卖给中国。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这一点可能有些同学不很了解。其实，在过去的二三十年，很多美国企业将他们的高新技术，以这样或者那样的形式，卖给了中国的政府或者企业。当然，这个买卖是合法的。在大多数时候，都是美国企业为了进入中国市场，而进行的“交换”。&lt;/p&gt;
&lt;p&gt;至于这个交易是不是“你情我愿”，这事儿我觉得没法说。比如你为了高考考出好成绩，花钱去了一个补习班。你不去这个补习班，高考就可能拿不到好成绩；但你说你是自愿去这个补习班，感觉似乎也不太对。毕竟你可能也不想高考。但高考这个制度让你为了上大学，不得不高考。&lt;/p&gt;
&lt;p&gt;当然，中美关系比这个复杂，我这个例子过于简单，比喻也不够贴切。只是为了说明，可能很多时候，“你情我愿”和“合法合理”是两个维度。二者之间有冲突的可能性。依然是，这事儿没法深说，至今为止我见到说深了的公号文章都被禁了。所以，我们不聊政治。&lt;/p&gt;
&lt;p&gt;现在，共和党就是在思考用立法的方式直接杜绝这一点。换句话说，美国的企业只要卖高新技术，那就是违法行为。美国政府不管企业出于什么目的，能为此得到多大市场，换来美国多少就业，都不行。搞得高新技术跟毒品似的。
这其实也是Google第一时间“响应号召”限制华为使用Android的原因。因为必须要守法。当然，Google遵守的法律并不是这个新法案。这个新法案还没有通过。Google遵守的是川普的行政令。&lt;/p&gt;
&lt;p&gt;是的，川普为此特意宣布&lt;strong&gt;美国进入了国家紧急状态&lt;/strong&gt;，签署了一道行政令。。。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2）另外一点，就是禁止任何中国军方资助的学生，来美国高校接受这些高新技术领域的学习。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在这里，大家要仔细分辨。因为有很多公号夸大其词，制造焦虑，吸引眼球，表示美国是禁止所有中国学生来美国学习这些项目。&lt;strong&gt;不是这样的。这个法案限定在由中国军方资助的学生身上。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所以，整体而言，据我现在了解的情况，&lt;strong&gt;如果是自费读书；或者是自己申请到美国大学的奖学金来读书，肯定不受影响。&lt;/strong&gt;因为是个人行为。&lt;/p&gt;
&lt;p&gt;如果是博士后，或者是教授（不管是正教授还是AP），但是&lt;strong&gt;是美国的学校给工资，或者研究基金来自美国，也不会受到影响。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不过，如果是因为国家的各种项目来美国做访问交流（访问学者或者交流学生），可能会受到影响。因为你的资金来源是中国，美国可能分不清楚这个资金是不是中国军方的资金。因此，我估计，现在中国的学府里，中美之间的这种学术访问交流应该也少了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;现在问题来了，美国藏着掖着的这些高新敏感技术是什么呢？&lt;/p&gt;
&lt;p&gt;事实上，美国一直有一个高新敏感技术名单。但是这个名单已经有好长时间不更新了。比如“核物理”就是典型的，毫无争议的，敏感技术；再比如计算机领域，信息加密，网络安全等技术，也属于敏感技术。&lt;/p&gt;
&lt;p&gt;但是去年11月份，美国大幅度更新了这个名单。一下子为这个名单添加了14个大的学科领域，每个领域下还有若干细分专业。这些专业被美国称为新兴技术（emerging technologies）。在新的时代下，美国暂时认为他们也是敏感的，不能随便“外传”。&lt;/p&gt;
&lt;p&gt;但是，这个名单的涵盖范围实在是太广了。有多广呢？周末我和朋友出去玩儿，还聊到了这件事儿。我们都戏称，&lt;strong&gt;现在，如果你学的专业不在这个名单里，都不好意思和别人打招呼了。&lt;/strong&gt;大家稍后看一下这个名单，就知道什么意思了。&lt;/p&gt;
&lt;p&gt;从另外一方面，我个人认为，&lt;strong&gt;这些专业方向可以一定程度象征着未来的趋势。&lt;/strong&gt;毕竟是美国认为敏感的，值得“保密”的技术。这些技术如果真的有很大的作用，道理上，中方也会花费大力气投入研究。相较而言，就会给这些领域带来一定的“红利”。&lt;/p&gt;
&lt;p&gt;有人说看中国的趋势，要好好看中央台每天晚上七点的新闻联播。我觉得，看美国的新闻联播，也挺有信息量的：）&lt;/p&gt;
&lt;p&gt;至于知道了这些趋势，要具体怎么行动，那就是见仁见智的事情了。不同的人，不同的年龄，不同的专业，不同的背景，不同的经验，面对每一个领域的每一条消息，反应都是不尽相同的。反正我说，按照这个专业列表买股票，&lt;strong&gt;投资失败，后果自负。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我在这里列出来，主要是为了让大家学英语。每一个专业，都标注有原版文件上的英文名称。中文是我翻译的。由于我不了解所有的领域，所以不保证翻译准确。大家可以点击这里，直接看美国原版官网上的文件：&lt;a href="https://www.federalregister.gov/documents/2018/11/19/2018-25221/review-of-controls-for-certain-emerging-technologies"&gt;https://www.federalregister.gov/documents/2018/11/19/2018-25221/review-of-controls-for-certain-emerging-technologies&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;以下是专业列表：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(1) Biotechnology, such as:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;生物技术，例如&lt;/p&gt;
&lt;p&gt;(i) Nanobiology;&lt;/p&gt;
&lt;p&gt;纳米生物学&lt;/p&gt;
&lt;p&gt;(ii) Synthetic biology;&lt;/p&gt;
&lt;p&gt;合成生物学&lt;/p&gt;
&lt;p&gt;(iv) Genomic and genetic engineering; or&lt;/p&gt;
&lt;p&gt;基因组学和基因工程&lt;/p&gt;
&lt;p&gt;(v) Neurotech.&lt;/p&gt;
&lt;p&gt;神经技术&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(2) Artificial intelligence (AI) and machine learning technology, such as:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;人工智能和机器学习，比如：&lt;/p&gt;
&lt;p&gt;(i) Neural networks and deep learning (e.g., brain modelling, time series prediction, classification);&lt;/p&gt;
&lt;p&gt;神经网络和深度学习（例如：脑建模，时间序列的预测和分类）&lt;/p&gt;
&lt;p&gt;注：在这里，我还挺惊讶这份文件单独将时序数据问题单独拿出来举例的。不过仔细思考，时序数据问题确实蛮重要。有机会单独发文聊一聊。&lt;/p&gt;
&lt;p&gt;(ii) Evolution and genetic computation (e.g., genetic algorithms, genetic programming);&lt;/p&gt;
&lt;p&gt;进化和遗传计算（例如：遗传算法，遗传编程）&lt;/p&gt;
&lt;p&gt;(iii) Reinforcement learning;&lt;/p&gt;
&lt;p&gt;强化学习&lt;/p&gt;
&lt;p&gt;(iv) Computer vision (e.g., object recognition, image understanding);&lt;/p&gt;
&lt;p&gt;计算机视觉（例如：目标检测，图像理解）&lt;/p&gt;
&lt;p&gt;(v) Expert systems (e.g., decision support systems, teaching systems);&lt;/p&gt;
&lt;p&gt;专家系统（例如：决策支持系统，教学系统）&lt;/p&gt;
&lt;p&gt;(vi) Speech and audio processing (e.g., speech recognition and production);&lt;/p&gt;
&lt;p&gt;语言及音频处理（例如：语言识别和语言产生）&lt;/p&gt;
&lt;p&gt;(vii) Natural language processing (e.g., machine translation);&lt;/p&gt;
&lt;p&gt;自然语言处理（例如：机器翻译）&lt;/p&gt;
&lt;p&gt;(viii) Planning (e.g., scheduling, game playing);&lt;/p&gt;
&lt;p&gt;规划（例如：调度，博弈）&lt;/p&gt;
&lt;p&gt;(ix) Audio and video manipulation technologies (e.g., voice cloning, deepfakes);&lt;/p&gt;
&lt;p&gt;音频视频操纵（例如：声音克隆技术，deepfake）&lt;/p&gt;
&lt;p&gt;注：deepfake现在已经是一个专有的技术术语了，在2017年才出现。如果不了解的同学可以在网上搜索deepfake。应该有不少奇怪的新闻。。。&lt;/p&gt;
&lt;p&gt;(x) AI cloud technologies; or&lt;/p&gt;
&lt;p&gt;AI云技术&lt;/p&gt;
&lt;p&gt;(xi) AI chipsets.&lt;/p&gt;
&lt;p&gt;AI芯片组&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(3) Position, Navigation, and Timing (PNT) technology.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;定位、导航和定时技术&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(4) Microprocessor technology, such as:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;微处理器技术，比如：&lt;/p&gt;
&lt;p&gt;(i) Systems-on-Chip (SoC); or&lt;/p&gt;
&lt;p&gt;片上系统（SoC）&lt;/p&gt;
&lt;p&gt;(ii) Stacked Memory on Chip.&lt;/p&gt;
&lt;p&gt;片上堆叠式内存&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(5) Advanced computing technology, such as:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;高级计算技术，比如：&lt;/p&gt;
&lt;p&gt;(i) Memory-centric logic.&lt;/p&gt;
&lt;p&gt;内存中心逻辑&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(6) Data analytics technology, such as:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;数据分析技术，比如：&lt;/p&gt;
&lt;p&gt;(i) Visualization;&lt;/p&gt;
&lt;p&gt;可视化&lt;/p&gt;
&lt;p&gt;注：其实我不太理解可视化技术为什么敏感，可能我对可视化的理解过于狭隘了。。。&lt;/p&gt;
&lt;p&gt;(ii) Automated analysis algorithms; or&lt;/p&gt;
&lt;p&gt;自动分析算法&lt;/p&gt;
&lt;p&gt;(iii) Context-aware computing.&lt;/p&gt;
&lt;p&gt;上下文感知计算&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(7) Quantum information and sensing technology, such as&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;量子信息和传感技术，比如：&lt;/p&gt;
&lt;p&gt;(i) Quantum computing;&lt;/p&gt;
&lt;p&gt;量子计算&lt;/p&gt;
&lt;p&gt;(ii) Quantum encryption; or&lt;/p&gt;
&lt;p&gt;量子加密&lt;/p&gt;
&lt;p&gt;(iii) Quantum sensing.&lt;/p&gt;
&lt;p&gt;量子传感&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(8) Logistics technology, such as:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;物流技术，比如：&lt;/p&gt;
&lt;p&gt;(i) Mobile electric power;&lt;/p&gt;
&lt;p&gt;移动电力&lt;/p&gt;
&lt;p&gt;(ii) Modeling and simulation;&lt;/p&gt;
&lt;p&gt;建模与仿真&lt;/p&gt;
&lt;p&gt;(iii) Total asset visibility; or&lt;/p&gt;
&lt;p&gt;全资产可见性&lt;/p&gt;
&lt;p&gt;(iv) Distribution-based Logistics Systems (DBLS).&lt;/p&gt;
&lt;p&gt;分布式物流系统&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(9) Additive manufacturing (e.g., 3D printing);&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;增材制造（例如3D打印）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(10) Robotics such as:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;机器人，比如：&lt;/p&gt;
&lt;p&gt;(i) Micro-drone and micro-robotic systems;&lt;/p&gt;
&lt;p&gt;微型无人机和微型机器人系统；&lt;/p&gt;
&lt;p&gt;(ii) Swarming technology;&lt;/p&gt;
&lt;p&gt;集群技术&lt;/p&gt;
&lt;p&gt;(iii) Self-assembling robots;&lt;/p&gt;
&lt;p&gt;自动装配机器人&lt;/p&gt;
&lt;p&gt;(iv) Molecular robotics;&lt;/p&gt;
&lt;p&gt;分子机器人&lt;/p&gt;
&lt;p&gt;(v) Robot compliers; or&lt;/p&gt;
&lt;p&gt;机器人编译器&lt;/p&gt;
&lt;p&gt;(vi) Smart Dust.&lt;/p&gt;
&lt;p&gt;智能微尘&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(11) Brain-computer interfaces, such as&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;脑机接口，比如：&lt;/p&gt;
&lt;p&gt;(i) Neural-controlled interfaces;&lt;/p&gt;
&lt;p&gt;神经控制接口&lt;/p&gt;
&lt;p&gt;(ii) Mind-machine interfaces;&lt;/p&gt;
&lt;p&gt;意识-机器接口&lt;/p&gt;
&lt;p&gt;(iii) Direct neural interfaces; or&lt;/p&gt;
&lt;p&gt;直接神经接口&lt;/p&gt;
&lt;p&gt;(iv) Brain-machine interfaces.&lt;/p&gt;
&lt;p&gt;脑-机接口&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(12) Hypersonics, such as:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;高超音速空气动力学，比如：&lt;/p&gt;
&lt;p&gt;(i) Flight control algorithms;&lt;/p&gt;
&lt;p&gt;飞行控制算法&lt;/p&gt;
&lt;p&gt;(ii) Propulsion technologies;&lt;/p&gt;
&lt;p&gt;推进技术&lt;/p&gt;
&lt;p&gt;(iii) Thermal protection systems; or&lt;/p&gt;
&lt;p&gt;热防护系统&lt;/p&gt;
&lt;p&gt;(iv) Specialized materials (for structures, sensors, etc.).&lt;/p&gt;
&lt;p&gt;特殊材料（用于结构、传感器等）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(13) Advanced Materials, such as:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;高级材料，比如：&lt;/p&gt;
&lt;p&gt;(i) Adaptive camouflage;&lt;/p&gt;
&lt;p&gt;自适应伪装&lt;/p&gt;
&lt;p&gt;(ii) Functional textiles (e.g., advanced fiber and fabric technology); or&lt;/p&gt;
&lt;p&gt;功能性纺织品（例如：先进纤维和面料技术）&lt;/p&gt;
&lt;p&gt;(iii) Biomaterials.&lt;/p&gt;
&lt;p&gt;生物材料&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(14) Advanced surveillance technologies, such as:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;高级监控技术，例如：&lt;/p&gt;
&lt;p&gt;Faceprint and voiceprint technologies.&lt;/p&gt;
&lt;p&gt;面纹和声纹技术&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;对于这个列表，好多技术名词，我也在网上查了半天，收获还不小呢：）&lt;/p&gt;
&lt;p&gt;另外，一些“新兴技术”，其实不在这个列表里。比如区块链技术。另外，以人工智能为例，一些细分的领域方向也并不在其中，比如推荐系统；比如知识表示，知识图谱等等。或许，是因为这些技术本身，对美国的国家安全，没有那么重要：）&lt;/p&gt;
&lt;p&gt;不管怎样，感谢美国政府的整理。希望大家都有所收获：）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大家加油！：）&lt;/strong&gt;&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-05-27/readme.md" rel="alternate"/></entry><entry><id>2019/2019-05-20/readme.md</id><title>浅谈Google限制华为</title><updated>2019-05-20T00:00:00-07:00</updated><content>&lt;h2&gt;浅谈Google限制华为&lt;/h2&gt;
&lt;p&gt;这篇文章我在昨天得知Google停止与华为的所有业务合作的时候，就在第一时间写出来了。结果因为昨天一早推送了一篇准备好的文章&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-05-19/"&gt;《如何把技术做深？可能，这是一个错误的问题》&lt;/a&gt;，就不能推送第二篇文章了。&lt;/p&gt;
&lt;p&gt;今天一天在准备专栏的更新，所以没有特别关注事情的进一步发展。文章进行了一些简单修改，但并不保证消息的实时性。毕竟，&lt;strong&gt;我的公号不是以报道科技新闻为主，而是分享技术观点为主&lt;/strong&gt;，所以，影响应该不大。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我的观点保持不变。愿世界没有战争。愿中国更加强大。&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;由于美国总统特朗普早前签署的禁令，Google已停止与华为的所有业务合作。&lt;/p&gt;
&lt;p&gt;虽然从法律角度，Google无法阻止华为访问安卓已经开放的原始代码（AOSP）。但是，Google可以禁止华为获得Google自家打造的Google框架服务（GMS）以及后续更新。这将限制华为手机使用诸多Google的服务，包括Gmail，Youtube，Google Play，Google搜索，Google日历，等等等等。&lt;/p&gt;
&lt;p&gt;从长期角度，华为无法获取最新版本的GMS及后续更新，会带来怎样的影响，现在还看不出来。也并不排除，在几个月后，中美局势有所缓解，使得这一限制取消。毕竟，这一限制，对Google也是极其不利的。&lt;/p&gt;
&lt;p&gt;但目前来讲，&lt;strong&gt;这些限制虽然对中国用户的影响近乎为零；对华为海外用户的影响，将是致命的。&lt;/strong&gt;因为，绝大多数海外用户，近乎一定使用Google Play作为安卓App的应用市场；近乎一定会看Youtube；近乎一定有一个Gmail邮箱；最常用的地图服务就是Google Map ...... 更不用提，有大量其他App，在制作的时候，会或多或少的使用GMS框架。最典型的例子，就是使用Google账户登录，在国外，就像使用qq或者微信账户登录一样常见。&lt;/p&gt;
&lt;p&gt;目前，安卓的官推已经宣布，现在华为海外手机，不会出现任何安全问题。因为对于Google Play以及背后的安全保护相关功能，还可以正常使用。&lt;/p&gt;
&lt;p&gt;&lt;img alt="android_twitter.png" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-05-20/android_twitter.png" /&gt;&lt;/p&gt;
&lt;p&gt;从我得知的消息，海外华为手机用户，也还可以正常使用诸如Gmail，Youtube等服务。所以这个限制具体将怎样落实，还是说对于已经发布的手机不进行限制，只针对未来华为的新手机做限制，Google还没有进一步的说明。不过，有一些海外用户已经开始表示极度的担心：&lt;/p&gt;
&lt;p&gt;&lt;img alt="twitter1" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-05-20/twitter1.png" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我一个月前买了P30 Pro，现在我不知道我的手机还能不能正常获得更新了。我身边的很多朋友也在担心这个问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2018年，华为的网络设备所占的市场份额，已经是全球第一；而华为手机的市场份额，则是全球第二（第一三星，第三苹果）。其中，华为手机的海外市场占比多少呢？大概占华为手机总市场的一半。2018年的数据，华为手机全球出货量2.06亿台，其中1.01亿台来自海外。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于这个事情，我的第一反应，是觉得有些吃惊。不是因为美国限制华为吃惊，而是这件事儿竟然被一贯以“不作恶”著称的Google打头阵而吃惊。我们曾经熟悉的那个Google，遇见这种事情，一定会一拖再拖，在最不得已的情况下，才会勉强为之。尤其这个事件本身，对Google的影响应该也是巨大的，并且是恶劣的。&lt;/p&gt;
&lt;p&gt;不过在过去的一年，Google在硅谷的口碑非常差（有时间发文单聊吧），现在看来，Google是要一路走到黑了。&lt;/p&gt;
&lt;p&gt;虽然我对安卓手机的生态不太熟悉，但可以预见的，还会有更多公司在Google的“榜样”作用下跟进，以各种方式限制华为。据我所知，现在，Intel，Qualxomn，Xilinx，Broadcom 四家企业也已经中断了和华为的业务往来。&lt;/p&gt;
&lt;p&gt;对于这个禁令发展到现在的状况，整体是非常复杂的。已经很难讲清谁对谁错了。由于国内信息高度不对称，这个禁令酝酿了一年多的时间，其间发生的很多事情，也没法在国内媒体聊。&lt;/p&gt;
&lt;p&gt;我只能简单地说：&lt;strong&gt;对于这场贸易战，从道德的角度，我不站队。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我坚持一个很朴实的观点：&lt;strong&gt;像这个世界上的大多数争执一样，这场贸易战是一个双方都占理，同时双方也都有错误的纠纷。&lt;/strong&gt;如果像某些媒体宣称的那样，这场战争谁对谁错一清二楚的话，这个事情也早就消停了。&lt;/p&gt;
&lt;p&gt;但是谁的理更多一些？谁的错更少一些？我相信，这是说不清楚的。&lt;/p&gt;
&lt;p&gt;不过，因为我的国籍归属，&lt;strong&gt;我希望中国挺住。中国必胜。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;现在，这个禁令所折射出的另一个更严重的问题是，&lt;strong&gt;美国能不能因为自己国家的利益，而损害全球消费者的利益？&lt;/strong&gt;毕竟，全球的其他消费者，是无辜的。&lt;/p&gt;
&lt;p&gt;这是全球经济一体化带来的重大问题，同时也是当下互联网时代，越来越多的商品拥有互联网特性所决定的。如今，我们购买的大量商品，都严重依赖线上服务。我们之所以付费，是因为我们相信，这些线上服务，能持续为我们提供价值。&lt;/p&gt;
&lt;p&gt;在没有互联网的时代，我买一个苹果，交完钱，这个苹果就在我的口袋里了。我想什么时候吃就什么时候吃；我想怎么吃就怎么吃，商家是完全无法限制我的。&lt;/p&gt;
&lt;p&gt;但是在互联网时代，对于一台苹果手机，苹果公司有能力远远地让它变成一个“砖头”，即使你已经付完了全款。这确实是科技的发展为世界带来的一个全新的挑战。&lt;/p&gt;
&lt;p&gt;现在看来，大多数消费者根本不关心贸易战的输赢问题，而是关注这个禁令可能带来的更深远的影响。在安卓的官推上，这样的言论随处可见。&lt;/p&gt;
&lt;p&gt;&lt;img alt="twitter2" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-05-20/twitter2.png" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果川普决定明天把三星或者小米加入黑名单怎么办？作为用户，作为消费者，我们需要知道你们（安卓）在维护我们（消费者）的权益，而不是在维护那个疯狂的老头儿（川普）的权益！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="twitter3" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-05-20/twitter3.png" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我必须说，美国和Google都疯了。这意味着，他们可以任意惩罚世界上的所有公司。那么全世界都会开始做自己的独立产品。安卓终将被打败。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="twitter4" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-05-20/twitter4.png" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;所以，仅仅是因为美国的法律，你们（安卓）就惩罚全世界成千上万的用户？如果这样做，美国以外的用户如何再信任Google？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;可以想见，如果这个禁令持续下去，不管华为愿不愿意，不管华为有没有能力，&lt;strong&gt;想要要生存下去，华为都必须自主研发属于自己的操作系统。站在国家的角度，我们国家也必须自主研制操作系统。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这已经不是一个可能不可能，生态不生态，成熟不成熟的问题了；而是这么做是唯一的出路的问题。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;同时，我们也将看到，在过去二三十年，全世界大多数软件开发者一起致力于建立的开源社区，也将一定程度萎缩。通过这一事件，不仅仅是中国，不仅仅是华为，对各个国家，各个企业，各个团队，都是生动形象的一课：&lt;strong&gt;核心技术必须攥在自己手里。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我认为计算机领域越来越多的非公开项目将开始实施；计算机世界的一些底层技术或者高端技术的交流，将被阻碍；，就像我们现在国家和国家之间交流核技术一样困难。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当然，自主研发操作系统是一个艰巨的任务。对于到底什么叫“自主研发的操作系统”，也有很多争论的空间，这篇文章暂不涉及。但是，&lt;strong&gt;大多数程序员都坚信的“技术没有国界”，被现实啪啪打脸了。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;实际上，&lt;strong&gt;技术一直有国界。&lt;/strong&gt;因为技术一直是和商业利益捆绑在一起的。而一个国家商业利益的总和，就是这个国家的经济。小到一个个人，一个家庭，大到一个国家，经济都是有边界的。你我再熟悉，也不能我的钱你随便花，你的钱我随便花。所谓亲兄弟还要明算账，更不用提国家之间。&lt;strong&gt;而技术上的优势，确实是美国的王牌。&lt;/strong&gt;从芯片，到操作系统。不管我们再怎么热血，也必须承认：&lt;strong&gt;在技术上，我们确实和美国有很大的差距。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最新消息，为了反击美国，中国将对美国的多种进口药品以及进口医疗器械加征关税。而医疗医药又是一个被高科技引领的领域，又近乎是美国的主场。对美国的药品加征关税会不会让美国损失。当然会，美国的股市已经在说明一切。但是，受到影响最大的是谁？&lt;/p&gt;
&lt;p&gt;我们不得不承认：是那些在中国的病患。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;说回Google和华为。&lt;/p&gt;
&lt;p&gt;一切挑战都是机遇。我希望借助这个契机，中国能够再用几年，哪怕是几十年的时间，在诸多高科技领域，真正达到世界领先水平。&lt;/p&gt;
&lt;p&gt;对于今天的局面，有很多海外友人是极度支持华为，支持中国的：&lt;/p&gt;
&lt;p&gt;&lt;img alt="twitter5" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-05-20/twitter5.png" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果华为发布新的操作系统，我会马上开始使用。并且寻找其他服务，来代替Google的所有相关服务。&lt;/p&gt;
&lt;p&gt;我已经使用华为自己的日历，浏览器，以及邮件服务了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="twitter6" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-05-20/twitter6.png" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这一切都太荒唐了。P30 Pro比我曾经使用过的任何一台iPhone都好。我支持华为，并且希望华为能够找到更好的解决方案。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="twitter7" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-05-20/twitter7.png" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我敢打赌，这个禁令之后，中国将做出一个更好的操作系统。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;当然，我很理解，很多同学会觉得，这些外国友人根本不了解国内的实际情况，他们可能并不知道我们到底还差多远。一个完备的操作系统，不是靠喊口号就能做出来的。&lt;/p&gt;
&lt;p&gt;这个逻辑当然对。可是就像前文所说，&lt;strong&gt;事情发展到这里，逐渐拥有独立自主的研发能力和产品，将近乎是我们的唯一出路。&lt;/strong&gt;我也不喜欢空喊口号的人，可是，仅仅一味谴责喊口号，似乎也并不能解决问题。&lt;strong&gt;所有问题的解决，都需要一步一个脚印的做出来。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我想说，大家也不用对我们的国家这么没信心。我可以给大家分享一个去年（2018年），中美贸易战初露端倪时的一个小故事。&lt;/p&gt;
&lt;p&gt;那天，我和一个美国朋友在车上闲聊，不经意之间谈起了中美之间的贸易战。你猜美国人是怎么反应的？&lt;/p&gt;
&lt;p&gt;他大说特说了一顿特朗普政府的“错误”政策和夸张言行以后，一本正经地对我说：我觉得中美贸易战，中国会赢的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;当然，历史可能会告诉我们，贸易战没有赢家。但我衷心希望：中国更加强大。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;大家加油：）&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-05-20/readme.md" rel="alternate"/></entry><entry><id>2019/2019-05-19/readme.md</id><title>如何把技术做深？可能，这是一个错误的问题</title><updated>2019-05-19T00:00:00-07:00</updated><content>&lt;h2&gt;如何把技术做深？可能，这是一个错误的问题&lt;/h2&gt;
&lt;p&gt;前一阵子，有一个同学问了我这样一个问题：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;工作五六年了，开发一直是又前又后，也可以说不前不后，做的项目比较杂，感觉自己技术没法做深，公司都是哪有坑就安排去哪，我一直希望能在某一方面做好做深，该如何是好？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我的回答可能要让这名同学失望了。因为，我想借这个问题，谈另一个话题。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;先讲故事：&lt;/p&gt;
&lt;p&gt;经济学家陈志武，在《中国人为什么勤劳而不富有》一书中，讲过这么一件事。在中国加入世贸组织的时候，提出了很多条款。比如就有这样一个条款：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;美国应该为中国培养更多的管理人才。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;就这么一句话，16个字，美国人看了一脸懵逼。为什么呢？美国人的问题是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;什么是“应该”？就是不做也可以？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;怎么就叫“培养”？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;多少算是“更多”？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;什么叫“管理人才”？&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;合着这么简单的一句话，在美国人看来，除了“中国”，“美国”这两个词没争议，到处都是争议。&lt;/p&gt;
&lt;p&gt;当然了，使用笼统而模糊的方式去表述，可能是中国政治家的有意为之，是一种“智慧”。我们依然是，不谈政治。（请勿随便和当下时事做任何联想，后果自负）&lt;/p&gt;
&lt;p&gt;放到实际的学习生活中，这样的内容，其实是毫无意义的。因为&lt;strong&gt;对内容中的关键词没有明确的定义，我们就无法去执行它。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;曾经有一个同学问我，&lt;strong&gt;如何学好英语。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我问他，你学英语是想做什么？他告诉我，想更流畅的读原版技术书籍。&lt;/p&gt;
&lt;p&gt;我说，那很简单啊。从今天开始，就去读原版技术书籍。我的建议是，找一个对你现在工作或者学习不重要，但是你感兴趣的领域，随便选择一本名声别太差的原版书籍，每天花半个小时到一个小时，坚持去读就好了。&lt;/p&gt;
&lt;p&gt;比如，你现在可能是做web开发的，那就找本Python原版书；比如你是做移动开发的，那就找本游戏制作的原版书。我只是举例子。关键在于：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;对你现在工作或者学习不重要。因为一开始读原版书，阅读进度肯定会很慢，如果是你工作学习就需要的内容，就会耽误正常的进度，不可取；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;要是你感兴趣的领域。这个不用多说了。只有你感兴趣，才有毅力读下去，如果是连中文你都不想读的内容，为什么要虐待自己读原版？&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在此基础上，我认为没什么特殊的方法。遇到不认识的词，觉得影响自己理解了，就去查。就这么简单。据传闻，《冰与火之歌》的翻译者，连英语六级都没过。当然，这是传闻，我没验证过真假。但是，一个没过英语六级的同学，能啃下冰火原著，我是完全相信的。我在初中的时候，学英语的全部动力，就是打游戏。并且事实证明，啃下来了游戏中的很多英文表述以后，我的英语考试成绩并不低。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;结果，这个同学听了我的建议之后，又说，其实，他还想能看懂没字幕的美剧。&lt;/p&gt;
&lt;p&gt;我说，那也容易啊，从今天开始，坚持看美剧。从有字幕的开始看，&lt;strong&gt;但一定不能有中文字幕&lt;/strong&gt;，只要有英文字幕就好了。天天看一集，看一年我估多少就有一些感觉了。别问我看什么，你喜欢看什么都可以。&lt;/p&gt;
&lt;p&gt;（关于看剧学英语的更多内容，我在知乎回答过一个这样的问题，有兴趣的同学可以去查看：&lt;a href="https://www.zhihu.com/question/21430286/answer/98312360"&gt;https://www.zhihu.com/question/21430286/answer/98312360&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;结果，这个同学听了我的建议之后，又说，其实，他还想考个雅思或者托福琢磨着出国读研。&lt;/p&gt;
&lt;p&gt;我说，那更简单啊，雅思托福都是标准化的考试，市面上帮你应考的教材培训班多如牛毛...&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我不知道大家有没有听懂这个故事。这个同学的问题是，“如何学好英语？”。&lt;strong&gt;但是，他自己却没有定义清楚，什么叫学“好”。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;诚然，能顺畅阅读原版书叫学好英语；能无字幕看懂美剧叫学好英语；能托福雅思考高分也叫学好英语。但是，在我们基础还比较薄弱的时候，我们必须选择一个方向前进，所以，我们必须定义清楚我们的需求，当下，我们觉得怎样是“好”。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;很多时候，一旦想清楚对问题的实际定义是怎样的，具体该怎么做，其实是简单的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;有很多同学问我，&lt;strong&gt;如何学好算法？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;相信大家现在已经理解我的思路了。我会反问回去，你是怎么定义“学好算法”的？&lt;/p&gt;
&lt;p&gt;对于有一些同学来说，学好算法，就是能应付面试中的算法问题；&lt;/p&gt;
&lt;p&gt;对于另一些同学来说，学好算法，是能在算法竞赛中拿大奖；&lt;/p&gt;
&lt;p&gt;还有一些同学想要学好算法，是因为自己当下在学习人工智能；或者编译原理；或者操作系统；或者数据库；或者图形学；或者图像学，等等等等的时候，遇到了阻碍，发现算法是自己的薄弱环节；&lt;/p&gt;
&lt;p&gt;看到了吗？同样是学好算法，其实大家的定义完全不同。而且，一旦我们明确了自己的定义，自己的目标，其实，向着这个目标该如何去行动，并没有大家想象的那么复杂。很多时候，我们不知道如何去行动，关键是，不知道自己的目标是什么。&lt;/p&gt;
&lt;p&gt;当然，关于该怎么学习，我不赘述了，有兴趣的同学，可以参考我的&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2018/2018-04-18/"&gt;《高效学习的秘密》&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;还有的同学的问题，升华到了人生的高度。比如，&lt;strong&gt;我要怎么做，才能成功？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我的问题就是，你到底怎么定义“成功”的？&lt;/p&gt;
&lt;p&gt;有的同学会回答我，我定义的成功，就是“当上CEO，赢取白富美”。怎么样，够清晰了吧？&lt;/p&gt;
&lt;p&gt;我们不去评价这个定义怎么样，单说对问题定义的清晰程度。很抱歉，非常非常的不清晰。我还能问出一大堆问题，才能回答你具体要怎么做。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;我们先来看”赢取白富美“这部分。具体，你心目中，是不是已经有了这个“白富美”的人选了？&lt;/p&gt;
&lt;p&gt;如果你还没有一个具体的人选，那么问题就来了，你是怎么定义“白富美”的？是学历达到什么标准？经济能力达到什么标准？家庭背景达到什么标准？还是怎样？&lt;/p&gt;
&lt;p&gt;一旦你开始思考这些问题，你就会去想，这样的人，会去哪里？我要到哪里，才能大概率的碰上我心目中的白富美？我要满足哪些条件才能出现在这些地方？我要具备哪些能力才能吸引她？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;同理，我们来看“当上CEO”的部分。你想当一个什么企业的CEO？&lt;/p&gt;
&lt;p&gt;是一个科技企业？还是一个媒体企业？还是传统行业？一旦你思考这个问题，你就会仔细思考：自己的优势在哪里，做什么更有希望成功，或者自己离创办一个企业还缺少什么？缺少的这些东西自己如何一点一点去弥补？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;看到了吗？一旦将抽象问题具体化，大家其实会不自觉地开始思考如何行动。而一旦我们对问题有了更加明确的定义，&lt;strong&gt;更关键的是去行动，而根本不是寻找“该如何行动”。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;说回标题的问题，平时工作，即做前端，又做后端，如何把技术做深？&lt;/p&gt;
&lt;p&gt;我想反问的是，究竟想深入做什么技术？自己又是如何定义这个“深”的。&lt;/p&gt;
&lt;p&gt;这些其实都是更关键的问题，并且，只有你自己有答案。你必须先明确这些定义，才能具体行动。而且，一但你明确了这些内容，就会发现，具体行动并不难。&lt;strong&gt;想清楚目标，是最难的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可能有的同学会觉得，自己天天996，就算有目标，但是根本没有时间去行动啊。&lt;/p&gt;
&lt;p&gt;首先，这依然是我坚决反对996的原因。可以参考&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-04-14/"&gt;《大佬们都是这么不讲道理》&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;其次，就算你觉得自己“没有时间”，但是先想清楚目标，也是异常重要的。因为，真的，时间就像海绵里的水。仔细去思考，你就会发现，&lt;strong&gt;在大多数时候，阻止我们前进的，不是没有时间，而是没有目标。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;挤时间，要比想清楚自己的目标，容易太多。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;新的一周，大家加油！：）&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-05-19/readme.md" rel="alternate"/></entry><entry><id>2019/2019-05-13/readme.md</id><title>游戏的云端化，随便聊聊Stadia</title><updated>2019-05-13T00:00:00-07:00</updated><content>&lt;h2&gt;游戏的云端化，随便聊聊Stadia&lt;/h2&gt;
&lt;p&gt;谷歌在GDC2019大会上正式宣布了云游戏平台Google Stadia。&lt;/p&gt;
&lt;p&gt;在笔记本界，除了Windows和macbook，其实一直有第三个竞争者。那就是Google一直提倡的Chrome Book。简单来说，就是整个笔记本就运行一个浏览器，就够了。（当然实际上没有这么简单，所以有Chrome OS的概念。）&lt;/p&gt;
&lt;p&gt;&lt;img alt="chrome" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-05-13/chrome.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Chrome Book是Google在2011年就提出的一个概念，到现在已经8年多了。直到如今，这个概念依然不够深入人心，因为技术上还不够成熟。但是，我从来不怀疑，这是趋势。如果大家思考一下，就会明白，已经有越来越多的任务，我们都可以直接在线上完成。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;今年，Google在GDC2019上，公布了其云游戏平台Stadia，可谓是游戏界的一个重磅炸弹。&lt;/p&gt;
&lt;p&gt;其实，这个平台做的事情，描述起来很简单，在云端运行游戏，客户端只需要浏览器显示游戏画面就好了。这样一来，我们根本不需要关注游戏对电脑的硬件的需求。因为真正的游戏相关运算，是在云端完成的。客户端，只是一个画面展示。&lt;/p&gt;
&lt;p&gt;相信大家可以很容易地理解这样做的优点。理论上，我们再也不用担心自己的电脑配置无法运行新游戏了。因为，我们自己的电脑，本质就是一台显示器而已。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;而其实，这样做的优势，还远远不止如此。从玩家的角度，我们可以想象这样的场景：在家里的客厅打了一半的游戏，要上班了，暂停。然后在通勤的路上，用手机或者平板电脑登录云服务，继续游戏。当然了，到了班上，如果你的老板允许，可以在单位的机子上继续...&lt;/p&gt;
&lt;p&gt;也就是所谓的&lt;strong&gt;终端无缝切换&lt;/strong&gt;。这里的关键还是在于，终端只是一个显示器而已，真正有价值的文件，在云端。&lt;/p&gt;
&lt;p&gt;&lt;img alt="stadia" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-05-13/stadia.png" /&gt;&lt;/p&gt;
&lt;p&gt;这还只是从客户端的角度。从服务端的角度，这样做，很有可能将重塑整个游戏行业。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;首先，这样做，将&lt;strong&gt;极大的杜绝外挂。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;了解外挂的同学都知道，一大部分外挂发挥作用的原理，都在于游戏本身需要在客户端进行计算，再将计算结果和服务器端做通信。&lt;/p&gt;
&lt;p&gt;那么一方面，这个通信过程，我们可以做手脚；&lt;/p&gt;
&lt;p&gt;另一方面，这个计算过程，由于也发生在客户端，我们也能做手脚；&lt;/p&gt;
&lt;p&gt;还有一方面，一些计算结果，是依赖本地操作系统的。最典型的，就是时间。所以，我们还可以使用诸如变速齿轮一类的东东，根本不对游戏客户端做手脚，只是修改本地系统的运转速度，就能达到作弊的目的。&lt;/p&gt;
&lt;p&gt;但现在，所有的这一切都发生在云端，而不在客户端。客户端就是一个显示器。可以预见的，外挂问题将得到极大地改善。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;另外，这样的做法，还可能开创全新的游戏体验。由于所有的运算都发生在云端，那么，游戏厂商就能汇集更多的计算资源，提供以前无法想象的游戏模式。&lt;/p&gt;
&lt;p&gt;比如，现在的吃鸡游戏，一局的参与者是100人，但是完全的云端游戏体验，一局10000人不是什么问题；&lt;/p&gt;
&lt;p&gt;再比如，以前魔兽世界副本任务，最多40人参与，以后，全北京市的玩家一起打一个侵略北京城的大boss...？ &lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;当然了，这样做有一定的“副作用”，最大的副作用，在于简化了审核。某个游戏犯错误了，一秒钟就被拿下，所有的人都再也玩儿不了了。这个游戏，就像根本没有存在过一样。。。因为所有的游戏信息，都在云端。。。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;anyway，云服务一定是趋势。理论上，所有的服务都能够云端化，同时，也都需要云端化。&lt;/p&gt;
&lt;p&gt;这也是Oracle为什么要疯狂向云服务转型的核心原因。&lt;/p&gt;
&lt;p&gt;很有可能，未来，我们的笔记本，其最大的功能，只是显示而已。到时候，我们争论的，应该是去使用微软的云服务，还是苹果的云服务：）&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-05-13/readme.md" rel="alternate"/></entry><entry><id>2019/2019-05-12/readme.md</id><title>答读者问 | 工作一两年后去读研，值吗？</title><updated>2019-05-12T00:00:00-07:00</updated><content>&lt;h2&gt;答读者问 | 工作一两年后去读研，值吗？&lt;/h2&gt;
&lt;p&gt;最近，有个同学问我：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;工作了快一年，再去考研值得吗？考完研后出来找工作会不会有年龄限制？毕竟做开发的，年龄大是不是一个问题？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;无独有偶，最近看一个大V的公众号，遇到了一个读者类似的困惑，问了一个大概同样的问题。大V的态度坚决：考什么研啊，在想什么。&lt;/p&gt;
&lt;p&gt;我瞬间就明白为什么人家是大V，我不是大V了。&lt;strong&gt;我的观点总是那么不鲜明。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;比如对于这个问题，我的答案就是：不同的人，不一样，你还是要根据你的实际情况去考虑，balabalabala。&lt;/p&gt;
&lt;p&gt;你看，这么说，不是和废话一样嘛。根本没有回答人家的问题。而且，对于想考研的人和不想考研的人，两边都不讨好。&lt;/p&gt;
&lt;p&gt;再去看大V文章下面的留言，一堆人分享自己没有读研，但是在工作上多么的不输研究生，甚至工资各种花样超过研究生......&lt;/p&gt;
&lt;p&gt;哎，对于这个“现象”，以后有时间，我再深入分析吧，在这里，我先把我最“废话”的答案分享给大家吧。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;bobo老师的回答：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先，你应该明白，这个问题是没有标准答案的。每个人的具体情况不同，家庭背景不同，对这个问题思考的角度不同，得到的答案就不同。而且，对于这个问题，如果你去咨询不同的人，由于回答者的背景不同，经历不同，思考不同，给你的答案也会完全不一样。&lt;/p&gt;
&lt;p&gt;所以，我不能给出一个“值”或者“不值”的答案。但是，对于你的问题中的几个细节，我觉得我可以随便说一说：&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;其实你刚毕业一年。所以，如果你明年读研，你也比起本科毕业再去读研，推迟了一两年的时间而已。实在不算什么。我只能告诉你，如果你真的去读研，就会看到大量工作以后选择去读研甚至读博的人。这实在不是什么新鲜事儿。而且越好的学校，这样的人越多。如果你有机会去国外的学府看一看，三，四十岁，甚至六十岁去读研读博，都不是什么新鲜事儿。&lt;/p&gt;
&lt;p&gt;其实，我个人认为工作后读研是一件很好的事情，因为你有了一定的工作基础，了解了你在本科时候所学习的那些知识是怎么被用在工作中的，就会更充分的思考：你缺少什么，如果继续深入学习，要学什么，自己适合学什么，学习也就更具有目的性。在我看来，这比本科毕业，没有工作经验，直接去读研，有效的多。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我也不认为年龄是什么问题。因为，如果你真的想读研的话，假设你现在不行动，到了30岁，年龄对你的掣肘更深；到了35岁，更更深；到了40岁，更更更深。如果你担心年龄问题，这更是一个拖不得的问题。因为这个问题无解，你的年龄就是在逐渐增大。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果你真的担心年龄问题，那么最好的解决方案，就是现在去做。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;曾经看过一个对老年人的访谈，问他们最后悔的事情是什么？其中有一个活了100岁的老人说，&lt;strong&gt;她后悔自己没有在60岁的时候学习小提琴。因为如果自己在60岁去学习小提琴，到现在，自己已经是一名有着40年经验的小提琴手了。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所以，最重要的是：你到底为什么想读研。你说工作以后再去考研，值吗？你说的“值”，到底是什么意思。你自己是怎么定义“值”的？&lt;/p&gt;
&lt;p&gt;这个问题别人无法给你答案，只有你自己才能给你自己答案。像我说的，每个人的思考不同，经历不同，得到的答案就是不一样。&lt;/p&gt;
&lt;p&gt;但是在这里，我首先旗帜鲜明地认为：&lt;strong&gt;如果你有经济顾虑，就不要读研。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;什么意思？就是，如果你读研要花费一大笔钱，但是自己的存款或者家庭支付这笔费用有困难；或者自己已经有房贷有小孩，生活压力比较大，读研会可预计地大幅度降低自己包括自己家庭的生活质量，那就不要纠结了，不读。&lt;/p&gt;
&lt;p&gt;为什么？因为在我看来，&lt;strong&gt;我们必须承认：接受教育本身是一件奢侈的事情。&lt;/strong&gt;但是，在我们的文化里，却总认为，穷人就要好好读书，好好读书，将来才能赚大钱。这个逻辑整体没毛病，尤其在初等教育阶段。但是进入高等教育阶段，稍微有点儿问题。&lt;/p&gt;
&lt;p&gt;讲个故事：&lt;/p&gt;
&lt;p&gt;曾经，有个美国教授，问她的中国博士生，为什么要读博。&lt;/p&gt;
&lt;p&gt;那个博士生回答：因为家里穷。&lt;/p&gt;
&lt;p&gt;美国教授听完以后，瞪大眼睛反问：&lt;strong&gt;家里穷还来读博？为什么不工作？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不知道你能不能理解这之中思维的不同。&lt;/p&gt;
&lt;p&gt;当然，可能有些同学认为教育是一种投资，而不是奢侈。但是仔细想一想，&lt;strong&gt;投资不也是一件很奢侈的事情吗？&lt;/strong&gt;你必须首先有足够的财富，才能去投资啊。而到社会上去积累财富，会比在学校里容易得多。&lt;/p&gt;
&lt;p&gt;这也就是为什么，之前我说的：在国外的学府看一看，三，四十岁，甚至六十岁去读研读博，真的不是什么新鲜事儿。因为到了那个年龄，大家才能开始能奢侈起来，才开始能认真思考：自己到底想学什么，想成为怎样的人。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;很多同学要读研，只是想提高自己的专业水平。在这里，我想告诉那些“不打算读研的同学”一个好消息；“打算读研的同学”一个坏消息。&lt;/p&gt;
&lt;p&gt;2019年，美国某权威研究机构（具体是什么研究机构，我忘了，抱歉）公布了一项统计结果。这家机构跟踪了若干不同领域，不同学历，不同学校的学生，看他们毕业后两年左右的职业经历和薪资水平，大致得出了这样的结论：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;对于工程专业的学生（计算机包含在内），他们的学校背景，学历背景，和他们工作后的薪资水平没什么关系。&lt;/strong&gt;换句话说，你是麻省毕业的，还是某野鸡大学毕业的，都出来当程序员，薪资差别不大；甚至你是研究生毕业的，或者你本科都没上，就出来当程序员，薪资差别也不大。&lt;/p&gt;
&lt;p&gt;但是，&lt;strong&gt;对于商科，艺术类学科，学校背景、学历背景，影响巨大。&lt;/strong&gt;这背后的原因，应该很好想明白，我不仔细分析了。&lt;/p&gt;
&lt;p&gt;当然，虽然中国整体情况和美国有很大的不同，但是程序员入行薪资这方面，我观察也是差不多的。不管你是211，985的学生，还是二本学生，都是有机会进BAT的，关键是你的实力，而不是学历。进去以后，只要评级相同，工资差别不大。&lt;/p&gt;
&lt;p&gt;固然要承认，你的学历背景会让你的简历留存概率更高，但这背后的原因依然是：统计意义上，名校学生基础就是好，整体素质就是高。如果你是二本学生，有拿得出手的东西，可以轻易证明自己不输985，211的学生的话，BAT不太会鄙视你。这就是搞技术公平的地方。这样的例子我看到了太多太多。即使在今年这样一个行情不景气的时候，依然在上演着。我在&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-03-18/"&gt;《算法有什么用，没用》&lt;/a&gt;一文中，曾说过，关键不是你没有什么，而是你到底有什么。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所以，不要指望靠读完研究生，你的技术能力就有巨大的提升。&lt;strong&gt;技术能力的巨大的提升，肯定来自你的努力。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果你够努力，不读研究生，工作的过程中，技术能力也能有巨大的提升。&lt;strong&gt;尤其是现在，知识传播这样简单，在网上可以轻松找到一流学府的学习材料。&lt;/strong&gt;区别是，读研，会有大量的时间专门用来学习，所以时间会宽裕一些。这也是前面所说的，受教育是“奢侈品”的原因。&lt;/p&gt;
&lt;p&gt;那么到底为什么要读研呢？&lt;/p&gt;
&lt;p&gt;除了换取了大块儿的，专门的时间用于精进学习以外，以下，是我思考的一些优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;学历在一些场景下，或者是很多场景下，还是一个硬通货。这个大家都懂的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;你还可以再一次以应届生的身份找工作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;你可以认识一群同样拥有研究生学历的朋友。你在扩展自己的社交圈。而且，在学校这个环境，认识的朋友，和在社会环境下，认识的朋友，不太一样。当然，这一点，每个人体会不同。但整体，我认为，在学校认识的朋友，利益纠纷更少，所以会更真诚一些。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;研究生生活帮助你了解学术界在做什么，在怎么思考问题。这在我看来，还是挺有意义的。&lt;/p&gt;
&lt;p&gt;当然，可能很多人读完研以后，得到的结论是：学术界就是一坨屎。我觉得这无妨。这就是我经常说的：&lt;strong&gt;明白一些东西没有用，在很多时候，和明白一些东西很有用，是同样重要的；明白自己不适合什么，在很多时候，和明白自己适合什么，是同样重要的；知道什么时候说NO，在很多时候，和知道什么时候说YES，是同样重要的。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;研究生自己做毕业论文，在我看来，更像是在经历一次“创业”。什么意思呢？就是你将近乎从零开始，对一个属于自己的小项目全权负责。从寻找选题（idea），到开题（商业计划书），到具体实施过程中遇到的各种琐碎的困难，到最后的答辩（接受投资人的检阅）。其中的酸甜苦辣，只有经历的人才了解。&lt;/p&gt;
&lt;p&gt;对一些同学来说，这是一个难得的机会。当然，对于另一些同学来说，他们本身就维护自己的一个小产品，或者开源项目，对这套并不陌生，但我相信对于更多同学来说，体验一下这个从0到1的感觉，是一次不可多得的经历。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;我不确定现在是不是这样了，至少通过我的个人经验，研究生学习的过程极大的帮助我提高了我的英语水平，因为看英文文献是必须的。也是在这个阶段，我才开始认真思考总结适合自己的英语学习方法是怎样的，并且有了质的飞跃。&lt;/p&gt;
&lt;p&gt;其实，看的那些文献具体内容是怎样的，肯定早就忘了，但是英语水平的提高，是非常非常有用的。这就是我在&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-04-11/"&gt;《知识掌握的七个境界》&lt;/a&gt;里说的：&lt;strong&gt;所谓的教育，就是忘记了在学校所学的一切之后，剩下的东西。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果你有机会在读研期间出国的话，就更不用说了。以学生身份出国，比以工作身份出国，容易太多了。尤其是现在的中美局势。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上仅供参考。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;好了，我的废话说完了。&lt;/p&gt;
&lt;p&gt;最后，依然是，只有你自己能给出答案。&lt;/p&gt;
&lt;p&gt;但不管怎样，我一直认为，&lt;strong&gt;选择没有对错。任何选择，你总能在很多人身上，找到证据，这样选择是正确的；而在另外一些人身上，找到证据，这样选择是错误的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所以，还差一句废话：&lt;strong&gt;遵循你的内心，然后努力，就好了：）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;大家加油！：）&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-05-12/readme.md" rel="alternate"/></entry><entry><id>2019/2019-05-09/readme.md</id><title>分享：国外大神制作的游戏开发学习线路</title><updated>2019-05-09T00:00:00-07:00</updated><content>&lt;h2&gt;分享：国外大神制作的游戏开发学习线路&lt;/h2&gt;
&lt;p&gt;很多同学曾经问我游戏开发相关的问题。&lt;/p&gt;
&lt;p&gt;嗯，怎么说呢。&lt;/p&gt;
&lt;p&gt;我的建议是，选择一个你想做游戏的平台：iOS？Android？桌面？然后，直接上手游戏引擎，直接开发属于你的游戏。比较主流的，适合独立游戏开发者的引擎，是Unity。&lt;/p&gt;
&lt;p&gt;当然，学习游戏引擎有一定的技术门槛，但是，现如今，游戏真的不完全是拼技术的行业。尤其是独立游戏越来越蓬勃发展的今天。近乎，每一个技术人，都有足够的基础，花不了那么多的时间，就能开始属于自己的独立游戏开发。在我看来，游戏行业更多的是一个创意行业。还有足够多的耐心和时间打磨自己的作品。&lt;/p&gt;
&lt;p&gt;当然了，如果你想进入游戏相关大厂，参与AAA级别的游戏制作，那完全是另外一回事儿。你需要精进自己的技术，达到大厂要求。游戏行业涉及的具体技术非常非常多（其实前端，后端，移动开发，系统运维，大数据，人工智能...都很多啦）。在下面，我会给大家分享一个国外大神做的游戏行业学习路线图。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;首先，这个路线图在我看来不能完全叫路线，不能顺着这个路径去学习的，会学死的。千万不要路径依赖。可以参考我的文章：&lt;a href="https://github.com/liuyubobobo/my-blog/blob/master/2018/2018-04-18/"&gt;《高效学习的秘密》&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;但是，里面所涉及的知识点。是非常有参考价值的。能让大家对游戏开发领域有一个全局性的认识。&lt;/p&gt;
&lt;p&gt;另外，图中都是英文，我就不翻译了。都是一个一个的技术名词而已，如果有不了解的，大家可以自行Google，也可以当一个计算机专业英语词汇手册来学习。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;首先，不管是什么领域，只要在计算机行业，请学好至少一门基础语言，加上算法和数据结构。对于游戏开发来说，使用C++居多。由于Unity引擎的极度流行，C#也应用广泛。当然，根据你的游戏部署平台的不同，包括后端架构的不同，主流语言都在游戏行业有一席之地的。&lt;/p&gt;
&lt;p&gt;&lt;img alt="basic" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-05-09/basic.png" /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;在这个基础上，整体这个“路线图”分&lt;strong&gt;服务端和客户端&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;服务端的知识点，其实和网页或者app的服务端，区别是不大的。所以，即使你的专业不是游戏相关的专业，对游戏行业感兴趣，进游戏厂做服务端是完全没有问题的：）&lt;/p&gt;
&lt;p&gt;&lt;img alt="server" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-05-09/server.png" /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;然后是客户端。&lt;/p&gt;
&lt;p&gt;游戏开发的客户端，有一些其他领域开发不涉及的内容，其实主要集中在图形学，物理引擎，还有智能方面（是基于agent的AI，不是机器学习）。&lt;/p&gt;
&lt;p&gt;而且，其实，做一名游戏开发工程师，也并不需要全部精通。比如，通常来讲，做渲染（图形学相关），做引擎，做智能，不是同一拨人。&lt;/p&gt;
&lt;p&gt;&lt;img alt="client" src="https://github.com/liuyubobobo/my-blog/raw/master/2019/2019-05-09/client.png" /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;最后，这个路线图，在我看来，也有不完善的地方。比如，游戏测试，其实是很重要的一块儿。据我所知，很多游戏为了测试方便，甚至会研发专门的内部使用的测试工具乃至专门的测试语言。我曾经翻看过一本不错的从底层搭建一个解析语言的书，竟然是一名游戏开发者写的：）&lt;/p&gt;
&lt;p&gt;原文在这里：&lt;a href="https://codeburst.io/the-2018-game-developer-roadmap-e07e45b3c423"&gt;https://codeburst.io/the-2018-game-developer-roadmap-e07e45b3c423&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;大家加油！：）&lt;/p&gt;</content><link href="https://github.com/liuyubobobo/my-blog/blob/master/2019/2019-05-09/readme.md" rel="alternate"/></entry></feed>